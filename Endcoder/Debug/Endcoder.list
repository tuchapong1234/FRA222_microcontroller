
Endcoder.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004564  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000005c  08004704  08004704  00014704  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004760  08004760  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08004760  08004760  00014760  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004768  08004768  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004768  08004768  00014768  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800476c  0800476c  0001476c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004770  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000198  20000070  080047e0  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000208  080047e0  00020208  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000dada  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c60  00000000  00000000  0002db7a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c48  00000000  00000000  0002f7e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ba0  00000000  00000000  00030428  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000166ff  00000000  00000000  00030fc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000dcb4  00000000  00000000  000476c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008e40d  00000000  00000000  0005537b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e3788  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000037b0  00000000  00000000  000e37d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080046ec 	.word	0x080046ec

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	080046ec 	.word	0x080046ec

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <HAL_TIM_IC_CaptureCallback>:

int16_t position = 0;

int speed = 0;
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8000584:	b480      	push	{r7}
 8000586:	b083      	sub	sp, #12
 8000588:	af00      	add	r7, sp, #0
 800058a:	6078      	str	r0, [r7, #4]
	counter = __HAL_TIM_GET_COUNTER(htim);
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000592:	4a0b      	ldr	r2, [pc, #44]	; (80005c0 <HAL_TIM_IC_CaptureCallback+0x3c>)
 8000594:	6013      	str	r3, [r2, #0]

	count = (int16_t)counter;
 8000596:	4b0a      	ldr	r3, [pc, #40]	; (80005c0 <HAL_TIM_IC_CaptureCallback+0x3c>)
 8000598:	681b      	ldr	r3, [r3, #0]
 800059a:	b21a      	sxth	r2, r3
 800059c:	4b09      	ldr	r3, [pc, #36]	; (80005c4 <HAL_TIM_IC_CaptureCallback+0x40>)
 800059e:	801a      	strh	r2, [r3, #0]

	position = count/4;
 80005a0:	4b08      	ldr	r3, [pc, #32]	; (80005c4 <HAL_TIM_IC_CaptureCallback+0x40>)
 80005a2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	da00      	bge.n	80005ac <HAL_TIM_IC_CaptureCallback+0x28>
 80005aa:	3303      	adds	r3, #3
 80005ac:	109b      	asrs	r3, r3, #2
 80005ae:	b21a      	sxth	r2, r3
 80005b0:	4b05      	ldr	r3, [pc, #20]	; (80005c8 <HAL_TIM_IC_CaptureCallback+0x44>)
 80005b2:	801a      	strh	r2, [r3, #0]
}
 80005b4:	bf00      	nop
 80005b6:	370c      	adds	r7, #12
 80005b8:	46bd      	mov	sp, r7
 80005ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005be:	4770      	bx	lr
 80005c0:	200001c0 	.word	0x200001c0
 80005c4:	200001c4 	.word	0x200001c4
 80005c8:	200001c6 	.word	0x200001c6

080005cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005d0:	f000 fc80 	bl	8000ed4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005d4:	f000 f834 	bl	8000640 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005d8:	f000 f9da 	bl	8000990 <MX_GPIO_Init>
  MX_DMA_Init();
 80005dc:	f000 f9b8 	bl	8000950 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80005e0:	f000 f98c 	bl	80008fc <MX_USART2_UART_Init>
  MX_TIM1_Init();
 80005e4:	f000 f896 	bl	8000714 <MX_TIM1_Init>
  MX_TIM2_Init();
 80005e8:	f000 f934 	bl	8000854 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Encoder_Start_IT(&htim2, TIM_CHANNEL_ALL);
 80005ec:	213c      	movs	r1, #60	; 0x3c
 80005ee:	480d      	ldr	r0, [pc, #52]	; (8000624 <main+0x58>)
 80005f0:	f002 f912 	bl	8002818 <HAL_TIM_Encoder_Start_IT>
//  HAL_TIM_IC_Start(&htim2, TIM_CHANNEL_2);
//
//  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
//  TIM1 -> CCR1 = 225;

  TIM1 ->CCR1 = 0;
 80005f4:	4b0c      	ldr	r3, [pc, #48]	; (8000628 <main+0x5c>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	635a      	str	r2, [r3, #52]	; 0x34
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80005fa:	2100      	movs	r1, #0
 80005fc:	480b      	ldr	r0, [pc, #44]	; (800062c <main+0x60>)
 80005fe:	f001 ffb5 	bl	800256c <HAL_TIM_PWM_Start>
//
//	  pwm = Kp*e + Ki*e_integral + Kd*e_prev;
//
//	  e_prev = e;

	  sprintf(TxBuffer, "%d\r\n", position);
 8000602:	4b0b      	ldr	r3, [pc, #44]	; (8000630 <main+0x64>)
 8000604:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000608:	461a      	mov	r2, r3
 800060a:	490a      	ldr	r1, [pc, #40]	; (8000634 <main+0x68>)
 800060c:	480a      	ldr	r0, [pc, #40]	; (8000638 <main+0x6c>)
 800060e:	f003 fbff 	bl	8003e10 <siprintf>
	  HAL_UART_Transmit(&huart2, (uint8_t *) TxBuffer, 30, HAL_MAX_DELAY);
 8000612:	f04f 33ff 	mov.w	r3, #4294967295
 8000616:	221e      	movs	r2, #30
 8000618:	4907      	ldr	r1, [pc, #28]	; (8000638 <main+0x6c>)
 800061a:	4808      	ldr	r0, [pc, #32]	; (800063c <main+0x70>)
 800061c:	f003 f851 	bl	80036c2 <HAL_UART_Transmit>
	  sprintf(TxBuffer, "%d\r\n", position);
 8000620:	e7ef      	b.n	8000602 <main+0x36>
 8000622:	bf00      	nop
 8000624:	200000d4 	.word	0x200000d4
 8000628:	40010000 	.word	0x40010000
 800062c:	2000008c 	.word	0x2000008c
 8000630:	200001c6 	.word	0x200001c6
 8000634:	08004704 	.word	0x08004704
 8000638:	200001cc 	.word	0x200001cc
 800063c:	2000017c 	.word	0x2000017c

08000640 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b094      	sub	sp, #80	; 0x50
 8000644:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000646:	f107 0320 	add.w	r3, r7, #32
 800064a:	2230      	movs	r2, #48	; 0x30
 800064c:	2100      	movs	r1, #0
 800064e:	4618      	mov	r0, r3
 8000650:	f003 fbd6 	bl	8003e00 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000654:	f107 030c 	add.w	r3, r7, #12
 8000658:	2200      	movs	r2, #0
 800065a:	601a      	str	r2, [r3, #0]
 800065c:	605a      	str	r2, [r3, #4]
 800065e:	609a      	str	r2, [r3, #8]
 8000660:	60da      	str	r2, [r3, #12]
 8000662:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000664:	2300      	movs	r3, #0
 8000666:	60bb      	str	r3, [r7, #8]
 8000668:	4b28      	ldr	r3, [pc, #160]	; (800070c <SystemClock_Config+0xcc>)
 800066a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800066c:	4a27      	ldr	r2, [pc, #156]	; (800070c <SystemClock_Config+0xcc>)
 800066e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000672:	6413      	str	r3, [r2, #64]	; 0x40
 8000674:	4b25      	ldr	r3, [pc, #148]	; (800070c <SystemClock_Config+0xcc>)
 8000676:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000678:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800067c:	60bb      	str	r3, [r7, #8]
 800067e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000680:	2300      	movs	r3, #0
 8000682:	607b      	str	r3, [r7, #4]
 8000684:	4b22      	ldr	r3, [pc, #136]	; (8000710 <SystemClock_Config+0xd0>)
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	4a21      	ldr	r2, [pc, #132]	; (8000710 <SystemClock_Config+0xd0>)
 800068a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800068e:	6013      	str	r3, [r2, #0]
 8000690:	4b1f      	ldr	r3, [pc, #124]	; (8000710 <SystemClock_Config+0xd0>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000698:	607b      	str	r3, [r7, #4]
 800069a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800069c:	2301      	movs	r3, #1
 800069e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006a0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006a4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006a6:	2302      	movs	r3, #2
 80006a8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006aa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80006ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80006b0:	2308      	movs	r3, #8
 80006b2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80006b4:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80006b8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80006ba:	2304      	movs	r3, #4
 80006bc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80006be:	2304      	movs	r3, #4
 80006c0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006c2:	f107 0320 	add.w	r3, r7, #32
 80006c6:	4618      	mov	r0, r3
 80006c8:	f001 fa10 	bl	8001aec <HAL_RCC_OscConfig>
 80006cc:	4603      	mov	r3, r0
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d001      	beq.n	80006d6 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80006d2:	f000 f9d7 	bl	8000a84 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006d6:	230f      	movs	r3, #15
 80006d8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006da:	2302      	movs	r3, #2
 80006dc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006de:	2300      	movs	r3, #0
 80006e0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006e6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006e8:	2300      	movs	r3, #0
 80006ea:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006ec:	f107 030c 	add.w	r3, r7, #12
 80006f0:	2102      	movs	r1, #2
 80006f2:	4618      	mov	r0, r3
 80006f4:	f001 fc72 	bl	8001fdc <HAL_RCC_ClockConfig>
 80006f8:	4603      	mov	r3, r0
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d001      	beq.n	8000702 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80006fe:	f000 f9c1 	bl	8000a84 <Error_Handler>
  }
}
 8000702:	bf00      	nop
 8000704:	3750      	adds	r7, #80	; 0x50
 8000706:	46bd      	mov	sp, r7
 8000708:	bd80      	pop	{r7, pc}
 800070a:	bf00      	nop
 800070c:	40023800 	.word	0x40023800
 8000710:	40007000 	.word	0x40007000

08000714 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b096      	sub	sp, #88	; 0x58
 8000718:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800071a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800071e:	2200      	movs	r2, #0
 8000720:	601a      	str	r2, [r3, #0]
 8000722:	605a      	str	r2, [r3, #4]
 8000724:	609a      	str	r2, [r3, #8]
 8000726:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000728:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800072c:	2200      	movs	r2, #0
 800072e:	601a      	str	r2, [r3, #0]
 8000730:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000732:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000736:	2200      	movs	r2, #0
 8000738:	601a      	str	r2, [r3, #0]
 800073a:	605a      	str	r2, [r3, #4]
 800073c:	609a      	str	r2, [r3, #8]
 800073e:	60da      	str	r2, [r3, #12]
 8000740:	611a      	str	r2, [r3, #16]
 8000742:	615a      	str	r2, [r3, #20]
 8000744:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000746:	1d3b      	adds	r3, r7, #4
 8000748:	2220      	movs	r2, #32
 800074a:	2100      	movs	r1, #0
 800074c:	4618      	mov	r0, r3
 800074e:	f003 fb57 	bl	8003e00 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000752:	4b3e      	ldr	r3, [pc, #248]	; (800084c <MX_TIM1_Init+0x138>)
 8000754:	4a3e      	ldr	r2, [pc, #248]	; (8000850 <MX_TIM1_Init+0x13c>)
 8000756:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 84-1;
 8000758:	4b3c      	ldr	r3, [pc, #240]	; (800084c <MX_TIM1_Init+0x138>)
 800075a:	2253      	movs	r2, #83	; 0x53
 800075c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800075e:	4b3b      	ldr	r3, [pc, #236]	; (800084c <MX_TIM1_Init+0x138>)
 8000760:	2200      	movs	r2, #0
 8000762:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100-1;
 8000764:	4b39      	ldr	r3, [pc, #228]	; (800084c <MX_TIM1_Init+0x138>)
 8000766:	2263      	movs	r2, #99	; 0x63
 8000768:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800076a:	4b38      	ldr	r3, [pc, #224]	; (800084c <MX_TIM1_Init+0x138>)
 800076c:	2200      	movs	r2, #0
 800076e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000770:	4b36      	ldr	r3, [pc, #216]	; (800084c <MX_TIM1_Init+0x138>)
 8000772:	2200      	movs	r2, #0
 8000774:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000776:	4b35      	ldr	r3, [pc, #212]	; (800084c <MX_TIM1_Init+0x138>)
 8000778:	2200      	movs	r2, #0
 800077a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800077c:	4833      	ldr	r0, [pc, #204]	; (800084c <MX_TIM1_Init+0x138>)
 800077e:	f001 fe4d 	bl	800241c <HAL_TIM_Base_Init>
 8000782:	4603      	mov	r3, r0
 8000784:	2b00      	cmp	r3, #0
 8000786:	d001      	beq.n	800078c <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8000788:	f000 f97c 	bl	8000a84 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800078c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000790:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000792:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000796:	4619      	mov	r1, r3
 8000798:	482c      	ldr	r0, [pc, #176]	; (800084c <MX_TIM1_Init+0x138>)
 800079a:	f002 fab5 	bl	8002d08 <HAL_TIM_ConfigClockSource>
 800079e:	4603      	mov	r3, r0
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d001      	beq.n	80007a8 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 80007a4:	f000 f96e 	bl	8000a84 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80007a8:	4828      	ldr	r0, [pc, #160]	; (800084c <MX_TIM1_Init+0x138>)
 80007aa:	f001 fe86 	bl	80024ba <HAL_TIM_PWM_Init>
 80007ae:	4603      	mov	r3, r0
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d001      	beq.n	80007b8 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 80007b4:	f000 f966 	bl	8000a84 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007b8:	2300      	movs	r3, #0
 80007ba:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007bc:	2300      	movs	r3, #0
 80007be:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80007c0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80007c4:	4619      	mov	r1, r3
 80007c6:	4821      	ldr	r0, [pc, #132]	; (800084c <MX_TIM1_Init+0x138>)
 80007c8:	f002 fe5a 	bl	8003480 <HAL_TIMEx_MasterConfigSynchronization>
 80007cc:	4603      	mov	r3, r0
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d001      	beq.n	80007d6 <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 80007d2:	f000 f957 	bl	8000a84 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80007d6:	2360      	movs	r3, #96	; 0x60
 80007d8:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80007da:	2300      	movs	r3, #0
 80007dc:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80007de:	2300      	movs	r3, #0
 80007e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80007e2:	2300      	movs	r3, #0
 80007e4:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80007e6:	2300      	movs	r3, #0
 80007e8:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80007ea:	2300      	movs	r3, #0
 80007ec:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80007ee:	2300      	movs	r3, #0
 80007f0:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80007f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007f6:	2200      	movs	r2, #0
 80007f8:	4619      	mov	r1, r3
 80007fa:	4814      	ldr	r0, [pc, #80]	; (800084c <MX_TIM1_Init+0x138>)
 80007fc:	f002 f9c2 	bl	8002b84 <HAL_TIM_PWM_ConfigChannel>
 8000800:	4603      	mov	r3, r0
 8000802:	2b00      	cmp	r3, #0
 8000804:	d001      	beq.n	800080a <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 8000806:	f000 f93d 	bl	8000a84 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800080a:	2300      	movs	r3, #0
 800080c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800080e:	2300      	movs	r3, #0
 8000810:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000812:	2300      	movs	r3, #0
 8000814:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000816:	2300      	movs	r3, #0
 8000818:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800081a:	2300      	movs	r3, #0
 800081c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800081e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000822:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000824:	2300      	movs	r3, #0
 8000826:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000828:	1d3b      	adds	r3, r7, #4
 800082a:	4619      	mov	r1, r3
 800082c:	4807      	ldr	r0, [pc, #28]	; (800084c <MX_TIM1_Init+0x138>)
 800082e:	f002 fe95 	bl	800355c <HAL_TIMEx_ConfigBreakDeadTime>
 8000832:	4603      	mov	r3, r0
 8000834:	2b00      	cmp	r3, #0
 8000836:	d001      	beq.n	800083c <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8000838:	f000 f924 	bl	8000a84 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800083c:	4803      	ldr	r0, [pc, #12]	; (800084c <MX_TIM1_Init+0x138>)
 800083e:	f000 f9f1 	bl	8000c24 <HAL_TIM_MspPostInit>

}
 8000842:	bf00      	nop
 8000844:	3758      	adds	r7, #88	; 0x58
 8000846:	46bd      	mov	sp, r7
 8000848:	bd80      	pop	{r7, pc}
 800084a:	bf00      	nop
 800084c:	2000008c 	.word	0x2000008c
 8000850:	40010000 	.word	0x40010000

08000854 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b08c      	sub	sp, #48	; 0x30
 8000858:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800085a:	f107 030c 	add.w	r3, r7, #12
 800085e:	2224      	movs	r2, #36	; 0x24
 8000860:	2100      	movs	r1, #0
 8000862:	4618      	mov	r0, r3
 8000864:	f003 facc 	bl	8003e00 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000868:	1d3b      	adds	r3, r7, #4
 800086a:	2200      	movs	r2, #0
 800086c:	601a      	str	r2, [r3, #0]
 800086e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000870:	4b21      	ldr	r3, [pc, #132]	; (80008f8 <MX_TIM2_Init+0xa4>)
 8000872:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000876:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000878:	4b1f      	ldr	r3, [pc, #124]	; (80008f8 <MX_TIM2_Init+0xa4>)
 800087a:	2200      	movs	r2, #0
 800087c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800087e:	4b1e      	ldr	r3, [pc, #120]	; (80008f8 <MX_TIM2_Init+0xa4>)
 8000880:	2200      	movs	r2, #0
 8000882:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000884:	4b1c      	ldr	r3, [pc, #112]	; (80008f8 <MX_TIM2_Init+0xa4>)
 8000886:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800088a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800088c:	4b1a      	ldr	r3, [pc, #104]	; (80008f8 <MX_TIM2_Init+0xa4>)
 800088e:	2200      	movs	r2, #0
 8000890:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000892:	4b19      	ldr	r3, [pc, #100]	; (80008f8 <MX_TIM2_Init+0xa4>)
 8000894:	2200      	movs	r2, #0
 8000896:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000898:	2303      	movs	r3, #3
 800089a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 800089c:	2302      	movs	r3, #2
 800089e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80008a0:	2301      	movs	r3, #1
 80008a2:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80008a4:	2300      	movs	r3, #0
 80008a6:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80008a8:	2300      	movs	r3, #0
 80008aa:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 80008ac:	2302      	movs	r3, #2
 80008ae:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80008b0:	2301      	movs	r3, #1
 80008b2:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80008b4:	2300      	movs	r3, #0
 80008b6:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80008b8:	2300      	movs	r3, #0
 80008ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80008bc:	f107 030c 	add.w	r3, r7, #12
 80008c0:	4619      	mov	r1, r3
 80008c2:	480d      	ldr	r0, [pc, #52]	; (80008f8 <MX_TIM2_Init+0xa4>)
 80008c4:	f001 ff02 	bl	80026cc <HAL_TIM_Encoder_Init>
 80008c8:	4603      	mov	r3, r0
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d001      	beq.n	80008d2 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 80008ce:	f000 f8d9 	bl	8000a84 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008d2:	2300      	movs	r3, #0
 80008d4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008d6:	2300      	movs	r3, #0
 80008d8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80008da:	1d3b      	adds	r3, r7, #4
 80008dc:	4619      	mov	r1, r3
 80008de:	4806      	ldr	r0, [pc, #24]	; (80008f8 <MX_TIM2_Init+0xa4>)
 80008e0:	f002 fdce 	bl	8003480 <HAL_TIMEx_MasterConfigSynchronization>
 80008e4:	4603      	mov	r3, r0
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d001      	beq.n	80008ee <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 80008ea:	f000 f8cb 	bl	8000a84 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80008ee:	bf00      	nop
 80008f0:	3730      	adds	r7, #48	; 0x30
 80008f2:	46bd      	mov	sp, r7
 80008f4:	bd80      	pop	{r7, pc}
 80008f6:	bf00      	nop
 80008f8:	200000d4 	.word	0x200000d4

080008fc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000900:	4b11      	ldr	r3, [pc, #68]	; (8000948 <MX_USART2_UART_Init+0x4c>)
 8000902:	4a12      	ldr	r2, [pc, #72]	; (800094c <MX_USART2_UART_Init+0x50>)
 8000904:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000906:	4b10      	ldr	r3, [pc, #64]	; (8000948 <MX_USART2_UART_Init+0x4c>)
 8000908:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800090c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800090e:	4b0e      	ldr	r3, [pc, #56]	; (8000948 <MX_USART2_UART_Init+0x4c>)
 8000910:	2200      	movs	r2, #0
 8000912:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000914:	4b0c      	ldr	r3, [pc, #48]	; (8000948 <MX_USART2_UART_Init+0x4c>)
 8000916:	2200      	movs	r2, #0
 8000918:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800091a:	4b0b      	ldr	r3, [pc, #44]	; (8000948 <MX_USART2_UART_Init+0x4c>)
 800091c:	2200      	movs	r2, #0
 800091e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000920:	4b09      	ldr	r3, [pc, #36]	; (8000948 <MX_USART2_UART_Init+0x4c>)
 8000922:	220c      	movs	r2, #12
 8000924:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000926:	4b08      	ldr	r3, [pc, #32]	; (8000948 <MX_USART2_UART_Init+0x4c>)
 8000928:	2200      	movs	r2, #0
 800092a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800092c:	4b06      	ldr	r3, [pc, #24]	; (8000948 <MX_USART2_UART_Init+0x4c>)
 800092e:	2200      	movs	r2, #0
 8000930:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000932:	4805      	ldr	r0, [pc, #20]	; (8000948 <MX_USART2_UART_Init+0x4c>)
 8000934:	f002 fe78 	bl	8003628 <HAL_UART_Init>
 8000938:	4603      	mov	r3, r0
 800093a:	2b00      	cmp	r3, #0
 800093c:	d001      	beq.n	8000942 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800093e:	f000 f8a1 	bl	8000a84 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000942:	bf00      	nop
 8000944:	bd80      	pop	{r7, pc}
 8000946:	bf00      	nop
 8000948:	2000017c 	.word	0x2000017c
 800094c:	40004400 	.word	0x40004400

08000950 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b082      	sub	sp, #8
 8000954:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000956:	2300      	movs	r3, #0
 8000958:	607b      	str	r3, [r7, #4]
 800095a:	4b0c      	ldr	r3, [pc, #48]	; (800098c <MX_DMA_Init+0x3c>)
 800095c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800095e:	4a0b      	ldr	r2, [pc, #44]	; (800098c <MX_DMA_Init+0x3c>)
 8000960:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000964:	6313      	str	r3, [r2, #48]	; 0x30
 8000966:	4b09      	ldr	r3, [pc, #36]	; (800098c <MX_DMA_Init+0x3c>)
 8000968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800096e:	607b      	str	r3, [r7, #4]
 8000970:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8000972:	2200      	movs	r2, #0
 8000974:	2100      	movs	r1, #0
 8000976:	2039      	movs	r0, #57	; 0x39
 8000978:	f000 fbf9 	bl	800116e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 800097c:	2039      	movs	r0, #57	; 0x39
 800097e:	f000 fc12 	bl	80011a6 <HAL_NVIC_EnableIRQ>

}
 8000982:	bf00      	nop
 8000984:	3708      	adds	r7, #8
 8000986:	46bd      	mov	sp, r7
 8000988:	bd80      	pop	{r7, pc}
 800098a:	bf00      	nop
 800098c:	40023800 	.word	0x40023800

08000990 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b08a      	sub	sp, #40	; 0x28
 8000994:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000996:	f107 0314 	add.w	r3, r7, #20
 800099a:	2200      	movs	r2, #0
 800099c:	601a      	str	r2, [r3, #0]
 800099e:	605a      	str	r2, [r3, #4]
 80009a0:	609a      	str	r2, [r3, #8]
 80009a2:	60da      	str	r2, [r3, #12]
 80009a4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009a6:	2300      	movs	r3, #0
 80009a8:	613b      	str	r3, [r7, #16]
 80009aa:	4b33      	ldr	r3, [pc, #204]	; (8000a78 <MX_GPIO_Init+0xe8>)
 80009ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ae:	4a32      	ldr	r2, [pc, #200]	; (8000a78 <MX_GPIO_Init+0xe8>)
 80009b0:	f043 0304 	orr.w	r3, r3, #4
 80009b4:	6313      	str	r3, [r2, #48]	; 0x30
 80009b6:	4b30      	ldr	r3, [pc, #192]	; (8000a78 <MX_GPIO_Init+0xe8>)
 80009b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ba:	f003 0304 	and.w	r3, r3, #4
 80009be:	613b      	str	r3, [r7, #16]
 80009c0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009c2:	2300      	movs	r3, #0
 80009c4:	60fb      	str	r3, [r7, #12]
 80009c6:	4b2c      	ldr	r3, [pc, #176]	; (8000a78 <MX_GPIO_Init+0xe8>)
 80009c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ca:	4a2b      	ldr	r2, [pc, #172]	; (8000a78 <MX_GPIO_Init+0xe8>)
 80009cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009d0:	6313      	str	r3, [r2, #48]	; 0x30
 80009d2:	4b29      	ldr	r3, [pc, #164]	; (8000a78 <MX_GPIO_Init+0xe8>)
 80009d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009da:	60fb      	str	r3, [r7, #12]
 80009dc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009de:	2300      	movs	r3, #0
 80009e0:	60bb      	str	r3, [r7, #8]
 80009e2:	4b25      	ldr	r3, [pc, #148]	; (8000a78 <MX_GPIO_Init+0xe8>)
 80009e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e6:	4a24      	ldr	r2, [pc, #144]	; (8000a78 <MX_GPIO_Init+0xe8>)
 80009e8:	f043 0301 	orr.w	r3, r3, #1
 80009ec:	6313      	str	r3, [r2, #48]	; 0x30
 80009ee:	4b22      	ldr	r3, [pc, #136]	; (8000a78 <MX_GPIO_Init+0xe8>)
 80009f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f2:	f003 0301 	and.w	r3, r3, #1
 80009f6:	60bb      	str	r3, [r7, #8]
 80009f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009fa:	2300      	movs	r3, #0
 80009fc:	607b      	str	r3, [r7, #4]
 80009fe:	4b1e      	ldr	r3, [pc, #120]	; (8000a78 <MX_GPIO_Init+0xe8>)
 8000a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a02:	4a1d      	ldr	r2, [pc, #116]	; (8000a78 <MX_GPIO_Init+0xe8>)
 8000a04:	f043 0302 	orr.w	r3, r3, #2
 8000a08:	6313      	str	r3, [r2, #48]	; 0x30
 8000a0a:	4b1b      	ldr	r3, [pc, #108]	; (8000a78 <MX_GPIO_Init+0xe8>)
 8000a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0e:	f003 0302 	and.w	r3, r3, #2
 8000a12:	607b      	str	r3, [r7, #4]
 8000a14:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000a16:	2200      	movs	r2, #0
 8000a18:	2120      	movs	r1, #32
 8000a1a:	4818      	ldr	r0, [pc, #96]	; (8000a7c <MX_GPIO_Init+0xec>)
 8000a1c:	f001 f84c 	bl	8001ab8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a20:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a24:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000a26:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000a2a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a30:	f107 0314 	add.w	r3, r7, #20
 8000a34:	4619      	mov	r1, r3
 8000a36:	4812      	ldr	r0, [pc, #72]	; (8000a80 <MX_GPIO_Init+0xf0>)
 8000a38:	f000 feba 	bl	80017b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000a3c:	2320      	movs	r3, #32
 8000a3e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a40:	2301      	movs	r3, #1
 8000a42:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a44:	2300      	movs	r3, #0
 8000a46:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000a4c:	f107 0314 	add.w	r3, r7, #20
 8000a50:	4619      	mov	r1, r3
 8000a52:	480a      	ldr	r0, [pc, #40]	; (8000a7c <MX_GPIO_Init+0xec>)
 8000a54:	f000 feac 	bl	80017b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000a58:	23c0      	movs	r3, #192	; 0xc0
 8000a5a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a60:	2301      	movs	r3, #1
 8000a62:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a64:	f107 0314 	add.w	r3, r7, #20
 8000a68:	4619      	mov	r1, r3
 8000a6a:	4804      	ldr	r0, [pc, #16]	; (8000a7c <MX_GPIO_Init+0xec>)
 8000a6c:	f000 fea0 	bl	80017b0 <HAL_GPIO_Init>

}
 8000a70:	bf00      	nop
 8000a72:	3728      	adds	r7, #40	; 0x28
 8000a74:	46bd      	mov	sp, r7
 8000a76:	bd80      	pop	{r7, pc}
 8000a78:	40023800 	.word	0x40023800
 8000a7c:	40020000 	.word	0x40020000
 8000a80:	40020800 	.word	0x40020800

08000a84 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a84:	b480      	push	{r7}
 8000a86:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a88:	b672      	cpsid	i
}
 8000a8a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a8c:	e7fe      	b.n	8000a8c <Error_Handler+0x8>
	...

08000a90 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b082      	sub	sp, #8
 8000a94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a96:	2300      	movs	r3, #0
 8000a98:	607b      	str	r3, [r7, #4]
 8000a9a:	4b10      	ldr	r3, [pc, #64]	; (8000adc <HAL_MspInit+0x4c>)
 8000a9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a9e:	4a0f      	ldr	r2, [pc, #60]	; (8000adc <HAL_MspInit+0x4c>)
 8000aa0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000aa4:	6453      	str	r3, [r2, #68]	; 0x44
 8000aa6:	4b0d      	ldr	r3, [pc, #52]	; (8000adc <HAL_MspInit+0x4c>)
 8000aa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aaa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000aae:	607b      	str	r3, [r7, #4]
 8000ab0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	603b      	str	r3, [r7, #0]
 8000ab6:	4b09      	ldr	r3, [pc, #36]	; (8000adc <HAL_MspInit+0x4c>)
 8000ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aba:	4a08      	ldr	r2, [pc, #32]	; (8000adc <HAL_MspInit+0x4c>)
 8000abc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ac0:	6413      	str	r3, [r2, #64]	; 0x40
 8000ac2:	4b06      	ldr	r3, [pc, #24]	; (8000adc <HAL_MspInit+0x4c>)
 8000ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ac6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000aca:	603b      	str	r3, [r7, #0]
 8000acc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000ace:	2007      	movs	r0, #7
 8000ad0:	f000 fb42 	bl	8001158 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ad4:	bf00      	nop
 8000ad6:	3708      	adds	r7, #8
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	bd80      	pop	{r7, pc}
 8000adc:	40023800 	.word	0x40023800

08000ae0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b084      	sub	sp, #16
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	4a22      	ldr	r2, [pc, #136]	; (8000b78 <HAL_TIM_Base_MspInit+0x98>)
 8000aee:	4293      	cmp	r3, r2
 8000af0:	d13d      	bne.n	8000b6e <HAL_TIM_Base_MspInit+0x8e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000af2:	2300      	movs	r3, #0
 8000af4:	60fb      	str	r3, [r7, #12]
 8000af6:	4b21      	ldr	r3, [pc, #132]	; (8000b7c <HAL_TIM_Base_MspInit+0x9c>)
 8000af8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000afa:	4a20      	ldr	r2, [pc, #128]	; (8000b7c <HAL_TIM_Base_MspInit+0x9c>)
 8000afc:	f043 0301 	orr.w	r3, r3, #1
 8000b00:	6453      	str	r3, [r2, #68]	; 0x44
 8000b02:	4b1e      	ldr	r3, [pc, #120]	; (8000b7c <HAL_TIM_Base_MspInit+0x9c>)
 8000b04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b06:	f003 0301 	and.w	r3, r3, #1
 8000b0a:	60fb      	str	r3, [r7, #12]
 8000b0c:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA2_Stream1;
 8000b0e:	4b1c      	ldr	r3, [pc, #112]	; (8000b80 <HAL_TIM_Base_MspInit+0xa0>)
 8000b10:	4a1c      	ldr	r2, [pc, #112]	; (8000b84 <HAL_TIM_Base_MspInit+0xa4>)
 8000b12:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Channel = DMA_CHANNEL_6;
 8000b14:	4b1a      	ldr	r3, [pc, #104]	; (8000b80 <HAL_TIM_Base_MspInit+0xa0>)
 8000b16:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 8000b1a:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000b1c:	4b18      	ldr	r3, [pc, #96]	; (8000b80 <HAL_TIM_Base_MspInit+0xa0>)
 8000b1e:	2240      	movs	r2, #64	; 0x40
 8000b20:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b22:	4b17      	ldr	r3, [pc, #92]	; (8000b80 <HAL_TIM_Base_MspInit+0xa0>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8000b28:	4b15      	ldr	r3, [pc, #84]	; (8000b80 <HAL_TIM_Base_MspInit+0xa0>)
 8000b2a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000b2e:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000b30:	4b13      	ldr	r3, [pc, #76]	; (8000b80 <HAL_TIM_Base_MspInit+0xa0>)
 8000b32:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000b36:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000b38:	4b11      	ldr	r3, [pc, #68]	; (8000b80 <HAL_TIM_Base_MspInit+0xa0>)
 8000b3a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b3e:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Mode = DMA_NORMAL;
 8000b40:	4b0f      	ldr	r3, [pc, #60]	; (8000b80 <HAL_TIM_Base_MspInit+0xa0>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8000b46:	4b0e      	ldr	r3, [pc, #56]	; (8000b80 <HAL_TIM_Base_MspInit+0xa0>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	621a      	str	r2, [r3, #32]
    hdma_tim1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000b4c:	4b0c      	ldr	r3, [pc, #48]	; (8000b80 <HAL_TIM_Base_MspInit+0xa0>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 8000b52:	480b      	ldr	r0, [pc, #44]	; (8000b80 <HAL_TIM_Base_MspInit+0xa0>)
 8000b54:	f000 fb42 	bl	80011dc <HAL_DMA_Init>
 8000b58:	4603      	mov	r3, r0
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d001      	beq.n	8000b62 <HAL_TIM_Base_MspInit+0x82>
    {
      Error_Handler();
 8000b5e:	f7ff ff91 	bl	8000a84 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	4a06      	ldr	r2, [pc, #24]	; (8000b80 <HAL_TIM_Base_MspInit+0xa0>)
 8000b66:	625a      	str	r2, [r3, #36]	; 0x24
 8000b68:	4a05      	ldr	r2, [pc, #20]	; (8000b80 <HAL_TIM_Base_MspInit+0xa0>)
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000b6e:	bf00      	nop
 8000b70:	3710      	adds	r7, #16
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bd80      	pop	{r7, pc}
 8000b76:	bf00      	nop
 8000b78:	40010000 	.word	0x40010000
 8000b7c:	40023800 	.word	0x40023800
 8000b80:	2000011c 	.word	0x2000011c
 8000b84:	40026428 	.word	0x40026428

08000b88 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b08a      	sub	sp, #40	; 0x28
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b90:	f107 0314 	add.w	r3, r7, #20
 8000b94:	2200      	movs	r2, #0
 8000b96:	601a      	str	r2, [r3, #0]
 8000b98:	605a      	str	r2, [r3, #4]
 8000b9a:	609a      	str	r2, [r3, #8]
 8000b9c:	60da      	str	r2, [r3, #12]
 8000b9e:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000ba8:	d133      	bne.n	8000c12 <HAL_TIM_Encoder_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000baa:	2300      	movs	r3, #0
 8000bac:	613b      	str	r3, [r7, #16]
 8000bae:	4b1b      	ldr	r3, [pc, #108]	; (8000c1c <HAL_TIM_Encoder_MspInit+0x94>)
 8000bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bb2:	4a1a      	ldr	r2, [pc, #104]	; (8000c1c <HAL_TIM_Encoder_MspInit+0x94>)
 8000bb4:	f043 0301 	orr.w	r3, r3, #1
 8000bb8:	6413      	str	r3, [r2, #64]	; 0x40
 8000bba:	4b18      	ldr	r3, [pc, #96]	; (8000c1c <HAL_TIM_Encoder_MspInit+0x94>)
 8000bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bbe:	f003 0301 	and.w	r3, r3, #1
 8000bc2:	613b      	str	r3, [r7, #16]
 8000bc4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	60fb      	str	r3, [r7, #12]
 8000bca:	4b14      	ldr	r3, [pc, #80]	; (8000c1c <HAL_TIM_Encoder_MspInit+0x94>)
 8000bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bce:	4a13      	ldr	r2, [pc, #76]	; (8000c1c <HAL_TIM_Encoder_MspInit+0x94>)
 8000bd0:	f043 0301 	orr.w	r3, r3, #1
 8000bd4:	6313      	str	r3, [r2, #48]	; 0x30
 8000bd6:	4b11      	ldr	r3, [pc, #68]	; (8000c1c <HAL_TIM_Encoder_MspInit+0x94>)
 8000bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bda:	f003 0301 	and.w	r3, r3, #1
 8000bde:	60fb      	str	r3, [r7, #12]
 8000be0:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000be2:	2303      	movs	r3, #3
 8000be4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000be6:	2302      	movs	r3, #2
 8000be8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bea:	2300      	movs	r3, #0
 8000bec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000bf2:	2301      	movs	r3, #1
 8000bf4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bf6:	f107 0314 	add.w	r3, r7, #20
 8000bfa:	4619      	mov	r1, r3
 8000bfc:	4808      	ldr	r0, [pc, #32]	; (8000c20 <HAL_TIM_Encoder_MspInit+0x98>)
 8000bfe:	f000 fdd7 	bl	80017b0 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000c02:	2200      	movs	r2, #0
 8000c04:	2100      	movs	r1, #0
 8000c06:	201c      	movs	r0, #28
 8000c08:	f000 fab1 	bl	800116e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000c0c:	201c      	movs	r0, #28
 8000c0e:	f000 faca 	bl	80011a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000c12:	bf00      	nop
 8000c14:	3728      	adds	r7, #40	; 0x28
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bd80      	pop	{r7, pc}
 8000c1a:	bf00      	nop
 8000c1c:	40023800 	.word	0x40023800
 8000c20:	40020000 	.word	0x40020000

08000c24 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b088      	sub	sp, #32
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c2c:	f107 030c 	add.w	r3, r7, #12
 8000c30:	2200      	movs	r2, #0
 8000c32:	601a      	str	r2, [r3, #0]
 8000c34:	605a      	str	r2, [r3, #4]
 8000c36:	609a      	str	r2, [r3, #8]
 8000c38:	60da      	str	r2, [r3, #12]
 8000c3a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	4a12      	ldr	r2, [pc, #72]	; (8000c8c <HAL_TIM_MspPostInit+0x68>)
 8000c42:	4293      	cmp	r3, r2
 8000c44:	d11e      	bne.n	8000c84 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c46:	2300      	movs	r3, #0
 8000c48:	60bb      	str	r3, [r7, #8]
 8000c4a:	4b11      	ldr	r3, [pc, #68]	; (8000c90 <HAL_TIM_MspPostInit+0x6c>)
 8000c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c4e:	4a10      	ldr	r2, [pc, #64]	; (8000c90 <HAL_TIM_MspPostInit+0x6c>)
 8000c50:	f043 0301 	orr.w	r3, r3, #1
 8000c54:	6313      	str	r3, [r2, #48]	; 0x30
 8000c56:	4b0e      	ldr	r3, [pc, #56]	; (8000c90 <HAL_TIM_MspPostInit+0x6c>)
 8000c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c5a:	f003 0301 	and.w	r3, r3, #1
 8000c5e:	60bb      	str	r3, [r7, #8]
 8000c60:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000c62:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c66:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c68:	2302      	movs	r3, #2
 8000c6a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c70:	2300      	movs	r3, #0
 8000c72:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000c74:	2301      	movs	r3, #1
 8000c76:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c78:	f107 030c 	add.w	r3, r7, #12
 8000c7c:	4619      	mov	r1, r3
 8000c7e:	4805      	ldr	r0, [pc, #20]	; (8000c94 <HAL_TIM_MspPostInit+0x70>)
 8000c80:	f000 fd96 	bl	80017b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000c84:	bf00      	nop
 8000c86:	3720      	adds	r7, #32
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bd80      	pop	{r7, pc}
 8000c8c:	40010000 	.word	0x40010000
 8000c90:	40023800 	.word	0x40023800
 8000c94:	40020000 	.word	0x40020000

08000c98 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b08a      	sub	sp, #40	; 0x28
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ca0:	f107 0314 	add.w	r3, r7, #20
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	601a      	str	r2, [r3, #0]
 8000ca8:	605a      	str	r2, [r3, #4]
 8000caa:	609a      	str	r2, [r3, #8]
 8000cac:	60da      	str	r2, [r3, #12]
 8000cae:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	4a19      	ldr	r2, [pc, #100]	; (8000d1c <HAL_UART_MspInit+0x84>)
 8000cb6:	4293      	cmp	r3, r2
 8000cb8:	d12b      	bne.n	8000d12 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000cba:	2300      	movs	r3, #0
 8000cbc:	613b      	str	r3, [r7, #16]
 8000cbe:	4b18      	ldr	r3, [pc, #96]	; (8000d20 <HAL_UART_MspInit+0x88>)
 8000cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cc2:	4a17      	ldr	r2, [pc, #92]	; (8000d20 <HAL_UART_MspInit+0x88>)
 8000cc4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cc8:	6413      	str	r3, [r2, #64]	; 0x40
 8000cca:	4b15      	ldr	r3, [pc, #84]	; (8000d20 <HAL_UART_MspInit+0x88>)
 8000ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cd2:	613b      	str	r3, [r7, #16]
 8000cd4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	60fb      	str	r3, [r7, #12]
 8000cda:	4b11      	ldr	r3, [pc, #68]	; (8000d20 <HAL_UART_MspInit+0x88>)
 8000cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cde:	4a10      	ldr	r2, [pc, #64]	; (8000d20 <HAL_UART_MspInit+0x88>)
 8000ce0:	f043 0301 	orr.w	r3, r3, #1
 8000ce4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ce6:	4b0e      	ldr	r3, [pc, #56]	; (8000d20 <HAL_UART_MspInit+0x88>)
 8000ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cea:	f003 0301 	and.w	r3, r3, #1
 8000cee:	60fb      	str	r3, [r7, #12]
 8000cf0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000cf2:	230c      	movs	r3, #12
 8000cf4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cf6:	2302      	movs	r3, #2
 8000cf8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cfe:	2303      	movs	r3, #3
 8000d00:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d02:	2307      	movs	r3, #7
 8000d04:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d06:	f107 0314 	add.w	r3, r7, #20
 8000d0a:	4619      	mov	r1, r3
 8000d0c:	4805      	ldr	r0, [pc, #20]	; (8000d24 <HAL_UART_MspInit+0x8c>)
 8000d0e:	f000 fd4f 	bl	80017b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000d12:	bf00      	nop
 8000d14:	3728      	adds	r7, #40	; 0x28
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bd80      	pop	{r7, pc}
 8000d1a:	bf00      	nop
 8000d1c:	40004400 	.word	0x40004400
 8000d20:	40023800 	.word	0x40023800
 8000d24:	40020000 	.word	0x40020000

08000d28 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d2c:	e7fe      	b.n	8000d2c <NMI_Handler+0x4>

08000d2e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d2e:	b480      	push	{r7}
 8000d30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d32:	e7fe      	b.n	8000d32 <HardFault_Handler+0x4>

08000d34 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d34:	b480      	push	{r7}
 8000d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d38:	e7fe      	b.n	8000d38 <MemManage_Handler+0x4>

08000d3a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d3a:	b480      	push	{r7}
 8000d3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d3e:	e7fe      	b.n	8000d3e <BusFault_Handler+0x4>

08000d40 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d40:	b480      	push	{r7}
 8000d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d44:	e7fe      	b.n	8000d44 <UsageFault_Handler+0x4>

08000d46 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d46:	b480      	push	{r7}
 8000d48:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d4a:	bf00      	nop
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d52:	4770      	bx	lr

08000d54 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d54:	b480      	push	{r7}
 8000d56:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d58:	bf00      	nop
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d60:	4770      	bx	lr

08000d62 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d62:	b480      	push	{r7}
 8000d64:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d66:	bf00      	nop
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6e:	4770      	bx	lr

08000d70 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

	indx++;
 8000d74:	4b10      	ldr	r3, [pc, #64]	; (8000db8 <SysTick_Handler+0x48>)
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	3301      	adds	r3, #1
 8000d7a:	4a0f      	ldr	r2, [pc, #60]	; (8000db8 <SysTick_Handler+0x48>)
 8000d7c:	6013      	str	r3, [r2, #0]

	if (indx == 500)
 8000d7e:	4b0e      	ldr	r3, [pc, #56]	; (8000db8 <SysTick_Handler+0x48>)
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000d86:	d112      	bne.n	8000dae <SysTick_Handler+0x3e>
	{
		speed = ((position - oldpos)*2); //speed in clicks/sec
 8000d88:	4b0c      	ldr	r3, [pc, #48]	; (8000dbc <SysTick_Handler+0x4c>)
 8000d8a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000d8e:	461a      	mov	r2, r3
 8000d90:	4b0b      	ldr	r3, [pc, #44]	; (8000dc0 <SysTick_Handler+0x50>)
 8000d92:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000d96:	1ad3      	subs	r3, r2, r3
 8000d98:	005b      	lsls	r3, r3, #1
 8000d9a:	4a0a      	ldr	r2, [pc, #40]	; (8000dc4 <SysTick_Handler+0x54>)
 8000d9c:	6013      	str	r3, [r2, #0]
		oldpos = position;
 8000d9e:	4b07      	ldr	r3, [pc, #28]	; (8000dbc <SysTick_Handler+0x4c>)
 8000da0:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000da4:	4b06      	ldr	r3, [pc, #24]	; (8000dc0 <SysTick_Handler+0x50>)
 8000da6:	801a      	strh	r2, [r3, #0]
		indx=0;
 8000da8:	4b03      	ldr	r3, [pc, #12]	; (8000db8 <SysTick_Handler+0x48>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	601a      	str	r2, [r3, #0]
	}

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000dae:	f000 f8e3 	bl	8000f78 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000db2:	bf00      	nop
 8000db4:	bd80      	pop	{r7, pc}
 8000db6:	bf00      	nop
 8000db8:	200001ec 	.word	0x200001ec
 8000dbc:	200001c6 	.word	0x200001c6
 8000dc0:	200001ea 	.word	0x200001ea
 8000dc4:	200001c8 	.word	0x200001c8

08000dc8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000dcc:	4802      	ldr	r0, [pc, #8]	; (8000dd8 <TIM2_IRQHandler+0x10>)
 8000dce:	f001 fdd1 	bl	8002974 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000dd2:	bf00      	nop
 8000dd4:	bd80      	pop	{r7, pc}
 8000dd6:	bf00      	nop
 8000dd8:	200000d4 	.word	0x200000d4

08000ddc <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 8000de0:	4802      	ldr	r0, [pc, #8]	; (8000dec <DMA2_Stream1_IRQHandler+0x10>)
 8000de2:	f000 faa9 	bl	8001338 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8000de6:	bf00      	nop
 8000de8:	bd80      	pop	{r7, pc}
 8000dea:	bf00      	nop
 8000dec:	2000011c 	.word	0x2000011c

08000df0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b086      	sub	sp, #24
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000df8:	4a14      	ldr	r2, [pc, #80]	; (8000e4c <_sbrk+0x5c>)
 8000dfa:	4b15      	ldr	r3, [pc, #84]	; (8000e50 <_sbrk+0x60>)
 8000dfc:	1ad3      	subs	r3, r2, r3
 8000dfe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e00:	697b      	ldr	r3, [r7, #20]
 8000e02:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e04:	4b13      	ldr	r3, [pc, #76]	; (8000e54 <_sbrk+0x64>)
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d102      	bne.n	8000e12 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e0c:	4b11      	ldr	r3, [pc, #68]	; (8000e54 <_sbrk+0x64>)
 8000e0e:	4a12      	ldr	r2, [pc, #72]	; (8000e58 <_sbrk+0x68>)
 8000e10:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e12:	4b10      	ldr	r3, [pc, #64]	; (8000e54 <_sbrk+0x64>)
 8000e14:	681a      	ldr	r2, [r3, #0]
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	4413      	add	r3, r2
 8000e1a:	693a      	ldr	r2, [r7, #16]
 8000e1c:	429a      	cmp	r2, r3
 8000e1e:	d207      	bcs.n	8000e30 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e20:	f002 ffc4 	bl	8003dac <__errno>
 8000e24:	4603      	mov	r3, r0
 8000e26:	220c      	movs	r2, #12
 8000e28:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e2a:	f04f 33ff 	mov.w	r3, #4294967295
 8000e2e:	e009      	b.n	8000e44 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e30:	4b08      	ldr	r3, [pc, #32]	; (8000e54 <_sbrk+0x64>)
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e36:	4b07      	ldr	r3, [pc, #28]	; (8000e54 <_sbrk+0x64>)
 8000e38:	681a      	ldr	r2, [r3, #0]
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	4413      	add	r3, r2
 8000e3e:	4a05      	ldr	r2, [pc, #20]	; (8000e54 <_sbrk+0x64>)
 8000e40:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e42:	68fb      	ldr	r3, [r7, #12]
}
 8000e44:	4618      	mov	r0, r3
 8000e46:	3718      	adds	r7, #24
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	bd80      	pop	{r7, pc}
 8000e4c:	20020000 	.word	0x20020000
 8000e50:	00000400 	.word	0x00000400
 8000e54:	200001f0 	.word	0x200001f0
 8000e58:	20000208 	.word	0x20000208

08000e5c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e60:	4b06      	ldr	r3, [pc, #24]	; (8000e7c <SystemInit+0x20>)
 8000e62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e66:	4a05      	ldr	r2, [pc, #20]	; (8000e7c <SystemInit+0x20>)
 8000e68:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e6c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e70:	bf00      	nop
 8000e72:	46bd      	mov	sp, r7
 8000e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e78:	4770      	bx	lr
 8000e7a:	bf00      	nop
 8000e7c:	e000ed00 	.word	0xe000ed00

08000e80 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000e80:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000eb8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e84:	480d      	ldr	r0, [pc, #52]	; (8000ebc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000e86:	490e      	ldr	r1, [pc, #56]	; (8000ec0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000e88:	4a0e      	ldr	r2, [pc, #56]	; (8000ec4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e8a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e8c:	e002      	b.n	8000e94 <LoopCopyDataInit>

08000e8e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e8e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e90:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e92:	3304      	adds	r3, #4

08000e94 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e94:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e96:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e98:	d3f9      	bcc.n	8000e8e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e9a:	4a0b      	ldr	r2, [pc, #44]	; (8000ec8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000e9c:	4c0b      	ldr	r4, [pc, #44]	; (8000ecc <LoopFillZerobss+0x26>)
  movs r3, #0
 8000e9e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ea0:	e001      	b.n	8000ea6 <LoopFillZerobss>

08000ea2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ea2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ea4:	3204      	adds	r2, #4

08000ea6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ea6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ea8:	d3fb      	bcc.n	8000ea2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000eaa:	f7ff ffd7 	bl	8000e5c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000eae:	f002 ff83 	bl	8003db8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000eb2:	f7ff fb8b 	bl	80005cc <main>
  bx  lr    
 8000eb6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000eb8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000ebc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ec0:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000ec4:	08004770 	.word	0x08004770
  ldr r2, =_sbss
 8000ec8:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000ecc:	20000208 	.word	0x20000208

08000ed0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ed0:	e7fe      	b.n	8000ed0 <ADC_IRQHandler>
	...

08000ed4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ed8:	4b0e      	ldr	r3, [pc, #56]	; (8000f14 <HAL_Init+0x40>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	4a0d      	ldr	r2, [pc, #52]	; (8000f14 <HAL_Init+0x40>)
 8000ede:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ee2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ee4:	4b0b      	ldr	r3, [pc, #44]	; (8000f14 <HAL_Init+0x40>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	4a0a      	ldr	r2, [pc, #40]	; (8000f14 <HAL_Init+0x40>)
 8000eea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000eee:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ef0:	4b08      	ldr	r3, [pc, #32]	; (8000f14 <HAL_Init+0x40>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	4a07      	ldr	r2, [pc, #28]	; (8000f14 <HAL_Init+0x40>)
 8000ef6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000efa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000efc:	2003      	movs	r0, #3
 8000efe:	f000 f92b 	bl	8001158 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f02:	2000      	movs	r0, #0
 8000f04:	f000 f808 	bl	8000f18 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f08:	f7ff fdc2 	bl	8000a90 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f0c:	2300      	movs	r3, #0
}
 8000f0e:	4618      	mov	r0, r3
 8000f10:	bd80      	pop	{r7, pc}
 8000f12:	bf00      	nop
 8000f14:	40023c00 	.word	0x40023c00

08000f18 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b082      	sub	sp, #8
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f20:	4b12      	ldr	r3, [pc, #72]	; (8000f6c <HAL_InitTick+0x54>)
 8000f22:	681a      	ldr	r2, [r3, #0]
 8000f24:	4b12      	ldr	r3, [pc, #72]	; (8000f70 <HAL_InitTick+0x58>)
 8000f26:	781b      	ldrb	r3, [r3, #0]
 8000f28:	4619      	mov	r1, r3
 8000f2a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f2e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f32:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f36:	4618      	mov	r0, r3
 8000f38:	f000 f943 	bl	80011c2 <HAL_SYSTICK_Config>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d001      	beq.n	8000f46 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f42:	2301      	movs	r3, #1
 8000f44:	e00e      	b.n	8000f64 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	2b0f      	cmp	r3, #15
 8000f4a:	d80a      	bhi.n	8000f62 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	6879      	ldr	r1, [r7, #4]
 8000f50:	f04f 30ff 	mov.w	r0, #4294967295
 8000f54:	f000 f90b 	bl	800116e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f58:	4a06      	ldr	r2, [pc, #24]	; (8000f74 <HAL_InitTick+0x5c>)
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	e000      	b.n	8000f64 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f62:	2301      	movs	r3, #1
}
 8000f64:	4618      	mov	r0, r3
 8000f66:	3708      	adds	r7, #8
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bd80      	pop	{r7, pc}
 8000f6c:	20000000 	.word	0x20000000
 8000f70:	20000008 	.word	0x20000008
 8000f74:	20000004 	.word	0x20000004

08000f78 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f7c:	4b06      	ldr	r3, [pc, #24]	; (8000f98 <HAL_IncTick+0x20>)
 8000f7e:	781b      	ldrb	r3, [r3, #0]
 8000f80:	461a      	mov	r2, r3
 8000f82:	4b06      	ldr	r3, [pc, #24]	; (8000f9c <HAL_IncTick+0x24>)
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	4413      	add	r3, r2
 8000f88:	4a04      	ldr	r2, [pc, #16]	; (8000f9c <HAL_IncTick+0x24>)
 8000f8a:	6013      	str	r3, [r2, #0]
}
 8000f8c:	bf00      	nop
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f94:	4770      	bx	lr
 8000f96:	bf00      	nop
 8000f98:	20000008 	.word	0x20000008
 8000f9c:	200001f4 	.word	0x200001f4

08000fa0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	af00      	add	r7, sp, #0
  return uwTick;
 8000fa4:	4b03      	ldr	r3, [pc, #12]	; (8000fb4 <HAL_GetTick+0x14>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
}
 8000fa8:	4618      	mov	r0, r3
 8000faa:	46bd      	mov	sp, r7
 8000fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb0:	4770      	bx	lr
 8000fb2:	bf00      	nop
 8000fb4:	200001f4 	.word	0x200001f4

08000fb8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	b085      	sub	sp, #20
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	f003 0307 	and.w	r3, r3, #7
 8000fc6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fc8:	4b0c      	ldr	r3, [pc, #48]	; (8000ffc <__NVIC_SetPriorityGrouping+0x44>)
 8000fca:	68db      	ldr	r3, [r3, #12]
 8000fcc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fce:	68ba      	ldr	r2, [r7, #8]
 8000fd0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000fd4:	4013      	ands	r3, r2
 8000fd6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fdc:	68bb      	ldr	r3, [r7, #8]
 8000fde:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fe0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000fe4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fe8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fea:	4a04      	ldr	r2, [pc, #16]	; (8000ffc <__NVIC_SetPriorityGrouping+0x44>)
 8000fec:	68bb      	ldr	r3, [r7, #8]
 8000fee:	60d3      	str	r3, [r2, #12]
}
 8000ff0:	bf00      	nop
 8000ff2:	3714      	adds	r7, #20
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffa:	4770      	bx	lr
 8000ffc:	e000ed00 	.word	0xe000ed00

08001000 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001000:	b480      	push	{r7}
 8001002:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001004:	4b04      	ldr	r3, [pc, #16]	; (8001018 <__NVIC_GetPriorityGrouping+0x18>)
 8001006:	68db      	ldr	r3, [r3, #12]
 8001008:	0a1b      	lsrs	r3, r3, #8
 800100a:	f003 0307 	and.w	r3, r3, #7
}
 800100e:	4618      	mov	r0, r3
 8001010:	46bd      	mov	sp, r7
 8001012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001016:	4770      	bx	lr
 8001018:	e000ed00 	.word	0xe000ed00

0800101c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800101c:	b480      	push	{r7}
 800101e:	b083      	sub	sp, #12
 8001020:	af00      	add	r7, sp, #0
 8001022:	4603      	mov	r3, r0
 8001024:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001026:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800102a:	2b00      	cmp	r3, #0
 800102c:	db0b      	blt.n	8001046 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800102e:	79fb      	ldrb	r3, [r7, #7]
 8001030:	f003 021f 	and.w	r2, r3, #31
 8001034:	4907      	ldr	r1, [pc, #28]	; (8001054 <__NVIC_EnableIRQ+0x38>)
 8001036:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800103a:	095b      	lsrs	r3, r3, #5
 800103c:	2001      	movs	r0, #1
 800103e:	fa00 f202 	lsl.w	r2, r0, r2
 8001042:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001046:	bf00      	nop
 8001048:	370c      	adds	r7, #12
 800104a:	46bd      	mov	sp, r7
 800104c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop
 8001054:	e000e100 	.word	0xe000e100

08001058 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001058:	b480      	push	{r7}
 800105a:	b083      	sub	sp, #12
 800105c:	af00      	add	r7, sp, #0
 800105e:	4603      	mov	r3, r0
 8001060:	6039      	str	r1, [r7, #0]
 8001062:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001064:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001068:	2b00      	cmp	r3, #0
 800106a:	db0a      	blt.n	8001082 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800106c:	683b      	ldr	r3, [r7, #0]
 800106e:	b2da      	uxtb	r2, r3
 8001070:	490c      	ldr	r1, [pc, #48]	; (80010a4 <__NVIC_SetPriority+0x4c>)
 8001072:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001076:	0112      	lsls	r2, r2, #4
 8001078:	b2d2      	uxtb	r2, r2
 800107a:	440b      	add	r3, r1
 800107c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001080:	e00a      	b.n	8001098 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001082:	683b      	ldr	r3, [r7, #0]
 8001084:	b2da      	uxtb	r2, r3
 8001086:	4908      	ldr	r1, [pc, #32]	; (80010a8 <__NVIC_SetPriority+0x50>)
 8001088:	79fb      	ldrb	r3, [r7, #7]
 800108a:	f003 030f 	and.w	r3, r3, #15
 800108e:	3b04      	subs	r3, #4
 8001090:	0112      	lsls	r2, r2, #4
 8001092:	b2d2      	uxtb	r2, r2
 8001094:	440b      	add	r3, r1
 8001096:	761a      	strb	r2, [r3, #24]
}
 8001098:	bf00      	nop
 800109a:	370c      	adds	r7, #12
 800109c:	46bd      	mov	sp, r7
 800109e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a2:	4770      	bx	lr
 80010a4:	e000e100 	.word	0xe000e100
 80010a8:	e000ed00 	.word	0xe000ed00

080010ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010ac:	b480      	push	{r7}
 80010ae:	b089      	sub	sp, #36	; 0x24
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	60f8      	str	r0, [r7, #12]
 80010b4:	60b9      	str	r1, [r7, #8]
 80010b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	f003 0307 	and.w	r3, r3, #7
 80010be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010c0:	69fb      	ldr	r3, [r7, #28]
 80010c2:	f1c3 0307 	rsb	r3, r3, #7
 80010c6:	2b04      	cmp	r3, #4
 80010c8:	bf28      	it	cs
 80010ca:	2304      	movcs	r3, #4
 80010cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010ce:	69fb      	ldr	r3, [r7, #28]
 80010d0:	3304      	adds	r3, #4
 80010d2:	2b06      	cmp	r3, #6
 80010d4:	d902      	bls.n	80010dc <NVIC_EncodePriority+0x30>
 80010d6:	69fb      	ldr	r3, [r7, #28]
 80010d8:	3b03      	subs	r3, #3
 80010da:	e000      	b.n	80010de <NVIC_EncodePriority+0x32>
 80010dc:	2300      	movs	r3, #0
 80010de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010e0:	f04f 32ff 	mov.w	r2, #4294967295
 80010e4:	69bb      	ldr	r3, [r7, #24]
 80010e6:	fa02 f303 	lsl.w	r3, r2, r3
 80010ea:	43da      	mvns	r2, r3
 80010ec:	68bb      	ldr	r3, [r7, #8]
 80010ee:	401a      	ands	r2, r3
 80010f0:	697b      	ldr	r3, [r7, #20]
 80010f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010f4:	f04f 31ff 	mov.w	r1, #4294967295
 80010f8:	697b      	ldr	r3, [r7, #20]
 80010fa:	fa01 f303 	lsl.w	r3, r1, r3
 80010fe:	43d9      	mvns	r1, r3
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001104:	4313      	orrs	r3, r2
         );
}
 8001106:	4618      	mov	r0, r3
 8001108:	3724      	adds	r7, #36	; 0x24
 800110a:	46bd      	mov	sp, r7
 800110c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001110:	4770      	bx	lr
	...

08001114 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b082      	sub	sp, #8
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	3b01      	subs	r3, #1
 8001120:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001124:	d301      	bcc.n	800112a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001126:	2301      	movs	r3, #1
 8001128:	e00f      	b.n	800114a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800112a:	4a0a      	ldr	r2, [pc, #40]	; (8001154 <SysTick_Config+0x40>)
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	3b01      	subs	r3, #1
 8001130:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001132:	210f      	movs	r1, #15
 8001134:	f04f 30ff 	mov.w	r0, #4294967295
 8001138:	f7ff ff8e 	bl	8001058 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800113c:	4b05      	ldr	r3, [pc, #20]	; (8001154 <SysTick_Config+0x40>)
 800113e:	2200      	movs	r2, #0
 8001140:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001142:	4b04      	ldr	r3, [pc, #16]	; (8001154 <SysTick_Config+0x40>)
 8001144:	2207      	movs	r2, #7
 8001146:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001148:	2300      	movs	r3, #0
}
 800114a:	4618      	mov	r0, r3
 800114c:	3708      	adds	r7, #8
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}
 8001152:	bf00      	nop
 8001154:	e000e010 	.word	0xe000e010

08001158 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b082      	sub	sp, #8
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001160:	6878      	ldr	r0, [r7, #4]
 8001162:	f7ff ff29 	bl	8000fb8 <__NVIC_SetPriorityGrouping>
}
 8001166:	bf00      	nop
 8001168:	3708      	adds	r7, #8
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}

0800116e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800116e:	b580      	push	{r7, lr}
 8001170:	b086      	sub	sp, #24
 8001172:	af00      	add	r7, sp, #0
 8001174:	4603      	mov	r3, r0
 8001176:	60b9      	str	r1, [r7, #8]
 8001178:	607a      	str	r2, [r7, #4]
 800117a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800117c:	2300      	movs	r3, #0
 800117e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001180:	f7ff ff3e 	bl	8001000 <__NVIC_GetPriorityGrouping>
 8001184:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001186:	687a      	ldr	r2, [r7, #4]
 8001188:	68b9      	ldr	r1, [r7, #8]
 800118a:	6978      	ldr	r0, [r7, #20]
 800118c:	f7ff ff8e 	bl	80010ac <NVIC_EncodePriority>
 8001190:	4602      	mov	r2, r0
 8001192:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001196:	4611      	mov	r1, r2
 8001198:	4618      	mov	r0, r3
 800119a:	f7ff ff5d 	bl	8001058 <__NVIC_SetPriority>
}
 800119e:	bf00      	nop
 80011a0:	3718      	adds	r7, #24
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}

080011a6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011a6:	b580      	push	{r7, lr}
 80011a8:	b082      	sub	sp, #8
 80011aa:	af00      	add	r7, sp, #0
 80011ac:	4603      	mov	r3, r0
 80011ae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011b4:	4618      	mov	r0, r3
 80011b6:	f7ff ff31 	bl	800101c <__NVIC_EnableIRQ>
}
 80011ba:	bf00      	nop
 80011bc:	3708      	adds	r7, #8
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}

080011c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011c2:	b580      	push	{r7, lr}
 80011c4:	b082      	sub	sp, #8
 80011c6:	af00      	add	r7, sp, #0
 80011c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011ca:	6878      	ldr	r0, [r7, #4]
 80011cc:	f7ff ffa2 	bl	8001114 <SysTick_Config>
 80011d0:	4603      	mov	r3, r0
}
 80011d2:	4618      	mov	r0, r3
 80011d4:	3708      	adds	r7, #8
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}
	...

080011dc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b086      	sub	sp, #24
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80011e4:	2300      	movs	r3, #0
 80011e6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80011e8:	f7ff feda 	bl	8000fa0 <HAL_GetTick>
 80011ec:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d101      	bne.n	80011f8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80011f4:	2301      	movs	r3, #1
 80011f6:	e099      	b.n	800132c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	2202      	movs	r2, #2
 80011fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	2200      	movs	r2, #0
 8001204:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	681a      	ldr	r2, [r3, #0]
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	f022 0201 	bic.w	r2, r2, #1
 8001216:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001218:	e00f      	b.n	800123a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800121a:	f7ff fec1 	bl	8000fa0 <HAL_GetTick>
 800121e:	4602      	mov	r2, r0
 8001220:	693b      	ldr	r3, [r7, #16]
 8001222:	1ad3      	subs	r3, r2, r3
 8001224:	2b05      	cmp	r3, #5
 8001226:	d908      	bls.n	800123a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	2220      	movs	r2, #32
 800122c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	2203      	movs	r2, #3
 8001232:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001236:	2303      	movs	r3, #3
 8001238:	e078      	b.n	800132c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	f003 0301 	and.w	r3, r3, #1
 8001244:	2b00      	cmp	r3, #0
 8001246:	d1e8      	bne.n	800121a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001250:	697a      	ldr	r2, [r7, #20]
 8001252:	4b38      	ldr	r3, [pc, #224]	; (8001334 <HAL_DMA_Init+0x158>)
 8001254:	4013      	ands	r3, r2
 8001256:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	685a      	ldr	r2, [r3, #4]
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	689b      	ldr	r3, [r3, #8]
 8001260:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001266:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	691b      	ldr	r3, [r3, #16]
 800126c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001272:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	699b      	ldr	r3, [r3, #24]
 8001278:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800127e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	6a1b      	ldr	r3, [r3, #32]
 8001284:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001286:	697a      	ldr	r2, [r7, #20]
 8001288:	4313      	orrs	r3, r2
 800128a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001290:	2b04      	cmp	r3, #4
 8001292:	d107      	bne.n	80012a4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800129c:	4313      	orrs	r3, r2
 800129e:	697a      	ldr	r2, [r7, #20]
 80012a0:	4313      	orrs	r3, r2
 80012a2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	697a      	ldr	r2, [r7, #20]
 80012aa:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	695b      	ldr	r3, [r3, #20]
 80012b2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80012b4:	697b      	ldr	r3, [r7, #20]
 80012b6:	f023 0307 	bic.w	r3, r3, #7
 80012ba:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012c0:	697a      	ldr	r2, [r7, #20]
 80012c2:	4313      	orrs	r3, r2
 80012c4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012ca:	2b04      	cmp	r3, #4
 80012cc:	d117      	bne.n	80012fe <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012d2:	697a      	ldr	r2, [r7, #20]
 80012d4:	4313      	orrs	r3, r2
 80012d6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d00e      	beq.n	80012fe <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80012e0:	6878      	ldr	r0, [r7, #4]
 80012e2:	f000 f9e9 	bl	80016b8 <DMA_CheckFifoParam>
 80012e6:	4603      	mov	r3, r0
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d008      	beq.n	80012fe <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	2240      	movs	r2, #64	; 0x40
 80012f0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	2201      	movs	r2, #1
 80012f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80012fa:	2301      	movs	r3, #1
 80012fc:	e016      	b.n	800132c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	697a      	ldr	r2, [r7, #20]
 8001304:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001306:	6878      	ldr	r0, [r7, #4]
 8001308:	f000 f9a0 	bl	800164c <DMA_CalcBaseAndBitshift>
 800130c:	4603      	mov	r3, r0
 800130e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001314:	223f      	movs	r2, #63	; 0x3f
 8001316:	409a      	lsls	r2, r3
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	2200      	movs	r2, #0
 8001320:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	2201      	movs	r2, #1
 8001326:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800132a:	2300      	movs	r3, #0
}
 800132c:	4618      	mov	r0, r3
 800132e:	3718      	adds	r7, #24
 8001330:	46bd      	mov	sp, r7
 8001332:	bd80      	pop	{r7, pc}
 8001334:	f010803f 	.word	0xf010803f

08001338 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b086      	sub	sp, #24
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001340:	2300      	movs	r3, #0
 8001342:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001344:	4b8e      	ldr	r3, [pc, #568]	; (8001580 <HAL_DMA_IRQHandler+0x248>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	4a8e      	ldr	r2, [pc, #568]	; (8001584 <HAL_DMA_IRQHandler+0x24c>)
 800134a:	fba2 2303 	umull	r2, r3, r2, r3
 800134e:	0a9b      	lsrs	r3, r3, #10
 8001350:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001356:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001358:	693b      	ldr	r3, [r7, #16]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001362:	2208      	movs	r2, #8
 8001364:	409a      	lsls	r2, r3
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	4013      	ands	r3, r2
 800136a:	2b00      	cmp	r3, #0
 800136c:	d01a      	beq.n	80013a4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	f003 0304 	and.w	r3, r3, #4
 8001378:	2b00      	cmp	r3, #0
 800137a:	d013      	beq.n	80013a4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	681a      	ldr	r2, [r3, #0]
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	f022 0204 	bic.w	r2, r2, #4
 800138a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001390:	2208      	movs	r2, #8
 8001392:	409a      	lsls	r2, r3
 8001394:	693b      	ldr	r3, [r7, #16]
 8001396:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800139c:	f043 0201 	orr.w	r2, r3, #1
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013a8:	2201      	movs	r2, #1
 80013aa:	409a      	lsls	r2, r3
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	4013      	ands	r3, r2
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d012      	beq.n	80013da <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	695b      	ldr	r3, [r3, #20]
 80013ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d00b      	beq.n	80013da <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013c6:	2201      	movs	r2, #1
 80013c8:	409a      	lsls	r2, r3
 80013ca:	693b      	ldr	r3, [r7, #16]
 80013cc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013d2:	f043 0202 	orr.w	r2, r3, #2
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013de:	2204      	movs	r2, #4
 80013e0:	409a      	lsls	r2, r3
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	4013      	ands	r3, r2
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d012      	beq.n	8001410 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	f003 0302 	and.w	r3, r3, #2
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d00b      	beq.n	8001410 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013fc:	2204      	movs	r2, #4
 80013fe:	409a      	lsls	r2, r3
 8001400:	693b      	ldr	r3, [r7, #16]
 8001402:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001408:	f043 0204 	orr.w	r2, r3, #4
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001414:	2210      	movs	r2, #16
 8001416:	409a      	lsls	r2, r3
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	4013      	ands	r3, r2
 800141c:	2b00      	cmp	r3, #0
 800141e:	d043      	beq.n	80014a8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	f003 0308 	and.w	r3, r3, #8
 800142a:	2b00      	cmp	r3, #0
 800142c:	d03c      	beq.n	80014a8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001432:	2210      	movs	r2, #16
 8001434:	409a      	lsls	r2, r3
 8001436:	693b      	ldr	r3, [r7, #16]
 8001438:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001444:	2b00      	cmp	r3, #0
 8001446:	d018      	beq.n	800147a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001452:	2b00      	cmp	r3, #0
 8001454:	d108      	bne.n	8001468 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800145a:	2b00      	cmp	r3, #0
 800145c:	d024      	beq.n	80014a8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001462:	6878      	ldr	r0, [r7, #4]
 8001464:	4798      	blx	r3
 8001466:	e01f      	b.n	80014a8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800146c:	2b00      	cmp	r3, #0
 800146e:	d01b      	beq.n	80014a8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001474:	6878      	ldr	r0, [r7, #4]
 8001476:	4798      	blx	r3
 8001478:	e016      	b.n	80014a8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001484:	2b00      	cmp	r3, #0
 8001486:	d107      	bne.n	8001498 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	681a      	ldr	r2, [r3, #0]
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	f022 0208 	bic.w	r2, r2, #8
 8001496:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800149c:	2b00      	cmp	r3, #0
 800149e:	d003      	beq.n	80014a8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014a4:	6878      	ldr	r0, [r7, #4]
 80014a6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014ac:	2220      	movs	r2, #32
 80014ae:	409a      	lsls	r2, r3
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	4013      	ands	r3, r2
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	f000 808f 	beq.w	80015d8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	f003 0310 	and.w	r3, r3, #16
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	f000 8087 	beq.w	80015d8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014ce:	2220      	movs	r2, #32
 80014d0:	409a      	lsls	r2, r3
 80014d2:	693b      	ldr	r3, [r7, #16]
 80014d4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80014dc:	b2db      	uxtb	r3, r3
 80014de:	2b05      	cmp	r3, #5
 80014e0:	d136      	bne.n	8001550 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	681a      	ldr	r2, [r3, #0]
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	f022 0216 	bic.w	r2, r2, #22
 80014f0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	695a      	ldr	r2, [r3, #20]
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001500:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001506:	2b00      	cmp	r3, #0
 8001508:	d103      	bne.n	8001512 <HAL_DMA_IRQHandler+0x1da>
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800150e:	2b00      	cmp	r3, #0
 8001510:	d007      	beq.n	8001522 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	681a      	ldr	r2, [r3, #0]
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	f022 0208 	bic.w	r2, r2, #8
 8001520:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001526:	223f      	movs	r2, #63	; 0x3f
 8001528:	409a      	lsls	r2, r3
 800152a:	693b      	ldr	r3, [r7, #16]
 800152c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	2201      	movs	r2, #1
 8001532:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	2200      	movs	r2, #0
 800153a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001542:	2b00      	cmp	r3, #0
 8001544:	d07e      	beq.n	8001644 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800154a:	6878      	ldr	r0, [r7, #4]
 800154c:	4798      	blx	r3
        }
        return;
 800154e:	e079      	b.n	8001644 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800155a:	2b00      	cmp	r3, #0
 800155c:	d01d      	beq.n	800159a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001568:	2b00      	cmp	r3, #0
 800156a:	d10d      	bne.n	8001588 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001570:	2b00      	cmp	r3, #0
 8001572:	d031      	beq.n	80015d8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001578:	6878      	ldr	r0, [r7, #4]
 800157a:	4798      	blx	r3
 800157c:	e02c      	b.n	80015d8 <HAL_DMA_IRQHandler+0x2a0>
 800157e:	bf00      	nop
 8001580:	20000000 	.word	0x20000000
 8001584:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800158c:	2b00      	cmp	r3, #0
 800158e:	d023      	beq.n	80015d8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001594:	6878      	ldr	r0, [r7, #4]
 8001596:	4798      	blx	r3
 8001598:	e01e      	b.n	80015d8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d10f      	bne.n	80015c8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	681a      	ldr	r2, [r3, #0]
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f022 0210 	bic.w	r2, r2, #16
 80015b6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	2201      	movs	r2, #1
 80015bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	2200      	movs	r2, #0
 80015c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d003      	beq.n	80015d8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80015d4:	6878      	ldr	r0, [r7, #4]
 80015d6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d032      	beq.n	8001646 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015e4:	f003 0301 	and.w	r3, r3, #1
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d022      	beq.n	8001632 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	2205      	movs	r2, #5
 80015f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	681a      	ldr	r2, [r3, #0]
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f022 0201 	bic.w	r2, r2, #1
 8001602:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001604:	68bb      	ldr	r3, [r7, #8]
 8001606:	3301      	adds	r3, #1
 8001608:	60bb      	str	r3, [r7, #8]
 800160a:	697a      	ldr	r2, [r7, #20]
 800160c:	429a      	cmp	r2, r3
 800160e:	d307      	bcc.n	8001620 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f003 0301 	and.w	r3, r3, #1
 800161a:	2b00      	cmp	r3, #0
 800161c:	d1f2      	bne.n	8001604 <HAL_DMA_IRQHandler+0x2cc>
 800161e:	e000      	b.n	8001622 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001620:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	2201      	movs	r2, #1
 8001626:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	2200      	movs	r2, #0
 800162e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001636:	2b00      	cmp	r3, #0
 8001638:	d005      	beq.n	8001646 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800163e:	6878      	ldr	r0, [r7, #4]
 8001640:	4798      	blx	r3
 8001642:	e000      	b.n	8001646 <HAL_DMA_IRQHandler+0x30e>
        return;
 8001644:	bf00      	nop
    }
  }
}
 8001646:	3718      	adds	r7, #24
 8001648:	46bd      	mov	sp, r7
 800164a:	bd80      	pop	{r7, pc}

0800164c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800164c:	b480      	push	{r7}
 800164e:	b085      	sub	sp, #20
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	b2db      	uxtb	r3, r3
 800165a:	3b10      	subs	r3, #16
 800165c:	4a14      	ldr	r2, [pc, #80]	; (80016b0 <DMA_CalcBaseAndBitshift+0x64>)
 800165e:	fba2 2303 	umull	r2, r3, r2, r3
 8001662:	091b      	lsrs	r3, r3, #4
 8001664:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001666:	4a13      	ldr	r2, [pc, #76]	; (80016b4 <DMA_CalcBaseAndBitshift+0x68>)
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	4413      	add	r3, r2
 800166c:	781b      	ldrb	r3, [r3, #0]
 800166e:	461a      	mov	r2, r3
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	2b03      	cmp	r3, #3
 8001678:	d909      	bls.n	800168e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001682:	f023 0303 	bic.w	r3, r3, #3
 8001686:	1d1a      	adds	r2, r3, #4
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	659a      	str	r2, [r3, #88]	; 0x58
 800168c:	e007      	b.n	800169e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001696:	f023 0303 	bic.w	r3, r3, #3
 800169a:	687a      	ldr	r2, [r7, #4]
 800169c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80016a2:	4618      	mov	r0, r3
 80016a4:	3714      	adds	r7, #20
 80016a6:	46bd      	mov	sp, r7
 80016a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ac:	4770      	bx	lr
 80016ae:	bf00      	nop
 80016b0:	aaaaaaab 	.word	0xaaaaaaab
 80016b4:	08004724 	.word	0x08004724

080016b8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80016b8:	b480      	push	{r7}
 80016ba:	b085      	sub	sp, #20
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80016c0:	2300      	movs	r3, #0
 80016c2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016c8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	699b      	ldr	r3, [r3, #24]
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d11f      	bne.n	8001712 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80016d2:	68bb      	ldr	r3, [r7, #8]
 80016d4:	2b03      	cmp	r3, #3
 80016d6:	d856      	bhi.n	8001786 <DMA_CheckFifoParam+0xce>
 80016d8:	a201      	add	r2, pc, #4	; (adr r2, 80016e0 <DMA_CheckFifoParam+0x28>)
 80016da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016de:	bf00      	nop
 80016e0:	080016f1 	.word	0x080016f1
 80016e4:	08001703 	.word	0x08001703
 80016e8:	080016f1 	.word	0x080016f1
 80016ec:	08001787 	.word	0x08001787
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016f4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d046      	beq.n	800178a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80016fc:	2301      	movs	r3, #1
 80016fe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001700:	e043      	b.n	800178a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001706:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800170a:	d140      	bne.n	800178e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800170c:	2301      	movs	r3, #1
 800170e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001710:	e03d      	b.n	800178e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	699b      	ldr	r3, [r3, #24]
 8001716:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800171a:	d121      	bne.n	8001760 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800171c:	68bb      	ldr	r3, [r7, #8]
 800171e:	2b03      	cmp	r3, #3
 8001720:	d837      	bhi.n	8001792 <DMA_CheckFifoParam+0xda>
 8001722:	a201      	add	r2, pc, #4	; (adr r2, 8001728 <DMA_CheckFifoParam+0x70>)
 8001724:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001728:	08001739 	.word	0x08001739
 800172c:	0800173f 	.word	0x0800173f
 8001730:	08001739 	.word	0x08001739
 8001734:	08001751 	.word	0x08001751
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001738:	2301      	movs	r3, #1
 800173a:	73fb      	strb	r3, [r7, #15]
      break;
 800173c:	e030      	b.n	80017a0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001742:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001746:	2b00      	cmp	r3, #0
 8001748:	d025      	beq.n	8001796 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800174a:	2301      	movs	r3, #1
 800174c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800174e:	e022      	b.n	8001796 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001754:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001758:	d11f      	bne.n	800179a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800175a:	2301      	movs	r3, #1
 800175c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800175e:	e01c      	b.n	800179a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001760:	68bb      	ldr	r3, [r7, #8]
 8001762:	2b02      	cmp	r3, #2
 8001764:	d903      	bls.n	800176e <DMA_CheckFifoParam+0xb6>
 8001766:	68bb      	ldr	r3, [r7, #8]
 8001768:	2b03      	cmp	r3, #3
 800176a:	d003      	beq.n	8001774 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800176c:	e018      	b.n	80017a0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800176e:	2301      	movs	r3, #1
 8001770:	73fb      	strb	r3, [r7, #15]
      break;
 8001772:	e015      	b.n	80017a0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001778:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800177c:	2b00      	cmp	r3, #0
 800177e:	d00e      	beq.n	800179e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001780:	2301      	movs	r3, #1
 8001782:	73fb      	strb	r3, [r7, #15]
      break;
 8001784:	e00b      	b.n	800179e <DMA_CheckFifoParam+0xe6>
      break;
 8001786:	bf00      	nop
 8001788:	e00a      	b.n	80017a0 <DMA_CheckFifoParam+0xe8>
      break;
 800178a:	bf00      	nop
 800178c:	e008      	b.n	80017a0 <DMA_CheckFifoParam+0xe8>
      break;
 800178e:	bf00      	nop
 8001790:	e006      	b.n	80017a0 <DMA_CheckFifoParam+0xe8>
      break;
 8001792:	bf00      	nop
 8001794:	e004      	b.n	80017a0 <DMA_CheckFifoParam+0xe8>
      break;
 8001796:	bf00      	nop
 8001798:	e002      	b.n	80017a0 <DMA_CheckFifoParam+0xe8>
      break;   
 800179a:	bf00      	nop
 800179c:	e000      	b.n	80017a0 <DMA_CheckFifoParam+0xe8>
      break;
 800179e:	bf00      	nop
    }
  } 
  
  return status; 
 80017a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80017a2:	4618      	mov	r0, r3
 80017a4:	3714      	adds	r7, #20
 80017a6:	46bd      	mov	sp, r7
 80017a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ac:	4770      	bx	lr
 80017ae:	bf00      	nop

080017b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017b0:	b480      	push	{r7}
 80017b2:	b089      	sub	sp, #36	; 0x24
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
 80017b8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80017ba:	2300      	movs	r3, #0
 80017bc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80017be:	2300      	movs	r3, #0
 80017c0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80017c2:	2300      	movs	r3, #0
 80017c4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80017c6:	2300      	movs	r3, #0
 80017c8:	61fb      	str	r3, [r7, #28]
 80017ca:	e159      	b.n	8001a80 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80017cc:	2201      	movs	r2, #1
 80017ce:	69fb      	ldr	r3, [r7, #28]
 80017d0:	fa02 f303 	lsl.w	r3, r2, r3
 80017d4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80017d6:	683b      	ldr	r3, [r7, #0]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	697a      	ldr	r2, [r7, #20]
 80017dc:	4013      	ands	r3, r2
 80017de:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80017e0:	693a      	ldr	r2, [r7, #16]
 80017e2:	697b      	ldr	r3, [r7, #20]
 80017e4:	429a      	cmp	r2, r3
 80017e6:	f040 8148 	bne.w	8001a7a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80017ea:	683b      	ldr	r3, [r7, #0]
 80017ec:	685b      	ldr	r3, [r3, #4]
 80017ee:	f003 0303 	and.w	r3, r3, #3
 80017f2:	2b01      	cmp	r3, #1
 80017f4:	d005      	beq.n	8001802 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80017f6:	683b      	ldr	r3, [r7, #0]
 80017f8:	685b      	ldr	r3, [r3, #4]
 80017fa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80017fe:	2b02      	cmp	r3, #2
 8001800:	d130      	bne.n	8001864 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	689b      	ldr	r3, [r3, #8]
 8001806:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001808:	69fb      	ldr	r3, [r7, #28]
 800180a:	005b      	lsls	r3, r3, #1
 800180c:	2203      	movs	r2, #3
 800180e:	fa02 f303 	lsl.w	r3, r2, r3
 8001812:	43db      	mvns	r3, r3
 8001814:	69ba      	ldr	r2, [r7, #24]
 8001816:	4013      	ands	r3, r2
 8001818:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800181a:	683b      	ldr	r3, [r7, #0]
 800181c:	68da      	ldr	r2, [r3, #12]
 800181e:	69fb      	ldr	r3, [r7, #28]
 8001820:	005b      	lsls	r3, r3, #1
 8001822:	fa02 f303 	lsl.w	r3, r2, r3
 8001826:	69ba      	ldr	r2, [r7, #24]
 8001828:	4313      	orrs	r3, r2
 800182a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	69ba      	ldr	r2, [r7, #24]
 8001830:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	685b      	ldr	r3, [r3, #4]
 8001836:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001838:	2201      	movs	r2, #1
 800183a:	69fb      	ldr	r3, [r7, #28]
 800183c:	fa02 f303 	lsl.w	r3, r2, r3
 8001840:	43db      	mvns	r3, r3
 8001842:	69ba      	ldr	r2, [r7, #24]
 8001844:	4013      	ands	r3, r2
 8001846:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	685b      	ldr	r3, [r3, #4]
 800184c:	091b      	lsrs	r3, r3, #4
 800184e:	f003 0201 	and.w	r2, r3, #1
 8001852:	69fb      	ldr	r3, [r7, #28]
 8001854:	fa02 f303 	lsl.w	r3, r2, r3
 8001858:	69ba      	ldr	r2, [r7, #24]
 800185a:	4313      	orrs	r3, r2
 800185c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	69ba      	ldr	r2, [r7, #24]
 8001862:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	685b      	ldr	r3, [r3, #4]
 8001868:	f003 0303 	and.w	r3, r3, #3
 800186c:	2b03      	cmp	r3, #3
 800186e:	d017      	beq.n	80018a0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	68db      	ldr	r3, [r3, #12]
 8001874:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001876:	69fb      	ldr	r3, [r7, #28]
 8001878:	005b      	lsls	r3, r3, #1
 800187a:	2203      	movs	r2, #3
 800187c:	fa02 f303 	lsl.w	r3, r2, r3
 8001880:	43db      	mvns	r3, r3
 8001882:	69ba      	ldr	r2, [r7, #24]
 8001884:	4013      	ands	r3, r2
 8001886:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	689a      	ldr	r2, [r3, #8]
 800188c:	69fb      	ldr	r3, [r7, #28]
 800188e:	005b      	lsls	r3, r3, #1
 8001890:	fa02 f303 	lsl.w	r3, r2, r3
 8001894:	69ba      	ldr	r2, [r7, #24]
 8001896:	4313      	orrs	r3, r2
 8001898:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	69ba      	ldr	r2, [r7, #24]
 800189e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018a0:	683b      	ldr	r3, [r7, #0]
 80018a2:	685b      	ldr	r3, [r3, #4]
 80018a4:	f003 0303 	and.w	r3, r3, #3
 80018a8:	2b02      	cmp	r3, #2
 80018aa:	d123      	bne.n	80018f4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80018ac:	69fb      	ldr	r3, [r7, #28]
 80018ae:	08da      	lsrs	r2, r3, #3
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	3208      	adds	r2, #8
 80018b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80018ba:	69fb      	ldr	r3, [r7, #28]
 80018bc:	f003 0307 	and.w	r3, r3, #7
 80018c0:	009b      	lsls	r3, r3, #2
 80018c2:	220f      	movs	r2, #15
 80018c4:	fa02 f303 	lsl.w	r3, r2, r3
 80018c8:	43db      	mvns	r3, r3
 80018ca:	69ba      	ldr	r2, [r7, #24]
 80018cc:	4013      	ands	r3, r2
 80018ce:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80018d0:	683b      	ldr	r3, [r7, #0]
 80018d2:	691a      	ldr	r2, [r3, #16]
 80018d4:	69fb      	ldr	r3, [r7, #28]
 80018d6:	f003 0307 	and.w	r3, r3, #7
 80018da:	009b      	lsls	r3, r3, #2
 80018dc:	fa02 f303 	lsl.w	r3, r2, r3
 80018e0:	69ba      	ldr	r2, [r7, #24]
 80018e2:	4313      	orrs	r3, r2
 80018e4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80018e6:	69fb      	ldr	r3, [r7, #28]
 80018e8:	08da      	lsrs	r2, r3, #3
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	3208      	adds	r2, #8
 80018ee:	69b9      	ldr	r1, [r7, #24]
 80018f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80018fa:	69fb      	ldr	r3, [r7, #28]
 80018fc:	005b      	lsls	r3, r3, #1
 80018fe:	2203      	movs	r2, #3
 8001900:	fa02 f303 	lsl.w	r3, r2, r3
 8001904:	43db      	mvns	r3, r3
 8001906:	69ba      	ldr	r2, [r7, #24]
 8001908:	4013      	ands	r3, r2
 800190a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	685b      	ldr	r3, [r3, #4]
 8001910:	f003 0203 	and.w	r2, r3, #3
 8001914:	69fb      	ldr	r3, [r7, #28]
 8001916:	005b      	lsls	r3, r3, #1
 8001918:	fa02 f303 	lsl.w	r3, r2, r3
 800191c:	69ba      	ldr	r2, [r7, #24]
 800191e:	4313      	orrs	r3, r2
 8001920:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	69ba      	ldr	r2, [r7, #24]
 8001926:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	685b      	ldr	r3, [r3, #4]
 800192c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001930:	2b00      	cmp	r3, #0
 8001932:	f000 80a2 	beq.w	8001a7a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001936:	2300      	movs	r3, #0
 8001938:	60fb      	str	r3, [r7, #12]
 800193a:	4b57      	ldr	r3, [pc, #348]	; (8001a98 <HAL_GPIO_Init+0x2e8>)
 800193c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800193e:	4a56      	ldr	r2, [pc, #344]	; (8001a98 <HAL_GPIO_Init+0x2e8>)
 8001940:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001944:	6453      	str	r3, [r2, #68]	; 0x44
 8001946:	4b54      	ldr	r3, [pc, #336]	; (8001a98 <HAL_GPIO_Init+0x2e8>)
 8001948:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800194a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800194e:	60fb      	str	r3, [r7, #12]
 8001950:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001952:	4a52      	ldr	r2, [pc, #328]	; (8001a9c <HAL_GPIO_Init+0x2ec>)
 8001954:	69fb      	ldr	r3, [r7, #28]
 8001956:	089b      	lsrs	r3, r3, #2
 8001958:	3302      	adds	r3, #2
 800195a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800195e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001960:	69fb      	ldr	r3, [r7, #28]
 8001962:	f003 0303 	and.w	r3, r3, #3
 8001966:	009b      	lsls	r3, r3, #2
 8001968:	220f      	movs	r2, #15
 800196a:	fa02 f303 	lsl.w	r3, r2, r3
 800196e:	43db      	mvns	r3, r3
 8001970:	69ba      	ldr	r2, [r7, #24]
 8001972:	4013      	ands	r3, r2
 8001974:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	4a49      	ldr	r2, [pc, #292]	; (8001aa0 <HAL_GPIO_Init+0x2f0>)
 800197a:	4293      	cmp	r3, r2
 800197c:	d019      	beq.n	80019b2 <HAL_GPIO_Init+0x202>
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	4a48      	ldr	r2, [pc, #288]	; (8001aa4 <HAL_GPIO_Init+0x2f4>)
 8001982:	4293      	cmp	r3, r2
 8001984:	d013      	beq.n	80019ae <HAL_GPIO_Init+0x1fe>
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	4a47      	ldr	r2, [pc, #284]	; (8001aa8 <HAL_GPIO_Init+0x2f8>)
 800198a:	4293      	cmp	r3, r2
 800198c:	d00d      	beq.n	80019aa <HAL_GPIO_Init+0x1fa>
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	4a46      	ldr	r2, [pc, #280]	; (8001aac <HAL_GPIO_Init+0x2fc>)
 8001992:	4293      	cmp	r3, r2
 8001994:	d007      	beq.n	80019a6 <HAL_GPIO_Init+0x1f6>
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	4a45      	ldr	r2, [pc, #276]	; (8001ab0 <HAL_GPIO_Init+0x300>)
 800199a:	4293      	cmp	r3, r2
 800199c:	d101      	bne.n	80019a2 <HAL_GPIO_Init+0x1f2>
 800199e:	2304      	movs	r3, #4
 80019a0:	e008      	b.n	80019b4 <HAL_GPIO_Init+0x204>
 80019a2:	2307      	movs	r3, #7
 80019a4:	e006      	b.n	80019b4 <HAL_GPIO_Init+0x204>
 80019a6:	2303      	movs	r3, #3
 80019a8:	e004      	b.n	80019b4 <HAL_GPIO_Init+0x204>
 80019aa:	2302      	movs	r3, #2
 80019ac:	e002      	b.n	80019b4 <HAL_GPIO_Init+0x204>
 80019ae:	2301      	movs	r3, #1
 80019b0:	e000      	b.n	80019b4 <HAL_GPIO_Init+0x204>
 80019b2:	2300      	movs	r3, #0
 80019b4:	69fa      	ldr	r2, [r7, #28]
 80019b6:	f002 0203 	and.w	r2, r2, #3
 80019ba:	0092      	lsls	r2, r2, #2
 80019bc:	4093      	lsls	r3, r2
 80019be:	69ba      	ldr	r2, [r7, #24]
 80019c0:	4313      	orrs	r3, r2
 80019c2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80019c4:	4935      	ldr	r1, [pc, #212]	; (8001a9c <HAL_GPIO_Init+0x2ec>)
 80019c6:	69fb      	ldr	r3, [r7, #28]
 80019c8:	089b      	lsrs	r3, r3, #2
 80019ca:	3302      	adds	r3, #2
 80019cc:	69ba      	ldr	r2, [r7, #24]
 80019ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80019d2:	4b38      	ldr	r3, [pc, #224]	; (8001ab4 <HAL_GPIO_Init+0x304>)
 80019d4:	689b      	ldr	r3, [r3, #8]
 80019d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019d8:	693b      	ldr	r3, [r7, #16]
 80019da:	43db      	mvns	r3, r3
 80019dc:	69ba      	ldr	r2, [r7, #24]
 80019de:	4013      	ands	r3, r2
 80019e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80019e2:	683b      	ldr	r3, [r7, #0]
 80019e4:	685b      	ldr	r3, [r3, #4]
 80019e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d003      	beq.n	80019f6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80019ee:	69ba      	ldr	r2, [r7, #24]
 80019f0:	693b      	ldr	r3, [r7, #16]
 80019f2:	4313      	orrs	r3, r2
 80019f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80019f6:	4a2f      	ldr	r2, [pc, #188]	; (8001ab4 <HAL_GPIO_Init+0x304>)
 80019f8:	69bb      	ldr	r3, [r7, #24]
 80019fa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80019fc:	4b2d      	ldr	r3, [pc, #180]	; (8001ab4 <HAL_GPIO_Init+0x304>)
 80019fe:	68db      	ldr	r3, [r3, #12]
 8001a00:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a02:	693b      	ldr	r3, [r7, #16]
 8001a04:	43db      	mvns	r3, r3
 8001a06:	69ba      	ldr	r2, [r7, #24]
 8001a08:	4013      	ands	r3, r2
 8001a0a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	685b      	ldr	r3, [r3, #4]
 8001a10:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d003      	beq.n	8001a20 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001a18:	69ba      	ldr	r2, [r7, #24]
 8001a1a:	693b      	ldr	r3, [r7, #16]
 8001a1c:	4313      	orrs	r3, r2
 8001a1e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001a20:	4a24      	ldr	r2, [pc, #144]	; (8001ab4 <HAL_GPIO_Init+0x304>)
 8001a22:	69bb      	ldr	r3, [r7, #24]
 8001a24:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001a26:	4b23      	ldr	r3, [pc, #140]	; (8001ab4 <HAL_GPIO_Init+0x304>)
 8001a28:	685b      	ldr	r3, [r3, #4]
 8001a2a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a2c:	693b      	ldr	r3, [r7, #16]
 8001a2e:	43db      	mvns	r3, r3
 8001a30:	69ba      	ldr	r2, [r7, #24]
 8001a32:	4013      	ands	r3, r2
 8001a34:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	685b      	ldr	r3, [r3, #4]
 8001a3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d003      	beq.n	8001a4a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001a42:	69ba      	ldr	r2, [r7, #24]
 8001a44:	693b      	ldr	r3, [r7, #16]
 8001a46:	4313      	orrs	r3, r2
 8001a48:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001a4a:	4a1a      	ldr	r2, [pc, #104]	; (8001ab4 <HAL_GPIO_Init+0x304>)
 8001a4c:	69bb      	ldr	r3, [r7, #24]
 8001a4e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001a50:	4b18      	ldr	r3, [pc, #96]	; (8001ab4 <HAL_GPIO_Init+0x304>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a56:	693b      	ldr	r3, [r7, #16]
 8001a58:	43db      	mvns	r3, r3
 8001a5a:	69ba      	ldr	r2, [r7, #24]
 8001a5c:	4013      	ands	r3, r2
 8001a5e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	685b      	ldr	r3, [r3, #4]
 8001a64:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d003      	beq.n	8001a74 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001a6c:	69ba      	ldr	r2, [r7, #24]
 8001a6e:	693b      	ldr	r3, [r7, #16]
 8001a70:	4313      	orrs	r3, r2
 8001a72:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001a74:	4a0f      	ldr	r2, [pc, #60]	; (8001ab4 <HAL_GPIO_Init+0x304>)
 8001a76:	69bb      	ldr	r3, [r7, #24]
 8001a78:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a7a:	69fb      	ldr	r3, [r7, #28]
 8001a7c:	3301      	adds	r3, #1
 8001a7e:	61fb      	str	r3, [r7, #28]
 8001a80:	69fb      	ldr	r3, [r7, #28]
 8001a82:	2b0f      	cmp	r3, #15
 8001a84:	f67f aea2 	bls.w	80017cc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001a88:	bf00      	nop
 8001a8a:	bf00      	nop
 8001a8c:	3724      	adds	r7, #36	; 0x24
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a94:	4770      	bx	lr
 8001a96:	bf00      	nop
 8001a98:	40023800 	.word	0x40023800
 8001a9c:	40013800 	.word	0x40013800
 8001aa0:	40020000 	.word	0x40020000
 8001aa4:	40020400 	.word	0x40020400
 8001aa8:	40020800 	.word	0x40020800
 8001aac:	40020c00 	.word	0x40020c00
 8001ab0:	40021000 	.word	0x40021000
 8001ab4:	40013c00 	.word	0x40013c00

08001ab8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	b083      	sub	sp, #12
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
 8001ac0:	460b      	mov	r3, r1
 8001ac2:	807b      	strh	r3, [r7, #2]
 8001ac4:	4613      	mov	r3, r2
 8001ac6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ac8:	787b      	ldrb	r3, [r7, #1]
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d003      	beq.n	8001ad6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001ace:	887a      	ldrh	r2, [r7, #2]
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001ad4:	e003      	b.n	8001ade <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001ad6:	887b      	ldrh	r3, [r7, #2]
 8001ad8:	041a      	lsls	r2, r3, #16
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	619a      	str	r2, [r3, #24]
}
 8001ade:	bf00      	nop
 8001ae0:	370c      	adds	r7, #12
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae8:	4770      	bx	lr
	...

08001aec <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b086      	sub	sp, #24
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d101      	bne.n	8001afe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001afa:	2301      	movs	r3, #1
 8001afc:	e267      	b.n	8001fce <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f003 0301 	and.w	r3, r3, #1
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d075      	beq.n	8001bf6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001b0a:	4b88      	ldr	r3, [pc, #544]	; (8001d2c <HAL_RCC_OscConfig+0x240>)
 8001b0c:	689b      	ldr	r3, [r3, #8]
 8001b0e:	f003 030c 	and.w	r3, r3, #12
 8001b12:	2b04      	cmp	r3, #4
 8001b14:	d00c      	beq.n	8001b30 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001b16:	4b85      	ldr	r3, [pc, #532]	; (8001d2c <HAL_RCC_OscConfig+0x240>)
 8001b18:	689b      	ldr	r3, [r3, #8]
 8001b1a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001b1e:	2b08      	cmp	r3, #8
 8001b20:	d112      	bne.n	8001b48 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001b22:	4b82      	ldr	r3, [pc, #520]	; (8001d2c <HAL_RCC_OscConfig+0x240>)
 8001b24:	685b      	ldr	r3, [r3, #4]
 8001b26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b2a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001b2e:	d10b      	bne.n	8001b48 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b30:	4b7e      	ldr	r3, [pc, #504]	; (8001d2c <HAL_RCC_OscConfig+0x240>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d05b      	beq.n	8001bf4 <HAL_RCC_OscConfig+0x108>
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	685b      	ldr	r3, [r3, #4]
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d157      	bne.n	8001bf4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001b44:	2301      	movs	r3, #1
 8001b46:	e242      	b.n	8001fce <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	685b      	ldr	r3, [r3, #4]
 8001b4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b50:	d106      	bne.n	8001b60 <HAL_RCC_OscConfig+0x74>
 8001b52:	4b76      	ldr	r3, [pc, #472]	; (8001d2c <HAL_RCC_OscConfig+0x240>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	4a75      	ldr	r2, [pc, #468]	; (8001d2c <HAL_RCC_OscConfig+0x240>)
 8001b58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b5c:	6013      	str	r3, [r2, #0]
 8001b5e:	e01d      	b.n	8001b9c <HAL_RCC_OscConfig+0xb0>
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	685b      	ldr	r3, [r3, #4]
 8001b64:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b68:	d10c      	bne.n	8001b84 <HAL_RCC_OscConfig+0x98>
 8001b6a:	4b70      	ldr	r3, [pc, #448]	; (8001d2c <HAL_RCC_OscConfig+0x240>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	4a6f      	ldr	r2, [pc, #444]	; (8001d2c <HAL_RCC_OscConfig+0x240>)
 8001b70:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b74:	6013      	str	r3, [r2, #0]
 8001b76:	4b6d      	ldr	r3, [pc, #436]	; (8001d2c <HAL_RCC_OscConfig+0x240>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	4a6c      	ldr	r2, [pc, #432]	; (8001d2c <HAL_RCC_OscConfig+0x240>)
 8001b7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b80:	6013      	str	r3, [r2, #0]
 8001b82:	e00b      	b.n	8001b9c <HAL_RCC_OscConfig+0xb0>
 8001b84:	4b69      	ldr	r3, [pc, #420]	; (8001d2c <HAL_RCC_OscConfig+0x240>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	4a68      	ldr	r2, [pc, #416]	; (8001d2c <HAL_RCC_OscConfig+0x240>)
 8001b8a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b8e:	6013      	str	r3, [r2, #0]
 8001b90:	4b66      	ldr	r3, [pc, #408]	; (8001d2c <HAL_RCC_OscConfig+0x240>)
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	4a65      	ldr	r2, [pc, #404]	; (8001d2c <HAL_RCC_OscConfig+0x240>)
 8001b96:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b9a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	685b      	ldr	r3, [r3, #4]
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d013      	beq.n	8001bcc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ba4:	f7ff f9fc 	bl	8000fa0 <HAL_GetTick>
 8001ba8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001baa:	e008      	b.n	8001bbe <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001bac:	f7ff f9f8 	bl	8000fa0 <HAL_GetTick>
 8001bb0:	4602      	mov	r2, r0
 8001bb2:	693b      	ldr	r3, [r7, #16]
 8001bb4:	1ad3      	subs	r3, r2, r3
 8001bb6:	2b64      	cmp	r3, #100	; 0x64
 8001bb8:	d901      	bls.n	8001bbe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001bba:	2303      	movs	r3, #3
 8001bbc:	e207      	b.n	8001fce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bbe:	4b5b      	ldr	r3, [pc, #364]	; (8001d2c <HAL_RCC_OscConfig+0x240>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d0f0      	beq.n	8001bac <HAL_RCC_OscConfig+0xc0>
 8001bca:	e014      	b.n	8001bf6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bcc:	f7ff f9e8 	bl	8000fa0 <HAL_GetTick>
 8001bd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001bd2:	e008      	b.n	8001be6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001bd4:	f7ff f9e4 	bl	8000fa0 <HAL_GetTick>
 8001bd8:	4602      	mov	r2, r0
 8001bda:	693b      	ldr	r3, [r7, #16]
 8001bdc:	1ad3      	subs	r3, r2, r3
 8001bde:	2b64      	cmp	r3, #100	; 0x64
 8001be0:	d901      	bls.n	8001be6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001be2:	2303      	movs	r3, #3
 8001be4:	e1f3      	b.n	8001fce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001be6:	4b51      	ldr	r3, [pc, #324]	; (8001d2c <HAL_RCC_OscConfig+0x240>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d1f0      	bne.n	8001bd4 <HAL_RCC_OscConfig+0xe8>
 8001bf2:	e000      	b.n	8001bf6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bf4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f003 0302 	and.w	r3, r3, #2
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d063      	beq.n	8001cca <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001c02:	4b4a      	ldr	r3, [pc, #296]	; (8001d2c <HAL_RCC_OscConfig+0x240>)
 8001c04:	689b      	ldr	r3, [r3, #8]
 8001c06:	f003 030c 	and.w	r3, r3, #12
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d00b      	beq.n	8001c26 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c0e:	4b47      	ldr	r3, [pc, #284]	; (8001d2c <HAL_RCC_OscConfig+0x240>)
 8001c10:	689b      	ldr	r3, [r3, #8]
 8001c12:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001c16:	2b08      	cmp	r3, #8
 8001c18:	d11c      	bne.n	8001c54 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c1a:	4b44      	ldr	r3, [pc, #272]	; (8001d2c <HAL_RCC_OscConfig+0x240>)
 8001c1c:	685b      	ldr	r3, [r3, #4]
 8001c1e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d116      	bne.n	8001c54 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c26:	4b41      	ldr	r3, [pc, #260]	; (8001d2c <HAL_RCC_OscConfig+0x240>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f003 0302 	and.w	r3, r3, #2
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d005      	beq.n	8001c3e <HAL_RCC_OscConfig+0x152>
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	68db      	ldr	r3, [r3, #12]
 8001c36:	2b01      	cmp	r3, #1
 8001c38:	d001      	beq.n	8001c3e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001c3a:	2301      	movs	r3, #1
 8001c3c:	e1c7      	b.n	8001fce <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c3e:	4b3b      	ldr	r3, [pc, #236]	; (8001d2c <HAL_RCC_OscConfig+0x240>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	691b      	ldr	r3, [r3, #16]
 8001c4a:	00db      	lsls	r3, r3, #3
 8001c4c:	4937      	ldr	r1, [pc, #220]	; (8001d2c <HAL_RCC_OscConfig+0x240>)
 8001c4e:	4313      	orrs	r3, r2
 8001c50:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c52:	e03a      	b.n	8001cca <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	68db      	ldr	r3, [r3, #12]
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d020      	beq.n	8001c9e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c5c:	4b34      	ldr	r3, [pc, #208]	; (8001d30 <HAL_RCC_OscConfig+0x244>)
 8001c5e:	2201      	movs	r2, #1
 8001c60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c62:	f7ff f99d 	bl	8000fa0 <HAL_GetTick>
 8001c66:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c68:	e008      	b.n	8001c7c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c6a:	f7ff f999 	bl	8000fa0 <HAL_GetTick>
 8001c6e:	4602      	mov	r2, r0
 8001c70:	693b      	ldr	r3, [r7, #16]
 8001c72:	1ad3      	subs	r3, r2, r3
 8001c74:	2b02      	cmp	r3, #2
 8001c76:	d901      	bls.n	8001c7c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001c78:	2303      	movs	r3, #3
 8001c7a:	e1a8      	b.n	8001fce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c7c:	4b2b      	ldr	r3, [pc, #172]	; (8001d2c <HAL_RCC_OscConfig+0x240>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f003 0302 	and.w	r3, r3, #2
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d0f0      	beq.n	8001c6a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c88:	4b28      	ldr	r3, [pc, #160]	; (8001d2c <HAL_RCC_OscConfig+0x240>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	691b      	ldr	r3, [r3, #16]
 8001c94:	00db      	lsls	r3, r3, #3
 8001c96:	4925      	ldr	r1, [pc, #148]	; (8001d2c <HAL_RCC_OscConfig+0x240>)
 8001c98:	4313      	orrs	r3, r2
 8001c9a:	600b      	str	r3, [r1, #0]
 8001c9c:	e015      	b.n	8001cca <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c9e:	4b24      	ldr	r3, [pc, #144]	; (8001d30 <HAL_RCC_OscConfig+0x244>)
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ca4:	f7ff f97c 	bl	8000fa0 <HAL_GetTick>
 8001ca8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001caa:	e008      	b.n	8001cbe <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001cac:	f7ff f978 	bl	8000fa0 <HAL_GetTick>
 8001cb0:	4602      	mov	r2, r0
 8001cb2:	693b      	ldr	r3, [r7, #16]
 8001cb4:	1ad3      	subs	r3, r2, r3
 8001cb6:	2b02      	cmp	r3, #2
 8001cb8:	d901      	bls.n	8001cbe <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001cba:	2303      	movs	r3, #3
 8001cbc:	e187      	b.n	8001fce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001cbe:	4b1b      	ldr	r3, [pc, #108]	; (8001d2c <HAL_RCC_OscConfig+0x240>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f003 0302 	and.w	r3, r3, #2
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d1f0      	bne.n	8001cac <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f003 0308 	and.w	r3, r3, #8
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d036      	beq.n	8001d44 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	695b      	ldr	r3, [r3, #20]
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d016      	beq.n	8001d0c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001cde:	4b15      	ldr	r3, [pc, #84]	; (8001d34 <HAL_RCC_OscConfig+0x248>)
 8001ce0:	2201      	movs	r2, #1
 8001ce2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ce4:	f7ff f95c 	bl	8000fa0 <HAL_GetTick>
 8001ce8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cea:	e008      	b.n	8001cfe <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001cec:	f7ff f958 	bl	8000fa0 <HAL_GetTick>
 8001cf0:	4602      	mov	r2, r0
 8001cf2:	693b      	ldr	r3, [r7, #16]
 8001cf4:	1ad3      	subs	r3, r2, r3
 8001cf6:	2b02      	cmp	r3, #2
 8001cf8:	d901      	bls.n	8001cfe <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001cfa:	2303      	movs	r3, #3
 8001cfc:	e167      	b.n	8001fce <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cfe:	4b0b      	ldr	r3, [pc, #44]	; (8001d2c <HAL_RCC_OscConfig+0x240>)
 8001d00:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d02:	f003 0302 	and.w	r3, r3, #2
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d0f0      	beq.n	8001cec <HAL_RCC_OscConfig+0x200>
 8001d0a:	e01b      	b.n	8001d44 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d0c:	4b09      	ldr	r3, [pc, #36]	; (8001d34 <HAL_RCC_OscConfig+0x248>)
 8001d0e:	2200      	movs	r2, #0
 8001d10:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d12:	f7ff f945 	bl	8000fa0 <HAL_GetTick>
 8001d16:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d18:	e00e      	b.n	8001d38 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d1a:	f7ff f941 	bl	8000fa0 <HAL_GetTick>
 8001d1e:	4602      	mov	r2, r0
 8001d20:	693b      	ldr	r3, [r7, #16]
 8001d22:	1ad3      	subs	r3, r2, r3
 8001d24:	2b02      	cmp	r3, #2
 8001d26:	d907      	bls.n	8001d38 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001d28:	2303      	movs	r3, #3
 8001d2a:	e150      	b.n	8001fce <HAL_RCC_OscConfig+0x4e2>
 8001d2c:	40023800 	.word	0x40023800
 8001d30:	42470000 	.word	0x42470000
 8001d34:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d38:	4b88      	ldr	r3, [pc, #544]	; (8001f5c <HAL_RCC_OscConfig+0x470>)
 8001d3a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d3c:	f003 0302 	and.w	r3, r3, #2
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d1ea      	bne.n	8001d1a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f003 0304 	and.w	r3, r3, #4
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	f000 8097 	beq.w	8001e80 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d52:	2300      	movs	r3, #0
 8001d54:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d56:	4b81      	ldr	r3, [pc, #516]	; (8001f5c <HAL_RCC_OscConfig+0x470>)
 8001d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d10f      	bne.n	8001d82 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d62:	2300      	movs	r3, #0
 8001d64:	60bb      	str	r3, [r7, #8]
 8001d66:	4b7d      	ldr	r3, [pc, #500]	; (8001f5c <HAL_RCC_OscConfig+0x470>)
 8001d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d6a:	4a7c      	ldr	r2, [pc, #496]	; (8001f5c <HAL_RCC_OscConfig+0x470>)
 8001d6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d70:	6413      	str	r3, [r2, #64]	; 0x40
 8001d72:	4b7a      	ldr	r3, [pc, #488]	; (8001f5c <HAL_RCC_OscConfig+0x470>)
 8001d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d7a:	60bb      	str	r3, [r7, #8]
 8001d7c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d7e:	2301      	movs	r3, #1
 8001d80:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d82:	4b77      	ldr	r3, [pc, #476]	; (8001f60 <HAL_RCC_OscConfig+0x474>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d118      	bne.n	8001dc0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d8e:	4b74      	ldr	r3, [pc, #464]	; (8001f60 <HAL_RCC_OscConfig+0x474>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	4a73      	ldr	r2, [pc, #460]	; (8001f60 <HAL_RCC_OscConfig+0x474>)
 8001d94:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d98:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d9a:	f7ff f901 	bl	8000fa0 <HAL_GetTick>
 8001d9e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001da0:	e008      	b.n	8001db4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001da2:	f7ff f8fd 	bl	8000fa0 <HAL_GetTick>
 8001da6:	4602      	mov	r2, r0
 8001da8:	693b      	ldr	r3, [r7, #16]
 8001daa:	1ad3      	subs	r3, r2, r3
 8001dac:	2b02      	cmp	r3, #2
 8001dae:	d901      	bls.n	8001db4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001db0:	2303      	movs	r3, #3
 8001db2:	e10c      	b.n	8001fce <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001db4:	4b6a      	ldr	r3, [pc, #424]	; (8001f60 <HAL_RCC_OscConfig+0x474>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d0f0      	beq.n	8001da2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	689b      	ldr	r3, [r3, #8]
 8001dc4:	2b01      	cmp	r3, #1
 8001dc6:	d106      	bne.n	8001dd6 <HAL_RCC_OscConfig+0x2ea>
 8001dc8:	4b64      	ldr	r3, [pc, #400]	; (8001f5c <HAL_RCC_OscConfig+0x470>)
 8001dca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dcc:	4a63      	ldr	r2, [pc, #396]	; (8001f5c <HAL_RCC_OscConfig+0x470>)
 8001dce:	f043 0301 	orr.w	r3, r3, #1
 8001dd2:	6713      	str	r3, [r2, #112]	; 0x70
 8001dd4:	e01c      	b.n	8001e10 <HAL_RCC_OscConfig+0x324>
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	689b      	ldr	r3, [r3, #8]
 8001dda:	2b05      	cmp	r3, #5
 8001ddc:	d10c      	bne.n	8001df8 <HAL_RCC_OscConfig+0x30c>
 8001dde:	4b5f      	ldr	r3, [pc, #380]	; (8001f5c <HAL_RCC_OscConfig+0x470>)
 8001de0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001de2:	4a5e      	ldr	r2, [pc, #376]	; (8001f5c <HAL_RCC_OscConfig+0x470>)
 8001de4:	f043 0304 	orr.w	r3, r3, #4
 8001de8:	6713      	str	r3, [r2, #112]	; 0x70
 8001dea:	4b5c      	ldr	r3, [pc, #368]	; (8001f5c <HAL_RCC_OscConfig+0x470>)
 8001dec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dee:	4a5b      	ldr	r2, [pc, #364]	; (8001f5c <HAL_RCC_OscConfig+0x470>)
 8001df0:	f043 0301 	orr.w	r3, r3, #1
 8001df4:	6713      	str	r3, [r2, #112]	; 0x70
 8001df6:	e00b      	b.n	8001e10 <HAL_RCC_OscConfig+0x324>
 8001df8:	4b58      	ldr	r3, [pc, #352]	; (8001f5c <HAL_RCC_OscConfig+0x470>)
 8001dfa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dfc:	4a57      	ldr	r2, [pc, #348]	; (8001f5c <HAL_RCC_OscConfig+0x470>)
 8001dfe:	f023 0301 	bic.w	r3, r3, #1
 8001e02:	6713      	str	r3, [r2, #112]	; 0x70
 8001e04:	4b55      	ldr	r3, [pc, #340]	; (8001f5c <HAL_RCC_OscConfig+0x470>)
 8001e06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e08:	4a54      	ldr	r2, [pc, #336]	; (8001f5c <HAL_RCC_OscConfig+0x470>)
 8001e0a:	f023 0304 	bic.w	r3, r3, #4
 8001e0e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	689b      	ldr	r3, [r3, #8]
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d015      	beq.n	8001e44 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e18:	f7ff f8c2 	bl	8000fa0 <HAL_GetTick>
 8001e1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e1e:	e00a      	b.n	8001e36 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e20:	f7ff f8be 	bl	8000fa0 <HAL_GetTick>
 8001e24:	4602      	mov	r2, r0
 8001e26:	693b      	ldr	r3, [r7, #16]
 8001e28:	1ad3      	subs	r3, r2, r3
 8001e2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	d901      	bls.n	8001e36 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001e32:	2303      	movs	r3, #3
 8001e34:	e0cb      	b.n	8001fce <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e36:	4b49      	ldr	r3, [pc, #292]	; (8001f5c <HAL_RCC_OscConfig+0x470>)
 8001e38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e3a:	f003 0302 	and.w	r3, r3, #2
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d0ee      	beq.n	8001e20 <HAL_RCC_OscConfig+0x334>
 8001e42:	e014      	b.n	8001e6e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e44:	f7ff f8ac 	bl	8000fa0 <HAL_GetTick>
 8001e48:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e4a:	e00a      	b.n	8001e62 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e4c:	f7ff f8a8 	bl	8000fa0 <HAL_GetTick>
 8001e50:	4602      	mov	r2, r0
 8001e52:	693b      	ldr	r3, [r7, #16]
 8001e54:	1ad3      	subs	r3, r2, r3
 8001e56:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e5a:	4293      	cmp	r3, r2
 8001e5c:	d901      	bls.n	8001e62 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001e5e:	2303      	movs	r3, #3
 8001e60:	e0b5      	b.n	8001fce <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e62:	4b3e      	ldr	r3, [pc, #248]	; (8001f5c <HAL_RCC_OscConfig+0x470>)
 8001e64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e66:	f003 0302 	and.w	r3, r3, #2
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d1ee      	bne.n	8001e4c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001e6e:	7dfb      	ldrb	r3, [r7, #23]
 8001e70:	2b01      	cmp	r3, #1
 8001e72:	d105      	bne.n	8001e80 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e74:	4b39      	ldr	r3, [pc, #228]	; (8001f5c <HAL_RCC_OscConfig+0x470>)
 8001e76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e78:	4a38      	ldr	r2, [pc, #224]	; (8001f5c <HAL_RCC_OscConfig+0x470>)
 8001e7a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e7e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	699b      	ldr	r3, [r3, #24]
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	f000 80a1 	beq.w	8001fcc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001e8a:	4b34      	ldr	r3, [pc, #208]	; (8001f5c <HAL_RCC_OscConfig+0x470>)
 8001e8c:	689b      	ldr	r3, [r3, #8]
 8001e8e:	f003 030c 	and.w	r3, r3, #12
 8001e92:	2b08      	cmp	r3, #8
 8001e94:	d05c      	beq.n	8001f50 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	699b      	ldr	r3, [r3, #24]
 8001e9a:	2b02      	cmp	r3, #2
 8001e9c:	d141      	bne.n	8001f22 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e9e:	4b31      	ldr	r3, [pc, #196]	; (8001f64 <HAL_RCC_OscConfig+0x478>)
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ea4:	f7ff f87c 	bl	8000fa0 <HAL_GetTick>
 8001ea8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001eaa:	e008      	b.n	8001ebe <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001eac:	f7ff f878 	bl	8000fa0 <HAL_GetTick>
 8001eb0:	4602      	mov	r2, r0
 8001eb2:	693b      	ldr	r3, [r7, #16]
 8001eb4:	1ad3      	subs	r3, r2, r3
 8001eb6:	2b02      	cmp	r3, #2
 8001eb8:	d901      	bls.n	8001ebe <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001eba:	2303      	movs	r3, #3
 8001ebc:	e087      	b.n	8001fce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ebe:	4b27      	ldr	r3, [pc, #156]	; (8001f5c <HAL_RCC_OscConfig+0x470>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d1f0      	bne.n	8001eac <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	69da      	ldr	r2, [r3, #28]
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	6a1b      	ldr	r3, [r3, #32]
 8001ed2:	431a      	orrs	r2, r3
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ed8:	019b      	lsls	r3, r3, #6
 8001eda:	431a      	orrs	r2, r3
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ee0:	085b      	lsrs	r3, r3, #1
 8001ee2:	3b01      	subs	r3, #1
 8001ee4:	041b      	lsls	r3, r3, #16
 8001ee6:	431a      	orrs	r2, r3
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001eec:	061b      	lsls	r3, r3, #24
 8001eee:	491b      	ldr	r1, [pc, #108]	; (8001f5c <HAL_RCC_OscConfig+0x470>)
 8001ef0:	4313      	orrs	r3, r2
 8001ef2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ef4:	4b1b      	ldr	r3, [pc, #108]	; (8001f64 <HAL_RCC_OscConfig+0x478>)
 8001ef6:	2201      	movs	r2, #1
 8001ef8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001efa:	f7ff f851 	bl	8000fa0 <HAL_GetTick>
 8001efe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f00:	e008      	b.n	8001f14 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f02:	f7ff f84d 	bl	8000fa0 <HAL_GetTick>
 8001f06:	4602      	mov	r2, r0
 8001f08:	693b      	ldr	r3, [r7, #16]
 8001f0a:	1ad3      	subs	r3, r2, r3
 8001f0c:	2b02      	cmp	r3, #2
 8001f0e:	d901      	bls.n	8001f14 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001f10:	2303      	movs	r3, #3
 8001f12:	e05c      	b.n	8001fce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f14:	4b11      	ldr	r3, [pc, #68]	; (8001f5c <HAL_RCC_OscConfig+0x470>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d0f0      	beq.n	8001f02 <HAL_RCC_OscConfig+0x416>
 8001f20:	e054      	b.n	8001fcc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f22:	4b10      	ldr	r3, [pc, #64]	; (8001f64 <HAL_RCC_OscConfig+0x478>)
 8001f24:	2200      	movs	r2, #0
 8001f26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f28:	f7ff f83a 	bl	8000fa0 <HAL_GetTick>
 8001f2c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f2e:	e008      	b.n	8001f42 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f30:	f7ff f836 	bl	8000fa0 <HAL_GetTick>
 8001f34:	4602      	mov	r2, r0
 8001f36:	693b      	ldr	r3, [r7, #16]
 8001f38:	1ad3      	subs	r3, r2, r3
 8001f3a:	2b02      	cmp	r3, #2
 8001f3c:	d901      	bls.n	8001f42 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001f3e:	2303      	movs	r3, #3
 8001f40:	e045      	b.n	8001fce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f42:	4b06      	ldr	r3, [pc, #24]	; (8001f5c <HAL_RCC_OscConfig+0x470>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d1f0      	bne.n	8001f30 <HAL_RCC_OscConfig+0x444>
 8001f4e:	e03d      	b.n	8001fcc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	699b      	ldr	r3, [r3, #24]
 8001f54:	2b01      	cmp	r3, #1
 8001f56:	d107      	bne.n	8001f68 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001f58:	2301      	movs	r3, #1
 8001f5a:	e038      	b.n	8001fce <HAL_RCC_OscConfig+0x4e2>
 8001f5c:	40023800 	.word	0x40023800
 8001f60:	40007000 	.word	0x40007000
 8001f64:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001f68:	4b1b      	ldr	r3, [pc, #108]	; (8001fd8 <HAL_RCC_OscConfig+0x4ec>)
 8001f6a:	685b      	ldr	r3, [r3, #4]
 8001f6c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	699b      	ldr	r3, [r3, #24]
 8001f72:	2b01      	cmp	r3, #1
 8001f74:	d028      	beq.n	8001fc8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f80:	429a      	cmp	r2, r3
 8001f82:	d121      	bne.n	8001fc8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f8e:	429a      	cmp	r2, r3
 8001f90:	d11a      	bne.n	8001fc8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001f92:	68fa      	ldr	r2, [r7, #12]
 8001f94:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001f98:	4013      	ands	r3, r2
 8001f9a:	687a      	ldr	r2, [r7, #4]
 8001f9c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001f9e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001fa0:	4293      	cmp	r3, r2
 8001fa2:	d111      	bne.n	8001fc8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fae:	085b      	lsrs	r3, r3, #1
 8001fb0:	3b01      	subs	r3, #1
 8001fb2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001fb4:	429a      	cmp	r2, r3
 8001fb6:	d107      	bne.n	8001fc8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fc2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001fc4:	429a      	cmp	r2, r3
 8001fc6:	d001      	beq.n	8001fcc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001fc8:	2301      	movs	r3, #1
 8001fca:	e000      	b.n	8001fce <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001fcc:	2300      	movs	r3, #0
}
 8001fce:	4618      	mov	r0, r3
 8001fd0:	3718      	adds	r7, #24
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bd80      	pop	{r7, pc}
 8001fd6:	bf00      	nop
 8001fd8:	40023800 	.word	0x40023800

08001fdc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b084      	sub	sp, #16
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
 8001fe4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d101      	bne.n	8001ff0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001fec:	2301      	movs	r3, #1
 8001fee:	e0cc      	b.n	800218a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001ff0:	4b68      	ldr	r3, [pc, #416]	; (8002194 <HAL_RCC_ClockConfig+0x1b8>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f003 0307 	and.w	r3, r3, #7
 8001ff8:	683a      	ldr	r2, [r7, #0]
 8001ffa:	429a      	cmp	r2, r3
 8001ffc:	d90c      	bls.n	8002018 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ffe:	4b65      	ldr	r3, [pc, #404]	; (8002194 <HAL_RCC_ClockConfig+0x1b8>)
 8002000:	683a      	ldr	r2, [r7, #0]
 8002002:	b2d2      	uxtb	r2, r2
 8002004:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002006:	4b63      	ldr	r3, [pc, #396]	; (8002194 <HAL_RCC_ClockConfig+0x1b8>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f003 0307 	and.w	r3, r3, #7
 800200e:	683a      	ldr	r2, [r7, #0]
 8002010:	429a      	cmp	r2, r3
 8002012:	d001      	beq.n	8002018 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002014:	2301      	movs	r3, #1
 8002016:	e0b8      	b.n	800218a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f003 0302 	and.w	r3, r3, #2
 8002020:	2b00      	cmp	r3, #0
 8002022:	d020      	beq.n	8002066 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f003 0304 	and.w	r3, r3, #4
 800202c:	2b00      	cmp	r3, #0
 800202e:	d005      	beq.n	800203c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002030:	4b59      	ldr	r3, [pc, #356]	; (8002198 <HAL_RCC_ClockConfig+0x1bc>)
 8002032:	689b      	ldr	r3, [r3, #8]
 8002034:	4a58      	ldr	r2, [pc, #352]	; (8002198 <HAL_RCC_ClockConfig+0x1bc>)
 8002036:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800203a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f003 0308 	and.w	r3, r3, #8
 8002044:	2b00      	cmp	r3, #0
 8002046:	d005      	beq.n	8002054 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002048:	4b53      	ldr	r3, [pc, #332]	; (8002198 <HAL_RCC_ClockConfig+0x1bc>)
 800204a:	689b      	ldr	r3, [r3, #8]
 800204c:	4a52      	ldr	r2, [pc, #328]	; (8002198 <HAL_RCC_ClockConfig+0x1bc>)
 800204e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002052:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002054:	4b50      	ldr	r3, [pc, #320]	; (8002198 <HAL_RCC_ClockConfig+0x1bc>)
 8002056:	689b      	ldr	r3, [r3, #8]
 8002058:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	689b      	ldr	r3, [r3, #8]
 8002060:	494d      	ldr	r1, [pc, #308]	; (8002198 <HAL_RCC_ClockConfig+0x1bc>)
 8002062:	4313      	orrs	r3, r2
 8002064:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f003 0301 	and.w	r3, r3, #1
 800206e:	2b00      	cmp	r3, #0
 8002070:	d044      	beq.n	80020fc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	685b      	ldr	r3, [r3, #4]
 8002076:	2b01      	cmp	r3, #1
 8002078:	d107      	bne.n	800208a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800207a:	4b47      	ldr	r3, [pc, #284]	; (8002198 <HAL_RCC_ClockConfig+0x1bc>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002082:	2b00      	cmp	r3, #0
 8002084:	d119      	bne.n	80020ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002086:	2301      	movs	r3, #1
 8002088:	e07f      	b.n	800218a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	685b      	ldr	r3, [r3, #4]
 800208e:	2b02      	cmp	r3, #2
 8002090:	d003      	beq.n	800209a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002096:	2b03      	cmp	r3, #3
 8002098:	d107      	bne.n	80020aa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800209a:	4b3f      	ldr	r3, [pc, #252]	; (8002198 <HAL_RCC_ClockConfig+0x1bc>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d109      	bne.n	80020ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020a6:	2301      	movs	r3, #1
 80020a8:	e06f      	b.n	800218a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020aa:	4b3b      	ldr	r3, [pc, #236]	; (8002198 <HAL_RCC_ClockConfig+0x1bc>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f003 0302 	and.w	r3, r3, #2
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d101      	bne.n	80020ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020b6:	2301      	movs	r3, #1
 80020b8:	e067      	b.n	800218a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80020ba:	4b37      	ldr	r3, [pc, #220]	; (8002198 <HAL_RCC_ClockConfig+0x1bc>)
 80020bc:	689b      	ldr	r3, [r3, #8]
 80020be:	f023 0203 	bic.w	r2, r3, #3
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	685b      	ldr	r3, [r3, #4]
 80020c6:	4934      	ldr	r1, [pc, #208]	; (8002198 <HAL_RCC_ClockConfig+0x1bc>)
 80020c8:	4313      	orrs	r3, r2
 80020ca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80020cc:	f7fe ff68 	bl	8000fa0 <HAL_GetTick>
 80020d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020d2:	e00a      	b.n	80020ea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020d4:	f7fe ff64 	bl	8000fa0 <HAL_GetTick>
 80020d8:	4602      	mov	r2, r0
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	1ad3      	subs	r3, r2, r3
 80020de:	f241 3288 	movw	r2, #5000	; 0x1388
 80020e2:	4293      	cmp	r3, r2
 80020e4:	d901      	bls.n	80020ea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80020e6:	2303      	movs	r3, #3
 80020e8:	e04f      	b.n	800218a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020ea:	4b2b      	ldr	r3, [pc, #172]	; (8002198 <HAL_RCC_ClockConfig+0x1bc>)
 80020ec:	689b      	ldr	r3, [r3, #8]
 80020ee:	f003 020c 	and.w	r2, r3, #12
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	685b      	ldr	r3, [r3, #4]
 80020f6:	009b      	lsls	r3, r3, #2
 80020f8:	429a      	cmp	r2, r3
 80020fa:	d1eb      	bne.n	80020d4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80020fc:	4b25      	ldr	r3, [pc, #148]	; (8002194 <HAL_RCC_ClockConfig+0x1b8>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f003 0307 	and.w	r3, r3, #7
 8002104:	683a      	ldr	r2, [r7, #0]
 8002106:	429a      	cmp	r2, r3
 8002108:	d20c      	bcs.n	8002124 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800210a:	4b22      	ldr	r3, [pc, #136]	; (8002194 <HAL_RCC_ClockConfig+0x1b8>)
 800210c:	683a      	ldr	r2, [r7, #0]
 800210e:	b2d2      	uxtb	r2, r2
 8002110:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002112:	4b20      	ldr	r3, [pc, #128]	; (8002194 <HAL_RCC_ClockConfig+0x1b8>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f003 0307 	and.w	r3, r3, #7
 800211a:	683a      	ldr	r2, [r7, #0]
 800211c:	429a      	cmp	r2, r3
 800211e:	d001      	beq.n	8002124 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002120:	2301      	movs	r3, #1
 8002122:	e032      	b.n	800218a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f003 0304 	and.w	r3, r3, #4
 800212c:	2b00      	cmp	r3, #0
 800212e:	d008      	beq.n	8002142 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002130:	4b19      	ldr	r3, [pc, #100]	; (8002198 <HAL_RCC_ClockConfig+0x1bc>)
 8002132:	689b      	ldr	r3, [r3, #8]
 8002134:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	68db      	ldr	r3, [r3, #12]
 800213c:	4916      	ldr	r1, [pc, #88]	; (8002198 <HAL_RCC_ClockConfig+0x1bc>)
 800213e:	4313      	orrs	r3, r2
 8002140:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f003 0308 	and.w	r3, r3, #8
 800214a:	2b00      	cmp	r3, #0
 800214c:	d009      	beq.n	8002162 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800214e:	4b12      	ldr	r3, [pc, #72]	; (8002198 <HAL_RCC_ClockConfig+0x1bc>)
 8002150:	689b      	ldr	r3, [r3, #8]
 8002152:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	691b      	ldr	r3, [r3, #16]
 800215a:	00db      	lsls	r3, r3, #3
 800215c:	490e      	ldr	r1, [pc, #56]	; (8002198 <HAL_RCC_ClockConfig+0x1bc>)
 800215e:	4313      	orrs	r3, r2
 8002160:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002162:	f000 f821 	bl	80021a8 <HAL_RCC_GetSysClockFreq>
 8002166:	4602      	mov	r2, r0
 8002168:	4b0b      	ldr	r3, [pc, #44]	; (8002198 <HAL_RCC_ClockConfig+0x1bc>)
 800216a:	689b      	ldr	r3, [r3, #8]
 800216c:	091b      	lsrs	r3, r3, #4
 800216e:	f003 030f 	and.w	r3, r3, #15
 8002172:	490a      	ldr	r1, [pc, #40]	; (800219c <HAL_RCC_ClockConfig+0x1c0>)
 8002174:	5ccb      	ldrb	r3, [r1, r3]
 8002176:	fa22 f303 	lsr.w	r3, r2, r3
 800217a:	4a09      	ldr	r2, [pc, #36]	; (80021a0 <HAL_RCC_ClockConfig+0x1c4>)
 800217c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800217e:	4b09      	ldr	r3, [pc, #36]	; (80021a4 <HAL_RCC_ClockConfig+0x1c8>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	4618      	mov	r0, r3
 8002184:	f7fe fec8 	bl	8000f18 <HAL_InitTick>

  return HAL_OK;
 8002188:	2300      	movs	r3, #0
}
 800218a:	4618      	mov	r0, r3
 800218c:	3710      	adds	r7, #16
 800218e:	46bd      	mov	sp, r7
 8002190:	bd80      	pop	{r7, pc}
 8002192:	bf00      	nop
 8002194:	40023c00 	.word	0x40023c00
 8002198:	40023800 	.word	0x40023800
 800219c:	0800470c 	.word	0x0800470c
 80021a0:	20000000 	.word	0x20000000
 80021a4:	20000004 	.word	0x20000004

080021a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80021a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80021ac:	b094      	sub	sp, #80	; 0x50
 80021ae:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80021b0:	2300      	movs	r3, #0
 80021b2:	647b      	str	r3, [r7, #68]	; 0x44
 80021b4:	2300      	movs	r3, #0
 80021b6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80021b8:	2300      	movs	r3, #0
 80021ba:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80021bc:	2300      	movs	r3, #0
 80021be:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80021c0:	4b79      	ldr	r3, [pc, #484]	; (80023a8 <HAL_RCC_GetSysClockFreq+0x200>)
 80021c2:	689b      	ldr	r3, [r3, #8]
 80021c4:	f003 030c 	and.w	r3, r3, #12
 80021c8:	2b08      	cmp	r3, #8
 80021ca:	d00d      	beq.n	80021e8 <HAL_RCC_GetSysClockFreq+0x40>
 80021cc:	2b08      	cmp	r3, #8
 80021ce:	f200 80e1 	bhi.w	8002394 <HAL_RCC_GetSysClockFreq+0x1ec>
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d002      	beq.n	80021dc <HAL_RCC_GetSysClockFreq+0x34>
 80021d6:	2b04      	cmp	r3, #4
 80021d8:	d003      	beq.n	80021e2 <HAL_RCC_GetSysClockFreq+0x3a>
 80021da:	e0db      	b.n	8002394 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80021dc:	4b73      	ldr	r3, [pc, #460]	; (80023ac <HAL_RCC_GetSysClockFreq+0x204>)
 80021de:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80021e0:	e0db      	b.n	800239a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80021e2:	4b73      	ldr	r3, [pc, #460]	; (80023b0 <HAL_RCC_GetSysClockFreq+0x208>)
 80021e4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80021e6:	e0d8      	b.n	800239a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80021e8:	4b6f      	ldr	r3, [pc, #444]	; (80023a8 <HAL_RCC_GetSysClockFreq+0x200>)
 80021ea:	685b      	ldr	r3, [r3, #4]
 80021ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80021f0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80021f2:	4b6d      	ldr	r3, [pc, #436]	; (80023a8 <HAL_RCC_GetSysClockFreq+0x200>)
 80021f4:	685b      	ldr	r3, [r3, #4]
 80021f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d063      	beq.n	80022c6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80021fe:	4b6a      	ldr	r3, [pc, #424]	; (80023a8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002200:	685b      	ldr	r3, [r3, #4]
 8002202:	099b      	lsrs	r3, r3, #6
 8002204:	2200      	movs	r2, #0
 8002206:	63bb      	str	r3, [r7, #56]	; 0x38
 8002208:	63fa      	str	r2, [r7, #60]	; 0x3c
 800220a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800220c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002210:	633b      	str	r3, [r7, #48]	; 0x30
 8002212:	2300      	movs	r3, #0
 8002214:	637b      	str	r3, [r7, #52]	; 0x34
 8002216:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800221a:	4622      	mov	r2, r4
 800221c:	462b      	mov	r3, r5
 800221e:	f04f 0000 	mov.w	r0, #0
 8002222:	f04f 0100 	mov.w	r1, #0
 8002226:	0159      	lsls	r1, r3, #5
 8002228:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800222c:	0150      	lsls	r0, r2, #5
 800222e:	4602      	mov	r2, r0
 8002230:	460b      	mov	r3, r1
 8002232:	4621      	mov	r1, r4
 8002234:	1a51      	subs	r1, r2, r1
 8002236:	6139      	str	r1, [r7, #16]
 8002238:	4629      	mov	r1, r5
 800223a:	eb63 0301 	sbc.w	r3, r3, r1
 800223e:	617b      	str	r3, [r7, #20]
 8002240:	f04f 0200 	mov.w	r2, #0
 8002244:	f04f 0300 	mov.w	r3, #0
 8002248:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800224c:	4659      	mov	r1, fp
 800224e:	018b      	lsls	r3, r1, #6
 8002250:	4651      	mov	r1, sl
 8002252:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002256:	4651      	mov	r1, sl
 8002258:	018a      	lsls	r2, r1, #6
 800225a:	4651      	mov	r1, sl
 800225c:	ebb2 0801 	subs.w	r8, r2, r1
 8002260:	4659      	mov	r1, fp
 8002262:	eb63 0901 	sbc.w	r9, r3, r1
 8002266:	f04f 0200 	mov.w	r2, #0
 800226a:	f04f 0300 	mov.w	r3, #0
 800226e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002272:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002276:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800227a:	4690      	mov	r8, r2
 800227c:	4699      	mov	r9, r3
 800227e:	4623      	mov	r3, r4
 8002280:	eb18 0303 	adds.w	r3, r8, r3
 8002284:	60bb      	str	r3, [r7, #8]
 8002286:	462b      	mov	r3, r5
 8002288:	eb49 0303 	adc.w	r3, r9, r3
 800228c:	60fb      	str	r3, [r7, #12]
 800228e:	f04f 0200 	mov.w	r2, #0
 8002292:	f04f 0300 	mov.w	r3, #0
 8002296:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800229a:	4629      	mov	r1, r5
 800229c:	024b      	lsls	r3, r1, #9
 800229e:	4621      	mov	r1, r4
 80022a0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80022a4:	4621      	mov	r1, r4
 80022a6:	024a      	lsls	r2, r1, #9
 80022a8:	4610      	mov	r0, r2
 80022aa:	4619      	mov	r1, r3
 80022ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80022ae:	2200      	movs	r2, #0
 80022b0:	62bb      	str	r3, [r7, #40]	; 0x28
 80022b2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80022b4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80022b8:	f7fd ffe2 	bl	8000280 <__aeabi_uldivmod>
 80022bc:	4602      	mov	r2, r0
 80022be:	460b      	mov	r3, r1
 80022c0:	4613      	mov	r3, r2
 80022c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80022c4:	e058      	b.n	8002378 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80022c6:	4b38      	ldr	r3, [pc, #224]	; (80023a8 <HAL_RCC_GetSysClockFreq+0x200>)
 80022c8:	685b      	ldr	r3, [r3, #4]
 80022ca:	099b      	lsrs	r3, r3, #6
 80022cc:	2200      	movs	r2, #0
 80022ce:	4618      	mov	r0, r3
 80022d0:	4611      	mov	r1, r2
 80022d2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80022d6:	623b      	str	r3, [r7, #32]
 80022d8:	2300      	movs	r3, #0
 80022da:	627b      	str	r3, [r7, #36]	; 0x24
 80022dc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80022e0:	4642      	mov	r2, r8
 80022e2:	464b      	mov	r3, r9
 80022e4:	f04f 0000 	mov.w	r0, #0
 80022e8:	f04f 0100 	mov.w	r1, #0
 80022ec:	0159      	lsls	r1, r3, #5
 80022ee:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80022f2:	0150      	lsls	r0, r2, #5
 80022f4:	4602      	mov	r2, r0
 80022f6:	460b      	mov	r3, r1
 80022f8:	4641      	mov	r1, r8
 80022fa:	ebb2 0a01 	subs.w	sl, r2, r1
 80022fe:	4649      	mov	r1, r9
 8002300:	eb63 0b01 	sbc.w	fp, r3, r1
 8002304:	f04f 0200 	mov.w	r2, #0
 8002308:	f04f 0300 	mov.w	r3, #0
 800230c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002310:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002314:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002318:	ebb2 040a 	subs.w	r4, r2, sl
 800231c:	eb63 050b 	sbc.w	r5, r3, fp
 8002320:	f04f 0200 	mov.w	r2, #0
 8002324:	f04f 0300 	mov.w	r3, #0
 8002328:	00eb      	lsls	r3, r5, #3
 800232a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800232e:	00e2      	lsls	r2, r4, #3
 8002330:	4614      	mov	r4, r2
 8002332:	461d      	mov	r5, r3
 8002334:	4643      	mov	r3, r8
 8002336:	18e3      	adds	r3, r4, r3
 8002338:	603b      	str	r3, [r7, #0]
 800233a:	464b      	mov	r3, r9
 800233c:	eb45 0303 	adc.w	r3, r5, r3
 8002340:	607b      	str	r3, [r7, #4]
 8002342:	f04f 0200 	mov.w	r2, #0
 8002346:	f04f 0300 	mov.w	r3, #0
 800234a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800234e:	4629      	mov	r1, r5
 8002350:	028b      	lsls	r3, r1, #10
 8002352:	4621      	mov	r1, r4
 8002354:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002358:	4621      	mov	r1, r4
 800235a:	028a      	lsls	r2, r1, #10
 800235c:	4610      	mov	r0, r2
 800235e:	4619      	mov	r1, r3
 8002360:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002362:	2200      	movs	r2, #0
 8002364:	61bb      	str	r3, [r7, #24]
 8002366:	61fa      	str	r2, [r7, #28]
 8002368:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800236c:	f7fd ff88 	bl	8000280 <__aeabi_uldivmod>
 8002370:	4602      	mov	r2, r0
 8002372:	460b      	mov	r3, r1
 8002374:	4613      	mov	r3, r2
 8002376:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002378:	4b0b      	ldr	r3, [pc, #44]	; (80023a8 <HAL_RCC_GetSysClockFreq+0x200>)
 800237a:	685b      	ldr	r3, [r3, #4]
 800237c:	0c1b      	lsrs	r3, r3, #16
 800237e:	f003 0303 	and.w	r3, r3, #3
 8002382:	3301      	adds	r3, #1
 8002384:	005b      	lsls	r3, r3, #1
 8002386:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002388:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800238a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800238c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002390:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002392:	e002      	b.n	800239a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002394:	4b05      	ldr	r3, [pc, #20]	; (80023ac <HAL_RCC_GetSysClockFreq+0x204>)
 8002396:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002398:	bf00      	nop
    }
  }
  return sysclockfreq;
 800239a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800239c:	4618      	mov	r0, r3
 800239e:	3750      	adds	r7, #80	; 0x50
 80023a0:	46bd      	mov	sp, r7
 80023a2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80023a6:	bf00      	nop
 80023a8:	40023800 	.word	0x40023800
 80023ac:	00f42400 	.word	0x00f42400
 80023b0:	007a1200 	.word	0x007a1200

080023b4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80023b4:	b480      	push	{r7}
 80023b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80023b8:	4b03      	ldr	r3, [pc, #12]	; (80023c8 <HAL_RCC_GetHCLKFreq+0x14>)
 80023ba:	681b      	ldr	r3, [r3, #0]
}
 80023bc:	4618      	mov	r0, r3
 80023be:	46bd      	mov	sp, r7
 80023c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c4:	4770      	bx	lr
 80023c6:	bf00      	nop
 80023c8:	20000000 	.word	0x20000000

080023cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80023d0:	f7ff fff0 	bl	80023b4 <HAL_RCC_GetHCLKFreq>
 80023d4:	4602      	mov	r2, r0
 80023d6:	4b05      	ldr	r3, [pc, #20]	; (80023ec <HAL_RCC_GetPCLK1Freq+0x20>)
 80023d8:	689b      	ldr	r3, [r3, #8]
 80023da:	0a9b      	lsrs	r3, r3, #10
 80023dc:	f003 0307 	and.w	r3, r3, #7
 80023e0:	4903      	ldr	r1, [pc, #12]	; (80023f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80023e2:	5ccb      	ldrb	r3, [r1, r3]
 80023e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80023e8:	4618      	mov	r0, r3
 80023ea:	bd80      	pop	{r7, pc}
 80023ec:	40023800 	.word	0x40023800
 80023f0:	0800471c 	.word	0x0800471c

080023f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80023f8:	f7ff ffdc 	bl	80023b4 <HAL_RCC_GetHCLKFreq>
 80023fc:	4602      	mov	r2, r0
 80023fe:	4b05      	ldr	r3, [pc, #20]	; (8002414 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002400:	689b      	ldr	r3, [r3, #8]
 8002402:	0b5b      	lsrs	r3, r3, #13
 8002404:	f003 0307 	and.w	r3, r3, #7
 8002408:	4903      	ldr	r1, [pc, #12]	; (8002418 <HAL_RCC_GetPCLK2Freq+0x24>)
 800240a:	5ccb      	ldrb	r3, [r1, r3]
 800240c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002410:	4618      	mov	r0, r3
 8002412:	bd80      	pop	{r7, pc}
 8002414:	40023800 	.word	0x40023800
 8002418:	0800471c 	.word	0x0800471c

0800241c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b082      	sub	sp, #8
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	2b00      	cmp	r3, #0
 8002428:	d101      	bne.n	800242e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800242a:	2301      	movs	r3, #1
 800242c:	e041      	b.n	80024b2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002434:	b2db      	uxtb	r3, r3
 8002436:	2b00      	cmp	r3, #0
 8002438:	d106      	bne.n	8002448 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	2200      	movs	r2, #0
 800243e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002442:	6878      	ldr	r0, [r7, #4]
 8002444:	f7fe fb4c 	bl	8000ae0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	2202      	movs	r2, #2
 800244c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681a      	ldr	r2, [r3, #0]
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	3304      	adds	r3, #4
 8002458:	4619      	mov	r1, r3
 800245a:	4610      	mov	r0, r2
 800245c:	f000 fd44 	bl	8002ee8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	2201      	movs	r2, #1
 8002464:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	2201      	movs	r2, #1
 800246c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	2201      	movs	r2, #1
 8002474:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	2201      	movs	r2, #1
 800247c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	2201      	movs	r2, #1
 8002484:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2201      	movs	r2, #1
 800248c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2201      	movs	r2, #1
 8002494:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2201      	movs	r2, #1
 800249c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2201      	movs	r2, #1
 80024a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	2201      	movs	r2, #1
 80024ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80024b0:	2300      	movs	r3, #0
}
 80024b2:	4618      	mov	r0, r3
 80024b4:	3708      	adds	r7, #8
 80024b6:	46bd      	mov	sp, r7
 80024b8:	bd80      	pop	{r7, pc}

080024ba <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80024ba:	b580      	push	{r7, lr}
 80024bc:	b082      	sub	sp, #8
 80024be:	af00      	add	r7, sp, #0
 80024c0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d101      	bne.n	80024cc <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80024c8:	2301      	movs	r3, #1
 80024ca:	e041      	b.n	8002550 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024d2:	b2db      	uxtb	r3, r3
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d106      	bne.n	80024e6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	2200      	movs	r2, #0
 80024dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80024e0:	6878      	ldr	r0, [r7, #4]
 80024e2:	f000 f839 	bl	8002558 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	2202      	movs	r2, #2
 80024ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681a      	ldr	r2, [r3, #0]
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	3304      	adds	r3, #4
 80024f6:	4619      	mov	r1, r3
 80024f8:	4610      	mov	r0, r2
 80024fa:	f000 fcf5 	bl	8002ee8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	2201      	movs	r2, #1
 8002502:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	2201      	movs	r2, #1
 800250a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	2201      	movs	r2, #1
 8002512:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	2201      	movs	r2, #1
 800251a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	2201      	movs	r2, #1
 8002522:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	2201      	movs	r2, #1
 800252a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	2201      	movs	r2, #1
 8002532:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	2201      	movs	r2, #1
 800253a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	2201      	movs	r2, #1
 8002542:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	2201      	movs	r2, #1
 800254a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800254e:	2300      	movs	r3, #0
}
 8002550:	4618      	mov	r0, r3
 8002552:	3708      	adds	r7, #8
 8002554:	46bd      	mov	sp, r7
 8002556:	bd80      	pop	{r7, pc}

08002558 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002558:	b480      	push	{r7}
 800255a:	b083      	sub	sp, #12
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002560:	bf00      	nop
 8002562:	370c      	adds	r7, #12
 8002564:	46bd      	mov	sp, r7
 8002566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256a:	4770      	bx	lr

0800256c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b084      	sub	sp, #16
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
 8002574:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	2b00      	cmp	r3, #0
 800257a:	d109      	bne.n	8002590 <HAL_TIM_PWM_Start+0x24>
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002582:	b2db      	uxtb	r3, r3
 8002584:	2b01      	cmp	r3, #1
 8002586:	bf14      	ite	ne
 8002588:	2301      	movne	r3, #1
 800258a:	2300      	moveq	r3, #0
 800258c:	b2db      	uxtb	r3, r3
 800258e:	e022      	b.n	80025d6 <HAL_TIM_PWM_Start+0x6a>
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	2b04      	cmp	r3, #4
 8002594:	d109      	bne.n	80025aa <HAL_TIM_PWM_Start+0x3e>
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800259c:	b2db      	uxtb	r3, r3
 800259e:	2b01      	cmp	r3, #1
 80025a0:	bf14      	ite	ne
 80025a2:	2301      	movne	r3, #1
 80025a4:	2300      	moveq	r3, #0
 80025a6:	b2db      	uxtb	r3, r3
 80025a8:	e015      	b.n	80025d6 <HAL_TIM_PWM_Start+0x6a>
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	2b08      	cmp	r3, #8
 80025ae:	d109      	bne.n	80025c4 <HAL_TIM_PWM_Start+0x58>
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80025b6:	b2db      	uxtb	r3, r3
 80025b8:	2b01      	cmp	r3, #1
 80025ba:	bf14      	ite	ne
 80025bc:	2301      	movne	r3, #1
 80025be:	2300      	moveq	r3, #0
 80025c0:	b2db      	uxtb	r3, r3
 80025c2:	e008      	b.n	80025d6 <HAL_TIM_PWM_Start+0x6a>
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80025ca:	b2db      	uxtb	r3, r3
 80025cc:	2b01      	cmp	r3, #1
 80025ce:	bf14      	ite	ne
 80025d0:	2301      	movne	r3, #1
 80025d2:	2300      	moveq	r3, #0
 80025d4:	b2db      	uxtb	r3, r3
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d001      	beq.n	80025de <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80025da:	2301      	movs	r3, #1
 80025dc:	e068      	b.n	80026b0 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80025de:	683b      	ldr	r3, [r7, #0]
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d104      	bne.n	80025ee <HAL_TIM_PWM_Start+0x82>
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2202      	movs	r2, #2
 80025e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80025ec:	e013      	b.n	8002616 <HAL_TIM_PWM_Start+0xaa>
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	2b04      	cmp	r3, #4
 80025f2:	d104      	bne.n	80025fe <HAL_TIM_PWM_Start+0x92>
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2202      	movs	r2, #2
 80025f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80025fc:	e00b      	b.n	8002616 <HAL_TIM_PWM_Start+0xaa>
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	2b08      	cmp	r3, #8
 8002602:	d104      	bne.n	800260e <HAL_TIM_PWM_Start+0xa2>
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	2202      	movs	r2, #2
 8002608:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800260c:	e003      	b.n	8002616 <HAL_TIM_PWM_Start+0xaa>
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	2202      	movs	r2, #2
 8002612:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	2201      	movs	r2, #1
 800261c:	6839      	ldr	r1, [r7, #0]
 800261e:	4618      	mov	r0, r3
 8002620:	f000 ff08 	bl	8003434 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	4a23      	ldr	r2, [pc, #140]	; (80026b8 <HAL_TIM_PWM_Start+0x14c>)
 800262a:	4293      	cmp	r3, r2
 800262c:	d107      	bne.n	800263e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800263c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	4a1d      	ldr	r2, [pc, #116]	; (80026b8 <HAL_TIM_PWM_Start+0x14c>)
 8002644:	4293      	cmp	r3, r2
 8002646:	d018      	beq.n	800267a <HAL_TIM_PWM_Start+0x10e>
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002650:	d013      	beq.n	800267a <HAL_TIM_PWM_Start+0x10e>
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	4a19      	ldr	r2, [pc, #100]	; (80026bc <HAL_TIM_PWM_Start+0x150>)
 8002658:	4293      	cmp	r3, r2
 800265a:	d00e      	beq.n	800267a <HAL_TIM_PWM_Start+0x10e>
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	4a17      	ldr	r2, [pc, #92]	; (80026c0 <HAL_TIM_PWM_Start+0x154>)
 8002662:	4293      	cmp	r3, r2
 8002664:	d009      	beq.n	800267a <HAL_TIM_PWM_Start+0x10e>
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	4a16      	ldr	r2, [pc, #88]	; (80026c4 <HAL_TIM_PWM_Start+0x158>)
 800266c:	4293      	cmp	r3, r2
 800266e:	d004      	beq.n	800267a <HAL_TIM_PWM_Start+0x10e>
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	4a14      	ldr	r2, [pc, #80]	; (80026c8 <HAL_TIM_PWM_Start+0x15c>)
 8002676:	4293      	cmp	r3, r2
 8002678:	d111      	bne.n	800269e <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	689b      	ldr	r3, [r3, #8]
 8002680:	f003 0307 	and.w	r3, r3, #7
 8002684:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	2b06      	cmp	r3, #6
 800268a:	d010      	beq.n	80026ae <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	681a      	ldr	r2, [r3, #0]
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f042 0201 	orr.w	r2, r2, #1
 800269a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800269c:	e007      	b.n	80026ae <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	681a      	ldr	r2, [r3, #0]
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f042 0201 	orr.w	r2, r2, #1
 80026ac:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80026ae:	2300      	movs	r3, #0
}
 80026b0:	4618      	mov	r0, r3
 80026b2:	3710      	adds	r7, #16
 80026b4:	46bd      	mov	sp, r7
 80026b6:	bd80      	pop	{r7, pc}
 80026b8:	40010000 	.word	0x40010000
 80026bc:	40000400 	.word	0x40000400
 80026c0:	40000800 	.word	0x40000800
 80026c4:	40000c00 	.word	0x40000c00
 80026c8:	40014000 	.word	0x40014000

080026cc <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b086      	sub	sp, #24
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
 80026d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d101      	bne.n	80026e0 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80026dc:	2301      	movs	r3, #1
 80026de:	e097      	b.n	8002810 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026e6:	b2db      	uxtb	r3, r3
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d106      	bne.n	80026fa <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	2200      	movs	r2, #0
 80026f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80026f4:	6878      	ldr	r0, [r7, #4]
 80026f6:	f7fe fa47 	bl	8000b88 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	2202      	movs	r2, #2
 80026fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	689b      	ldr	r3, [r3, #8]
 8002708:	687a      	ldr	r2, [r7, #4]
 800270a:	6812      	ldr	r2, [r2, #0]
 800270c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002710:	f023 0307 	bic.w	r3, r3, #7
 8002714:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681a      	ldr	r2, [r3, #0]
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	3304      	adds	r3, #4
 800271e:	4619      	mov	r1, r3
 8002720:	4610      	mov	r0, r2
 8002722:	f000 fbe1 	bl	8002ee8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	689b      	ldr	r3, [r3, #8]
 800272c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	699b      	ldr	r3, [r3, #24]
 8002734:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	6a1b      	ldr	r3, [r3, #32]
 800273c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	697a      	ldr	r2, [r7, #20]
 8002744:	4313      	orrs	r3, r2
 8002746:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8002748:	693b      	ldr	r3, [r7, #16]
 800274a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800274e:	f023 0303 	bic.w	r3, r3, #3
 8002752:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	689a      	ldr	r2, [r3, #8]
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	699b      	ldr	r3, [r3, #24]
 800275c:	021b      	lsls	r3, r3, #8
 800275e:	4313      	orrs	r3, r2
 8002760:	693a      	ldr	r2, [r7, #16]
 8002762:	4313      	orrs	r3, r2
 8002764:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8002766:	693b      	ldr	r3, [r7, #16]
 8002768:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800276c:	f023 030c 	bic.w	r3, r3, #12
 8002770:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8002772:	693b      	ldr	r3, [r7, #16]
 8002774:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002778:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800277c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	68da      	ldr	r2, [r3, #12]
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	69db      	ldr	r3, [r3, #28]
 8002786:	021b      	lsls	r3, r3, #8
 8002788:	4313      	orrs	r3, r2
 800278a:	693a      	ldr	r2, [r7, #16]
 800278c:	4313      	orrs	r3, r2
 800278e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	691b      	ldr	r3, [r3, #16]
 8002794:	011a      	lsls	r2, r3, #4
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	6a1b      	ldr	r3, [r3, #32]
 800279a:	031b      	lsls	r3, r3, #12
 800279c:	4313      	orrs	r3, r2
 800279e:	693a      	ldr	r2, [r7, #16]
 80027a0:	4313      	orrs	r3, r2
 80027a2:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80027aa:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80027b2:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	685a      	ldr	r2, [r3, #4]
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	695b      	ldr	r3, [r3, #20]
 80027bc:	011b      	lsls	r3, r3, #4
 80027be:	4313      	orrs	r3, r2
 80027c0:	68fa      	ldr	r2, [r7, #12]
 80027c2:	4313      	orrs	r3, r2
 80027c4:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	697a      	ldr	r2, [r7, #20]
 80027cc:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	693a      	ldr	r2, [r7, #16]
 80027d4:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	68fa      	ldr	r2, [r7, #12]
 80027dc:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	2201      	movs	r2, #1
 80027e2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	2201      	movs	r2, #1
 80027ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	2201      	movs	r2, #1
 80027f2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	2201      	movs	r2, #1
 80027fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	2201      	movs	r2, #1
 8002802:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	2201      	movs	r2, #1
 800280a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800280e:	2300      	movs	r3, #0
}
 8002810:	4618      	mov	r0, r3
 8002812:	3718      	adds	r7, #24
 8002814:	46bd      	mov	sp, r7
 8002816:	bd80      	pop	{r7, pc}

08002818 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b084      	sub	sp, #16
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
 8002820:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002828:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002830:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002838:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8002840:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	2b00      	cmp	r3, #0
 8002846:	d110      	bne.n	800286a <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002848:	7bfb      	ldrb	r3, [r7, #15]
 800284a:	2b01      	cmp	r3, #1
 800284c:	d102      	bne.n	8002854 <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800284e:	7b7b      	ldrb	r3, [r7, #13]
 8002850:	2b01      	cmp	r3, #1
 8002852:	d001      	beq.n	8002858 <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 8002854:	2301      	movs	r3, #1
 8002856:	e089      	b.n	800296c <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2202      	movs	r2, #2
 800285c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2202      	movs	r2, #2
 8002864:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002868:	e031      	b.n	80028ce <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	2b04      	cmp	r3, #4
 800286e:	d110      	bne.n	8002892 <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8002870:	7bbb      	ldrb	r3, [r7, #14]
 8002872:	2b01      	cmp	r3, #1
 8002874:	d102      	bne.n	800287c <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8002876:	7b3b      	ldrb	r3, [r7, #12]
 8002878:	2b01      	cmp	r3, #1
 800287a:	d001      	beq.n	8002880 <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 800287c:	2301      	movs	r3, #1
 800287e:	e075      	b.n	800296c <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	2202      	movs	r2, #2
 8002884:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2202      	movs	r2, #2
 800288c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002890:	e01d      	b.n	80028ce <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002892:	7bfb      	ldrb	r3, [r7, #15]
 8002894:	2b01      	cmp	r3, #1
 8002896:	d108      	bne.n	80028aa <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8002898:	7bbb      	ldrb	r3, [r7, #14]
 800289a:	2b01      	cmp	r3, #1
 800289c:	d105      	bne.n	80028aa <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800289e:	7b7b      	ldrb	r3, [r7, #13]
 80028a0:	2b01      	cmp	r3, #1
 80028a2:	d102      	bne.n	80028aa <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80028a4:	7b3b      	ldrb	r3, [r7, #12]
 80028a6:	2b01      	cmp	r3, #1
 80028a8:	d001      	beq.n	80028ae <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 80028aa:	2301      	movs	r3, #1
 80028ac:	e05e      	b.n	800296c <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	2202      	movs	r2, #2
 80028b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	2202      	movs	r2, #2
 80028ba:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	2202      	movs	r2, #2
 80028c2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	2202      	movs	r2, #2
 80028ca:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d003      	beq.n	80028dc <HAL_TIM_Encoder_Start_IT+0xc4>
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	2b04      	cmp	r3, #4
 80028d8:	d010      	beq.n	80028fc <HAL_TIM_Encoder_Start_IT+0xe4>
 80028da:	e01f      	b.n	800291c <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	2201      	movs	r2, #1
 80028e2:	2100      	movs	r1, #0
 80028e4:	4618      	mov	r0, r3
 80028e6:	f000 fda5 	bl	8003434 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	68da      	ldr	r2, [r3, #12]
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f042 0202 	orr.w	r2, r2, #2
 80028f8:	60da      	str	r2, [r3, #12]
      break;
 80028fa:	e02e      	b.n	800295a <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	2201      	movs	r2, #1
 8002902:	2104      	movs	r1, #4
 8002904:	4618      	mov	r0, r3
 8002906:	f000 fd95 	bl	8003434 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	68da      	ldr	r2, [r3, #12]
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f042 0204 	orr.w	r2, r2, #4
 8002918:	60da      	str	r2, [r3, #12]
      break;
 800291a:	e01e      	b.n	800295a <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	2201      	movs	r2, #1
 8002922:	2100      	movs	r1, #0
 8002924:	4618      	mov	r0, r3
 8002926:	f000 fd85 	bl	8003434 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	2201      	movs	r2, #1
 8002930:	2104      	movs	r1, #4
 8002932:	4618      	mov	r0, r3
 8002934:	f000 fd7e 	bl	8003434 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	68da      	ldr	r2, [r3, #12]
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f042 0202 	orr.w	r2, r2, #2
 8002946:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	68da      	ldr	r2, [r3, #12]
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f042 0204 	orr.w	r2, r2, #4
 8002956:	60da      	str	r2, [r3, #12]
      break;
 8002958:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	681a      	ldr	r2, [r3, #0]
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f042 0201 	orr.w	r2, r2, #1
 8002968:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800296a:	2300      	movs	r3, #0
}
 800296c:	4618      	mov	r0, r3
 800296e:	3710      	adds	r7, #16
 8002970:	46bd      	mov	sp, r7
 8002972:	bd80      	pop	{r7, pc}

08002974 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	b082      	sub	sp, #8
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	691b      	ldr	r3, [r3, #16]
 8002982:	f003 0302 	and.w	r3, r3, #2
 8002986:	2b02      	cmp	r3, #2
 8002988:	d122      	bne.n	80029d0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	68db      	ldr	r3, [r3, #12]
 8002990:	f003 0302 	and.w	r3, r3, #2
 8002994:	2b02      	cmp	r3, #2
 8002996:	d11b      	bne.n	80029d0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f06f 0202 	mvn.w	r2, #2
 80029a0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	2201      	movs	r2, #1
 80029a6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	699b      	ldr	r3, [r3, #24]
 80029ae:	f003 0303 	and.w	r3, r3, #3
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d003      	beq.n	80029be <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80029b6:	6878      	ldr	r0, [r7, #4]
 80029b8:	f7fd fde4 	bl	8000584 <HAL_TIM_IC_CaptureCallback>
 80029bc:	e005      	b.n	80029ca <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80029be:	6878      	ldr	r0, [r7, #4]
 80029c0:	f000 fa73 	bl	8002eaa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029c4:	6878      	ldr	r0, [r7, #4]
 80029c6:	f000 fa7a 	bl	8002ebe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	2200      	movs	r2, #0
 80029ce:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	691b      	ldr	r3, [r3, #16]
 80029d6:	f003 0304 	and.w	r3, r3, #4
 80029da:	2b04      	cmp	r3, #4
 80029dc:	d122      	bne.n	8002a24 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	68db      	ldr	r3, [r3, #12]
 80029e4:	f003 0304 	and.w	r3, r3, #4
 80029e8:	2b04      	cmp	r3, #4
 80029ea:	d11b      	bne.n	8002a24 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f06f 0204 	mvn.w	r2, #4
 80029f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	2202      	movs	r2, #2
 80029fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	699b      	ldr	r3, [r3, #24]
 8002a02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d003      	beq.n	8002a12 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a0a:	6878      	ldr	r0, [r7, #4]
 8002a0c:	f7fd fdba 	bl	8000584 <HAL_TIM_IC_CaptureCallback>
 8002a10:	e005      	b.n	8002a1e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a12:	6878      	ldr	r0, [r7, #4]
 8002a14:	f000 fa49 	bl	8002eaa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a18:	6878      	ldr	r0, [r7, #4]
 8002a1a:	f000 fa50 	bl	8002ebe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	2200      	movs	r2, #0
 8002a22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	691b      	ldr	r3, [r3, #16]
 8002a2a:	f003 0308 	and.w	r3, r3, #8
 8002a2e:	2b08      	cmp	r3, #8
 8002a30:	d122      	bne.n	8002a78 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	68db      	ldr	r3, [r3, #12]
 8002a38:	f003 0308 	and.w	r3, r3, #8
 8002a3c:	2b08      	cmp	r3, #8
 8002a3e:	d11b      	bne.n	8002a78 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f06f 0208 	mvn.w	r2, #8
 8002a48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	2204      	movs	r2, #4
 8002a4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	69db      	ldr	r3, [r3, #28]
 8002a56:	f003 0303 	and.w	r3, r3, #3
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d003      	beq.n	8002a66 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a5e:	6878      	ldr	r0, [r7, #4]
 8002a60:	f7fd fd90 	bl	8000584 <HAL_TIM_IC_CaptureCallback>
 8002a64:	e005      	b.n	8002a72 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a66:	6878      	ldr	r0, [r7, #4]
 8002a68:	f000 fa1f 	bl	8002eaa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a6c:	6878      	ldr	r0, [r7, #4]
 8002a6e:	f000 fa26 	bl	8002ebe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	2200      	movs	r2, #0
 8002a76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	691b      	ldr	r3, [r3, #16]
 8002a7e:	f003 0310 	and.w	r3, r3, #16
 8002a82:	2b10      	cmp	r3, #16
 8002a84:	d122      	bne.n	8002acc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	68db      	ldr	r3, [r3, #12]
 8002a8c:	f003 0310 	and.w	r3, r3, #16
 8002a90:	2b10      	cmp	r3, #16
 8002a92:	d11b      	bne.n	8002acc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f06f 0210 	mvn.w	r2, #16
 8002a9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	2208      	movs	r2, #8
 8002aa2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	69db      	ldr	r3, [r3, #28]
 8002aaa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d003      	beq.n	8002aba <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ab2:	6878      	ldr	r0, [r7, #4]
 8002ab4:	f7fd fd66 	bl	8000584 <HAL_TIM_IC_CaptureCallback>
 8002ab8:	e005      	b.n	8002ac6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002aba:	6878      	ldr	r0, [r7, #4]
 8002abc:	f000 f9f5 	bl	8002eaa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ac0:	6878      	ldr	r0, [r7, #4]
 8002ac2:	f000 f9fc 	bl	8002ebe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	2200      	movs	r2, #0
 8002aca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	691b      	ldr	r3, [r3, #16]
 8002ad2:	f003 0301 	and.w	r3, r3, #1
 8002ad6:	2b01      	cmp	r3, #1
 8002ad8:	d10e      	bne.n	8002af8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	68db      	ldr	r3, [r3, #12]
 8002ae0:	f003 0301 	and.w	r3, r3, #1
 8002ae4:	2b01      	cmp	r3, #1
 8002ae6:	d107      	bne.n	8002af8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f06f 0201 	mvn.w	r2, #1
 8002af0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002af2:	6878      	ldr	r0, [r7, #4]
 8002af4:	f000 f9cf 	bl	8002e96 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	691b      	ldr	r3, [r3, #16]
 8002afe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b02:	2b80      	cmp	r3, #128	; 0x80
 8002b04:	d10e      	bne.n	8002b24 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	68db      	ldr	r3, [r3, #12]
 8002b0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b10:	2b80      	cmp	r3, #128	; 0x80
 8002b12:	d107      	bne.n	8002b24 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002b1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002b1e:	6878      	ldr	r0, [r7, #4]
 8002b20:	f000 fd78 	bl	8003614 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	691b      	ldr	r3, [r3, #16]
 8002b2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b2e:	2b40      	cmp	r3, #64	; 0x40
 8002b30:	d10e      	bne.n	8002b50 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	68db      	ldr	r3, [r3, #12]
 8002b38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b3c:	2b40      	cmp	r3, #64	; 0x40
 8002b3e:	d107      	bne.n	8002b50 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002b48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002b4a:	6878      	ldr	r0, [r7, #4]
 8002b4c:	f000 f9c1 	bl	8002ed2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	691b      	ldr	r3, [r3, #16]
 8002b56:	f003 0320 	and.w	r3, r3, #32
 8002b5a:	2b20      	cmp	r3, #32
 8002b5c:	d10e      	bne.n	8002b7c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	68db      	ldr	r3, [r3, #12]
 8002b64:	f003 0320 	and.w	r3, r3, #32
 8002b68:	2b20      	cmp	r3, #32
 8002b6a:	d107      	bne.n	8002b7c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f06f 0220 	mvn.w	r2, #32
 8002b74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002b76:	6878      	ldr	r0, [r7, #4]
 8002b78:	f000 fd42 	bl	8003600 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002b7c:	bf00      	nop
 8002b7e:	3708      	adds	r7, #8
 8002b80:	46bd      	mov	sp, r7
 8002b82:	bd80      	pop	{r7, pc}

08002b84 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b086      	sub	sp, #24
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	60f8      	str	r0, [r7, #12]
 8002b8c:	60b9      	str	r1, [r7, #8]
 8002b8e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b90:	2300      	movs	r3, #0
 8002b92:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b9a:	2b01      	cmp	r3, #1
 8002b9c:	d101      	bne.n	8002ba2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002b9e:	2302      	movs	r3, #2
 8002ba0:	e0ae      	b.n	8002d00 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	2201      	movs	r2, #1
 8002ba6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	2b0c      	cmp	r3, #12
 8002bae:	f200 809f 	bhi.w	8002cf0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002bb2:	a201      	add	r2, pc, #4	; (adr r2, 8002bb8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002bb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bb8:	08002bed 	.word	0x08002bed
 8002bbc:	08002cf1 	.word	0x08002cf1
 8002bc0:	08002cf1 	.word	0x08002cf1
 8002bc4:	08002cf1 	.word	0x08002cf1
 8002bc8:	08002c2d 	.word	0x08002c2d
 8002bcc:	08002cf1 	.word	0x08002cf1
 8002bd0:	08002cf1 	.word	0x08002cf1
 8002bd4:	08002cf1 	.word	0x08002cf1
 8002bd8:	08002c6f 	.word	0x08002c6f
 8002bdc:	08002cf1 	.word	0x08002cf1
 8002be0:	08002cf1 	.word	0x08002cf1
 8002be4:	08002cf1 	.word	0x08002cf1
 8002be8:	08002caf 	.word	0x08002caf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	68b9      	ldr	r1, [r7, #8]
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	f000 f9f8 	bl	8002fe8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	699a      	ldr	r2, [r3, #24]
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f042 0208 	orr.w	r2, r2, #8
 8002c06:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	699a      	ldr	r2, [r3, #24]
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f022 0204 	bic.w	r2, r2, #4
 8002c16:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	6999      	ldr	r1, [r3, #24]
 8002c1e:	68bb      	ldr	r3, [r7, #8]
 8002c20:	691a      	ldr	r2, [r3, #16]
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	430a      	orrs	r2, r1
 8002c28:	619a      	str	r2, [r3, #24]
      break;
 8002c2a:	e064      	b.n	8002cf6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	68b9      	ldr	r1, [r7, #8]
 8002c32:	4618      	mov	r0, r3
 8002c34:	f000 fa3e 	bl	80030b4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	699a      	ldr	r2, [r3, #24]
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002c46:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	699a      	ldr	r2, [r3, #24]
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c56:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	6999      	ldr	r1, [r3, #24]
 8002c5e:	68bb      	ldr	r3, [r7, #8]
 8002c60:	691b      	ldr	r3, [r3, #16]
 8002c62:	021a      	lsls	r2, r3, #8
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	430a      	orrs	r2, r1
 8002c6a:	619a      	str	r2, [r3, #24]
      break;
 8002c6c:	e043      	b.n	8002cf6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	68b9      	ldr	r1, [r7, #8]
 8002c74:	4618      	mov	r0, r3
 8002c76:	f000 fa89 	bl	800318c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	69da      	ldr	r2, [r3, #28]
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f042 0208 	orr.w	r2, r2, #8
 8002c88:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	69da      	ldr	r2, [r3, #28]
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f022 0204 	bic.w	r2, r2, #4
 8002c98:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	69d9      	ldr	r1, [r3, #28]
 8002ca0:	68bb      	ldr	r3, [r7, #8]
 8002ca2:	691a      	ldr	r2, [r3, #16]
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	430a      	orrs	r2, r1
 8002caa:	61da      	str	r2, [r3, #28]
      break;
 8002cac:	e023      	b.n	8002cf6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	68b9      	ldr	r1, [r7, #8]
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	f000 fad3 	bl	8003260 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	69da      	ldr	r2, [r3, #28]
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002cc8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	69da      	ldr	r2, [r3, #28]
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002cd8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	69d9      	ldr	r1, [r3, #28]
 8002ce0:	68bb      	ldr	r3, [r7, #8]
 8002ce2:	691b      	ldr	r3, [r3, #16]
 8002ce4:	021a      	lsls	r2, r3, #8
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	430a      	orrs	r2, r1
 8002cec:	61da      	str	r2, [r3, #28]
      break;
 8002cee:	e002      	b.n	8002cf6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002cf0:	2301      	movs	r3, #1
 8002cf2:	75fb      	strb	r3, [r7, #23]
      break;
 8002cf4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002cfe:	7dfb      	ldrb	r3, [r7, #23]
}
 8002d00:	4618      	mov	r0, r3
 8002d02:	3718      	adds	r7, #24
 8002d04:	46bd      	mov	sp, r7
 8002d06:	bd80      	pop	{r7, pc}

08002d08 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b084      	sub	sp, #16
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
 8002d10:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002d12:	2300      	movs	r3, #0
 8002d14:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d1c:	2b01      	cmp	r3, #1
 8002d1e:	d101      	bne.n	8002d24 <HAL_TIM_ConfigClockSource+0x1c>
 8002d20:	2302      	movs	r3, #2
 8002d22:	e0b4      	b.n	8002e8e <HAL_TIM_ConfigClockSource+0x186>
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	2201      	movs	r2, #1
 8002d28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2202      	movs	r2, #2
 8002d30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	689b      	ldr	r3, [r3, #8]
 8002d3a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002d3c:	68bb      	ldr	r3, [r7, #8]
 8002d3e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002d42:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002d44:	68bb      	ldr	r3, [r7, #8]
 8002d46:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002d4a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	68ba      	ldr	r2, [r7, #8]
 8002d52:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d5c:	d03e      	beq.n	8002ddc <HAL_TIM_ConfigClockSource+0xd4>
 8002d5e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d62:	f200 8087 	bhi.w	8002e74 <HAL_TIM_ConfigClockSource+0x16c>
 8002d66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d6a:	f000 8086 	beq.w	8002e7a <HAL_TIM_ConfigClockSource+0x172>
 8002d6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d72:	d87f      	bhi.n	8002e74 <HAL_TIM_ConfigClockSource+0x16c>
 8002d74:	2b70      	cmp	r3, #112	; 0x70
 8002d76:	d01a      	beq.n	8002dae <HAL_TIM_ConfigClockSource+0xa6>
 8002d78:	2b70      	cmp	r3, #112	; 0x70
 8002d7a:	d87b      	bhi.n	8002e74 <HAL_TIM_ConfigClockSource+0x16c>
 8002d7c:	2b60      	cmp	r3, #96	; 0x60
 8002d7e:	d050      	beq.n	8002e22 <HAL_TIM_ConfigClockSource+0x11a>
 8002d80:	2b60      	cmp	r3, #96	; 0x60
 8002d82:	d877      	bhi.n	8002e74 <HAL_TIM_ConfigClockSource+0x16c>
 8002d84:	2b50      	cmp	r3, #80	; 0x50
 8002d86:	d03c      	beq.n	8002e02 <HAL_TIM_ConfigClockSource+0xfa>
 8002d88:	2b50      	cmp	r3, #80	; 0x50
 8002d8a:	d873      	bhi.n	8002e74 <HAL_TIM_ConfigClockSource+0x16c>
 8002d8c:	2b40      	cmp	r3, #64	; 0x40
 8002d8e:	d058      	beq.n	8002e42 <HAL_TIM_ConfigClockSource+0x13a>
 8002d90:	2b40      	cmp	r3, #64	; 0x40
 8002d92:	d86f      	bhi.n	8002e74 <HAL_TIM_ConfigClockSource+0x16c>
 8002d94:	2b30      	cmp	r3, #48	; 0x30
 8002d96:	d064      	beq.n	8002e62 <HAL_TIM_ConfigClockSource+0x15a>
 8002d98:	2b30      	cmp	r3, #48	; 0x30
 8002d9a:	d86b      	bhi.n	8002e74 <HAL_TIM_ConfigClockSource+0x16c>
 8002d9c:	2b20      	cmp	r3, #32
 8002d9e:	d060      	beq.n	8002e62 <HAL_TIM_ConfigClockSource+0x15a>
 8002da0:	2b20      	cmp	r3, #32
 8002da2:	d867      	bhi.n	8002e74 <HAL_TIM_ConfigClockSource+0x16c>
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d05c      	beq.n	8002e62 <HAL_TIM_ConfigClockSource+0x15a>
 8002da8:	2b10      	cmp	r3, #16
 8002daa:	d05a      	beq.n	8002e62 <HAL_TIM_ConfigClockSource+0x15a>
 8002dac:	e062      	b.n	8002e74 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6818      	ldr	r0, [r3, #0]
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	6899      	ldr	r1, [r3, #8]
 8002db6:	683b      	ldr	r3, [r7, #0]
 8002db8:	685a      	ldr	r2, [r3, #4]
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	68db      	ldr	r3, [r3, #12]
 8002dbe:	f000 fb19 	bl	80033f4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	689b      	ldr	r3, [r3, #8]
 8002dc8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002dca:	68bb      	ldr	r3, [r7, #8]
 8002dcc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002dd0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	68ba      	ldr	r2, [r7, #8]
 8002dd8:	609a      	str	r2, [r3, #8]
      break;
 8002dda:	e04f      	b.n	8002e7c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6818      	ldr	r0, [r3, #0]
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	6899      	ldr	r1, [r3, #8]
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	685a      	ldr	r2, [r3, #4]
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	68db      	ldr	r3, [r3, #12]
 8002dec:	f000 fb02 	bl	80033f4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	689a      	ldr	r2, [r3, #8]
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002dfe:	609a      	str	r2, [r3, #8]
      break;
 8002e00:	e03c      	b.n	8002e7c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	6818      	ldr	r0, [r3, #0]
 8002e06:	683b      	ldr	r3, [r7, #0]
 8002e08:	6859      	ldr	r1, [r3, #4]
 8002e0a:	683b      	ldr	r3, [r7, #0]
 8002e0c:	68db      	ldr	r3, [r3, #12]
 8002e0e:	461a      	mov	r2, r3
 8002e10:	f000 fa76 	bl	8003300 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	2150      	movs	r1, #80	; 0x50
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	f000 facf 	bl	80033be <TIM_ITRx_SetConfig>
      break;
 8002e20:	e02c      	b.n	8002e7c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6818      	ldr	r0, [r3, #0]
 8002e26:	683b      	ldr	r3, [r7, #0]
 8002e28:	6859      	ldr	r1, [r3, #4]
 8002e2a:	683b      	ldr	r3, [r7, #0]
 8002e2c:	68db      	ldr	r3, [r3, #12]
 8002e2e:	461a      	mov	r2, r3
 8002e30:	f000 fa95 	bl	800335e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	2160      	movs	r1, #96	; 0x60
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	f000 fabf 	bl	80033be <TIM_ITRx_SetConfig>
      break;
 8002e40:	e01c      	b.n	8002e7c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6818      	ldr	r0, [r3, #0]
 8002e46:	683b      	ldr	r3, [r7, #0]
 8002e48:	6859      	ldr	r1, [r3, #4]
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	68db      	ldr	r3, [r3, #12]
 8002e4e:	461a      	mov	r2, r3
 8002e50:	f000 fa56 	bl	8003300 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	2140      	movs	r1, #64	; 0x40
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	f000 faaf 	bl	80033be <TIM_ITRx_SetConfig>
      break;
 8002e60:	e00c      	b.n	8002e7c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681a      	ldr	r2, [r3, #0]
 8002e66:	683b      	ldr	r3, [r7, #0]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	4619      	mov	r1, r3
 8002e6c:	4610      	mov	r0, r2
 8002e6e:	f000 faa6 	bl	80033be <TIM_ITRx_SetConfig>
      break;
 8002e72:	e003      	b.n	8002e7c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002e74:	2301      	movs	r3, #1
 8002e76:	73fb      	strb	r3, [r7, #15]
      break;
 8002e78:	e000      	b.n	8002e7c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002e7a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2201      	movs	r2, #1
 8002e80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2200      	movs	r2, #0
 8002e88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002e8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e8e:	4618      	mov	r0, r3
 8002e90:	3710      	adds	r7, #16
 8002e92:	46bd      	mov	sp, r7
 8002e94:	bd80      	pop	{r7, pc}

08002e96 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002e96:	b480      	push	{r7}
 8002e98:	b083      	sub	sp, #12
 8002e9a:	af00      	add	r7, sp, #0
 8002e9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002e9e:	bf00      	nop
 8002ea0:	370c      	adds	r7, #12
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea8:	4770      	bx	lr

08002eaa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002eaa:	b480      	push	{r7}
 8002eac:	b083      	sub	sp, #12
 8002eae:	af00      	add	r7, sp, #0
 8002eb0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002eb2:	bf00      	nop
 8002eb4:	370c      	adds	r7, #12
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ebc:	4770      	bx	lr

08002ebe <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002ebe:	b480      	push	{r7}
 8002ec0:	b083      	sub	sp, #12
 8002ec2:	af00      	add	r7, sp, #0
 8002ec4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002ec6:	bf00      	nop
 8002ec8:	370c      	adds	r7, #12
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed0:	4770      	bx	lr

08002ed2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002ed2:	b480      	push	{r7}
 8002ed4:	b083      	sub	sp, #12
 8002ed6:	af00      	add	r7, sp, #0
 8002ed8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002eda:	bf00      	nop
 8002edc:	370c      	adds	r7, #12
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee4:	4770      	bx	lr
	...

08002ee8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002ee8:	b480      	push	{r7}
 8002eea:	b085      	sub	sp, #20
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
 8002ef0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	4a34      	ldr	r2, [pc, #208]	; (8002fcc <TIM_Base_SetConfig+0xe4>)
 8002efc:	4293      	cmp	r3, r2
 8002efe:	d00f      	beq.n	8002f20 <TIM_Base_SetConfig+0x38>
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f06:	d00b      	beq.n	8002f20 <TIM_Base_SetConfig+0x38>
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	4a31      	ldr	r2, [pc, #196]	; (8002fd0 <TIM_Base_SetConfig+0xe8>)
 8002f0c:	4293      	cmp	r3, r2
 8002f0e:	d007      	beq.n	8002f20 <TIM_Base_SetConfig+0x38>
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	4a30      	ldr	r2, [pc, #192]	; (8002fd4 <TIM_Base_SetConfig+0xec>)
 8002f14:	4293      	cmp	r3, r2
 8002f16:	d003      	beq.n	8002f20 <TIM_Base_SetConfig+0x38>
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	4a2f      	ldr	r2, [pc, #188]	; (8002fd8 <TIM_Base_SetConfig+0xf0>)
 8002f1c:	4293      	cmp	r3, r2
 8002f1e:	d108      	bne.n	8002f32 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f26:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	685b      	ldr	r3, [r3, #4]
 8002f2c:	68fa      	ldr	r2, [r7, #12]
 8002f2e:	4313      	orrs	r3, r2
 8002f30:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	4a25      	ldr	r2, [pc, #148]	; (8002fcc <TIM_Base_SetConfig+0xe4>)
 8002f36:	4293      	cmp	r3, r2
 8002f38:	d01b      	beq.n	8002f72 <TIM_Base_SetConfig+0x8a>
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f40:	d017      	beq.n	8002f72 <TIM_Base_SetConfig+0x8a>
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	4a22      	ldr	r2, [pc, #136]	; (8002fd0 <TIM_Base_SetConfig+0xe8>)
 8002f46:	4293      	cmp	r3, r2
 8002f48:	d013      	beq.n	8002f72 <TIM_Base_SetConfig+0x8a>
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	4a21      	ldr	r2, [pc, #132]	; (8002fd4 <TIM_Base_SetConfig+0xec>)
 8002f4e:	4293      	cmp	r3, r2
 8002f50:	d00f      	beq.n	8002f72 <TIM_Base_SetConfig+0x8a>
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	4a20      	ldr	r2, [pc, #128]	; (8002fd8 <TIM_Base_SetConfig+0xf0>)
 8002f56:	4293      	cmp	r3, r2
 8002f58:	d00b      	beq.n	8002f72 <TIM_Base_SetConfig+0x8a>
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	4a1f      	ldr	r2, [pc, #124]	; (8002fdc <TIM_Base_SetConfig+0xf4>)
 8002f5e:	4293      	cmp	r3, r2
 8002f60:	d007      	beq.n	8002f72 <TIM_Base_SetConfig+0x8a>
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	4a1e      	ldr	r2, [pc, #120]	; (8002fe0 <TIM_Base_SetConfig+0xf8>)
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d003      	beq.n	8002f72 <TIM_Base_SetConfig+0x8a>
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	4a1d      	ldr	r2, [pc, #116]	; (8002fe4 <TIM_Base_SetConfig+0xfc>)
 8002f6e:	4293      	cmp	r3, r2
 8002f70:	d108      	bne.n	8002f84 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f78:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002f7a:	683b      	ldr	r3, [r7, #0]
 8002f7c:	68db      	ldr	r3, [r3, #12]
 8002f7e:	68fa      	ldr	r2, [r7, #12]
 8002f80:	4313      	orrs	r3, r2
 8002f82:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	695b      	ldr	r3, [r3, #20]
 8002f8e:	4313      	orrs	r3, r2
 8002f90:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	68fa      	ldr	r2, [r7, #12]
 8002f96:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	689a      	ldr	r2, [r3, #8]
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	681a      	ldr	r2, [r3, #0]
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	4a08      	ldr	r2, [pc, #32]	; (8002fcc <TIM_Base_SetConfig+0xe4>)
 8002fac:	4293      	cmp	r3, r2
 8002fae:	d103      	bne.n	8002fb8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	691a      	ldr	r2, [r3, #16]
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	2201      	movs	r2, #1
 8002fbc:	615a      	str	r2, [r3, #20]
}
 8002fbe:	bf00      	nop
 8002fc0:	3714      	adds	r7, #20
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc8:	4770      	bx	lr
 8002fca:	bf00      	nop
 8002fcc:	40010000 	.word	0x40010000
 8002fd0:	40000400 	.word	0x40000400
 8002fd4:	40000800 	.word	0x40000800
 8002fd8:	40000c00 	.word	0x40000c00
 8002fdc:	40014000 	.word	0x40014000
 8002fe0:	40014400 	.word	0x40014400
 8002fe4:	40014800 	.word	0x40014800

08002fe8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002fe8:	b480      	push	{r7}
 8002fea:	b087      	sub	sp, #28
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
 8002ff0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6a1b      	ldr	r3, [r3, #32]
 8002ff6:	f023 0201 	bic.w	r2, r3, #1
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	6a1b      	ldr	r3, [r3, #32]
 8003002:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	685b      	ldr	r3, [r3, #4]
 8003008:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	699b      	ldr	r3, [r3, #24]
 800300e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003016:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	f023 0303 	bic.w	r3, r3, #3
 800301e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	68fa      	ldr	r2, [r7, #12]
 8003026:	4313      	orrs	r3, r2
 8003028:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800302a:	697b      	ldr	r3, [r7, #20]
 800302c:	f023 0302 	bic.w	r3, r3, #2
 8003030:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	689b      	ldr	r3, [r3, #8]
 8003036:	697a      	ldr	r2, [r7, #20]
 8003038:	4313      	orrs	r3, r2
 800303a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	4a1c      	ldr	r2, [pc, #112]	; (80030b0 <TIM_OC1_SetConfig+0xc8>)
 8003040:	4293      	cmp	r3, r2
 8003042:	d10c      	bne.n	800305e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003044:	697b      	ldr	r3, [r7, #20]
 8003046:	f023 0308 	bic.w	r3, r3, #8
 800304a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	68db      	ldr	r3, [r3, #12]
 8003050:	697a      	ldr	r2, [r7, #20]
 8003052:	4313      	orrs	r3, r2
 8003054:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003056:	697b      	ldr	r3, [r7, #20]
 8003058:	f023 0304 	bic.w	r3, r3, #4
 800305c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	4a13      	ldr	r2, [pc, #76]	; (80030b0 <TIM_OC1_SetConfig+0xc8>)
 8003062:	4293      	cmp	r3, r2
 8003064:	d111      	bne.n	800308a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003066:	693b      	ldr	r3, [r7, #16]
 8003068:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800306c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800306e:	693b      	ldr	r3, [r7, #16]
 8003070:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003074:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003076:	683b      	ldr	r3, [r7, #0]
 8003078:	695b      	ldr	r3, [r3, #20]
 800307a:	693a      	ldr	r2, [r7, #16]
 800307c:	4313      	orrs	r3, r2
 800307e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	699b      	ldr	r3, [r3, #24]
 8003084:	693a      	ldr	r2, [r7, #16]
 8003086:	4313      	orrs	r3, r2
 8003088:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	693a      	ldr	r2, [r7, #16]
 800308e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	68fa      	ldr	r2, [r7, #12]
 8003094:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003096:	683b      	ldr	r3, [r7, #0]
 8003098:	685a      	ldr	r2, [r3, #4]
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	697a      	ldr	r2, [r7, #20]
 80030a2:	621a      	str	r2, [r3, #32]
}
 80030a4:	bf00      	nop
 80030a6:	371c      	adds	r7, #28
 80030a8:	46bd      	mov	sp, r7
 80030aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ae:	4770      	bx	lr
 80030b0:	40010000 	.word	0x40010000

080030b4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80030b4:	b480      	push	{r7}
 80030b6:	b087      	sub	sp, #28
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
 80030bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6a1b      	ldr	r3, [r3, #32]
 80030c2:	f023 0210 	bic.w	r2, r3, #16
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6a1b      	ldr	r3, [r3, #32]
 80030ce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	685b      	ldr	r3, [r3, #4]
 80030d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	699b      	ldr	r3, [r3, #24]
 80030da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80030e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80030ea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	021b      	lsls	r3, r3, #8
 80030f2:	68fa      	ldr	r2, [r7, #12]
 80030f4:	4313      	orrs	r3, r2
 80030f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80030f8:	697b      	ldr	r3, [r7, #20]
 80030fa:	f023 0320 	bic.w	r3, r3, #32
 80030fe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	689b      	ldr	r3, [r3, #8]
 8003104:	011b      	lsls	r3, r3, #4
 8003106:	697a      	ldr	r2, [r7, #20]
 8003108:	4313      	orrs	r3, r2
 800310a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	4a1e      	ldr	r2, [pc, #120]	; (8003188 <TIM_OC2_SetConfig+0xd4>)
 8003110:	4293      	cmp	r3, r2
 8003112:	d10d      	bne.n	8003130 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003114:	697b      	ldr	r3, [r7, #20]
 8003116:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800311a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	68db      	ldr	r3, [r3, #12]
 8003120:	011b      	lsls	r3, r3, #4
 8003122:	697a      	ldr	r2, [r7, #20]
 8003124:	4313      	orrs	r3, r2
 8003126:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003128:	697b      	ldr	r3, [r7, #20]
 800312a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800312e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	4a15      	ldr	r2, [pc, #84]	; (8003188 <TIM_OC2_SetConfig+0xd4>)
 8003134:	4293      	cmp	r3, r2
 8003136:	d113      	bne.n	8003160 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003138:	693b      	ldr	r3, [r7, #16]
 800313a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800313e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003140:	693b      	ldr	r3, [r7, #16]
 8003142:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003146:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	695b      	ldr	r3, [r3, #20]
 800314c:	009b      	lsls	r3, r3, #2
 800314e:	693a      	ldr	r2, [r7, #16]
 8003150:	4313      	orrs	r3, r2
 8003152:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	699b      	ldr	r3, [r3, #24]
 8003158:	009b      	lsls	r3, r3, #2
 800315a:	693a      	ldr	r2, [r7, #16]
 800315c:	4313      	orrs	r3, r2
 800315e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	693a      	ldr	r2, [r7, #16]
 8003164:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	68fa      	ldr	r2, [r7, #12]
 800316a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	685a      	ldr	r2, [r3, #4]
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	697a      	ldr	r2, [r7, #20]
 8003178:	621a      	str	r2, [r3, #32]
}
 800317a:	bf00      	nop
 800317c:	371c      	adds	r7, #28
 800317e:	46bd      	mov	sp, r7
 8003180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003184:	4770      	bx	lr
 8003186:	bf00      	nop
 8003188:	40010000 	.word	0x40010000

0800318c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800318c:	b480      	push	{r7}
 800318e:	b087      	sub	sp, #28
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
 8003194:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6a1b      	ldr	r3, [r3, #32]
 800319a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6a1b      	ldr	r3, [r3, #32]
 80031a6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	685b      	ldr	r3, [r3, #4]
 80031ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	69db      	ldr	r3, [r3, #28]
 80031b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	f023 0303 	bic.w	r3, r3, #3
 80031c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	68fa      	ldr	r2, [r7, #12]
 80031ca:	4313      	orrs	r3, r2
 80031cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80031ce:	697b      	ldr	r3, [r7, #20]
 80031d0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80031d4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80031d6:	683b      	ldr	r3, [r7, #0]
 80031d8:	689b      	ldr	r3, [r3, #8]
 80031da:	021b      	lsls	r3, r3, #8
 80031dc:	697a      	ldr	r2, [r7, #20]
 80031de:	4313      	orrs	r3, r2
 80031e0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	4a1d      	ldr	r2, [pc, #116]	; (800325c <TIM_OC3_SetConfig+0xd0>)
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d10d      	bne.n	8003206 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80031ea:	697b      	ldr	r3, [r7, #20]
 80031ec:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80031f0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80031f2:	683b      	ldr	r3, [r7, #0]
 80031f4:	68db      	ldr	r3, [r3, #12]
 80031f6:	021b      	lsls	r3, r3, #8
 80031f8:	697a      	ldr	r2, [r7, #20]
 80031fa:	4313      	orrs	r3, r2
 80031fc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80031fe:	697b      	ldr	r3, [r7, #20]
 8003200:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003204:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	4a14      	ldr	r2, [pc, #80]	; (800325c <TIM_OC3_SetConfig+0xd0>)
 800320a:	4293      	cmp	r3, r2
 800320c:	d113      	bne.n	8003236 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800320e:	693b      	ldr	r3, [r7, #16]
 8003210:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003214:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003216:	693b      	ldr	r3, [r7, #16]
 8003218:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800321c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800321e:	683b      	ldr	r3, [r7, #0]
 8003220:	695b      	ldr	r3, [r3, #20]
 8003222:	011b      	lsls	r3, r3, #4
 8003224:	693a      	ldr	r2, [r7, #16]
 8003226:	4313      	orrs	r3, r2
 8003228:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	699b      	ldr	r3, [r3, #24]
 800322e:	011b      	lsls	r3, r3, #4
 8003230:	693a      	ldr	r2, [r7, #16]
 8003232:	4313      	orrs	r3, r2
 8003234:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	693a      	ldr	r2, [r7, #16]
 800323a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	68fa      	ldr	r2, [r7, #12]
 8003240:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	685a      	ldr	r2, [r3, #4]
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	697a      	ldr	r2, [r7, #20]
 800324e:	621a      	str	r2, [r3, #32]
}
 8003250:	bf00      	nop
 8003252:	371c      	adds	r7, #28
 8003254:	46bd      	mov	sp, r7
 8003256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325a:	4770      	bx	lr
 800325c:	40010000 	.word	0x40010000

08003260 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003260:	b480      	push	{r7}
 8003262:	b087      	sub	sp, #28
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
 8003268:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6a1b      	ldr	r3, [r3, #32]
 800326e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6a1b      	ldr	r3, [r3, #32]
 800327a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	685b      	ldr	r3, [r3, #4]
 8003280:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	69db      	ldr	r3, [r3, #28]
 8003286:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800328e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003296:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	021b      	lsls	r3, r3, #8
 800329e:	68fa      	ldr	r2, [r7, #12]
 80032a0:	4313      	orrs	r3, r2
 80032a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80032a4:	693b      	ldr	r3, [r7, #16]
 80032a6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80032aa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	689b      	ldr	r3, [r3, #8]
 80032b0:	031b      	lsls	r3, r3, #12
 80032b2:	693a      	ldr	r2, [r7, #16]
 80032b4:	4313      	orrs	r3, r2
 80032b6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	4a10      	ldr	r2, [pc, #64]	; (80032fc <TIM_OC4_SetConfig+0x9c>)
 80032bc:	4293      	cmp	r3, r2
 80032be:	d109      	bne.n	80032d4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80032c0:	697b      	ldr	r3, [r7, #20]
 80032c2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80032c6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80032c8:	683b      	ldr	r3, [r7, #0]
 80032ca:	695b      	ldr	r3, [r3, #20]
 80032cc:	019b      	lsls	r3, r3, #6
 80032ce:	697a      	ldr	r2, [r7, #20]
 80032d0:	4313      	orrs	r3, r2
 80032d2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	697a      	ldr	r2, [r7, #20]
 80032d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	68fa      	ldr	r2, [r7, #12]
 80032de:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	685a      	ldr	r2, [r3, #4]
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	693a      	ldr	r2, [r7, #16]
 80032ec:	621a      	str	r2, [r3, #32]
}
 80032ee:	bf00      	nop
 80032f0:	371c      	adds	r7, #28
 80032f2:	46bd      	mov	sp, r7
 80032f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f8:	4770      	bx	lr
 80032fa:	bf00      	nop
 80032fc:	40010000 	.word	0x40010000

08003300 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003300:	b480      	push	{r7}
 8003302:	b087      	sub	sp, #28
 8003304:	af00      	add	r7, sp, #0
 8003306:	60f8      	str	r0, [r7, #12]
 8003308:	60b9      	str	r1, [r7, #8]
 800330a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	6a1b      	ldr	r3, [r3, #32]
 8003310:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	6a1b      	ldr	r3, [r3, #32]
 8003316:	f023 0201 	bic.w	r2, r3, #1
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	699b      	ldr	r3, [r3, #24]
 8003322:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003324:	693b      	ldr	r3, [r7, #16]
 8003326:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800332a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	011b      	lsls	r3, r3, #4
 8003330:	693a      	ldr	r2, [r7, #16]
 8003332:	4313      	orrs	r3, r2
 8003334:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003336:	697b      	ldr	r3, [r7, #20]
 8003338:	f023 030a 	bic.w	r3, r3, #10
 800333c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800333e:	697a      	ldr	r2, [r7, #20]
 8003340:	68bb      	ldr	r3, [r7, #8]
 8003342:	4313      	orrs	r3, r2
 8003344:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	693a      	ldr	r2, [r7, #16]
 800334a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	697a      	ldr	r2, [r7, #20]
 8003350:	621a      	str	r2, [r3, #32]
}
 8003352:	bf00      	nop
 8003354:	371c      	adds	r7, #28
 8003356:	46bd      	mov	sp, r7
 8003358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335c:	4770      	bx	lr

0800335e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800335e:	b480      	push	{r7}
 8003360:	b087      	sub	sp, #28
 8003362:	af00      	add	r7, sp, #0
 8003364:	60f8      	str	r0, [r7, #12]
 8003366:	60b9      	str	r1, [r7, #8]
 8003368:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	6a1b      	ldr	r3, [r3, #32]
 800336e:	f023 0210 	bic.w	r2, r3, #16
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	699b      	ldr	r3, [r3, #24]
 800337a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	6a1b      	ldr	r3, [r3, #32]
 8003380:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003382:	697b      	ldr	r3, [r7, #20]
 8003384:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003388:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	031b      	lsls	r3, r3, #12
 800338e:	697a      	ldr	r2, [r7, #20]
 8003390:	4313      	orrs	r3, r2
 8003392:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003394:	693b      	ldr	r3, [r7, #16]
 8003396:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800339a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800339c:	68bb      	ldr	r3, [r7, #8]
 800339e:	011b      	lsls	r3, r3, #4
 80033a0:	693a      	ldr	r2, [r7, #16]
 80033a2:	4313      	orrs	r3, r2
 80033a4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	697a      	ldr	r2, [r7, #20]
 80033aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	693a      	ldr	r2, [r7, #16]
 80033b0:	621a      	str	r2, [r3, #32]
}
 80033b2:	bf00      	nop
 80033b4:	371c      	adds	r7, #28
 80033b6:	46bd      	mov	sp, r7
 80033b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033bc:	4770      	bx	lr

080033be <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80033be:	b480      	push	{r7}
 80033c0:	b085      	sub	sp, #20
 80033c2:	af00      	add	r7, sp, #0
 80033c4:	6078      	str	r0, [r7, #4]
 80033c6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	689b      	ldr	r3, [r3, #8]
 80033cc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033d4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80033d6:	683a      	ldr	r2, [r7, #0]
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	4313      	orrs	r3, r2
 80033dc:	f043 0307 	orr.w	r3, r3, #7
 80033e0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	68fa      	ldr	r2, [r7, #12]
 80033e6:	609a      	str	r2, [r3, #8]
}
 80033e8:	bf00      	nop
 80033ea:	3714      	adds	r7, #20
 80033ec:	46bd      	mov	sp, r7
 80033ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f2:	4770      	bx	lr

080033f4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80033f4:	b480      	push	{r7}
 80033f6:	b087      	sub	sp, #28
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	60f8      	str	r0, [r7, #12]
 80033fc:	60b9      	str	r1, [r7, #8]
 80033fe:	607a      	str	r2, [r7, #4]
 8003400:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	689b      	ldr	r3, [r3, #8]
 8003406:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003408:	697b      	ldr	r3, [r7, #20]
 800340a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800340e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	021a      	lsls	r2, r3, #8
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	431a      	orrs	r2, r3
 8003418:	68bb      	ldr	r3, [r7, #8]
 800341a:	4313      	orrs	r3, r2
 800341c:	697a      	ldr	r2, [r7, #20]
 800341e:	4313      	orrs	r3, r2
 8003420:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	697a      	ldr	r2, [r7, #20]
 8003426:	609a      	str	r2, [r3, #8]
}
 8003428:	bf00      	nop
 800342a:	371c      	adds	r7, #28
 800342c:	46bd      	mov	sp, r7
 800342e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003432:	4770      	bx	lr

08003434 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003434:	b480      	push	{r7}
 8003436:	b087      	sub	sp, #28
 8003438:	af00      	add	r7, sp, #0
 800343a:	60f8      	str	r0, [r7, #12]
 800343c:	60b9      	str	r1, [r7, #8]
 800343e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003440:	68bb      	ldr	r3, [r7, #8]
 8003442:	f003 031f 	and.w	r3, r3, #31
 8003446:	2201      	movs	r2, #1
 8003448:	fa02 f303 	lsl.w	r3, r2, r3
 800344c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	6a1a      	ldr	r2, [r3, #32]
 8003452:	697b      	ldr	r3, [r7, #20]
 8003454:	43db      	mvns	r3, r3
 8003456:	401a      	ands	r2, r3
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	6a1a      	ldr	r2, [r3, #32]
 8003460:	68bb      	ldr	r3, [r7, #8]
 8003462:	f003 031f 	and.w	r3, r3, #31
 8003466:	6879      	ldr	r1, [r7, #4]
 8003468:	fa01 f303 	lsl.w	r3, r1, r3
 800346c:	431a      	orrs	r2, r3
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	621a      	str	r2, [r3, #32]
}
 8003472:	bf00      	nop
 8003474:	371c      	adds	r7, #28
 8003476:	46bd      	mov	sp, r7
 8003478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347c:	4770      	bx	lr
	...

08003480 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003480:	b480      	push	{r7}
 8003482:	b085      	sub	sp, #20
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]
 8003488:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003490:	2b01      	cmp	r3, #1
 8003492:	d101      	bne.n	8003498 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003494:	2302      	movs	r3, #2
 8003496:	e050      	b.n	800353a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2201      	movs	r2, #1
 800349c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2202      	movs	r2, #2
 80034a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	685b      	ldr	r3, [r3, #4]
 80034ae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	689b      	ldr	r3, [r3, #8]
 80034b6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034be:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80034c0:	683b      	ldr	r3, [r7, #0]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	68fa      	ldr	r2, [r7, #12]
 80034c6:	4313      	orrs	r3, r2
 80034c8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	68fa      	ldr	r2, [r7, #12]
 80034d0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	4a1c      	ldr	r2, [pc, #112]	; (8003548 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80034d8:	4293      	cmp	r3, r2
 80034da:	d018      	beq.n	800350e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034e4:	d013      	beq.n	800350e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	4a18      	ldr	r2, [pc, #96]	; (800354c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80034ec:	4293      	cmp	r3, r2
 80034ee:	d00e      	beq.n	800350e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	4a16      	ldr	r2, [pc, #88]	; (8003550 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80034f6:	4293      	cmp	r3, r2
 80034f8:	d009      	beq.n	800350e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	4a15      	ldr	r2, [pc, #84]	; (8003554 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003500:	4293      	cmp	r3, r2
 8003502:	d004      	beq.n	800350e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	4a13      	ldr	r2, [pc, #76]	; (8003558 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800350a:	4293      	cmp	r3, r2
 800350c:	d10c      	bne.n	8003528 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800350e:	68bb      	ldr	r3, [r7, #8]
 8003510:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003514:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003516:	683b      	ldr	r3, [r7, #0]
 8003518:	685b      	ldr	r3, [r3, #4]
 800351a:	68ba      	ldr	r2, [r7, #8]
 800351c:	4313      	orrs	r3, r2
 800351e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	68ba      	ldr	r2, [r7, #8]
 8003526:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2201      	movs	r2, #1
 800352c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2200      	movs	r2, #0
 8003534:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003538:	2300      	movs	r3, #0
}
 800353a:	4618      	mov	r0, r3
 800353c:	3714      	adds	r7, #20
 800353e:	46bd      	mov	sp, r7
 8003540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003544:	4770      	bx	lr
 8003546:	bf00      	nop
 8003548:	40010000 	.word	0x40010000
 800354c:	40000400 	.word	0x40000400
 8003550:	40000800 	.word	0x40000800
 8003554:	40000c00 	.word	0x40000c00
 8003558:	40014000 	.word	0x40014000

0800355c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800355c:	b480      	push	{r7}
 800355e:	b085      	sub	sp, #20
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
 8003564:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003566:	2300      	movs	r3, #0
 8003568:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003570:	2b01      	cmp	r3, #1
 8003572:	d101      	bne.n	8003578 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003574:	2302      	movs	r3, #2
 8003576:	e03d      	b.n	80035f4 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2201      	movs	r2, #1
 800357c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003586:	683b      	ldr	r3, [r7, #0]
 8003588:	68db      	ldr	r3, [r3, #12]
 800358a:	4313      	orrs	r3, r2
 800358c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	689b      	ldr	r3, [r3, #8]
 8003598:	4313      	orrs	r3, r2
 800359a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80035a2:	683b      	ldr	r3, [r7, #0]
 80035a4:	685b      	ldr	r3, [r3, #4]
 80035a6:	4313      	orrs	r3, r2
 80035a8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80035b0:	683b      	ldr	r3, [r7, #0]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	4313      	orrs	r3, r2
 80035b6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80035be:	683b      	ldr	r3, [r7, #0]
 80035c0:	691b      	ldr	r3, [r3, #16]
 80035c2:	4313      	orrs	r3, r2
 80035c4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	695b      	ldr	r3, [r3, #20]
 80035d0:	4313      	orrs	r3, r2
 80035d2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80035da:	683b      	ldr	r3, [r7, #0]
 80035dc:	69db      	ldr	r3, [r3, #28]
 80035de:	4313      	orrs	r3, r2
 80035e0:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	68fa      	ldr	r2, [r7, #12]
 80035e8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	2200      	movs	r2, #0
 80035ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80035f2:	2300      	movs	r3, #0
}
 80035f4:	4618      	mov	r0, r3
 80035f6:	3714      	adds	r7, #20
 80035f8:	46bd      	mov	sp, r7
 80035fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fe:	4770      	bx	lr

08003600 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003600:	b480      	push	{r7}
 8003602:	b083      	sub	sp, #12
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003608:	bf00      	nop
 800360a:	370c      	adds	r7, #12
 800360c:	46bd      	mov	sp, r7
 800360e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003612:	4770      	bx	lr

08003614 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003614:	b480      	push	{r7}
 8003616:	b083      	sub	sp, #12
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800361c:	bf00      	nop
 800361e:	370c      	adds	r7, #12
 8003620:	46bd      	mov	sp, r7
 8003622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003626:	4770      	bx	lr

08003628 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	b082      	sub	sp, #8
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2b00      	cmp	r3, #0
 8003634:	d101      	bne.n	800363a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003636:	2301      	movs	r3, #1
 8003638:	e03f      	b.n	80036ba <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003640:	b2db      	uxtb	r3, r3
 8003642:	2b00      	cmp	r3, #0
 8003644:	d106      	bne.n	8003654 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	2200      	movs	r2, #0
 800364a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800364e:	6878      	ldr	r0, [r7, #4]
 8003650:	f7fd fb22 	bl	8000c98 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2224      	movs	r2, #36	; 0x24
 8003658:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	68da      	ldr	r2, [r3, #12]
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800366a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800366c:	6878      	ldr	r0, [r7, #4]
 800366e:	f000 f929 	bl	80038c4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	691a      	ldr	r2, [r3, #16]
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003680:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	695a      	ldr	r2, [r3, #20]
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003690:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	68da      	ldr	r2, [r3, #12]
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80036a0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	2200      	movs	r2, #0
 80036a6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2220      	movs	r2, #32
 80036ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2220      	movs	r2, #32
 80036b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80036b8:	2300      	movs	r3, #0
}
 80036ba:	4618      	mov	r0, r3
 80036bc:	3708      	adds	r7, #8
 80036be:	46bd      	mov	sp, r7
 80036c0:	bd80      	pop	{r7, pc}

080036c2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80036c2:	b580      	push	{r7, lr}
 80036c4:	b08a      	sub	sp, #40	; 0x28
 80036c6:	af02      	add	r7, sp, #8
 80036c8:	60f8      	str	r0, [r7, #12]
 80036ca:	60b9      	str	r1, [r7, #8]
 80036cc:	603b      	str	r3, [r7, #0]
 80036ce:	4613      	mov	r3, r2
 80036d0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80036d2:	2300      	movs	r3, #0
 80036d4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036dc:	b2db      	uxtb	r3, r3
 80036de:	2b20      	cmp	r3, #32
 80036e0:	d17c      	bne.n	80037dc <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80036e2:	68bb      	ldr	r3, [r7, #8]
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d002      	beq.n	80036ee <HAL_UART_Transmit+0x2c>
 80036e8:	88fb      	ldrh	r3, [r7, #6]
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d101      	bne.n	80036f2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80036ee:	2301      	movs	r3, #1
 80036f0:	e075      	b.n	80037de <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80036f8:	2b01      	cmp	r3, #1
 80036fa:	d101      	bne.n	8003700 <HAL_UART_Transmit+0x3e>
 80036fc:	2302      	movs	r3, #2
 80036fe:	e06e      	b.n	80037de <HAL_UART_Transmit+0x11c>
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	2201      	movs	r2, #1
 8003704:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	2200      	movs	r2, #0
 800370c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	2221      	movs	r2, #33	; 0x21
 8003712:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003716:	f7fd fc43 	bl	8000fa0 <HAL_GetTick>
 800371a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	88fa      	ldrh	r2, [r7, #6]
 8003720:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	88fa      	ldrh	r2, [r7, #6]
 8003726:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	689b      	ldr	r3, [r3, #8]
 800372c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003730:	d108      	bne.n	8003744 <HAL_UART_Transmit+0x82>
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	691b      	ldr	r3, [r3, #16]
 8003736:	2b00      	cmp	r3, #0
 8003738:	d104      	bne.n	8003744 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800373a:	2300      	movs	r3, #0
 800373c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800373e:	68bb      	ldr	r3, [r7, #8]
 8003740:	61bb      	str	r3, [r7, #24]
 8003742:	e003      	b.n	800374c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003744:	68bb      	ldr	r3, [r7, #8]
 8003746:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003748:	2300      	movs	r3, #0
 800374a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	2200      	movs	r2, #0
 8003750:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003754:	e02a      	b.n	80037ac <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003756:	683b      	ldr	r3, [r7, #0]
 8003758:	9300      	str	r3, [sp, #0]
 800375a:	697b      	ldr	r3, [r7, #20]
 800375c:	2200      	movs	r2, #0
 800375e:	2180      	movs	r1, #128	; 0x80
 8003760:	68f8      	ldr	r0, [r7, #12]
 8003762:	f000 f840 	bl	80037e6 <UART_WaitOnFlagUntilTimeout>
 8003766:	4603      	mov	r3, r0
 8003768:	2b00      	cmp	r3, #0
 800376a:	d001      	beq.n	8003770 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800376c:	2303      	movs	r3, #3
 800376e:	e036      	b.n	80037de <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003770:	69fb      	ldr	r3, [r7, #28]
 8003772:	2b00      	cmp	r3, #0
 8003774:	d10b      	bne.n	800378e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003776:	69bb      	ldr	r3, [r7, #24]
 8003778:	881b      	ldrh	r3, [r3, #0]
 800377a:	461a      	mov	r2, r3
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003784:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003786:	69bb      	ldr	r3, [r7, #24]
 8003788:	3302      	adds	r3, #2
 800378a:	61bb      	str	r3, [r7, #24]
 800378c:	e007      	b.n	800379e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800378e:	69fb      	ldr	r3, [r7, #28]
 8003790:	781a      	ldrb	r2, [r3, #0]
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003798:	69fb      	ldr	r3, [r7, #28]
 800379a:	3301      	adds	r3, #1
 800379c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80037a2:	b29b      	uxth	r3, r3
 80037a4:	3b01      	subs	r3, #1
 80037a6:	b29a      	uxth	r2, r3
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80037b0:	b29b      	uxth	r3, r3
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d1cf      	bne.n	8003756 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80037b6:	683b      	ldr	r3, [r7, #0]
 80037b8:	9300      	str	r3, [sp, #0]
 80037ba:	697b      	ldr	r3, [r7, #20]
 80037bc:	2200      	movs	r2, #0
 80037be:	2140      	movs	r1, #64	; 0x40
 80037c0:	68f8      	ldr	r0, [r7, #12]
 80037c2:	f000 f810 	bl	80037e6 <UART_WaitOnFlagUntilTimeout>
 80037c6:	4603      	mov	r3, r0
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d001      	beq.n	80037d0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80037cc:	2303      	movs	r3, #3
 80037ce:	e006      	b.n	80037de <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	2220      	movs	r2, #32
 80037d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80037d8:	2300      	movs	r3, #0
 80037da:	e000      	b.n	80037de <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80037dc:	2302      	movs	r3, #2
  }
}
 80037de:	4618      	mov	r0, r3
 80037e0:	3720      	adds	r7, #32
 80037e2:	46bd      	mov	sp, r7
 80037e4:	bd80      	pop	{r7, pc}

080037e6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80037e6:	b580      	push	{r7, lr}
 80037e8:	b090      	sub	sp, #64	; 0x40
 80037ea:	af00      	add	r7, sp, #0
 80037ec:	60f8      	str	r0, [r7, #12]
 80037ee:	60b9      	str	r1, [r7, #8]
 80037f0:	603b      	str	r3, [r7, #0]
 80037f2:	4613      	mov	r3, r2
 80037f4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80037f6:	e050      	b.n	800389a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80037f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80037fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037fe:	d04c      	beq.n	800389a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003800:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003802:	2b00      	cmp	r3, #0
 8003804:	d007      	beq.n	8003816 <UART_WaitOnFlagUntilTimeout+0x30>
 8003806:	f7fd fbcb 	bl	8000fa0 <HAL_GetTick>
 800380a:	4602      	mov	r2, r0
 800380c:	683b      	ldr	r3, [r7, #0]
 800380e:	1ad3      	subs	r3, r2, r3
 8003810:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003812:	429a      	cmp	r2, r3
 8003814:	d241      	bcs.n	800389a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	330c      	adds	r3, #12
 800381c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800381e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003820:	e853 3f00 	ldrex	r3, [r3]
 8003824:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003828:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800382c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	330c      	adds	r3, #12
 8003834:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003836:	637a      	str	r2, [r7, #52]	; 0x34
 8003838:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800383a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800383c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800383e:	e841 2300 	strex	r3, r2, [r1]
 8003842:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003844:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003846:	2b00      	cmp	r3, #0
 8003848:	d1e5      	bne.n	8003816 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	3314      	adds	r3, #20
 8003850:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003852:	697b      	ldr	r3, [r7, #20]
 8003854:	e853 3f00 	ldrex	r3, [r3]
 8003858:	613b      	str	r3, [r7, #16]
   return(result);
 800385a:	693b      	ldr	r3, [r7, #16]
 800385c:	f023 0301 	bic.w	r3, r3, #1
 8003860:	63bb      	str	r3, [r7, #56]	; 0x38
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	3314      	adds	r3, #20
 8003868:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800386a:	623a      	str	r2, [r7, #32]
 800386c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800386e:	69f9      	ldr	r1, [r7, #28]
 8003870:	6a3a      	ldr	r2, [r7, #32]
 8003872:	e841 2300 	strex	r3, r2, [r1]
 8003876:	61bb      	str	r3, [r7, #24]
   return(result);
 8003878:	69bb      	ldr	r3, [r7, #24]
 800387a:	2b00      	cmp	r3, #0
 800387c:	d1e5      	bne.n	800384a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	2220      	movs	r2, #32
 8003882:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	2220      	movs	r2, #32
 800388a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	2200      	movs	r2, #0
 8003892:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003896:	2303      	movs	r3, #3
 8003898:	e00f      	b.n	80038ba <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	681a      	ldr	r2, [r3, #0]
 80038a0:	68bb      	ldr	r3, [r7, #8]
 80038a2:	4013      	ands	r3, r2
 80038a4:	68ba      	ldr	r2, [r7, #8]
 80038a6:	429a      	cmp	r2, r3
 80038a8:	bf0c      	ite	eq
 80038aa:	2301      	moveq	r3, #1
 80038ac:	2300      	movne	r3, #0
 80038ae:	b2db      	uxtb	r3, r3
 80038b0:	461a      	mov	r2, r3
 80038b2:	79fb      	ldrb	r3, [r7, #7]
 80038b4:	429a      	cmp	r2, r3
 80038b6:	d09f      	beq.n	80037f8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80038b8:	2300      	movs	r3, #0
}
 80038ba:	4618      	mov	r0, r3
 80038bc:	3740      	adds	r7, #64	; 0x40
 80038be:	46bd      	mov	sp, r7
 80038c0:	bd80      	pop	{r7, pc}
	...

080038c4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80038c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80038c8:	b0c0      	sub	sp, #256	; 0x100
 80038ca:	af00      	add	r7, sp, #0
 80038cc:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80038d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	691b      	ldr	r3, [r3, #16]
 80038d8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80038dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038e0:	68d9      	ldr	r1, [r3, #12]
 80038e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038e6:	681a      	ldr	r2, [r3, #0]
 80038e8:	ea40 0301 	orr.w	r3, r0, r1
 80038ec:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80038ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038f2:	689a      	ldr	r2, [r3, #8]
 80038f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038f8:	691b      	ldr	r3, [r3, #16]
 80038fa:	431a      	orrs	r2, r3
 80038fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003900:	695b      	ldr	r3, [r3, #20]
 8003902:	431a      	orrs	r2, r3
 8003904:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003908:	69db      	ldr	r3, [r3, #28]
 800390a:	4313      	orrs	r3, r2
 800390c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003910:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	68db      	ldr	r3, [r3, #12]
 8003918:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800391c:	f021 010c 	bic.w	r1, r1, #12
 8003920:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003924:	681a      	ldr	r2, [r3, #0]
 8003926:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800392a:	430b      	orrs	r3, r1
 800392c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800392e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	695b      	ldr	r3, [r3, #20]
 8003936:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800393a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800393e:	6999      	ldr	r1, [r3, #24]
 8003940:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003944:	681a      	ldr	r2, [r3, #0]
 8003946:	ea40 0301 	orr.w	r3, r0, r1
 800394a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800394c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003950:	681a      	ldr	r2, [r3, #0]
 8003952:	4b8f      	ldr	r3, [pc, #572]	; (8003b90 <UART_SetConfig+0x2cc>)
 8003954:	429a      	cmp	r2, r3
 8003956:	d005      	beq.n	8003964 <UART_SetConfig+0xa0>
 8003958:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800395c:	681a      	ldr	r2, [r3, #0]
 800395e:	4b8d      	ldr	r3, [pc, #564]	; (8003b94 <UART_SetConfig+0x2d0>)
 8003960:	429a      	cmp	r2, r3
 8003962:	d104      	bne.n	800396e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003964:	f7fe fd46 	bl	80023f4 <HAL_RCC_GetPCLK2Freq>
 8003968:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800396c:	e003      	b.n	8003976 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800396e:	f7fe fd2d 	bl	80023cc <HAL_RCC_GetPCLK1Freq>
 8003972:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003976:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800397a:	69db      	ldr	r3, [r3, #28]
 800397c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003980:	f040 810c 	bne.w	8003b9c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003984:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003988:	2200      	movs	r2, #0
 800398a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800398e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003992:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003996:	4622      	mov	r2, r4
 8003998:	462b      	mov	r3, r5
 800399a:	1891      	adds	r1, r2, r2
 800399c:	65b9      	str	r1, [r7, #88]	; 0x58
 800399e:	415b      	adcs	r3, r3
 80039a0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80039a2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80039a6:	4621      	mov	r1, r4
 80039a8:	eb12 0801 	adds.w	r8, r2, r1
 80039ac:	4629      	mov	r1, r5
 80039ae:	eb43 0901 	adc.w	r9, r3, r1
 80039b2:	f04f 0200 	mov.w	r2, #0
 80039b6:	f04f 0300 	mov.w	r3, #0
 80039ba:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80039be:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80039c2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80039c6:	4690      	mov	r8, r2
 80039c8:	4699      	mov	r9, r3
 80039ca:	4623      	mov	r3, r4
 80039cc:	eb18 0303 	adds.w	r3, r8, r3
 80039d0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80039d4:	462b      	mov	r3, r5
 80039d6:	eb49 0303 	adc.w	r3, r9, r3
 80039da:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80039de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039e2:	685b      	ldr	r3, [r3, #4]
 80039e4:	2200      	movs	r2, #0
 80039e6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80039ea:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80039ee:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80039f2:	460b      	mov	r3, r1
 80039f4:	18db      	adds	r3, r3, r3
 80039f6:	653b      	str	r3, [r7, #80]	; 0x50
 80039f8:	4613      	mov	r3, r2
 80039fa:	eb42 0303 	adc.w	r3, r2, r3
 80039fe:	657b      	str	r3, [r7, #84]	; 0x54
 8003a00:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003a04:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003a08:	f7fc fc3a 	bl	8000280 <__aeabi_uldivmod>
 8003a0c:	4602      	mov	r2, r0
 8003a0e:	460b      	mov	r3, r1
 8003a10:	4b61      	ldr	r3, [pc, #388]	; (8003b98 <UART_SetConfig+0x2d4>)
 8003a12:	fba3 2302 	umull	r2, r3, r3, r2
 8003a16:	095b      	lsrs	r3, r3, #5
 8003a18:	011c      	lsls	r4, r3, #4
 8003a1a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003a1e:	2200      	movs	r2, #0
 8003a20:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003a24:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003a28:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003a2c:	4642      	mov	r2, r8
 8003a2e:	464b      	mov	r3, r9
 8003a30:	1891      	adds	r1, r2, r2
 8003a32:	64b9      	str	r1, [r7, #72]	; 0x48
 8003a34:	415b      	adcs	r3, r3
 8003a36:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003a38:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003a3c:	4641      	mov	r1, r8
 8003a3e:	eb12 0a01 	adds.w	sl, r2, r1
 8003a42:	4649      	mov	r1, r9
 8003a44:	eb43 0b01 	adc.w	fp, r3, r1
 8003a48:	f04f 0200 	mov.w	r2, #0
 8003a4c:	f04f 0300 	mov.w	r3, #0
 8003a50:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003a54:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003a58:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003a5c:	4692      	mov	sl, r2
 8003a5e:	469b      	mov	fp, r3
 8003a60:	4643      	mov	r3, r8
 8003a62:	eb1a 0303 	adds.w	r3, sl, r3
 8003a66:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003a6a:	464b      	mov	r3, r9
 8003a6c:	eb4b 0303 	adc.w	r3, fp, r3
 8003a70:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003a74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a78:	685b      	ldr	r3, [r3, #4]
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003a80:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003a84:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003a88:	460b      	mov	r3, r1
 8003a8a:	18db      	adds	r3, r3, r3
 8003a8c:	643b      	str	r3, [r7, #64]	; 0x40
 8003a8e:	4613      	mov	r3, r2
 8003a90:	eb42 0303 	adc.w	r3, r2, r3
 8003a94:	647b      	str	r3, [r7, #68]	; 0x44
 8003a96:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003a9a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003a9e:	f7fc fbef 	bl	8000280 <__aeabi_uldivmod>
 8003aa2:	4602      	mov	r2, r0
 8003aa4:	460b      	mov	r3, r1
 8003aa6:	4611      	mov	r1, r2
 8003aa8:	4b3b      	ldr	r3, [pc, #236]	; (8003b98 <UART_SetConfig+0x2d4>)
 8003aaa:	fba3 2301 	umull	r2, r3, r3, r1
 8003aae:	095b      	lsrs	r3, r3, #5
 8003ab0:	2264      	movs	r2, #100	; 0x64
 8003ab2:	fb02 f303 	mul.w	r3, r2, r3
 8003ab6:	1acb      	subs	r3, r1, r3
 8003ab8:	00db      	lsls	r3, r3, #3
 8003aba:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003abe:	4b36      	ldr	r3, [pc, #216]	; (8003b98 <UART_SetConfig+0x2d4>)
 8003ac0:	fba3 2302 	umull	r2, r3, r3, r2
 8003ac4:	095b      	lsrs	r3, r3, #5
 8003ac6:	005b      	lsls	r3, r3, #1
 8003ac8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003acc:	441c      	add	r4, r3
 8003ace:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003ad8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003adc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003ae0:	4642      	mov	r2, r8
 8003ae2:	464b      	mov	r3, r9
 8003ae4:	1891      	adds	r1, r2, r2
 8003ae6:	63b9      	str	r1, [r7, #56]	; 0x38
 8003ae8:	415b      	adcs	r3, r3
 8003aea:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003aec:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003af0:	4641      	mov	r1, r8
 8003af2:	1851      	adds	r1, r2, r1
 8003af4:	6339      	str	r1, [r7, #48]	; 0x30
 8003af6:	4649      	mov	r1, r9
 8003af8:	414b      	adcs	r3, r1
 8003afa:	637b      	str	r3, [r7, #52]	; 0x34
 8003afc:	f04f 0200 	mov.w	r2, #0
 8003b00:	f04f 0300 	mov.w	r3, #0
 8003b04:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003b08:	4659      	mov	r1, fp
 8003b0a:	00cb      	lsls	r3, r1, #3
 8003b0c:	4651      	mov	r1, sl
 8003b0e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003b12:	4651      	mov	r1, sl
 8003b14:	00ca      	lsls	r2, r1, #3
 8003b16:	4610      	mov	r0, r2
 8003b18:	4619      	mov	r1, r3
 8003b1a:	4603      	mov	r3, r0
 8003b1c:	4642      	mov	r2, r8
 8003b1e:	189b      	adds	r3, r3, r2
 8003b20:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003b24:	464b      	mov	r3, r9
 8003b26:	460a      	mov	r2, r1
 8003b28:	eb42 0303 	adc.w	r3, r2, r3
 8003b2c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003b30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b34:	685b      	ldr	r3, [r3, #4]
 8003b36:	2200      	movs	r2, #0
 8003b38:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003b3c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003b40:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003b44:	460b      	mov	r3, r1
 8003b46:	18db      	adds	r3, r3, r3
 8003b48:	62bb      	str	r3, [r7, #40]	; 0x28
 8003b4a:	4613      	mov	r3, r2
 8003b4c:	eb42 0303 	adc.w	r3, r2, r3
 8003b50:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003b52:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003b56:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003b5a:	f7fc fb91 	bl	8000280 <__aeabi_uldivmod>
 8003b5e:	4602      	mov	r2, r0
 8003b60:	460b      	mov	r3, r1
 8003b62:	4b0d      	ldr	r3, [pc, #52]	; (8003b98 <UART_SetConfig+0x2d4>)
 8003b64:	fba3 1302 	umull	r1, r3, r3, r2
 8003b68:	095b      	lsrs	r3, r3, #5
 8003b6a:	2164      	movs	r1, #100	; 0x64
 8003b6c:	fb01 f303 	mul.w	r3, r1, r3
 8003b70:	1ad3      	subs	r3, r2, r3
 8003b72:	00db      	lsls	r3, r3, #3
 8003b74:	3332      	adds	r3, #50	; 0x32
 8003b76:	4a08      	ldr	r2, [pc, #32]	; (8003b98 <UART_SetConfig+0x2d4>)
 8003b78:	fba2 2303 	umull	r2, r3, r2, r3
 8003b7c:	095b      	lsrs	r3, r3, #5
 8003b7e:	f003 0207 	and.w	r2, r3, #7
 8003b82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	4422      	add	r2, r4
 8003b8a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003b8c:	e105      	b.n	8003d9a <UART_SetConfig+0x4d6>
 8003b8e:	bf00      	nop
 8003b90:	40011000 	.word	0x40011000
 8003b94:	40011400 	.word	0x40011400
 8003b98:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003b9c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003ba6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003baa:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003bae:	4642      	mov	r2, r8
 8003bb0:	464b      	mov	r3, r9
 8003bb2:	1891      	adds	r1, r2, r2
 8003bb4:	6239      	str	r1, [r7, #32]
 8003bb6:	415b      	adcs	r3, r3
 8003bb8:	627b      	str	r3, [r7, #36]	; 0x24
 8003bba:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003bbe:	4641      	mov	r1, r8
 8003bc0:	1854      	adds	r4, r2, r1
 8003bc2:	4649      	mov	r1, r9
 8003bc4:	eb43 0501 	adc.w	r5, r3, r1
 8003bc8:	f04f 0200 	mov.w	r2, #0
 8003bcc:	f04f 0300 	mov.w	r3, #0
 8003bd0:	00eb      	lsls	r3, r5, #3
 8003bd2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003bd6:	00e2      	lsls	r2, r4, #3
 8003bd8:	4614      	mov	r4, r2
 8003bda:	461d      	mov	r5, r3
 8003bdc:	4643      	mov	r3, r8
 8003bde:	18e3      	adds	r3, r4, r3
 8003be0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003be4:	464b      	mov	r3, r9
 8003be6:	eb45 0303 	adc.w	r3, r5, r3
 8003bea:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003bee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bf2:	685b      	ldr	r3, [r3, #4]
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003bfa:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003bfe:	f04f 0200 	mov.w	r2, #0
 8003c02:	f04f 0300 	mov.w	r3, #0
 8003c06:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003c0a:	4629      	mov	r1, r5
 8003c0c:	008b      	lsls	r3, r1, #2
 8003c0e:	4621      	mov	r1, r4
 8003c10:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003c14:	4621      	mov	r1, r4
 8003c16:	008a      	lsls	r2, r1, #2
 8003c18:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003c1c:	f7fc fb30 	bl	8000280 <__aeabi_uldivmod>
 8003c20:	4602      	mov	r2, r0
 8003c22:	460b      	mov	r3, r1
 8003c24:	4b60      	ldr	r3, [pc, #384]	; (8003da8 <UART_SetConfig+0x4e4>)
 8003c26:	fba3 2302 	umull	r2, r3, r3, r2
 8003c2a:	095b      	lsrs	r3, r3, #5
 8003c2c:	011c      	lsls	r4, r3, #4
 8003c2e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003c32:	2200      	movs	r2, #0
 8003c34:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003c38:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003c3c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003c40:	4642      	mov	r2, r8
 8003c42:	464b      	mov	r3, r9
 8003c44:	1891      	adds	r1, r2, r2
 8003c46:	61b9      	str	r1, [r7, #24]
 8003c48:	415b      	adcs	r3, r3
 8003c4a:	61fb      	str	r3, [r7, #28]
 8003c4c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003c50:	4641      	mov	r1, r8
 8003c52:	1851      	adds	r1, r2, r1
 8003c54:	6139      	str	r1, [r7, #16]
 8003c56:	4649      	mov	r1, r9
 8003c58:	414b      	adcs	r3, r1
 8003c5a:	617b      	str	r3, [r7, #20]
 8003c5c:	f04f 0200 	mov.w	r2, #0
 8003c60:	f04f 0300 	mov.w	r3, #0
 8003c64:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003c68:	4659      	mov	r1, fp
 8003c6a:	00cb      	lsls	r3, r1, #3
 8003c6c:	4651      	mov	r1, sl
 8003c6e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003c72:	4651      	mov	r1, sl
 8003c74:	00ca      	lsls	r2, r1, #3
 8003c76:	4610      	mov	r0, r2
 8003c78:	4619      	mov	r1, r3
 8003c7a:	4603      	mov	r3, r0
 8003c7c:	4642      	mov	r2, r8
 8003c7e:	189b      	adds	r3, r3, r2
 8003c80:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003c84:	464b      	mov	r3, r9
 8003c86:	460a      	mov	r2, r1
 8003c88:	eb42 0303 	adc.w	r3, r2, r3
 8003c8c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003c90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c94:	685b      	ldr	r3, [r3, #4]
 8003c96:	2200      	movs	r2, #0
 8003c98:	67bb      	str	r3, [r7, #120]	; 0x78
 8003c9a:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003c9c:	f04f 0200 	mov.w	r2, #0
 8003ca0:	f04f 0300 	mov.w	r3, #0
 8003ca4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003ca8:	4649      	mov	r1, r9
 8003caa:	008b      	lsls	r3, r1, #2
 8003cac:	4641      	mov	r1, r8
 8003cae:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003cb2:	4641      	mov	r1, r8
 8003cb4:	008a      	lsls	r2, r1, #2
 8003cb6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003cba:	f7fc fae1 	bl	8000280 <__aeabi_uldivmod>
 8003cbe:	4602      	mov	r2, r0
 8003cc0:	460b      	mov	r3, r1
 8003cc2:	4b39      	ldr	r3, [pc, #228]	; (8003da8 <UART_SetConfig+0x4e4>)
 8003cc4:	fba3 1302 	umull	r1, r3, r3, r2
 8003cc8:	095b      	lsrs	r3, r3, #5
 8003cca:	2164      	movs	r1, #100	; 0x64
 8003ccc:	fb01 f303 	mul.w	r3, r1, r3
 8003cd0:	1ad3      	subs	r3, r2, r3
 8003cd2:	011b      	lsls	r3, r3, #4
 8003cd4:	3332      	adds	r3, #50	; 0x32
 8003cd6:	4a34      	ldr	r2, [pc, #208]	; (8003da8 <UART_SetConfig+0x4e4>)
 8003cd8:	fba2 2303 	umull	r2, r3, r2, r3
 8003cdc:	095b      	lsrs	r3, r3, #5
 8003cde:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003ce2:	441c      	add	r4, r3
 8003ce4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003ce8:	2200      	movs	r2, #0
 8003cea:	673b      	str	r3, [r7, #112]	; 0x70
 8003cec:	677a      	str	r2, [r7, #116]	; 0x74
 8003cee:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003cf2:	4642      	mov	r2, r8
 8003cf4:	464b      	mov	r3, r9
 8003cf6:	1891      	adds	r1, r2, r2
 8003cf8:	60b9      	str	r1, [r7, #8]
 8003cfa:	415b      	adcs	r3, r3
 8003cfc:	60fb      	str	r3, [r7, #12]
 8003cfe:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003d02:	4641      	mov	r1, r8
 8003d04:	1851      	adds	r1, r2, r1
 8003d06:	6039      	str	r1, [r7, #0]
 8003d08:	4649      	mov	r1, r9
 8003d0a:	414b      	adcs	r3, r1
 8003d0c:	607b      	str	r3, [r7, #4]
 8003d0e:	f04f 0200 	mov.w	r2, #0
 8003d12:	f04f 0300 	mov.w	r3, #0
 8003d16:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003d1a:	4659      	mov	r1, fp
 8003d1c:	00cb      	lsls	r3, r1, #3
 8003d1e:	4651      	mov	r1, sl
 8003d20:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003d24:	4651      	mov	r1, sl
 8003d26:	00ca      	lsls	r2, r1, #3
 8003d28:	4610      	mov	r0, r2
 8003d2a:	4619      	mov	r1, r3
 8003d2c:	4603      	mov	r3, r0
 8003d2e:	4642      	mov	r2, r8
 8003d30:	189b      	adds	r3, r3, r2
 8003d32:	66bb      	str	r3, [r7, #104]	; 0x68
 8003d34:	464b      	mov	r3, r9
 8003d36:	460a      	mov	r2, r1
 8003d38:	eb42 0303 	adc.w	r3, r2, r3
 8003d3c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003d3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d42:	685b      	ldr	r3, [r3, #4]
 8003d44:	2200      	movs	r2, #0
 8003d46:	663b      	str	r3, [r7, #96]	; 0x60
 8003d48:	667a      	str	r2, [r7, #100]	; 0x64
 8003d4a:	f04f 0200 	mov.w	r2, #0
 8003d4e:	f04f 0300 	mov.w	r3, #0
 8003d52:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003d56:	4649      	mov	r1, r9
 8003d58:	008b      	lsls	r3, r1, #2
 8003d5a:	4641      	mov	r1, r8
 8003d5c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003d60:	4641      	mov	r1, r8
 8003d62:	008a      	lsls	r2, r1, #2
 8003d64:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003d68:	f7fc fa8a 	bl	8000280 <__aeabi_uldivmod>
 8003d6c:	4602      	mov	r2, r0
 8003d6e:	460b      	mov	r3, r1
 8003d70:	4b0d      	ldr	r3, [pc, #52]	; (8003da8 <UART_SetConfig+0x4e4>)
 8003d72:	fba3 1302 	umull	r1, r3, r3, r2
 8003d76:	095b      	lsrs	r3, r3, #5
 8003d78:	2164      	movs	r1, #100	; 0x64
 8003d7a:	fb01 f303 	mul.w	r3, r1, r3
 8003d7e:	1ad3      	subs	r3, r2, r3
 8003d80:	011b      	lsls	r3, r3, #4
 8003d82:	3332      	adds	r3, #50	; 0x32
 8003d84:	4a08      	ldr	r2, [pc, #32]	; (8003da8 <UART_SetConfig+0x4e4>)
 8003d86:	fba2 2303 	umull	r2, r3, r2, r3
 8003d8a:	095b      	lsrs	r3, r3, #5
 8003d8c:	f003 020f 	and.w	r2, r3, #15
 8003d90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	4422      	add	r2, r4
 8003d98:	609a      	str	r2, [r3, #8]
}
 8003d9a:	bf00      	nop
 8003d9c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003da0:	46bd      	mov	sp, r7
 8003da2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003da6:	bf00      	nop
 8003da8:	51eb851f 	.word	0x51eb851f

08003dac <__errno>:
 8003dac:	4b01      	ldr	r3, [pc, #4]	; (8003db4 <__errno+0x8>)
 8003dae:	6818      	ldr	r0, [r3, #0]
 8003db0:	4770      	bx	lr
 8003db2:	bf00      	nop
 8003db4:	2000000c 	.word	0x2000000c

08003db8 <__libc_init_array>:
 8003db8:	b570      	push	{r4, r5, r6, lr}
 8003dba:	4d0d      	ldr	r5, [pc, #52]	; (8003df0 <__libc_init_array+0x38>)
 8003dbc:	4c0d      	ldr	r4, [pc, #52]	; (8003df4 <__libc_init_array+0x3c>)
 8003dbe:	1b64      	subs	r4, r4, r5
 8003dc0:	10a4      	asrs	r4, r4, #2
 8003dc2:	2600      	movs	r6, #0
 8003dc4:	42a6      	cmp	r6, r4
 8003dc6:	d109      	bne.n	8003ddc <__libc_init_array+0x24>
 8003dc8:	4d0b      	ldr	r5, [pc, #44]	; (8003df8 <__libc_init_array+0x40>)
 8003dca:	4c0c      	ldr	r4, [pc, #48]	; (8003dfc <__libc_init_array+0x44>)
 8003dcc:	f000 fc8e 	bl	80046ec <_init>
 8003dd0:	1b64      	subs	r4, r4, r5
 8003dd2:	10a4      	asrs	r4, r4, #2
 8003dd4:	2600      	movs	r6, #0
 8003dd6:	42a6      	cmp	r6, r4
 8003dd8:	d105      	bne.n	8003de6 <__libc_init_array+0x2e>
 8003dda:	bd70      	pop	{r4, r5, r6, pc}
 8003ddc:	f855 3b04 	ldr.w	r3, [r5], #4
 8003de0:	4798      	blx	r3
 8003de2:	3601      	adds	r6, #1
 8003de4:	e7ee      	b.n	8003dc4 <__libc_init_array+0xc>
 8003de6:	f855 3b04 	ldr.w	r3, [r5], #4
 8003dea:	4798      	blx	r3
 8003dec:	3601      	adds	r6, #1
 8003dee:	e7f2      	b.n	8003dd6 <__libc_init_array+0x1e>
 8003df0:	08004768 	.word	0x08004768
 8003df4:	08004768 	.word	0x08004768
 8003df8:	08004768 	.word	0x08004768
 8003dfc:	0800476c 	.word	0x0800476c

08003e00 <memset>:
 8003e00:	4402      	add	r2, r0
 8003e02:	4603      	mov	r3, r0
 8003e04:	4293      	cmp	r3, r2
 8003e06:	d100      	bne.n	8003e0a <memset+0xa>
 8003e08:	4770      	bx	lr
 8003e0a:	f803 1b01 	strb.w	r1, [r3], #1
 8003e0e:	e7f9      	b.n	8003e04 <memset+0x4>

08003e10 <siprintf>:
 8003e10:	b40e      	push	{r1, r2, r3}
 8003e12:	b500      	push	{lr}
 8003e14:	b09c      	sub	sp, #112	; 0x70
 8003e16:	ab1d      	add	r3, sp, #116	; 0x74
 8003e18:	9002      	str	r0, [sp, #8]
 8003e1a:	9006      	str	r0, [sp, #24]
 8003e1c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003e20:	4809      	ldr	r0, [pc, #36]	; (8003e48 <siprintf+0x38>)
 8003e22:	9107      	str	r1, [sp, #28]
 8003e24:	9104      	str	r1, [sp, #16]
 8003e26:	4909      	ldr	r1, [pc, #36]	; (8003e4c <siprintf+0x3c>)
 8003e28:	f853 2b04 	ldr.w	r2, [r3], #4
 8003e2c:	9105      	str	r1, [sp, #20]
 8003e2e:	6800      	ldr	r0, [r0, #0]
 8003e30:	9301      	str	r3, [sp, #4]
 8003e32:	a902      	add	r1, sp, #8
 8003e34:	f000 f868 	bl	8003f08 <_svfiprintf_r>
 8003e38:	9b02      	ldr	r3, [sp, #8]
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	701a      	strb	r2, [r3, #0]
 8003e3e:	b01c      	add	sp, #112	; 0x70
 8003e40:	f85d eb04 	ldr.w	lr, [sp], #4
 8003e44:	b003      	add	sp, #12
 8003e46:	4770      	bx	lr
 8003e48:	2000000c 	.word	0x2000000c
 8003e4c:	ffff0208 	.word	0xffff0208

08003e50 <__ssputs_r>:
 8003e50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003e54:	688e      	ldr	r6, [r1, #8]
 8003e56:	429e      	cmp	r6, r3
 8003e58:	4682      	mov	sl, r0
 8003e5a:	460c      	mov	r4, r1
 8003e5c:	4690      	mov	r8, r2
 8003e5e:	461f      	mov	r7, r3
 8003e60:	d838      	bhi.n	8003ed4 <__ssputs_r+0x84>
 8003e62:	898a      	ldrh	r2, [r1, #12]
 8003e64:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003e68:	d032      	beq.n	8003ed0 <__ssputs_r+0x80>
 8003e6a:	6825      	ldr	r5, [r4, #0]
 8003e6c:	6909      	ldr	r1, [r1, #16]
 8003e6e:	eba5 0901 	sub.w	r9, r5, r1
 8003e72:	6965      	ldr	r5, [r4, #20]
 8003e74:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003e78:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003e7c:	3301      	adds	r3, #1
 8003e7e:	444b      	add	r3, r9
 8003e80:	106d      	asrs	r5, r5, #1
 8003e82:	429d      	cmp	r5, r3
 8003e84:	bf38      	it	cc
 8003e86:	461d      	movcc	r5, r3
 8003e88:	0553      	lsls	r3, r2, #21
 8003e8a:	d531      	bpl.n	8003ef0 <__ssputs_r+0xa0>
 8003e8c:	4629      	mov	r1, r5
 8003e8e:	f000 fb63 	bl	8004558 <_malloc_r>
 8003e92:	4606      	mov	r6, r0
 8003e94:	b950      	cbnz	r0, 8003eac <__ssputs_r+0x5c>
 8003e96:	230c      	movs	r3, #12
 8003e98:	f8ca 3000 	str.w	r3, [sl]
 8003e9c:	89a3      	ldrh	r3, [r4, #12]
 8003e9e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003ea2:	81a3      	strh	r3, [r4, #12]
 8003ea4:	f04f 30ff 	mov.w	r0, #4294967295
 8003ea8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003eac:	6921      	ldr	r1, [r4, #16]
 8003eae:	464a      	mov	r2, r9
 8003eb0:	f000 fabe 	bl	8004430 <memcpy>
 8003eb4:	89a3      	ldrh	r3, [r4, #12]
 8003eb6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003eba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ebe:	81a3      	strh	r3, [r4, #12]
 8003ec0:	6126      	str	r6, [r4, #16]
 8003ec2:	6165      	str	r5, [r4, #20]
 8003ec4:	444e      	add	r6, r9
 8003ec6:	eba5 0509 	sub.w	r5, r5, r9
 8003eca:	6026      	str	r6, [r4, #0]
 8003ecc:	60a5      	str	r5, [r4, #8]
 8003ece:	463e      	mov	r6, r7
 8003ed0:	42be      	cmp	r6, r7
 8003ed2:	d900      	bls.n	8003ed6 <__ssputs_r+0x86>
 8003ed4:	463e      	mov	r6, r7
 8003ed6:	6820      	ldr	r0, [r4, #0]
 8003ed8:	4632      	mov	r2, r6
 8003eda:	4641      	mov	r1, r8
 8003edc:	f000 fab6 	bl	800444c <memmove>
 8003ee0:	68a3      	ldr	r3, [r4, #8]
 8003ee2:	1b9b      	subs	r3, r3, r6
 8003ee4:	60a3      	str	r3, [r4, #8]
 8003ee6:	6823      	ldr	r3, [r4, #0]
 8003ee8:	4433      	add	r3, r6
 8003eea:	6023      	str	r3, [r4, #0]
 8003eec:	2000      	movs	r0, #0
 8003eee:	e7db      	b.n	8003ea8 <__ssputs_r+0x58>
 8003ef0:	462a      	mov	r2, r5
 8003ef2:	f000 fba5 	bl	8004640 <_realloc_r>
 8003ef6:	4606      	mov	r6, r0
 8003ef8:	2800      	cmp	r0, #0
 8003efa:	d1e1      	bne.n	8003ec0 <__ssputs_r+0x70>
 8003efc:	6921      	ldr	r1, [r4, #16]
 8003efe:	4650      	mov	r0, sl
 8003f00:	f000 fabe 	bl	8004480 <_free_r>
 8003f04:	e7c7      	b.n	8003e96 <__ssputs_r+0x46>
	...

08003f08 <_svfiprintf_r>:
 8003f08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f0c:	4698      	mov	r8, r3
 8003f0e:	898b      	ldrh	r3, [r1, #12]
 8003f10:	061b      	lsls	r3, r3, #24
 8003f12:	b09d      	sub	sp, #116	; 0x74
 8003f14:	4607      	mov	r7, r0
 8003f16:	460d      	mov	r5, r1
 8003f18:	4614      	mov	r4, r2
 8003f1a:	d50e      	bpl.n	8003f3a <_svfiprintf_r+0x32>
 8003f1c:	690b      	ldr	r3, [r1, #16]
 8003f1e:	b963      	cbnz	r3, 8003f3a <_svfiprintf_r+0x32>
 8003f20:	2140      	movs	r1, #64	; 0x40
 8003f22:	f000 fb19 	bl	8004558 <_malloc_r>
 8003f26:	6028      	str	r0, [r5, #0]
 8003f28:	6128      	str	r0, [r5, #16]
 8003f2a:	b920      	cbnz	r0, 8003f36 <_svfiprintf_r+0x2e>
 8003f2c:	230c      	movs	r3, #12
 8003f2e:	603b      	str	r3, [r7, #0]
 8003f30:	f04f 30ff 	mov.w	r0, #4294967295
 8003f34:	e0d1      	b.n	80040da <_svfiprintf_r+0x1d2>
 8003f36:	2340      	movs	r3, #64	; 0x40
 8003f38:	616b      	str	r3, [r5, #20]
 8003f3a:	2300      	movs	r3, #0
 8003f3c:	9309      	str	r3, [sp, #36]	; 0x24
 8003f3e:	2320      	movs	r3, #32
 8003f40:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003f44:	f8cd 800c 	str.w	r8, [sp, #12]
 8003f48:	2330      	movs	r3, #48	; 0x30
 8003f4a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80040f4 <_svfiprintf_r+0x1ec>
 8003f4e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003f52:	f04f 0901 	mov.w	r9, #1
 8003f56:	4623      	mov	r3, r4
 8003f58:	469a      	mov	sl, r3
 8003f5a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003f5e:	b10a      	cbz	r2, 8003f64 <_svfiprintf_r+0x5c>
 8003f60:	2a25      	cmp	r2, #37	; 0x25
 8003f62:	d1f9      	bne.n	8003f58 <_svfiprintf_r+0x50>
 8003f64:	ebba 0b04 	subs.w	fp, sl, r4
 8003f68:	d00b      	beq.n	8003f82 <_svfiprintf_r+0x7a>
 8003f6a:	465b      	mov	r3, fp
 8003f6c:	4622      	mov	r2, r4
 8003f6e:	4629      	mov	r1, r5
 8003f70:	4638      	mov	r0, r7
 8003f72:	f7ff ff6d 	bl	8003e50 <__ssputs_r>
 8003f76:	3001      	adds	r0, #1
 8003f78:	f000 80aa 	beq.w	80040d0 <_svfiprintf_r+0x1c8>
 8003f7c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003f7e:	445a      	add	r2, fp
 8003f80:	9209      	str	r2, [sp, #36]	; 0x24
 8003f82:	f89a 3000 	ldrb.w	r3, [sl]
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	f000 80a2 	beq.w	80040d0 <_svfiprintf_r+0x1c8>
 8003f8c:	2300      	movs	r3, #0
 8003f8e:	f04f 32ff 	mov.w	r2, #4294967295
 8003f92:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003f96:	f10a 0a01 	add.w	sl, sl, #1
 8003f9a:	9304      	str	r3, [sp, #16]
 8003f9c:	9307      	str	r3, [sp, #28]
 8003f9e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003fa2:	931a      	str	r3, [sp, #104]	; 0x68
 8003fa4:	4654      	mov	r4, sl
 8003fa6:	2205      	movs	r2, #5
 8003fa8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003fac:	4851      	ldr	r0, [pc, #324]	; (80040f4 <_svfiprintf_r+0x1ec>)
 8003fae:	f7fc f917 	bl	80001e0 <memchr>
 8003fb2:	9a04      	ldr	r2, [sp, #16]
 8003fb4:	b9d8      	cbnz	r0, 8003fee <_svfiprintf_r+0xe6>
 8003fb6:	06d0      	lsls	r0, r2, #27
 8003fb8:	bf44      	itt	mi
 8003fba:	2320      	movmi	r3, #32
 8003fbc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003fc0:	0711      	lsls	r1, r2, #28
 8003fc2:	bf44      	itt	mi
 8003fc4:	232b      	movmi	r3, #43	; 0x2b
 8003fc6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003fca:	f89a 3000 	ldrb.w	r3, [sl]
 8003fce:	2b2a      	cmp	r3, #42	; 0x2a
 8003fd0:	d015      	beq.n	8003ffe <_svfiprintf_r+0xf6>
 8003fd2:	9a07      	ldr	r2, [sp, #28]
 8003fd4:	4654      	mov	r4, sl
 8003fd6:	2000      	movs	r0, #0
 8003fd8:	f04f 0c0a 	mov.w	ip, #10
 8003fdc:	4621      	mov	r1, r4
 8003fde:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003fe2:	3b30      	subs	r3, #48	; 0x30
 8003fe4:	2b09      	cmp	r3, #9
 8003fe6:	d94e      	bls.n	8004086 <_svfiprintf_r+0x17e>
 8003fe8:	b1b0      	cbz	r0, 8004018 <_svfiprintf_r+0x110>
 8003fea:	9207      	str	r2, [sp, #28]
 8003fec:	e014      	b.n	8004018 <_svfiprintf_r+0x110>
 8003fee:	eba0 0308 	sub.w	r3, r0, r8
 8003ff2:	fa09 f303 	lsl.w	r3, r9, r3
 8003ff6:	4313      	orrs	r3, r2
 8003ff8:	9304      	str	r3, [sp, #16]
 8003ffa:	46a2      	mov	sl, r4
 8003ffc:	e7d2      	b.n	8003fa4 <_svfiprintf_r+0x9c>
 8003ffe:	9b03      	ldr	r3, [sp, #12]
 8004000:	1d19      	adds	r1, r3, #4
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	9103      	str	r1, [sp, #12]
 8004006:	2b00      	cmp	r3, #0
 8004008:	bfbb      	ittet	lt
 800400a:	425b      	neglt	r3, r3
 800400c:	f042 0202 	orrlt.w	r2, r2, #2
 8004010:	9307      	strge	r3, [sp, #28]
 8004012:	9307      	strlt	r3, [sp, #28]
 8004014:	bfb8      	it	lt
 8004016:	9204      	strlt	r2, [sp, #16]
 8004018:	7823      	ldrb	r3, [r4, #0]
 800401a:	2b2e      	cmp	r3, #46	; 0x2e
 800401c:	d10c      	bne.n	8004038 <_svfiprintf_r+0x130>
 800401e:	7863      	ldrb	r3, [r4, #1]
 8004020:	2b2a      	cmp	r3, #42	; 0x2a
 8004022:	d135      	bne.n	8004090 <_svfiprintf_r+0x188>
 8004024:	9b03      	ldr	r3, [sp, #12]
 8004026:	1d1a      	adds	r2, r3, #4
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	9203      	str	r2, [sp, #12]
 800402c:	2b00      	cmp	r3, #0
 800402e:	bfb8      	it	lt
 8004030:	f04f 33ff 	movlt.w	r3, #4294967295
 8004034:	3402      	adds	r4, #2
 8004036:	9305      	str	r3, [sp, #20]
 8004038:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004104 <_svfiprintf_r+0x1fc>
 800403c:	7821      	ldrb	r1, [r4, #0]
 800403e:	2203      	movs	r2, #3
 8004040:	4650      	mov	r0, sl
 8004042:	f7fc f8cd 	bl	80001e0 <memchr>
 8004046:	b140      	cbz	r0, 800405a <_svfiprintf_r+0x152>
 8004048:	2340      	movs	r3, #64	; 0x40
 800404a:	eba0 000a 	sub.w	r0, r0, sl
 800404e:	fa03 f000 	lsl.w	r0, r3, r0
 8004052:	9b04      	ldr	r3, [sp, #16]
 8004054:	4303      	orrs	r3, r0
 8004056:	3401      	adds	r4, #1
 8004058:	9304      	str	r3, [sp, #16]
 800405a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800405e:	4826      	ldr	r0, [pc, #152]	; (80040f8 <_svfiprintf_r+0x1f0>)
 8004060:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004064:	2206      	movs	r2, #6
 8004066:	f7fc f8bb 	bl	80001e0 <memchr>
 800406a:	2800      	cmp	r0, #0
 800406c:	d038      	beq.n	80040e0 <_svfiprintf_r+0x1d8>
 800406e:	4b23      	ldr	r3, [pc, #140]	; (80040fc <_svfiprintf_r+0x1f4>)
 8004070:	bb1b      	cbnz	r3, 80040ba <_svfiprintf_r+0x1b2>
 8004072:	9b03      	ldr	r3, [sp, #12]
 8004074:	3307      	adds	r3, #7
 8004076:	f023 0307 	bic.w	r3, r3, #7
 800407a:	3308      	adds	r3, #8
 800407c:	9303      	str	r3, [sp, #12]
 800407e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004080:	4433      	add	r3, r6
 8004082:	9309      	str	r3, [sp, #36]	; 0x24
 8004084:	e767      	b.n	8003f56 <_svfiprintf_r+0x4e>
 8004086:	fb0c 3202 	mla	r2, ip, r2, r3
 800408a:	460c      	mov	r4, r1
 800408c:	2001      	movs	r0, #1
 800408e:	e7a5      	b.n	8003fdc <_svfiprintf_r+0xd4>
 8004090:	2300      	movs	r3, #0
 8004092:	3401      	adds	r4, #1
 8004094:	9305      	str	r3, [sp, #20]
 8004096:	4619      	mov	r1, r3
 8004098:	f04f 0c0a 	mov.w	ip, #10
 800409c:	4620      	mov	r0, r4
 800409e:	f810 2b01 	ldrb.w	r2, [r0], #1
 80040a2:	3a30      	subs	r2, #48	; 0x30
 80040a4:	2a09      	cmp	r2, #9
 80040a6:	d903      	bls.n	80040b0 <_svfiprintf_r+0x1a8>
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d0c5      	beq.n	8004038 <_svfiprintf_r+0x130>
 80040ac:	9105      	str	r1, [sp, #20]
 80040ae:	e7c3      	b.n	8004038 <_svfiprintf_r+0x130>
 80040b0:	fb0c 2101 	mla	r1, ip, r1, r2
 80040b4:	4604      	mov	r4, r0
 80040b6:	2301      	movs	r3, #1
 80040b8:	e7f0      	b.n	800409c <_svfiprintf_r+0x194>
 80040ba:	ab03      	add	r3, sp, #12
 80040bc:	9300      	str	r3, [sp, #0]
 80040be:	462a      	mov	r2, r5
 80040c0:	4b0f      	ldr	r3, [pc, #60]	; (8004100 <_svfiprintf_r+0x1f8>)
 80040c2:	a904      	add	r1, sp, #16
 80040c4:	4638      	mov	r0, r7
 80040c6:	f3af 8000 	nop.w
 80040ca:	1c42      	adds	r2, r0, #1
 80040cc:	4606      	mov	r6, r0
 80040ce:	d1d6      	bne.n	800407e <_svfiprintf_r+0x176>
 80040d0:	89ab      	ldrh	r3, [r5, #12]
 80040d2:	065b      	lsls	r3, r3, #25
 80040d4:	f53f af2c 	bmi.w	8003f30 <_svfiprintf_r+0x28>
 80040d8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80040da:	b01d      	add	sp, #116	; 0x74
 80040dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80040e0:	ab03      	add	r3, sp, #12
 80040e2:	9300      	str	r3, [sp, #0]
 80040e4:	462a      	mov	r2, r5
 80040e6:	4b06      	ldr	r3, [pc, #24]	; (8004100 <_svfiprintf_r+0x1f8>)
 80040e8:	a904      	add	r1, sp, #16
 80040ea:	4638      	mov	r0, r7
 80040ec:	f000 f87a 	bl	80041e4 <_printf_i>
 80040f0:	e7eb      	b.n	80040ca <_svfiprintf_r+0x1c2>
 80040f2:	bf00      	nop
 80040f4:	0800472c 	.word	0x0800472c
 80040f8:	08004736 	.word	0x08004736
 80040fc:	00000000 	.word	0x00000000
 8004100:	08003e51 	.word	0x08003e51
 8004104:	08004732 	.word	0x08004732

08004108 <_printf_common>:
 8004108:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800410c:	4616      	mov	r6, r2
 800410e:	4699      	mov	r9, r3
 8004110:	688a      	ldr	r2, [r1, #8]
 8004112:	690b      	ldr	r3, [r1, #16]
 8004114:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004118:	4293      	cmp	r3, r2
 800411a:	bfb8      	it	lt
 800411c:	4613      	movlt	r3, r2
 800411e:	6033      	str	r3, [r6, #0]
 8004120:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004124:	4607      	mov	r7, r0
 8004126:	460c      	mov	r4, r1
 8004128:	b10a      	cbz	r2, 800412e <_printf_common+0x26>
 800412a:	3301      	adds	r3, #1
 800412c:	6033      	str	r3, [r6, #0]
 800412e:	6823      	ldr	r3, [r4, #0]
 8004130:	0699      	lsls	r1, r3, #26
 8004132:	bf42      	ittt	mi
 8004134:	6833      	ldrmi	r3, [r6, #0]
 8004136:	3302      	addmi	r3, #2
 8004138:	6033      	strmi	r3, [r6, #0]
 800413a:	6825      	ldr	r5, [r4, #0]
 800413c:	f015 0506 	ands.w	r5, r5, #6
 8004140:	d106      	bne.n	8004150 <_printf_common+0x48>
 8004142:	f104 0a19 	add.w	sl, r4, #25
 8004146:	68e3      	ldr	r3, [r4, #12]
 8004148:	6832      	ldr	r2, [r6, #0]
 800414a:	1a9b      	subs	r3, r3, r2
 800414c:	42ab      	cmp	r3, r5
 800414e:	dc26      	bgt.n	800419e <_printf_common+0x96>
 8004150:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004154:	1e13      	subs	r3, r2, #0
 8004156:	6822      	ldr	r2, [r4, #0]
 8004158:	bf18      	it	ne
 800415a:	2301      	movne	r3, #1
 800415c:	0692      	lsls	r2, r2, #26
 800415e:	d42b      	bmi.n	80041b8 <_printf_common+0xb0>
 8004160:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004164:	4649      	mov	r1, r9
 8004166:	4638      	mov	r0, r7
 8004168:	47c0      	blx	r8
 800416a:	3001      	adds	r0, #1
 800416c:	d01e      	beq.n	80041ac <_printf_common+0xa4>
 800416e:	6823      	ldr	r3, [r4, #0]
 8004170:	68e5      	ldr	r5, [r4, #12]
 8004172:	6832      	ldr	r2, [r6, #0]
 8004174:	f003 0306 	and.w	r3, r3, #6
 8004178:	2b04      	cmp	r3, #4
 800417a:	bf08      	it	eq
 800417c:	1aad      	subeq	r5, r5, r2
 800417e:	68a3      	ldr	r3, [r4, #8]
 8004180:	6922      	ldr	r2, [r4, #16]
 8004182:	bf0c      	ite	eq
 8004184:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004188:	2500      	movne	r5, #0
 800418a:	4293      	cmp	r3, r2
 800418c:	bfc4      	itt	gt
 800418e:	1a9b      	subgt	r3, r3, r2
 8004190:	18ed      	addgt	r5, r5, r3
 8004192:	2600      	movs	r6, #0
 8004194:	341a      	adds	r4, #26
 8004196:	42b5      	cmp	r5, r6
 8004198:	d11a      	bne.n	80041d0 <_printf_common+0xc8>
 800419a:	2000      	movs	r0, #0
 800419c:	e008      	b.n	80041b0 <_printf_common+0xa8>
 800419e:	2301      	movs	r3, #1
 80041a0:	4652      	mov	r2, sl
 80041a2:	4649      	mov	r1, r9
 80041a4:	4638      	mov	r0, r7
 80041a6:	47c0      	blx	r8
 80041a8:	3001      	adds	r0, #1
 80041aa:	d103      	bne.n	80041b4 <_printf_common+0xac>
 80041ac:	f04f 30ff 	mov.w	r0, #4294967295
 80041b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80041b4:	3501      	adds	r5, #1
 80041b6:	e7c6      	b.n	8004146 <_printf_common+0x3e>
 80041b8:	18e1      	adds	r1, r4, r3
 80041ba:	1c5a      	adds	r2, r3, #1
 80041bc:	2030      	movs	r0, #48	; 0x30
 80041be:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80041c2:	4422      	add	r2, r4
 80041c4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80041c8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80041cc:	3302      	adds	r3, #2
 80041ce:	e7c7      	b.n	8004160 <_printf_common+0x58>
 80041d0:	2301      	movs	r3, #1
 80041d2:	4622      	mov	r2, r4
 80041d4:	4649      	mov	r1, r9
 80041d6:	4638      	mov	r0, r7
 80041d8:	47c0      	blx	r8
 80041da:	3001      	adds	r0, #1
 80041dc:	d0e6      	beq.n	80041ac <_printf_common+0xa4>
 80041de:	3601      	adds	r6, #1
 80041e0:	e7d9      	b.n	8004196 <_printf_common+0x8e>
	...

080041e4 <_printf_i>:
 80041e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80041e8:	7e0f      	ldrb	r7, [r1, #24]
 80041ea:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80041ec:	2f78      	cmp	r7, #120	; 0x78
 80041ee:	4691      	mov	r9, r2
 80041f0:	4680      	mov	r8, r0
 80041f2:	460c      	mov	r4, r1
 80041f4:	469a      	mov	sl, r3
 80041f6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80041fa:	d807      	bhi.n	800420c <_printf_i+0x28>
 80041fc:	2f62      	cmp	r7, #98	; 0x62
 80041fe:	d80a      	bhi.n	8004216 <_printf_i+0x32>
 8004200:	2f00      	cmp	r7, #0
 8004202:	f000 80d8 	beq.w	80043b6 <_printf_i+0x1d2>
 8004206:	2f58      	cmp	r7, #88	; 0x58
 8004208:	f000 80a3 	beq.w	8004352 <_printf_i+0x16e>
 800420c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004210:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004214:	e03a      	b.n	800428c <_printf_i+0xa8>
 8004216:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800421a:	2b15      	cmp	r3, #21
 800421c:	d8f6      	bhi.n	800420c <_printf_i+0x28>
 800421e:	a101      	add	r1, pc, #4	; (adr r1, 8004224 <_printf_i+0x40>)
 8004220:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004224:	0800427d 	.word	0x0800427d
 8004228:	08004291 	.word	0x08004291
 800422c:	0800420d 	.word	0x0800420d
 8004230:	0800420d 	.word	0x0800420d
 8004234:	0800420d 	.word	0x0800420d
 8004238:	0800420d 	.word	0x0800420d
 800423c:	08004291 	.word	0x08004291
 8004240:	0800420d 	.word	0x0800420d
 8004244:	0800420d 	.word	0x0800420d
 8004248:	0800420d 	.word	0x0800420d
 800424c:	0800420d 	.word	0x0800420d
 8004250:	0800439d 	.word	0x0800439d
 8004254:	080042c1 	.word	0x080042c1
 8004258:	0800437f 	.word	0x0800437f
 800425c:	0800420d 	.word	0x0800420d
 8004260:	0800420d 	.word	0x0800420d
 8004264:	080043bf 	.word	0x080043bf
 8004268:	0800420d 	.word	0x0800420d
 800426c:	080042c1 	.word	0x080042c1
 8004270:	0800420d 	.word	0x0800420d
 8004274:	0800420d 	.word	0x0800420d
 8004278:	08004387 	.word	0x08004387
 800427c:	682b      	ldr	r3, [r5, #0]
 800427e:	1d1a      	adds	r2, r3, #4
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	602a      	str	r2, [r5, #0]
 8004284:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004288:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800428c:	2301      	movs	r3, #1
 800428e:	e0a3      	b.n	80043d8 <_printf_i+0x1f4>
 8004290:	6820      	ldr	r0, [r4, #0]
 8004292:	6829      	ldr	r1, [r5, #0]
 8004294:	0606      	lsls	r6, r0, #24
 8004296:	f101 0304 	add.w	r3, r1, #4
 800429a:	d50a      	bpl.n	80042b2 <_printf_i+0xce>
 800429c:	680e      	ldr	r6, [r1, #0]
 800429e:	602b      	str	r3, [r5, #0]
 80042a0:	2e00      	cmp	r6, #0
 80042a2:	da03      	bge.n	80042ac <_printf_i+0xc8>
 80042a4:	232d      	movs	r3, #45	; 0x2d
 80042a6:	4276      	negs	r6, r6
 80042a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80042ac:	485e      	ldr	r0, [pc, #376]	; (8004428 <_printf_i+0x244>)
 80042ae:	230a      	movs	r3, #10
 80042b0:	e019      	b.n	80042e6 <_printf_i+0x102>
 80042b2:	680e      	ldr	r6, [r1, #0]
 80042b4:	602b      	str	r3, [r5, #0]
 80042b6:	f010 0f40 	tst.w	r0, #64	; 0x40
 80042ba:	bf18      	it	ne
 80042bc:	b236      	sxthne	r6, r6
 80042be:	e7ef      	b.n	80042a0 <_printf_i+0xbc>
 80042c0:	682b      	ldr	r3, [r5, #0]
 80042c2:	6820      	ldr	r0, [r4, #0]
 80042c4:	1d19      	adds	r1, r3, #4
 80042c6:	6029      	str	r1, [r5, #0]
 80042c8:	0601      	lsls	r1, r0, #24
 80042ca:	d501      	bpl.n	80042d0 <_printf_i+0xec>
 80042cc:	681e      	ldr	r6, [r3, #0]
 80042ce:	e002      	b.n	80042d6 <_printf_i+0xf2>
 80042d0:	0646      	lsls	r6, r0, #25
 80042d2:	d5fb      	bpl.n	80042cc <_printf_i+0xe8>
 80042d4:	881e      	ldrh	r6, [r3, #0]
 80042d6:	4854      	ldr	r0, [pc, #336]	; (8004428 <_printf_i+0x244>)
 80042d8:	2f6f      	cmp	r7, #111	; 0x6f
 80042da:	bf0c      	ite	eq
 80042dc:	2308      	moveq	r3, #8
 80042de:	230a      	movne	r3, #10
 80042e0:	2100      	movs	r1, #0
 80042e2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80042e6:	6865      	ldr	r5, [r4, #4]
 80042e8:	60a5      	str	r5, [r4, #8]
 80042ea:	2d00      	cmp	r5, #0
 80042ec:	bfa2      	ittt	ge
 80042ee:	6821      	ldrge	r1, [r4, #0]
 80042f0:	f021 0104 	bicge.w	r1, r1, #4
 80042f4:	6021      	strge	r1, [r4, #0]
 80042f6:	b90e      	cbnz	r6, 80042fc <_printf_i+0x118>
 80042f8:	2d00      	cmp	r5, #0
 80042fa:	d04d      	beq.n	8004398 <_printf_i+0x1b4>
 80042fc:	4615      	mov	r5, r2
 80042fe:	fbb6 f1f3 	udiv	r1, r6, r3
 8004302:	fb03 6711 	mls	r7, r3, r1, r6
 8004306:	5dc7      	ldrb	r7, [r0, r7]
 8004308:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800430c:	4637      	mov	r7, r6
 800430e:	42bb      	cmp	r3, r7
 8004310:	460e      	mov	r6, r1
 8004312:	d9f4      	bls.n	80042fe <_printf_i+0x11a>
 8004314:	2b08      	cmp	r3, #8
 8004316:	d10b      	bne.n	8004330 <_printf_i+0x14c>
 8004318:	6823      	ldr	r3, [r4, #0]
 800431a:	07de      	lsls	r6, r3, #31
 800431c:	d508      	bpl.n	8004330 <_printf_i+0x14c>
 800431e:	6923      	ldr	r3, [r4, #16]
 8004320:	6861      	ldr	r1, [r4, #4]
 8004322:	4299      	cmp	r1, r3
 8004324:	bfde      	ittt	le
 8004326:	2330      	movle	r3, #48	; 0x30
 8004328:	f805 3c01 	strble.w	r3, [r5, #-1]
 800432c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004330:	1b52      	subs	r2, r2, r5
 8004332:	6122      	str	r2, [r4, #16]
 8004334:	f8cd a000 	str.w	sl, [sp]
 8004338:	464b      	mov	r3, r9
 800433a:	aa03      	add	r2, sp, #12
 800433c:	4621      	mov	r1, r4
 800433e:	4640      	mov	r0, r8
 8004340:	f7ff fee2 	bl	8004108 <_printf_common>
 8004344:	3001      	adds	r0, #1
 8004346:	d14c      	bne.n	80043e2 <_printf_i+0x1fe>
 8004348:	f04f 30ff 	mov.w	r0, #4294967295
 800434c:	b004      	add	sp, #16
 800434e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004352:	4835      	ldr	r0, [pc, #212]	; (8004428 <_printf_i+0x244>)
 8004354:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004358:	6829      	ldr	r1, [r5, #0]
 800435a:	6823      	ldr	r3, [r4, #0]
 800435c:	f851 6b04 	ldr.w	r6, [r1], #4
 8004360:	6029      	str	r1, [r5, #0]
 8004362:	061d      	lsls	r5, r3, #24
 8004364:	d514      	bpl.n	8004390 <_printf_i+0x1ac>
 8004366:	07df      	lsls	r7, r3, #31
 8004368:	bf44      	itt	mi
 800436a:	f043 0320 	orrmi.w	r3, r3, #32
 800436e:	6023      	strmi	r3, [r4, #0]
 8004370:	b91e      	cbnz	r6, 800437a <_printf_i+0x196>
 8004372:	6823      	ldr	r3, [r4, #0]
 8004374:	f023 0320 	bic.w	r3, r3, #32
 8004378:	6023      	str	r3, [r4, #0]
 800437a:	2310      	movs	r3, #16
 800437c:	e7b0      	b.n	80042e0 <_printf_i+0xfc>
 800437e:	6823      	ldr	r3, [r4, #0]
 8004380:	f043 0320 	orr.w	r3, r3, #32
 8004384:	6023      	str	r3, [r4, #0]
 8004386:	2378      	movs	r3, #120	; 0x78
 8004388:	4828      	ldr	r0, [pc, #160]	; (800442c <_printf_i+0x248>)
 800438a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800438e:	e7e3      	b.n	8004358 <_printf_i+0x174>
 8004390:	0659      	lsls	r1, r3, #25
 8004392:	bf48      	it	mi
 8004394:	b2b6      	uxthmi	r6, r6
 8004396:	e7e6      	b.n	8004366 <_printf_i+0x182>
 8004398:	4615      	mov	r5, r2
 800439a:	e7bb      	b.n	8004314 <_printf_i+0x130>
 800439c:	682b      	ldr	r3, [r5, #0]
 800439e:	6826      	ldr	r6, [r4, #0]
 80043a0:	6961      	ldr	r1, [r4, #20]
 80043a2:	1d18      	adds	r0, r3, #4
 80043a4:	6028      	str	r0, [r5, #0]
 80043a6:	0635      	lsls	r5, r6, #24
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	d501      	bpl.n	80043b0 <_printf_i+0x1cc>
 80043ac:	6019      	str	r1, [r3, #0]
 80043ae:	e002      	b.n	80043b6 <_printf_i+0x1d2>
 80043b0:	0670      	lsls	r0, r6, #25
 80043b2:	d5fb      	bpl.n	80043ac <_printf_i+0x1c8>
 80043b4:	8019      	strh	r1, [r3, #0]
 80043b6:	2300      	movs	r3, #0
 80043b8:	6123      	str	r3, [r4, #16]
 80043ba:	4615      	mov	r5, r2
 80043bc:	e7ba      	b.n	8004334 <_printf_i+0x150>
 80043be:	682b      	ldr	r3, [r5, #0]
 80043c0:	1d1a      	adds	r2, r3, #4
 80043c2:	602a      	str	r2, [r5, #0]
 80043c4:	681d      	ldr	r5, [r3, #0]
 80043c6:	6862      	ldr	r2, [r4, #4]
 80043c8:	2100      	movs	r1, #0
 80043ca:	4628      	mov	r0, r5
 80043cc:	f7fb ff08 	bl	80001e0 <memchr>
 80043d0:	b108      	cbz	r0, 80043d6 <_printf_i+0x1f2>
 80043d2:	1b40      	subs	r0, r0, r5
 80043d4:	6060      	str	r0, [r4, #4]
 80043d6:	6863      	ldr	r3, [r4, #4]
 80043d8:	6123      	str	r3, [r4, #16]
 80043da:	2300      	movs	r3, #0
 80043dc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80043e0:	e7a8      	b.n	8004334 <_printf_i+0x150>
 80043e2:	6923      	ldr	r3, [r4, #16]
 80043e4:	462a      	mov	r2, r5
 80043e6:	4649      	mov	r1, r9
 80043e8:	4640      	mov	r0, r8
 80043ea:	47d0      	blx	sl
 80043ec:	3001      	adds	r0, #1
 80043ee:	d0ab      	beq.n	8004348 <_printf_i+0x164>
 80043f0:	6823      	ldr	r3, [r4, #0]
 80043f2:	079b      	lsls	r3, r3, #30
 80043f4:	d413      	bmi.n	800441e <_printf_i+0x23a>
 80043f6:	68e0      	ldr	r0, [r4, #12]
 80043f8:	9b03      	ldr	r3, [sp, #12]
 80043fa:	4298      	cmp	r0, r3
 80043fc:	bfb8      	it	lt
 80043fe:	4618      	movlt	r0, r3
 8004400:	e7a4      	b.n	800434c <_printf_i+0x168>
 8004402:	2301      	movs	r3, #1
 8004404:	4632      	mov	r2, r6
 8004406:	4649      	mov	r1, r9
 8004408:	4640      	mov	r0, r8
 800440a:	47d0      	blx	sl
 800440c:	3001      	adds	r0, #1
 800440e:	d09b      	beq.n	8004348 <_printf_i+0x164>
 8004410:	3501      	adds	r5, #1
 8004412:	68e3      	ldr	r3, [r4, #12]
 8004414:	9903      	ldr	r1, [sp, #12]
 8004416:	1a5b      	subs	r3, r3, r1
 8004418:	42ab      	cmp	r3, r5
 800441a:	dcf2      	bgt.n	8004402 <_printf_i+0x21e>
 800441c:	e7eb      	b.n	80043f6 <_printf_i+0x212>
 800441e:	2500      	movs	r5, #0
 8004420:	f104 0619 	add.w	r6, r4, #25
 8004424:	e7f5      	b.n	8004412 <_printf_i+0x22e>
 8004426:	bf00      	nop
 8004428:	0800473d 	.word	0x0800473d
 800442c:	0800474e 	.word	0x0800474e

08004430 <memcpy>:
 8004430:	440a      	add	r2, r1
 8004432:	4291      	cmp	r1, r2
 8004434:	f100 33ff 	add.w	r3, r0, #4294967295
 8004438:	d100      	bne.n	800443c <memcpy+0xc>
 800443a:	4770      	bx	lr
 800443c:	b510      	push	{r4, lr}
 800443e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004442:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004446:	4291      	cmp	r1, r2
 8004448:	d1f9      	bne.n	800443e <memcpy+0xe>
 800444a:	bd10      	pop	{r4, pc}

0800444c <memmove>:
 800444c:	4288      	cmp	r0, r1
 800444e:	b510      	push	{r4, lr}
 8004450:	eb01 0402 	add.w	r4, r1, r2
 8004454:	d902      	bls.n	800445c <memmove+0x10>
 8004456:	4284      	cmp	r4, r0
 8004458:	4623      	mov	r3, r4
 800445a:	d807      	bhi.n	800446c <memmove+0x20>
 800445c:	1e43      	subs	r3, r0, #1
 800445e:	42a1      	cmp	r1, r4
 8004460:	d008      	beq.n	8004474 <memmove+0x28>
 8004462:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004466:	f803 2f01 	strb.w	r2, [r3, #1]!
 800446a:	e7f8      	b.n	800445e <memmove+0x12>
 800446c:	4402      	add	r2, r0
 800446e:	4601      	mov	r1, r0
 8004470:	428a      	cmp	r2, r1
 8004472:	d100      	bne.n	8004476 <memmove+0x2a>
 8004474:	bd10      	pop	{r4, pc}
 8004476:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800447a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800447e:	e7f7      	b.n	8004470 <memmove+0x24>

08004480 <_free_r>:
 8004480:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004482:	2900      	cmp	r1, #0
 8004484:	d044      	beq.n	8004510 <_free_r+0x90>
 8004486:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800448a:	9001      	str	r0, [sp, #4]
 800448c:	2b00      	cmp	r3, #0
 800448e:	f1a1 0404 	sub.w	r4, r1, #4
 8004492:	bfb8      	it	lt
 8004494:	18e4      	addlt	r4, r4, r3
 8004496:	f000 f913 	bl	80046c0 <__malloc_lock>
 800449a:	4a1e      	ldr	r2, [pc, #120]	; (8004514 <_free_r+0x94>)
 800449c:	9801      	ldr	r0, [sp, #4]
 800449e:	6813      	ldr	r3, [r2, #0]
 80044a0:	b933      	cbnz	r3, 80044b0 <_free_r+0x30>
 80044a2:	6063      	str	r3, [r4, #4]
 80044a4:	6014      	str	r4, [r2, #0]
 80044a6:	b003      	add	sp, #12
 80044a8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80044ac:	f000 b90e 	b.w	80046cc <__malloc_unlock>
 80044b0:	42a3      	cmp	r3, r4
 80044b2:	d908      	bls.n	80044c6 <_free_r+0x46>
 80044b4:	6825      	ldr	r5, [r4, #0]
 80044b6:	1961      	adds	r1, r4, r5
 80044b8:	428b      	cmp	r3, r1
 80044ba:	bf01      	itttt	eq
 80044bc:	6819      	ldreq	r1, [r3, #0]
 80044be:	685b      	ldreq	r3, [r3, #4]
 80044c0:	1949      	addeq	r1, r1, r5
 80044c2:	6021      	streq	r1, [r4, #0]
 80044c4:	e7ed      	b.n	80044a2 <_free_r+0x22>
 80044c6:	461a      	mov	r2, r3
 80044c8:	685b      	ldr	r3, [r3, #4]
 80044ca:	b10b      	cbz	r3, 80044d0 <_free_r+0x50>
 80044cc:	42a3      	cmp	r3, r4
 80044ce:	d9fa      	bls.n	80044c6 <_free_r+0x46>
 80044d0:	6811      	ldr	r1, [r2, #0]
 80044d2:	1855      	adds	r5, r2, r1
 80044d4:	42a5      	cmp	r5, r4
 80044d6:	d10b      	bne.n	80044f0 <_free_r+0x70>
 80044d8:	6824      	ldr	r4, [r4, #0]
 80044da:	4421      	add	r1, r4
 80044dc:	1854      	adds	r4, r2, r1
 80044de:	42a3      	cmp	r3, r4
 80044e0:	6011      	str	r1, [r2, #0]
 80044e2:	d1e0      	bne.n	80044a6 <_free_r+0x26>
 80044e4:	681c      	ldr	r4, [r3, #0]
 80044e6:	685b      	ldr	r3, [r3, #4]
 80044e8:	6053      	str	r3, [r2, #4]
 80044ea:	4421      	add	r1, r4
 80044ec:	6011      	str	r1, [r2, #0]
 80044ee:	e7da      	b.n	80044a6 <_free_r+0x26>
 80044f0:	d902      	bls.n	80044f8 <_free_r+0x78>
 80044f2:	230c      	movs	r3, #12
 80044f4:	6003      	str	r3, [r0, #0]
 80044f6:	e7d6      	b.n	80044a6 <_free_r+0x26>
 80044f8:	6825      	ldr	r5, [r4, #0]
 80044fa:	1961      	adds	r1, r4, r5
 80044fc:	428b      	cmp	r3, r1
 80044fe:	bf04      	itt	eq
 8004500:	6819      	ldreq	r1, [r3, #0]
 8004502:	685b      	ldreq	r3, [r3, #4]
 8004504:	6063      	str	r3, [r4, #4]
 8004506:	bf04      	itt	eq
 8004508:	1949      	addeq	r1, r1, r5
 800450a:	6021      	streq	r1, [r4, #0]
 800450c:	6054      	str	r4, [r2, #4]
 800450e:	e7ca      	b.n	80044a6 <_free_r+0x26>
 8004510:	b003      	add	sp, #12
 8004512:	bd30      	pop	{r4, r5, pc}
 8004514:	200001f8 	.word	0x200001f8

08004518 <sbrk_aligned>:
 8004518:	b570      	push	{r4, r5, r6, lr}
 800451a:	4e0e      	ldr	r6, [pc, #56]	; (8004554 <sbrk_aligned+0x3c>)
 800451c:	460c      	mov	r4, r1
 800451e:	6831      	ldr	r1, [r6, #0]
 8004520:	4605      	mov	r5, r0
 8004522:	b911      	cbnz	r1, 800452a <sbrk_aligned+0x12>
 8004524:	f000 f8bc 	bl	80046a0 <_sbrk_r>
 8004528:	6030      	str	r0, [r6, #0]
 800452a:	4621      	mov	r1, r4
 800452c:	4628      	mov	r0, r5
 800452e:	f000 f8b7 	bl	80046a0 <_sbrk_r>
 8004532:	1c43      	adds	r3, r0, #1
 8004534:	d00a      	beq.n	800454c <sbrk_aligned+0x34>
 8004536:	1cc4      	adds	r4, r0, #3
 8004538:	f024 0403 	bic.w	r4, r4, #3
 800453c:	42a0      	cmp	r0, r4
 800453e:	d007      	beq.n	8004550 <sbrk_aligned+0x38>
 8004540:	1a21      	subs	r1, r4, r0
 8004542:	4628      	mov	r0, r5
 8004544:	f000 f8ac 	bl	80046a0 <_sbrk_r>
 8004548:	3001      	adds	r0, #1
 800454a:	d101      	bne.n	8004550 <sbrk_aligned+0x38>
 800454c:	f04f 34ff 	mov.w	r4, #4294967295
 8004550:	4620      	mov	r0, r4
 8004552:	bd70      	pop	{r4, r5, r6, pc}
 8004554:	200001fc 	.word	0x200001fc

08004558 <_malloc_r>:
 8004558:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800455c:	1ccd      	adds	r5, r1, #3
 800455e:	f025 0503 	bic.w	r5, r5, #3
 8004562:	3508      	adds	r5, #8
 8004564:	2d0c      	cmp	r5, #12
 8004566:	bf38      	it	cc
 8004568:	250c      	movcc	r5, #12
 800456a:	2d00      	cmp	r5, #0
 800456c:	4607      	mov	r7, r0
 800456e:	db01      	blt.n	8004574 <_malloc_r+0x1c>
 8004570:	42a9      	cmp	r1, r5
 8004572:	d905      	bls.n	8004580 <_malloc_r+0x28>
 8004574:	230c      	movs	r3, #12
 8004576:	603b      	str	r3, [r7, #0]
 8004578:	2600      	movs	r6, #0
 800457a:	4630      	mov	r0, r6
 800457c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004580:	4e2e      	ldr	r6, [pc, #184]	; (800463c <_malloc_r+0xe4>)
 8004582:	f000 f89d 	bl	80046c0 <__malloc_lock>
 8004586:	6833      	ldr	r3, [r6, #0]
 8004588:	461c      	mov	r4, r3
 800458a:	bb34      	cbnz	r4, 80045da <_malloc_r+0x82>
 800458c:	4629      	mov	r1, r5
 800458e:	4638      	mov	r0, r7
 8004590:	f7ff ffc2 	bl	8004518 <sbrk_aligned>
 8004594:	1c43      	adds	r3, r0, #1
 8004596:	4604      	mov	r4, r0
 8004598:	d14d      	bne.n	8004636 <_malloc_r+0xde>
 800459a:	6834      	ldr	r4, [r6, #0]
 800459c:	4626      	mov	r6, r4
 800459e:	2e00      	cmp	r6, #0
 80045a0:	d140      	bne.n	8004624 <_malloc_r+0xcc>
 80045a2:	6823      	ldr	r3, [r4, #0]
 80045a4:	4631      	mov	r1, r6
 80045a6:	4638      	mov	r0, r7
 80045a8:	eb04 0803 	add.w	r8, r4, r3
 80045ac:	f000 f878 	bl	80046a0 <_sbrk_r>
 80045b0:	4580      	cmp	r8, r0
 80045b2:	d13a      	bne.n	800462a <_malloc_r+0xd2>
 80045b4:	6821      	ldr	r1, [r4, #0]
 80045b6:	3503      	adds	r5, #3
 80045b8:	1a6d      	subs	r5, r5, r1
 80045ba:	f025 0503 	bic.w	r5, r5, #3
 80045be:	3508      	adds	r5, #8
 80045c0:	2d0c      	cmp	r5, #12
 80045c2:	bf38      	it	cc
 80045c4:	250c      	movcc	r5, #12
 80045c6:	4629      	mov	r1, r5
 80045c8:	4638      	mov	r0, r7
 80045ca:	f7ff ffa5 	bl	8004518 <sbrk_aligned>
 80045ce:	3001      	adds	r0, #1
 80045d0:	d02b      	beq.n	800462a <_malloc_r+0xd2>
 80045d2:	6823      	ldr	r3, [r4, #0]
 80045d4:	442b      	add	r3, r5
 80045d6:	6023      	str	r3, [r4, #0]
 80045d8:	e00e      	b.n	80045f8 <_malloc_r+0xa0>
 80045da:	6822      	ldr	r2, [r4, #0]
 80045dc:	1b52      	subs	r2, r2, r5
 80045de:	d41e      	bmi.n	800461e <_malloc_r+0xc6>
 80045e0:	2a0b      	cmp	r2, #11
 80045e2:	d916      	bls.n	8004612 <_malloc_r+0xba>
 80045e4:	1961      	adds	r1, r4, r5
 80045e6:	42a3      	cmp	r3, r4
 80045e8:	6025      	str	r5, [r4, #0]
 80045ea:	bf18      	it	ne
 80045ec:	6059      	strne	r1, [r3, #4]
 80045ee:	6863      	ldr	r3, [r4, #4]
 80045f0:	bf08      	it	eq
 80045f2:	6031      	streq	r1, [r6, #0]
 80045f4:	5162      	str	r2, [r4, r5]
 80045f6:	604b      	str	r3, [r1, #4]
 80045f8:	4638      	mov	r0, r7
 80045fa:	f104 060b 	add.w	r6, r4, #11
 80045fe:	f000 f865 	bl	80046cc <__malloc_unlock>
 8004602:	f026 0607 	bic.w	r6, r6, #7
 8004606:	1d23      	adds	r3, r4, #4
 8004608:	1af2      	subs	r2, r6, r3
 800460a:	d0b6      	beq.n	800457a <_malloc_r+0x22>
 800460c:	1b9b      	subs	r3, r3, r6
 800460e:	50a3      	str	r3, [r4, r2]
 8004610:	e7b3      	b.n	800457a <_malloc_r+0x22>
 8004612:	6862      	ldr	r2, [r4, #4]
 8004614:	42a3      	cmp	r3, r4
 8004616:	bf0c      	ite	eq
 8004618:	6032      	streq	r2, [r6, #0]
 800461a:	605a      	strne	r2, [r3, #4]
 800461c:	e7ec      	b.n	80045f8 <_malloc_r+0xa0>
 800461e:	4623      	mov	r3, r4
 8004620:	6864      	ldr	r4, [r4, #4]
 8004622:	e7b2      	b.n	800458a <_malloc_r+0x32>
 8004624:	4634      	mov	r4, r6
 8004626:	6876      	ldr	r6, [r6, #4]
 8004628:	e7b9      	b.n	800459e <_malloc_r+0x46>
 800462a:	230c      	movs	r3, #12
 800462c:	603b      	str	r3, [r7, #0]
 800462e:	4638      	mov	r0, r7
 8004630:	f000 f84c 	bl	80046cc <__malloc_unlock>
 8004634:	e7a1      	b.n	800457a <_malloc_r+0x22>
 8004636:	6025      	str	r5, [r4, #0]
 8004638:	e7de      	b.n	80045f8 <_malloc_r+0xa0>
 800463a:	bf00      	nop
 800463c:	200001f8 	.word	0x200001f8

08004640 <_realloc_r>:
 8004640:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004644:	4680      	mov	r8, r0
 8004646:	4614      	mov	r4, r2
 8004648:	460e      	mov	r6, r1
 800464a:	b921      	cbnz	r1, 8004656 <_realloc_r+0x16>
 800464c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004650:	4611      	mov	r1, r2
 8004652:	f7ff bf81 	b.w	8004558 <_malloc_r>
 8004656:	b92a      	cbnz	r2, 8004664 <_realloc_r+0x24>
 8004658:	f7ff ff12 	bl	8004480 <_free_r>
 800465c:	4625      	mov	r5, r4
 800465e:	4628      	mov	r0, r5
 8004660:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004664:	f000 f838 	bl	80046d8 <_malloc_usable_size_r>
 8004668:	4284      	cmp	r4, r0
 800466a:	4607      	mov	r7, r0
 800466c:	d802      	bhi.n	8004674 <_realloc_r+0x34>
 800466e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004672:	d812      	bhi.n	800469a <_realloc_r+0x5a>
 8004674:	4621      	mov	r1, r4
 8004676:	4640      	mov	r0, r8
 8004678:	f7ff ff6e 	bl	8004558 <_malloc_r>
 800467c:	4605      	mov	r5, r0
 800467e:	2800      	cmp	r0, #0
 8004680:	d0ed      	beq.n	800465e <_realloc_r+0x1e>
 8004682:	42bc      	cmp	r4, r7
 8004684:	4622      	mov	r2, r4
 8004686:	4631      	mov	r1, r6
 8004688:	bf28      	it	cs
 800468a:	463a      	movcs	r2, r7
 800468c:	f7ff fed0 	bl	8004430 <memcpy>
 8004690:	4631      	mov	r1, r6
 8004692:	4640      	mov	r0, r8
 8004694:	f7ff fef4 	bl	8004480 <_free_r>
 8004698:	e7e1      	b.n	800465e <_realloc_r+0x1e>
 800469a:	4635      	mov	r5, r6
 800469c:	e7df      	b.n	800465e <_realloc_r+0x1e>
	...

080046a0 <_sbrk_r>:
 80046a0:	b538      	push	{r3, r4, r5, lr}
 80046a2:	4d06      	ldr	r5, [pc, #24]	; (80046bc <_sbrk_r+0x1c>)
 80046a4:	2300      	movs	r3, #0
 80046a6:	4604      	mov	r4, r0
 80046a8:	4608      	mov	r0, r1
 80046aa:	602b      	str	r3, [r5, #0]
 80046ac:	f7fc fba0 	bl	8000df0 <_sbrk>
 80046b0:	1c43      	adds	r3, r0, #1
 80046b2:	d102      	bne.n	80046ba <_sbrk_r+0x1a>
 80046b4:	682b      	ldr	r3, [r5, #0]
 80046b6:	b103      	cbz	r3, 80046ba <_sbrk_r+0x1a>
 80046b8:	6023      	str	r3, [r4, #0]
 80046ba:	bd38      	pop	{r3, r4, r5, pc}
 80046bc:	20000200 	.word	0x20000200

080046c0 <__malloc_lock>:
 80046c0:	4801      	ldr	r0, [pc, #4]	; (80046c8 <__malloc_lock+0x8>)
 80046c2:	f000 b811 	b.w	80046e8 <__retarget_lock_acquire_recursive>
 80046c6:	bf00      	nop
 80046c8:	20000204 	.word	0x20000204

080046cc <__malloc_unlock>:
 80046cc:	4801      	ldr	r0, [pc, #4]	; (80046d4 <__malloc_unlock+0x8>)
 80046ce:	f000 b80c 	b.w	80046ea <__retarget_lock_release_recursive>
 80046d2:	bf00      	nop
 80046d4:	20000204 	.word	0x20000204

080046d8 <_malloc_usable_size_r>:
 80046d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80046dc:	1f18      	subs	r0, r3, #4
 80046de:	2b00      	cmp	r3, #0
 80046e0:	bfbc      	itt	lt
 80046e2:	580b      	ldrlt	r3, [r1, r0]
 80046e4:	18c0      	addlt	r0, r0, r3
 80046e6:	4770      	bx	lr

080046e8 <__retarget_lock_acquire_recursive>:
 80046e8:	4770      	bx	lr

080046ea <__retarget_lock_release_recursive>:
 80046ea:	4770      	bx	lr

080046ec <_init>:
 80046ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046ee:	bf00      	nop
 80046f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80046f2:	bc08      	pop	{r3}
 80046f4:	469e      	mov	lr, r3
 80046f6:	4770      	bx	lr

080046f8 <_fini>:
 80046f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046fa:	bf00      	nop
 80046fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80046fe:	bc08      	pop	{r3}
 8004700:	469e      	mov	lr, r3
 8004702:	4770      	bx	lr
