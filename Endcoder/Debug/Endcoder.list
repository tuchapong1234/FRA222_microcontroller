
Endcoder.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000612c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000240  080062d0  080062d0  000162d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006510  08006510  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08006510  08006510  00016510  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006518  08006518  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006518  08006518  00016518  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800651c  0800651c  0001651c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08006520  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001a0  20000070  08006590  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000210  08006590  00020210  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000dbb3  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ca7  00000000  00000000  0002dc53  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c58  00000000  00000000  0002f900  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000bb0  00000000  00000000  00030558  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000168ad  00000000  00000000  00031108  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ddc9  00000000  00000000  000479b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008ec39  00000000  00000000  0005577e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e43b7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003c0c  00000000  00000000  000e4408  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080062b4 	.word	0x080062b4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	080062b4 	.word	0x080062b4

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_d2iz>:
 8000b2c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b30:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b34:	d215      	bcs.n	8000b62 <__aeabi_d2iz+0x36>
 8000b36:	d511      	bpl.n	8000b5c <__aeabi_d2iz+0x30>
 8000b38:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b3c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b40:	d912      	bls.n	8000b68 <__aeabi_d2iz+0x3c>
 8000b42:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b46:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b4a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b4e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b52:	fa23 f002 	lsr.w	r0, r3, r2
 8000b56:	bf18      	it	ne
 8000b58:	4240      	negne	r0, r0
 8000b5a:	4770      	bx	lr
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b66:	d105      	bne.n	8000b74 <__aeabi_d2iz+0x48>
 8000b68:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b6c:	bf08      	it	eq
 8000b6e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b72:	4770      	bx	lr
 8000b74:	f04f 0000 	mov.w	r0, #0
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop

08000b7c <__aeabi_d2uiz>:
 8000b7c:	004a      	lsls	r2, r1, #1
 8000b7e:	d211      	bcs.n	8000ba4 <__aeabi_d2uiz+0x28>
 8000b80:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b84:	d211      	bcs.n	8000baa <__aeabi_d2uiz+0x2e>
 8000b86:	d50d      	bpl.n	8000ba4 <__aeabi_d2uiz+0x28>
 8000b88:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b8c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b90:	d40e      	bmi.n	8000bb0 <__aeabi_d2uiz+0x34>
 8000b92:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b96:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b9a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	4770      	bx	lr
 8000ba4:	f04f 0000 	mov.w	r0, #0
 8000ba8:	4770      	bx	lr
 8000baa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bae:	d102      	bne.n	8000bb6 <__aeabi_d2uiz+0x3a>
 8000bb0:	f04f 30ff 	mov.w	r0, #4294967295
 8000bb4:	4770      	bx	lr
 8000bb6:	f04f 0000 	mov.w	r0, #0
 8000bba:	4770      	bx	lr

08000bbc <__aeabi_d2f>:
 8000bbc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bc0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc4:	bf24      	itt	cs
 8000bc6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bca:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bce:	d90d      	bls.n	8000bec <__aeabi_d2f+0x30>
 8000bd0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bdc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000be0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be4:	bf08      	it	eq
 8000be6:	f020 0001 	biceq.w	r0, r0, #1
 8000bea:	4770      	bx	lr
 8000bec:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bf0:	d121      	bne.n	8000c36 <__aeabi_d2f+0x7a>
 8000bf2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf6:	bfbc      	itt	lt
 8000bf8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bfc:	4770      	bxlt	lr
 8000bfe:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c02:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c06:	f1c2 0218 	rsb	r2, r2, #24
 8000c0a:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c12:	fa20 f002 	lsr.w	r0, r0, r2
 8000c16:	bf18      	it	ne
 8000c18:	f040 0001 	orrne.w	r0, r0, #1
 8000c1c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c20:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c24:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c28:	ea40 000c 	orr.w	r0, r0, ip
 8000c2c:	fa23 f302 	lsr.w	r3, r3, r2
 8000c30:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c34:	e7cc      	b.n	8000bd0 <__aeabi_d2f+0x14>
 8000c36:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c3a:	d107      	bne.n	8000c4c <__aeabi_d2f+0x90>
 8000c3c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c40:	bf1e      	ittt	ne
 8000c42:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c46:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c4a:	4770      	bxne	lr
 8000c4c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c50:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c54:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c58:	4770      	bx	lr
 8000c5a:	bf00      	nop

08000c5c <__aeabi_uldivmod>:
 8000c5c:	b953      	cbnz	r3, 8000c74 <__aeabi_uldivmod+0x18>
 8000c5e:	b94a      	cbnz	r2, 8000c74 <__aeabi_uldivmod+0x18>
 8000c60:	2900      	cmp	r1, #0
 8000c62:	bf08      	it	eq
 8000c64:	2800      	cmpeq	r0, #0
 8000c66:	bf1c      	itt	ne
 8000c68:	f04f 31ff 	movne.w	r1, #4294967295
 8000c6c:	f04f 30ff 	movne.w	r0, #4294967295
 8000c70:	f000 b974 	b.w	8000f5c <__aeabi_idiv0>
 8000c74:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c78:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c7c:	f000 f806 	bl	8000c8c <__udivmoddi4>
 8000c80:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c84:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c88:	b004      	add	sp, #16
 8000c8a:	4770      	bx	lr

08000c8c <__udivmoddi4>:
 8000c8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c90:	9d08      	ldr	r5, [sp, #32]
 8000c92:	4604      	mov	r4, r0
 8000c94:	468e      	mov	lr, r1
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d14d      	bne.n	8000d36 <__udivmoddi4+0xaa>
 8000c9a:	428a      	cmp	r2, r1
 8000c9c:	4694      	mov	ip, r2
 8000c9e:	d969      	bls.n	8000d74 <__udivmoddi4+0xe8>
 8000ca0:	fab2 f282 	clz	r2, r2
 8000ca4:	b152      	cbz	r2, 8000cbc <__udivmoddi4+0x30>
 8000ca6:	fa01 f302 	lsl.w	r3, r1, r2
 8000caa:	f1c2 0120 	rsb	r1, r2, #32
 8000cae:	fa20 f101 	lsr.w	r1, r0, r1
 8000cb2:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cb6:	ea41 0e03 	orr.w	lr, r1, r3
 8000cba:	4094      	lsls	r4, r2
 8000cbc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cc0:	0c21      	lsrs	r1, r4, #16
 8000cc2:	fbbe f6f8 	udiv	r6, lr, r8
 8000cc6:	fa1f f78c 	uxth.w	r7, ip
 8000cca:	fb08 e316 	mls	r3, r8, r6, lr
 8000cce:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cd2:	fb06 f107 	mul.w	r1, r6, r7
 8000cd6:	4299      	cmp	r1, r3
 8000cd8:	d90a      	bls.n	8000cf0 <__udivmoddi4+0x64>
 8000cda:	eb1c 0303 	adds.w	r3, ip, r3
 8000cde:	f106 30ff 	add.w	r0, r6, #4294967295
 8000ce2:	f080 811f 	bcs.w	8000f24 <__udivmoddi4+0x298>
 8000ce6:	4299      	cmp	r1, r3
 8000ce8:	f240 811c 	bls.w	8000f24 <__udivmoddi4+0x298>
 8000cec:	3e02      	subs	r6, #2
 8000cee:	4463      	add	r3, ip
 8000cf0:	1a5b      	subs	r3, r3, r1
 8000cf2:	b2a4      	uxth	r4, r4
 8000cf4:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cf8:	fb08 3310 	mls	r3, r8, r0, r3
 8000cfc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d00:	fb00 f707 	mul.w	r7, r0, r7
 8000d04:	42a7      	cmp	r7, r4
 8000d06:	d90a      	bls.n	8000d1e <__udivmoddi4+0x92>
 8000d08:	eb1c 0404 	adds.w	r4, ip, r4
 8000d0c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d10:	f080 810a 	bcs.w	8000f28 <__udivmoddi4+0x29c>
 8000d14:	42a7      	cmp	r7, r4
 8000d16:	f240 8107 	bls.w	8000f28 <__udivmoddi4+0x29c>
 8000d1a:	4464      	add	r4, ip
 8000d1c:	3802      	subs	r0, #2
 8000d1e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d22:	1be4      	subs	r4, r4, r7
 8000d24:	2600      	movs	r6, #0
 8000d26:	b11d      	cbz	r5, 8000d30 <__udivmoddi4+0xa4>
 8000d28:	40d4      	lsrs	r4, r2
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	e9c5 4300 	strd	r4, r3, [r5]
 8000d30:	4631      	mov	r1, r6
 8000d32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d36:	428b      	cmp	r3, r1
 8000d38:	d909      	bls.n	8000d4e <__udivmoddi4+0xc2>
 8000d3a:	2d00      	cmp	r5, #0
 8000d3c:	f000 80ef 	beq.w	8000f1e <__udivmoddi4+0x292>
 8000d40:	2600      	movs	r6, #0
 8000d42:	e9c5 0100 	strd	r0, r1, [r5]
 8000d46:	4630      	mov	r0, r6
 8000d48:	4631      	mov	r1, r6
 8000d4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d4e:	fab3 f683 	clz	r6, r3
 8000d52:	2e00      	cmp	r6, #0
 8000d54:	d14a      	bne.n	8000dec <__udivmoddi4+0x160>
 8000d56:	428b      	cmp	r3, r1
 8000d58:	d302      	bcc.n	8000d60 <__udivmoddi4+0xd4>
 8000d5a:	4282      	cmp	r2, r0
 8000d5c:	f200 80f9 	bhi.w	8000f52 <__udivmoddi4+0x2c6>
 8000d60:	1a84      	subs	r4, r0, r2
 8000d62:	eb61 0303 	sbc.w	r3, r1, r3
 8000d66:	2001      	movs	r0, #1
 8000d68:	469e      	mov	lr, r3
 8000d6a:	2d00      	cmp	r5, #0
 8000d6c:	d0e0      	beq.n	8000d30 <__udivmoddi4+0xa4>
 8000d6e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d72:	e7dd      	b.n	8000d30 <__udivmoddi4+0xa4>
 8000d74:	b902      	cbnz	r2, 8000d78 <__udivmoddi4+0xec>
 8000d76:	deff      	udf	#255	; 0xff
 8000d78:	fab2 f282 	clz	r2, r2
 8000d7c:	2a00      	cmp	r2, #0
 8000d7e:	f040 8092 	bne.w	8000ea6 <__udivmoddi4+0x21a>
 8000d82:	eba1 010c 	sub.w	r1, r1, ip
 8000d86:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d8a:	fa1f fe8c 	uxth.w	lr, ip
 8000d8e:	2601      	movs	r6, #1
 8000d90:	0c20      	lsrs	r0, r4, #16
 8000d92:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d96:	fb07 1113 	mls	r1, r7, r3, r1
 8000d9a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d9e:	fb0e f003 	mul.w	r0, lr, r3
 8000da2:	4288      	cmp	r0, r1
 8000da4:	d908      	bls.n	8000db8 <__udivmoddi4+0x12c>
 8000da6:	eb1c 0101 	adds.w	r1, ip, r1
 8000daa:	f103 38ff 	add.w	r8, r3, #4294967295
 8000dae:	d202      	bcs.n	8000db6 <__udivmoddi4+0x12a>
 8000db0:	4288      	cmp	r0, r1
 8000db2:	f200 80cb 	bhi.w	8000f4c <__udivmoddi4+0x2c0>
 8000db6:	4643      	mov	r3, r8
 8000db8:	1a09      	subs	r1, r1, r0
 8000dba:	b2a4      	uxth	r4, r4
 8000dbc:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dc0:	fb07 1110 	mls	r1, r7, r0, r1
 8000dc4:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000dc8:	fb0e fe00 	mul.w	lr, lr, r0
 8000dcc:	45a6      	cmp	lr, r4
 8000dce:	d908      	bls.n	8000de2 <__udivmoddi4+0x156>
 8000dd0:	eb1c 0404 	adds.w	r4, ip, r4
 8000dd4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dd8:	d202      	bcs.n	8000de0 <__udivmoddi4+0x154>
 8000dda:	45a6      	cmp	lr, r4
 8000ddc:	f200 80bb 	bhi.w	8000f56 <__udivmoddi4+0x2ca>
 8000de0:	4608      	mov	r0, r1
 8000de2:	eba4 040e 	sub.w	r4, r4, lr
 8000de6:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000dea:	e79c      	b.n	8000d26 <__udivmoddi4+0x9a>
 8000dec:	f1c6 0720 	rsb	r7, r6, #32
 8000df0:	40b3      	lsls	r3, r6
 8000df2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000df6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000dfa:	fa20 f407 	lsr.w	r4, r0, r7
 8000dfe:	fa01 f306 	lsl.w	r3, r1, r6
 8000e02:	431c      	orrs	r4, r3
 8000e04:	40f9      	lsrs	r1, r7
 8000e06:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e0a:	fa00 f306 	lsl.w	r3, r0, r6
 8000e0e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e12:	0c20      	lsrs	r0, r4, #16
 8000e14:	fa1f fe8c 	uxth.w	lr, ip
 8000e18:	fb09 1118 	mls	r1, r9, r8, r1
 8000e1c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e20:	fb08 f00e 	mul.w	r0, r8, lr
 8000e24:	4288      	cmp	r0, r1
 8000e26:	fa02 f206 	lsl.w	r2, r2, r6
 8000e2a:	d90b      	bls.n	8000e44 <__udivmoddi4+0x1b8>
 8000e2c:	eb1c 0101 	adds.w	r1, ip, r1
 8000e30:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e34:	f080 8088 	bcs.w	8000f48 <__udivmoddi4+0x2bc>
 8000e38:	4288      	cmp	r0, r1
 8000e3a:	f240 8085 	bls.w	8000f48 <__udivmoddi4+0x2bc>
 8000e3e:	f1a8 0802 	sub.w	r8, r8, #2
 8000e42:	4461      	add	r1, ip
 8000e44:	1a09      	subs	r1, r1, r0
 8000e46:	b2a4      	uxth	r4, r4
 8000e48:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e4c:	fb09 1110 	mls	r1, r9, r0, r1
 8000e50:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e54:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e58:	458e      	cmp	lr, r1
 8000e5a:	d908      	bls.n	8000e6e <__udivmoddi4+0x1e2>
 8000e5c:	eb1c 0101 	adds.w	r1, ip, r1
 8000e60:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e64:	d26c      	bcs.n	8000f40 <__udivmoddi4+0x2b4>
 8000e66:	458e      	cmp	lr, r1
 8000e68:	d96a      	bls.n	8000f40 <__udivmoddi4+0x2b4>
 8000e6a:	3802      	subs	r0, #2
 8000e6c:	4461      	add	r1, ip
 8000e6e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e72:	fba0 9402 	umull	r9, r4, r0, r2
 8000e76:	eba1 010e 	sub.w	r1, r1, lr
 8000e7a:	42a1      	cmp	r1, r4
 8000e7c:	46c8      	mov	r8, r9
 8000e7e:	46a6      	mov	lr, r4
 8000e80:	d356      	bcc.n	8000f30 <__udivmoddi4+0x2a4>
 8000e82:	d053      	beq.n	8000f2c <__udivmoddi4+0x2a0>
 8000e84:	b15d      	cbz	r5, 8000e9e <__udivmoddi4+0x212>
 8000e86:	ebb3 0208 	subs.w	r2, r3, r8
 8000e8a:	eb61 010e 	sbc.w	r1, r1, lr
 8000e8e:	fa01 f707 	lsl.w	r7, r1, r7
 8000e92:	fa22 f306 	lsr.w	r3, r2, r6
 8000e96:	40f1      	lsrs	r1, r6
 8000e98:	431f      	orrs	r7, r3
 8000e9a:	e9c5 7100 	strd	r7, r1, [r5]
 8000e9e:	2600      	movs	r6, #0
 8000ea0:	4631      	mov	r1, r6
 8000ea2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ea6:	f1c2 0320 	rsb	r3, r2, #32
 8000eaa:	40d8      	lsrs	r0, r3
 8000eac:	fa0c fc02 	lsl.w	ip, ip, r2
 8000eb0:	fa21 f303 	lsr.w	r3, r1, r3
 8000eb4:	4091      	lsls	r1, r2
 8000eb6:	4301      	orrs	r1, r0
 8000eb8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ebc:	fa1f fe8c 	uxth.w	lr, ip
 8000ec0:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ec4:	fb07 3610 	mls	r6, r7, r0, r3
 8000ec8:	0c0b      	lsrs	r3, r1, #16
 8000eca:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000ece:	fb00 f60e 	mul.w	r6, r0, lr
 8000ed2:	429e      	cmp	r6, r3
 8000ed4:	fa04 f402 	lsl.w	r4, r4, r2
 8000ed8:	d908      	bls.n	8000eec <__udivmoddi4+0x260>
 8000eda:	eb1c 0303 	adds.w	r3, ip, r3
 8000ede:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ee2:	d22f      	bcs.n	8000f44 <__udivmoddi4+0x2b8>
 8000ee4:	429e      	cmp	r6, r3
 8000ee6:	d92d      	bls.n	8000f44 <__udivmoddi4+0x2b8>
 8000ee8:	3802      	subs	r0, #2
 8000eea:	4463      	add	r3, ip
 8000eec:	1b9b      	subs	r3, r3, r6
 8000eee:	b289      	uxth	r1, r1
 8000ef0:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ef4:	fb07 3316 	mls	r3, r7, r6, r3
 8000ef8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000efc:	fb06 f30e 	mul.w	r3, r6, lr
 8000f00:	428b      	cmp	r3, r1
 8000f02:	d908      	bls.n	8000f16 <__udivmoddi4+0x28a>
 8000f04:	eb1c 0101 	adds.w	r1, ip, r1
 8000f08:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f0c:	d216      	bcs.n	8000f3c <__udivmoddi4+0x2b0>
 8000f0e:	428b      	cmp	r3, r1
 8000f10:	d914      	bls.n	8000f3c <__udivmoddi4+0x2b0>
 8000f12:	3e02      	subs	r6, #2
 8000f14:	4461      	add	r1, ip
 8000f16:	1ac9      	subs	r1, r1, r3
 8000f18:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f1c:	e738      	b.n	8000d90 <__udivmoddi4+0x104>
 8000f1e:	462e      	mov	r6, r5
 8000f20:	4628      	mov	r0, r5
 8000f22:	e705      	b.n	8000d30 <__udivmoddi4+0xa4>
 8000f24:	4606      	mov	r6, r0
 8000f26:	e6e3      	b.n	8000cf0 <__udivmoddi4+0x64>
 8000f28:	4618      	mov	r0, r3
 8000f2a:	e6f8      	b.n	8000d1e <__udivmoddi4+0x92>
 8000f2c:	454b      	cmp	r3, r9
 8000f2e:	d2a9      	bcs.n	8000e84 <__udivmoddi4+0x1f8>
 8000f30:	ebb9 0802 	subs.w	r8, r9, r2
 8000f34:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f38:	3801      	subs	r0, #1
 8000f3a:	e7a3      	b.n	8000e84 <__udivmoddi4+0x1f8>
 8000f3c:	4646      	mov	r6, r8
 8000f3e:	e7ea      	b.n	8000f16 <__udivmoddi4+0x28a>
 8000f40:	4620      	mov	r0, r4
 8000f42:	e794      	b.n	8000e6e <__udivmoddi4+0x1e2>
 8000f44:	4640      	mov	r0, r8
 8000f46:	e7d1      	b.n	8000eec <__udivmoddi4+0x260>
 8000f48:	46d0      	mov	r8, sl
 8000f4a:	e77b      	b.n	8000e44 <__udivmoddi4+0x1b8>
 8000f4c:	3b02      	subs	r3, #2
 8000f4e:	4461      	add	r1, ip
 8000f50:	e732      	b.n	8000db8 <__udivmoddi4+0x12c>
 8000f52:	4630      	mov	r0, r6
 8000f54:	e709      	b.n	8000d6a <__udivmoddi4+0xde>
 8000f56:	4464      	add	r4, ip
 8000f58:	3802      	subs	r0, #2
 8000f5a:	e742      	b.n	8000de2 <__udivmoddi4+0x156>

08000f5c <__aeabi_idiv0>:
 8000f5c:	4770      	bx	lr
 8000f5e:	bf00      	nop

08000f60 <HAL_TIM_IC_CaptureCallback>:

int16_t position = 0;

int speed = 0;
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8000f60:	b480      	push	{r7}
 8000f62:	b083      	sub	sp, #12
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
	counter = __HAL_TIM_GET_COUNTER(htim);
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f6e:	4a0b      	ldr	r2, [pc, #44]	; (8000f9c <HAL_TIM_IC_CaptureCallback+0x3c>)
 8000f70:	6013      	str	r3, [r2, #0]

	count = (int16_t)counter;
 8000f72:	4b0a      	ldr	r3, [pc, #40]	; (8000f9c <HAL_TIM_IC_CaptureCallback+0x3c>)
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	b21a      	sxth	r2, r3
 8000f78:	4b09      	ldr	r3, [pc, #36]	; (8000fa0 <HAL_TIM_IC_CaptureCallback+0x40>)
 8000f7a:	801a      	strh	r2, [r3, #0]

	position = count/4;
 8000f7c:	4b08      	ldr	r3, [pc, #32]	; (8000fa0 <HAL_TIM_IC_CaptureCallback+0x40>)
 8000f7e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	da00      	bge.n	8000f88 <HAL_TIM_IC_CaptureCallback+0x28>
 8000f86:	3303      	adds	r3, #3
 8000f88:	109b      	asrs	r3, r3, #2
 8000f8a:	b21a      	sxth	r2, r3
 8000f8c:	4b05      	ldr	r3, [pc, #20]	; (8000fa4 <HAL_TIM_IC_CaptureCallback+0x44>)
 8000f8e:	801a      	strh	r2, [r3, #0]
}
 8000f90:	bf00      	nop
 8000f92:	370c      	adds	r7, #12
 8000f94:	46bd      	mov	sp, r7
 8000f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9a:	4770      	bx	lr
 8000f9c:	200001c8 	.word	0x200001c8
 8000fa0:	200001cc 	.word	0x200001cc
 8000fa4:	200001ce 	.word	0x200001ce

08000fa8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fa8:	b590      	push	{r4, r7, lr}
 8000faa:	b083      	sub	sp, #12
 8000fac:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fae:	f000 fd05 	bl	80019bc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fb2:	f000 f8a1 	bl	80010f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fb6:	f000 fa47 	bl	8001448 <MX_GPIO_Init>
  MX_DMA_Init();
 8000fba:	f000 fa25 	bl	8001408 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000fbe:	f000 f9f9 	bl	80013b4 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8000fc2:	f000 f903 	bl	80011cc <MX_TIM1_Init>
  MX_TIM2_Init();
 8000fc6:	f000 f9a1 	bl	800130c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Encoder_Start_IT(&htim2, TIM_CHANNEL_ALL);
 8000fca:	213c      	movs	r1, #60	; 0x3c
 8000fcc:	483e      	ldr	r0, [pc, #248]	; (80010c8 <main+0x120>)
 8000fce:	f002 f9bb 	bl	8003348 <HAL_TIM_Encoder_Start_IT>
//  HAL_TIM_IC_Start(&htim2, TIM_CHANNEL_2);
//
//  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
//  TIM1 -> CCR1 = 225;

  TIM1 ->CCR1 = 0;
 8000fd2:	4b3e      	ldr	r3, [pc, #248]	; (80010cc <main+0x124>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	635a      	str	r2, [r3, #52]	; 0x34
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000fd8:	2100      	movs	r1, #0
 8000fda:	483d      	ldr	r0, [pc, #244]	; (80010d0 <main+0x128>)
 8000fdc:	f002 f85e 	bl	800309c <HAL_TIM_PWM_Start>


  HAL_Delay(5000);
 8000fe0:	f241 3088 	movw	r0, #5000	; 0x1388
 8000fe4:	f000 fd5c 	bl	8001aa0 <HAL_Delay>
//
//	  htim1.Instance -> CCR1 = 60;
//	  HAL_Delay(1000);


	  if(HAL_GetTick() > timestamp)
 8000fe8:	f000 fd4e 	bl	8001a88 <HAL_GetTick>
 8000fec:	4603      	mov	r3, r0
 8000fee:	4a39      	ldr	r2, [pc, #228]	; (80010d4 <main+0x12c>)
 8000ff0:	8812      	ldrh	r2, [r2, #0]
 8000ff2:	4293      	cmp	r3, r2
 8000ff4:	d949      	bls.n	800108a <main+0xe2>
	  {
		  timestamp += 12.5;
 8000ff6:	4b37      	ldr	r3, [pc, #220]	; (80010d4 <main+0x12c>)
 8000ff8:	881b      	ldrh	r3, [r3, #0]
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	f7ff fa92 	bl	8000524 <__aeabi_i2d>
 8001000:	f04f 0200 	mov.w	r2, #0
 8001004:	4b34      	ldr	r3, [pc, #208]	; (80010d8 <main+0x130>)
 8001006:	f7ff f941 	bl	800028c <__adddf3>
 800100a:	4602      	mov	r2, r0
 800100c:	460b      	mov	r3, r1
 800100e:	4610      	mov	r0, r2
 8001010:	4619      	mov	r1, r3
 8001012:	f7ff fdb3 	bl	8000b7c <__aeabi_d2uiz>
 8001016:	4603      	mov	r3, r0
 8001018:	b29a      	uxth	r2, r3
 800101a:	4b2e      	ldr	r3, [pc, #184]	; (80010d4 <main+0x12c>)
 800101c:	801a      	strh	r2, [r3, #0]
		  target = 120*sin(0.3 * M_PI*	timestamp / 1000.0)+120;
 800101e:	4b2d      	ldr	r3, [pc, #180]	; (80010d4 <main+0x12c>)
 8001020:	881b      	ldrh	r3, [r3, #0]
 8001022:	4618      	mov	r0, r3
 8001024:	f7ff fa7e 	bl	8000524 <__aeabi_i2d>
 8001028:	a325      	add	r3, pc, #148	; (adr r3, 80010c0 <main+0x118>)
 800102a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800102e:	f7ff fae3 	bl	80005f8 <__aeabi_dmul>
 8001032:	4602      	mov	r2, r0
 8001034:	460b      	mov	r3, r1
 8001036:	4610      	mov	r0, r2
 8001038:	4619      	mov	r1, r3
 800103a:	f04f 0200 	mov.w	r2, #0
 800103e:	4b27      	ldr	r3, [pc, #156]	; (80010dc <main+0x134>)
 8001040:	f7ff fc04 	bl	800084c <__aeabi_ddiv>
 8001044:	4602      	mov	r2, r0
 8001046:	460b      	mov	r3, r1
 8001048:	ec43 2b17 	vmov	d7, r2, r3
 800104c:	eeb0 0a47 	vmov.f32	s0, s14
 8001050:	eef0 0a67 	vmov.f32	s1, s15
 8001054:	f004 f8e4 	bl	8005220 <sin>
 8001058:	ec51 0b10 	vmov	r0, r1, d0
 800105c:	f04f 0200 	mov.w	r2, #0
 8001060:	4b1f      	ldr	r3, [pc, #124]	; (80010e0 <main+0x138>)
 8001062:	f7ff fac9 	bl	80005f8 <__aeabi_dmul>
 8001066:	4602      	mov	r2, r0
 8001068:	460b      	mov	r3, r1
 800106a:	4610      	mov	r0, r2
 800106c:	4619      	mov	r1, r3
 800106e:	f04f 0200 	mov.w	r2, #0
 8001072:	4b1b      	ldr	r3, [pc, #108]	; (80010e0 <main+0x138>)
 8001074:	f7ff f90a 	bl	800028c <__adddf3>
 8001078:	4602      	mov	r2, r0
 800107a:	460b      	mov	r3, r1
 800107c:	4610      	mov	r0, r2
 800107e:	4619      	mov	r1, r3
 8001080:	f7ff fd9c 	bl	8000bbc <__aeabi_d2f>
 8001084:	4603      	mov	r3, r0
 8001086:	4a17      	ldr	r2, [pc, #92]	; (80010e4 <main+0x13c>)
 8001088:	6013      	str	r3, [r2, #0]
//	  PID();
//	  Motor();



	  sprintf(TxBuffer,"%d\r %d\r %f\r\n",0, position, target);
 800108a:	4b17      	ldr	r3, [pc, #92]	; (80010e8 <main+0x140>)
 800108c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001090:	461c      	mov	r4, r3
 8001092:	4b14      	ldr	r3, [pc, #80]	; (80010e4 <main+0x13c>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	4618      	mov	r0, r3
 8001098:	f7ff fa56 	bl	8000548 <__aeabi_f2d>
 800109c:	4602      	mov	r2, r0
 800109e:	460b      	mov	r3, r1
 80010a0:	e9cd 2300 	strd	r2, r3, [sp]
 80010a4:	4623      	mov	r3, r4
 80010a6:	2200      	movs	r2, #0
 80010a8:	4910      	ldr	r1, [pc, #64]	; (80010ec <main+0x144>)
 80010aa:	4811      	ldr	r0, [pc, #68]	; (80010f0 <main+0x148>)
 80010ac:	f003 fc48 	bl	8004940 <siprintf>
	  HAL_UART_Transmit(&huart2, (uint8_t *) TxBuffer, 30, HAL_MAX_DELAY);
 80010b0:	f04f 33ff 	mov.w	r3, #4294967295
 80010b4:	221e      	movs	r2, #30
 80010b6:	490e      	ldr	r1, [pc, #56]	; (80010f0 <main+0x148>)
 80010b8:	480e      	ldr	r0, [pc, #56]	; (80010f4 <main+0x14c>)
 80010ba:	f003 f89a 	bl	80041f2 <HAL_UART_Transmit>
	  if(HAL_GetTick() > timestamp)
 80010be:	e793      	b.n	8000fe8 <main+0x40>
 80010c0:	31eb6950 	.word	0x31eb6950
 80010c4:	3fee28c7 	.word	0x3fee28c7
 80010c8:	200000d4 	.word	0x200000d4
 80010cc:	40010000 	.word	0x40010000
 80010d0:	2000008c 	.word	0x2000008c
 80010d4:	200001c4 	.word	0x200001c4
 80010d8:	40290000 	.word	0x40290000
 80010dc:	408f4000 	.word	0x408f4000
 80010e0:	405e0000 	.word	0x405e0000
 80010e4:	200001c0 	.word	0x200001c0
 80010e8:	200001ce 	.word	0x200001ce
 80010ec:	080062d0 	.word	0x080062d0
 80010f0:	200001d4 	.word	0x200001d4
 80010f4:	2000017c 	.word	0x2000017c

080010f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b094      	sub	sp, #80	; 0x50
 80010fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010fe:	f107 0320 	add.w	r3, r7, #32
 8001102:	2230      	movs	r2, #48	; 0x30
 8001104:	2100      	movs	r1, #0
 8001106:	4618      	mov	r0, r3
 8001108:	f003 fc12 	bl	8004930 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800110c:	f107 030c 	add.w	r3, r7, #12
 8001110:	2200      	movs	r2, #0
 8001112:	601a      	str	r2, [r3, #0]
 8001114:	605a      	str	r2, [r3, #4]
 8001116:	609a      	str	r2, [r3, #8]
 8001118:	60da      	str	r2, [r3, #12]
 800111a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800111c:	2300      	movs	r3, #0
 800111e:	60bb      	str	r3, [r7, #8]
 8001120:	4b28      	ldr	r3, [pc, #160]	; (80011c4 <SystemClock_Config+0xcc>)
 8001122:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001124:	4a27      	ldr	r2, [pc, #156]	; (80011c4 <SystemClock_Config+0xcc>)
 8001126:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800112a:	6413      	str	r3, [r2, #64]	; 0x40
 800112c:	4b25      	ldr	r3, [pc, #148]	; (80011c4 <SystemClock_Config+0xcc>)
 800112e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001130:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001134:	60bb      	str	r3, [r7, #8]
 8001136:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001138:	2300      	movs	r3, #0
 800113a:	607b      	str	r3, [r7, #4]
 800113c:	4b22      	ldr	r3, [pc, #136]	; (80011c8 <SystemClock_Config+0xd0>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	4a21      	ldr	r2, [pc, #132]	; (80011c8 <SystemClock_Config+0xd0>)
 8001142:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001146:	6013      	str	r3, [r2, #0]
 8001148:	4b1f      	ldr	r3, [pc, #124]	; (80011c8 <SystemClock_Config+0xd0>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001150:	607b      	str	r3, [r7, #4]
 8001152:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001154:	2301      	movs	r3, #1
 8001156:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001158:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800115c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800115e:	2302      	movs	r3, #2
 8001160:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001162:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001166:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001168:	2308      	movs	r3, #8
 800116a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800116c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001170:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001172:	2304      	movs	r3, #4
 8001174:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001176:	2304      	movs	r3, #4
 8001178:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800117a:	f107 0320 	add.w	r3, r7, #32
 800117e:	4618      	mov	r0, r3
 8001180:	f001 fa4c 	bl	800261c <HAL_RCC_OscConfig>
 8001184:	4603      	mov	r3, r0
 8001186:	2b00      	cmp	r3, #0
 8001188:	d001      	beq.n	800118e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800118a:	f000 f9ef 	bl	800156c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800118e:	230f      	movs	r3, #15
 8001190:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001192:	2302      	movs	r3, #2
 8001194:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001196:	2300      	movs	r3, #0
 8001198:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800119a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800119e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011a0:	2300      	movs	r3, #0
 80011a2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80011a4:	f107 030c 	add.w	r3, r7, #12
 80011a8:	2102      	movs	r1, #2
 80011aa:	4618      	mov	r0, r3
 80011ac:	f001 fcae 	bl	8002b0c <HAL_RCC_ClockConfig>
 80011b0:	4603      	mov	r3, r0
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d001      	beq.n	80011ba <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80011b6:	f000 f9d9 	bl	800156c <Error_Handler>
  }
}
 80011ba:	bf00      	nop
 80011bc:	3750      	adds	r7, #80	; 0x50
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}
 80011c2:	bf00      	nop
 80011c4:	40023800 	.word	0x40023800
 80011c8:	40007000 	.word	0x40007000

080011cc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b096      	sub	sp, #88	; 0x58
 80011d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011d2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80011d6:	2200      	movs	r2, #0
 80011d8:	601a      	str	r2, [r3, #0]
 80011da:	605a      	str	r2, [r3, #4]
 80011dc:	609a      	str	r2, [r3, #8]
 80011de:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011e0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80011e4:	2200      	movs	r2, #0
 80011e6:	601a      	str	r2, [r3, #0]
 80011e8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80011ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011ee:	2200      	movs	r2, #0
 80011f0:	601a      	str	r2, [r3, #0]
 80011f2:	605a      	str	r2, [r3, #4]
 80011f4:	609a      	str	r2, [r3, #8]
 80011f6:	60da      	str	r2, [r3, #12]
 80011f8:	611a      	str	r2, [r3, #16]
 80011fa:	615a      	str	r2, [r3, #20]
 80011fc:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80011fe:	1d3b      	adds	r3, r7, #4
 8001200:	2220      	movs	r2, #32
 8001202:	2100      	movs	r1, #0
 8001204:	4618      	mov	r0, r3
 8001206:	f003 fb93 	bl	8004930 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800120a:	4b3e      	ldr	r3, [pc, #248]	; (8001304 <MX_TIM1_Init+0x138>)
 800120c:	4a3e      	ldr	r2, [pc, #248]	; (8001308 <MX_TIM1_Init+0x13c>)
 800120e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001210:	4b3c      	ldr	r3, [pc, #240]	; (8001304 <MX_TIM1_Init+0x138>)
 8001212:	2200      	movs	r2, #0
 8001214:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001216:	4b3b      	ldr	r3, [pc, #236]	; (8001304 <MX_TIM1_Init+0x138>)
 8001218:	2200      	movs	r2, #0
 800121a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800121c:	4b39      	ldr	r3, [pc, #228]	; (8001304 <MX_TIM1_Init+0x138>)
 800121e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001222:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001224:	4b37      	ldr	r3, [pc, #220]	; (8001304 <MX_TIM1_Init+0x138>)
 8001226:	2200      	movs	r2, #0
 8001228:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800122a:	4b36      	ldr	r3, [pc, #216]	; (8001304 <MX_TIM1_Init+0x138>)
 800122c:	2200      	movs	r2, #0
 800122e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001230:	4b34      	ldr	r3, [pc, #208]	; (8001304 <MX_TIM1_Init+0x138>)
 8001232:	2200      	movs	r2, #0
 8001234:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001236:	4833      	ldr	r0, [pc, #204]	; (8001304 <MX_TIM1_Init+0x138>)
 8001238:	f001 fe88 	bl	8002f4c <HAL_TIM_Base_Init>
 800123c:	4603      	mov	r3, r0
 800123e:	2b00      	cmp	r3, #0
 8001240:	d001      	beq.n	8001246 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8001242:	f000 f993 	bl	800156c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001246:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800124a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800124c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001250:	4619      	mov	r1, r3
 8001252:	482c      	ldr	r0, [pc, #176]	; (8001304 <MX_TIM1_Init+0x138>)
 8001254:	f002 faf0 	bl	8003838 <HAL_TIM_ConfigClockSource>
 8001258:	4603      	mov	r3, r0
 800125a:	2b00      	cmp	r3, #0
 800125c:	d001      	beq.n	8001262 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800125e:	f000 f985 	bl	800156c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001262:	4828      	ldr	r0, [pc, #160]	; (8001304 <MX_TIM1_Init+0x138>)
 8001264:	f001 fec1 	bl	8002fea <HAL_TIM_PWM_Init>
 8001268:	4603      	mov	r3, r0
 800126a:	2b00      	cmp	r3, #0
 800126c:	d001      	beq.n	8001272 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800126e:	f000 f97d 	bl	800156c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001272:	2300      	movs	r3, #0
 8001274:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001276:	2300      	movs	r3, #0
 8001278:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800127a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800127e:	4619      	mov	r1, r3
 8001280:	4820      	ldr	r0, [pc, #128]	; (8001304 <MX_TIM1_Init+0x138>)
 8001282:	f002 fe95 	bl	8003fb0 <HAL_TIMEx_MasterConfigSynchronization>
 8001286:	4603      	mov	r3, r0
 8001288:	2b00      	cmp	r3, #0
 800128a:	d001      	beq.n	8001290 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 800128c:	f000 f96e 	bl	800156c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001290:	2360      	movs	r3, #96	; 0x60
 8001292:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001294:	2300      	movs	r3, #0
 8001296:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001298:	2300      	movs	r3, #0
 800129a:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800129c:	2300      	movs	r3, #0
 800129e:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80012a0:	2300      	movs	r3, #0
 80012a2:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80012a4:	2300      	movs	r3, #0
 80012a6:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80012a8:	2300      	movs	r3, #0
 80012aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80012ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012b0:	2200      	movs	r2, #0
 80012b2:	4619      	mov	r1, r3
 80012b4:	4813      	ldr	r0, [pc, #76]	; (8001304 <MX_TIM1_Init+0x138>)
 80012b6:	f002 f9fd 	bl	80036b4 <HAL_TIM_PWM_ConfigChannel>
 80012ba:	4603      	mov	r3, r0
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d001      	beq.n	80012c4 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 80012c0:	f000 f954 	bl	800156c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80012c4:	2300      	movs	r3, #0
 80012c6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80012c8:	2300      	movs	r3, #0
 80012ca:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80012cc:	2300      	movs	r3, #0
 80012ce:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80012d0:	2300      	movs	r3, #0
 80012d2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80012d4:	2300      	movs	r3, #0
 80012d6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80012d8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80012dc:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80012de:	2300      	movs	r3, #0
 80012e0:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80012e2:	1d3b      	adds	r3, r7, #4
 80012e4:	4619      	mov	r1, r3
 80012e6:	4807      	ldr	r0, [pc, #28]	; (8001304 <MX_TIM1_Init+0x138>)
 80012e8:	f002 fed0 	bl	800408c <HAL_TIMEx_ConfigBreakDeadTime>
 80012ec:	4603      	mov	r3, r0
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d001      	beq.n	80012f6 <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 80012f2:	f000 f93b 	bl	800156c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80012f6:	4803      	ldr	r0, [pc, #12]	; (8001304 <MX_TIM1_Init+0x138>)
 80012f8:	f000 fa08 	bl	800170c <HAL_TIM_MspPostInit>

}
 80012fc:	bf00      	nop
 80012fe:	3758      	adds	r7, #88	; 0x58
 8001300:	46bd      	mov	sp, r7
 8001302:	bd80      	pop	{r7, pc}
 8001304:	2000008c 	.word	0x2000008c
 8001308:	40010000 	.word	0x40010000

0800130c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b08c      	sub	sp, #48	; 0x30
 8001310:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001312:	f107 030c 	add.w	r3, r7, #12
 8001316:	2224      	movs	r2, #36	; 0x24
 8001318:	2100      	movs	r1, #0
 800131a:	4618      	mov	r0, r3
 800131c:	f003 fb08 	bl	8004930 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001320:	1d3b      	adds	r3, r7, #4
 8001322:	2200      	movs	r2, #0
 8001324:	601a      	str	r2, [r3, #0]
 8001326:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001328:	4b21      	ldr	r3, [pc, #132]	; (80013b0 <MX_TIM2_Init+0xa4>)
 800132a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800132e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001330:	4b1f      	ldr	r3, [pc, #124]	; (80013b0 <MX_TIM2_Init+0xa4>)
 8001332:	2200      	movs	r2, #0
 8001334:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001336:	4b1e      	ldr	r3, [pc, #120]	; (80013b0 <MX_TIM2_Init+0xa4>)
 8001338:	2200      	movs	r2, #0
 800133a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 800133c:	4b1c      	ldr	r3, [pc, #112]	; (80013b0 <MX_TIM2_Init+0xa4>)
 800133e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001342:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001344:	4b1a      	ldr	r3, [pc, #104]	; (80013b0 <MX_TIM2_Init+0xa4>)
 8001346:	2200      	movs	r2, #0
 8001348:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800134a:	4b19      	ldr	r3, [pc, #100]	; (80013b0 <MX_TIM2_Init+0xa4>)
 800134c:	2200      	movs	r2, #0
 800134e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001350:	2303      	movs	r3, #3
 8001352:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8001354:	2302      	movs	r3, #2
 8001356:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001358:	2301      	movs	r3, #1
 800135a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800135c:	2300      	movs	r3, #0
 800135e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001360:	2300      	movs	r3, #0
 8001362:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8001364:	2302      	movs	r3, #2
 8001366:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001368:	2301      	movs	r3, #1
 800136a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800136c:	2300      	movs	r3, #0
 800136e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001370:	2300      	movs	r3, #0
 8001372:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001374:	f107 030c 	add.w	r3, r7, #12
 8001378:	4619      	mov	r1, r3
 800137a:	480d      	ldr	r0, [pc, #52]	; (80013b0 <MX_TIM2_Init+0xa4>)
 800137c:	f001 ff3e 	bl	80031fc <HAL_TIM_Encoder_Init>
 8001380:	4603      	mov	r3, r0
 8001382:	2b00      	cmp	r3, #0
 8001384:	d001      	beq.n	800138a <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8001386:	f000 f8f1 	bl	800156c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800138a:	2300      	movs	r3, #0
 800138c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800138e:	2300      	movs	r3, #0
 8001390:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001392:	1d3b      	adds	r3, r7, #4
 8001394:	4619      	mov	r1, r3
 8001396:	4806      	ldr	r0, [pc, #24]	; (80013b0 <MX_TIM2_Init+0xa4>)
 8001398:	f002 fe0a 	bl	8003fb0 <HAL_TIMEx_MasterConfigSynchronization>
 800139c:	4603      	mov	r3, r0
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d001      	beq.n	80013a6 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 80013a2:	f000 f8e3 	bl	800156c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80013a6:	bf00      	nop
 80013a8:	3730      	adds	r7, #48	; 0x30
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bd80      	pop	{r7, pc}
 80013ae:	bf00      	nop
 80013b0:	200000d4 	.word	0x200000d4

080013b4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80013b8:	4b11      	ldr	r3, [pc, #68]	; (8001400 <MX_USART2_UART_Init+0x4c>)
 80013ba:	4a12      	ldr	r2, [pc, #72]	; (8001404 <MX_USART2_UART_Init+0x50>)
 80013bc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80013be:	4b10      	ldr	r3, [pc, #64]	; (8001400 <MX_USART2_UART_Init+0x4c>)
 80013c0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80013c4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80013c6:	4b0e      	ldr	r3, [pc, #56]	; (8001400 <MX_USART2_UART_Init+0x4c>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80013cc:	4b0c      	ldr	r3, [pc, #48]	; (8001400 <MX_USART2_UART_Init+0x4c>)
 80013ce:	2200      	movs	r2, #0
 80013d0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80013d2:	4b0b      	ldr	r3, [pc, #44]	; (8001400 <MX_USART2_UART_Init+0x4c>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80013d8:	4b09      	ldr	r3, [pc, #36]	; (8001400 <MX_USART2_UART_Init+0x4c>)
 80013da:	220c      	movs	r2, #12
 80013dc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013de:	4b08      	ldr	r3, [pc, #32]	; (8001400 <MX_USART2_UART_Init+0x4c>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80013e4:	4b06      	ldr	r3, [pc, #24]	; (8001400 <MX_USART2_UART_Init+0x4c>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80013ea:	4805      	ldr	r0, [pc, #20]	; (8001400 <MX_USART2_UART_Init+0x4c>)
 80013ec:	f002 feb4 	bl	8004158 <HAL_UART_Init>
 80013f0:	4603      	mov	r3, r0
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d001      	beq.n	80013fa <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80013f6:	f000 f8b9 	bl	800156c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80013fa:	bf00      	nop
 80013fc:	bd80      	pop	{r7, pc}
 80013fe:	bf00      	nop
 8001400:	2000017c 	.word	0x2000017c
 8001404:	40004400 	.word	0x40004400

08001408 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b082      	sub	sp, #8
 800140c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800140e:	2300      	movs	r3, #0
 8001410:	607b      	str	r3, [r7, #4]
 8001412:	4b0c      	ldr	r3, [pc, #48]	; (8001444 <MX_DMA_Init+0x3c>)
 8001414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001416:	4a0b      	ldr	r2, [pc, #44]	; (8001444 <MX_DMA_Init+0x3c>)
 8001418:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800141c:	6313      	str	r3, [r2, #48]	; 0x30
 800141e:	4b09      	ldr	r3, [pc, #36]	; (8001444 <MX_DMA_Init+0x3c>)
 8001420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001422:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001426:	607b      	str	r3, [r7, #4]
 8001428:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 800142a:	2200      	movs	r2, #0
 800142c:	2100      	movs	r1, #0
 800142e:	2039      	movs	r0, #57	; 0x39
 8001430:	f000 fc35 	bl	8001c9e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8001434:	2039      	movs	r0, #57	; 0x39
 8001436:	f000 fc4e 	bl	8001cd6 <HAL_NVIC_EnableIRQ>

}
 800143a:	bf00      	nop
 800143c:	3708      	adds	r7, #8
 800143e:	46bd      	mov	sp, r7
 8001440:	bd80      	pop	{r7, pc}
 8001442:	bf00      	nop
 8001444:	40023800 	.word	0x40023800

08001448 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b08a      	sub	sp, #40	; 0x28
 800144c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800144e:	f107 0314 	add.w	r3, r7, #20
 8001452:	2200      	movs	r2, #0
 8001454:	601a      	str	r2, [r3, #0]
 8001456:	605a      	str	r2, [r3, #4]
 8001458:	609a      	str	r2, [r3, #8]
 800145a:	60da      	str	r2, [r3, #12]
 800145c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800145e:	2300      	movs	r3, #0
 8001460:	613b      	str	r3, [r7, #16]
 8001462:	4b3e      	ldr	r3, [pc, #248]	; (800155c <MX_GPIO_Init+0x114>)
 8001464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001466:	4a3d      	ldr	r2, [pc, #244]	; (800155c <MX_GPIO_Init+0x114>)
 8001468:	f043 0304 	orr.w	r3, r3, #4
 800146c:	6313      	str	r3, [r2, #48]	; 0x30
 800146e:	4b3b      	ldr	r3, [pc, #236]	; (800155c <MX_GPIO_Init+0x114>)
 8001470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001472:	f003 0304 	and.w	r3, r3, #4
 8001476:	613b      	str	r3, [r7, #16]
 8001478:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800147a:	2300      	movs	r3, #0
 800147c:	60fb      	str	r3, [r7, #12]
 800147e:	4b37      	ldr	r3, [pc, #220]	; (800155c <MX_GPIO_Init+0x114>)
 8001480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001482:	4a36      	ldr	r2, [pc, #216]	; (800155c <MX_GPIO_Init+0x114>)
 8001484:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001488:	6313      	str	r3, [r2, #48]	; 0x30
 800148a:	4b34      	ldr	r3, [pc, #208]	; (800155c <MX_GPIO_Init+0x114>)
 800148c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800148e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001492:	60fb      	str	r3, [r7, #12]
 8001494:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001496:	2300      	movs	r3, #0
 8001498:	60bb      	str	r3, [r7, #8]
 800149a:	4b30      	ldr	r3, [pc, #192]	; (800155c <MX_GPIO_Init+0x114>)
 800149c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800149e:	4a2f      	ldr	r2, [pc, #188]	; (800155c <MX_GPIO_Init+0x114>)
 80014a0:	f043 0301 	orr.w	r3, r3, #1
 80014a4:	6313      	str	r3, [r2, #48]	; 0x30
 80014a6:	4b2d      	ldr	r3, [pc, #180]	; (800155c <MX_GPIO_Init+0x114>)
 80014a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014aa:	f003 0301 	and.w	r3, r3, #1
 80014ae:	60bb      	str	r3, [r7, #8]
 80014b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014b2:	2300      	movs	r3, #0
 80014b4:	607b      	str	r3, [r7, #4]
 80014b6:	4b29      	ldr	r3, [pc, #164]	; (800155c <MX_GPIO_Init+0x114>)
 80014b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ba:	4a28      	ldr	r2, [pc, #160]	; (800155c <MX_GPIO_Init+0x114>)
 80014bc:	f043 0302 	orr.w	r3, r3, #2
 80014c0:	6313      	str	r3, [r2, #48]	; 0x30
 80014c2:	4b26      	ldr	r3, [pc, #152]	; (800155c <MX_GPIO_Init+0x114>)
 80014c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014c6:	f003 0302 	and.w	r3, r3, #2
 80014ca:	607b      	str	r3, [r7, #4]
 80014cc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80014ce:	2200      	movs	r2, #0
 80014d0:	2120      	movs	r1, #32
 80014d2:	4823      	ldr	r0, [pc, #140]	; (8001560 <MX_GPIO_Init+0x118>)
 80014d4:	f001 f888 	bl	80025e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 80014d8:	2200      	movs	r2, #0
 80014da:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80014de:	4821      	ldr	r0, [pc, #132]	; (8001564 <MX_GPIO_Init+0x11c>)
 80014e0:	f001 f882 	bl	80025e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80014e4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80014e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80014ea:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80014ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f0:	2300      	movs	r3, #0
 80014f2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80014f4:	f107 0314 	add.w	r3, r7, #20
 80014f8:	4619      	mov	r1, r3
 80014fa:	481b      	ldr	r0, [pc, #108]	; (8001568 <MX_GPIO_Init+0x120>)
 80014fc:	f000 fef0 	bl	80022e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001500:	2320      	movs	r3, #32
 8001502:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001504:	2301      	movs	r3, #1
 8001506:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001508:	2300      	movs	r3, #0
 800150a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800150c:	2300      	movs	r3, #0
 800150e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001510:	f107 0314 	add.w	r3, r7, #20
 8001514:	4619      	mov	r1, r3
 8001516:	4812      	ldr	r0, [pc, #72]	; (8001560 <MX_GPIO_Init+0x118>)
 8001518:	f000 fee2 	bl	80022e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800151c:	23c0      	movs	r3, #192	; 0xc0
 800151e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001520:	2300      	movs	r3, #0
 8001522:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001524:	2301      	movs	r3, #1
 8001526:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001528:	f107 0314 	add.w	r3, r7, #20
 800152c:	4619      	mov	r1, r3
 800152e:	480c      	ldr	r0, [pc, #48]	; (8001560 <MX_GPIO_Init+0x118>)
 8001530:	f000 fed6 	bl	80022e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001534:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001538:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800153a:	2301      	movs	r3, #1
 800153c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800153e:	2300      	movs	r3, #0
 8001540:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001542:	2300      	movs	r3, #0
 8001544:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001546:	f107 0314 	add.w	r3, r7, #20
 800154a:	4619      	mov	r1, r3
 800154c:	4805      	ldr	r0, [pc, #20]	; (8001564 <MX_GPIO_Init+0x11c>)
 800154e:	f000 fec7 	bl	80022e0 <HAL_GPIO_Init>

}
 8001552:	bf00      	nop
 8001554:	3728      	adds	r7, #40	; 0x28
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}
 800155a:	bf00      	nop
 800155c:	40023800 	.word	0x40023800
 8001560:	40020000 	.word	0x40020000
 8001564:	40020400 	.word	0x40020400
 8001568:	40020800 	.word	0x40020800

0800156c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800156c:	b480      	push	{r7}
 800156e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001570:	b672      	cpsid	i
}
 8001572:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001574:	e7fe      	b.n	8001574 <Error_Handler+0x8>
	...

08001578 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b082      	sub	sp, #8
 800157c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800157e:	2300      	movs	r3, #0
 8001580:	607b      	str	r3, [r7, #4]
 8001582:	4b10      	ldr	r3, [pc, #64]	; (80015c4 <HAL_MspInit+0x4c>)
 8001584:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001586:	4a0f      	ldr	r2, [pc, #60]	; (80015c4 <HAL_MspInit+0x4c>)
 8001588:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800158c:	6453      	str	r3, [r2, #68]	; 0x44
 800158e:	4b0d      	ldr	r3, [pc, #52]	; (80015c4 <HAL_MspInit+0x4c>)
 8001590:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001592:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001596:	607b      	str	r3, [r7, #4]
 8001598:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800159a:	2300      	movs	r3, #0
 800159c:	603b      	str	r3, [r7, #0]
 800159e:	4b09      	ldr	r3, [pc, #36]	; (80015c4 <HAL_MspInit+0x4c>)
 80015a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015a2:	4a08      	ldr	r2, [pc, #32]	; (80015c4 <HAL_MspInit+0x4c>)
 80015a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015a8:	6413      	str	r3, [r2, #64]	; 0x40
 80015aa:	4b06      	ldr	r3, [pc, #24]	; (80015c4 <HAL_MspInit+0x4c>)
 80015ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015b2:	603b      	str	r3, [r7, #0]
 80015b4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80015b6:	2007      	movs	r0, #7
 80015b8:	f000 fb66 	bl	8001c88 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015bc:	bf00      	nop
 80015be:	3708      	adds	r7, #8
 80015c0:	46bd      	mov	sp, r7
 80015c2:	bd80      	pop	{r7, pc}
 80015c4:	40023800 	.word	0x40023800

080015c8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b084      	sub	sp, #16
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	4a22      	ldr	r2, [pc, #136]	; (8001660 <HAL_TIM_Base_MspInit+0x98>)
 80015d6:	4293      	cmp	r3, r2
 80015d8:	d13d      	bne.n	8001656 <HAL_TIM_Base_MspInit+0x8e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80015da:	2300      	movs	r3, #0
 80015dc:	60fb      	str	r3, [r7, #12]
 80015de:	4b21      	ldr	r3, [pc, #132]	; (8001664 <HAL_TIM_Base_MspInit+0x9c>)
 80015e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015e2:	4a20      	ldr	r2, [pc, #128]	; (8001664 <HAL_TIM_Base_MspInit+0x9c>)
 80015e4:	f043 0301 	orr.w	r3, r3, #1
 80015e8:	6453      	str	r3, [r2, #68]	; 0x44
 80015ea:	4b1e      	ldr	r3, [pc, #120]	; (8001664 <HAL_TIM_Base_MspInit+0x9c>)
 80015ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015ee:	f003 0301 	and.w	r3, r3, #1
 80015f2:	60fb      	str	r3, [r7, #12]
 80015f4:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA2_Stream1;
 80015f6:	4b1c      	ldr	r3, [pc, #112]	; (8001668 <HAL_TIM_Base_MspInit+0xa0>)
 80015f8:	4a1c      	ldr	r2, [pc, #112]	; (800166c <HAL_TIM_Base_MspInit+0xa4>)
 80015fa:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Channel = DMA_CHANNEL_6;
 80015fc:	4b1a      	ldr	r3, [pc, #104]	; (8001668 <HAL_TIM_Base_MspInit+0xa0>)
 80015fe:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 8001602:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001604:	4b18      	ldr	r3, [pc, #96]	; (8001668 <HAL_TIM_Base_MspInit+0xa0>)
 8001606:	2240      	movs	r2, #64	; 0x40
 8001608:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800160a:	4b17      	ldr	r3, [pc, #92]	; (8001668 <HAL_TIM_Base_MspInit+0xa0>)
 800160c:	2200      	movs	r2, #0
 800160e:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001610:	4b15      	ldr	r3, [pc, #84]	; (8001668 <HAL_TIM_Base_MspInit+0xa0>)
 8001612:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001616:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001618:	4b13      	ldr	r3, [pc, #76]	; (8001668 <HAL_TIM_Base_MspInit+0xa0>)
 800161a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800161e:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001620:	4b11      	ldr	r3, [pc, #68]	; (8001668 <HAL_TIM_Base_MspInit+0xa0>)
 8001622:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001626:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Mode = DMA_NORMAL;
 8001628:	4b0f      	ldr	r3, [pc, #60]	; (8001668 <HAL_TIM_Base_MspInit+0xa0>)
 800162a:	2200      	movs	r2, #0
 800162c:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 800162e:	4b0e      	ldr	r3, [pc, #56]	; (8001668 <HAL_TIM_Base_MspInit+0xa0>)
 8001630:	2200      	movs	r2, #0
 8001632:	621a      	str	r2, [r3, #32]
    hdma_tim1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001634:	4b0c      	ldr	r3, [pc, #48]	; (8001668 <HAL_TIM_Base_MspInit+0xa0>)
 8001636:	2200      	movs	r2, #0
 8001638:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 800163a:	480b      	ldr	r0, [pc, #44]	; (8001668 <HAL_TIM_Base_MspInit+0xa0>)
 800163c:	f000 fb66 	bl	8001d0c <HAL_DMA_Init>
 8001640:	4603      	mov	r3, r0
 8001642:	2b00      	cmp	r3, #0
 8001644:	d001      	beq.n	800164a <HAL_TIM_Base_MspInit+0x82>
    {
      Error_Handler();
 8001646:	f7ff ff91 	bl	800156c <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	4a06      	ldr	r2, [pc, #24]	; (8001668 <HAL_TIM_Base_MspInit+0xa0>)
 800164e:	625a      	str	r2, [r3, #36]	; 0x24
 8001650:	4a05      	ldr	r2, [pc, #20]	; (8001668 <HAL_TIM_Base_MspInit+0xa0>)
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001656:	bf00      	nop
 8001658:	3710      	adds	r7, #16
 800165a:	46bd      	mov	sp, r7
 800165c:	bd80      	pop	{r7, pc}
 800165e:	bf00      	nop
 8001660:	40010000 	.word	0x40010000
 8001664:	40023800 	.word	0x40023800
 8001668:	2000011c 	.word	0x2000011c
 800166c:	40026428 	.word	0x40026428

08001670 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b08a      	sub	sp, #40	; 0x28
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001678:	f107 0314 	add.w	r3, r7, #20
 800167c:	2200      	movs	r2, #0
 800167e:	601a      	str	r2, [r3, #0]
 8001680:	605a      	str	r2, [r3, #4]
 8001682:	609a      	str	r2, [r3, #8]
 8001684:	60da      	str	r2, [r3, #12]
 8001686:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001690:	d133      	bne.n	80016fa <HAL_TIM_Encoder_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001692:	2300      	movs	r3, #0
 8001694:	613b      	str	r3, [r7, #16]
 8001696:	4b1b      	ldr	r3, [pc, #108]	; (8001704 <HAL_TIM_Encoder_MspInit+0x94>)
 8001698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800169a:	4a1a      	ldr	r2, [pc, #104]	; (8001704 <HAL_TIM_Encoder_MspInit+0x94>)
 800169c:	f043 0301 	orr.w	r3, r3, #1
 80016a0:	6413      	str	r3, [r2, #64]	; 0x40
 80016a2:	4b18      	ldr	r3, [pc, #96]	; (8001704 <HAL_TIM_Encoder_MspInit+0x94>)
 80016a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016a6:	f003 0301 	and.w	r3, r3, #1
 80016aa:	613b      	str	r3, [r7, #16]
 80016ac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016ae:	2300      	movs	r3, #0
 80016b0:	60fb      	str	r3, [r7, #12]
 80016b2:	4b14      	ldr	r3, [pc, #80]	; (8001704 <HAL_TIM_Encoder_MspInit+0x94>)
 80016b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016b6:	4a13      	ldr	r2, [pc, #76]	; (8001704 <HAL_TIM_Encoder_MspInit+0x94>)
 80016b8:	f043 0301 	orr.w	r3, r3, #1
 80016bc:	6313      	str	r3, [r2, #48]	; 0x30
 80016be:	4b11      	ldr	r3, [pc, #68]	; (8001704 <HAL_TIM_Encoder_MspInit+0x94>)
 80016c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016c2:	f003 0301 	and.w	r3, r3, #1
 80016c6:	60fb      	str	r3, [r7, #12]
 80016c8:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80016ca:	2303      	movs	r3, #3
 80016cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016ce:	2302      	movs	r3, #2
 80016d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80016d2:	2301      	movs	r3, #1
 80016d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016d6:	2300      	movs	r3, #0
 80016d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80016da:	2301      	movs	r3, #1
 80016dc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016de:	f107 0314 	add.w	r3, r7, #20
 80016e2:	4619      	mov	r1, r3
 80016e4:	4808      	ldr	r0, [pc, #32]	; (8001708 <HAL_TIM_Encoder_MspInit+0x98>)
 80016e6:	f000 fdfb 	bl	80022e0 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80016ea:	2200      	movs	r2, #0
 80016ec:	2100      	movs	r1, #0
 80016ee:	201c      	movs	r0, #28
 80016f0:	f000 fad5 	bl	8001c9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80016f4:	201c      	movs	r0, #28
 80016f6:	f000 faee 	bl	8001cd6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80016fa:	bf00      	nop
 80016fc:	3728      	adds	r7, #40	; 0x28
 80016fe:	46bd      	mov	sp, r7
 8001700:	bd80      	pop	{r7, pc}
 8001702:	bf00      	nop
 8001704:	40023800 	.word	0x40023800
 8001708:	40020000 	.word	0x40020000

0800170c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b088      	sub	sp, #32
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001714:	f107 030c 	add.w	r3, r7, #12
 8001718:	2200      	movs	r2, #0
 800171a:	601a      	str	r2, [r3, #0]
 800171c:	605a      	str	r2, [r3, #4]
 800171e:	609a      	str	r2, [r3, #8]
 8001720:	60da      	str	r2, [r3, #12]
 8001722:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	4a12      	ldr	r2, [pc, #72]	; (8001774 <HAL_TIM_MspPostInit+0x68>)
 800172a:	4293      	cmp	r3, r2
 800172c:	d11e      	bne.n	800176c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800172e:	2300      	movs	r3, #0
 8001730:	60bb      	str	r3, [r7, #8]
 8001732:	4b11      	ldr	r3, [pc, #68]	; (8001778 <HAL_TIM_MspPostInit+0x6c>)
 8001734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001736:	4a10      	ldr	r2, [pc, #64]	; (8001778 <HAL_TIM_MspPostInit+0x6c>)
 8001738:	f043 0301 	orr.w	r3, r3, #1
 800173c:	6313      	str	r3, [r2, #48]	; 0x30
 800173e:	4b0e      	ldr	r3, [pc, #56]	; (8001778 <HAL_TIM_MspPostInit+0x6c>)
 8001740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001742:	f003 0301 	and.w	r3, r3, #1
 8001746:	60bb      	str	r3, [r7, #8]
 8001748:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800174a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800174e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001750:	2302      	movs	r3, #2
 8001752:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001754:	2300      	movs	r3, #0
 8001756:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001758:	2300      	movs	r3, #0
 800175a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800175c:	2301      	movs	r3, #1
 800175e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001760:	f107 030c 	add.w	r3, r7, #12
 8001764:	4619      	mov	r1, r3
 8001766:	4805      	ldr	r0, [pc, #20]	; (800177c <HAL_TIM_MspPostInit+0x70>)
 8001768:	f000 fdba 	bl	80022e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800176c:	bf00      	nop
 800176e:	3720      	adds	r7, #32
 8001770:	46bd      	mov	sp, r7
 8001772:	bd80      	pop	{r7, pc}
 8001774:	40010000 	.word	0x40010000
 8001778:	40023800 	.word	0x40023800
 800177c:	40020000 	.word	0x40020000

08001780 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b08a      	sub	sp, #40	; 0x28
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001788:	f107 0314 	add.w	r3, r7, #20
 800178c:	2200      	movs	r2, #0
 800178e:	601a      	str	r2, [r3, #0]
 8001790:	605a      	str	r2, [r3, #4]
 8001792:	609a      	str	r2, [r3, #8]
 8001794:	60da      	str	r2, [r3, #12]
 8001796:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	4a19      	ldr	r2, [pc, #100]	; (8001804 <HAL_UART_MspInit+0x84>)
 800179e:	4293      	cmp	r3, r2
 80017a0:	d12b      	bne.n	80017fa <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80017a2:	2300      	movs	r3, #0
 80017a4:	613b      	str	r3, [r7, #16]
 80017a6:	4b18      	ldr	r3, [pc, #96]	; (8001808 <HAL_UART_MspInit+0x88>)
 80017a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017aa:	4a17      	ldr	r2, [pc, #92]	; (8001808 <HAL_UART_MspInit+0x88>)
 80017ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017b0:	6413      	str	r3, [r2, #64]	; 0x40
 80017b2:	4b15      	ldr	r3, [pc, #84]	; (8001808 <HAL_UART_MspInit+0x88>)
 80017b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017ba:	613b      	str	r3, [r7, #16]
 80017bc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017be:	2300      	movs	r3, #0
 80017c0:	60fb      	str	r3, [r7, #12]
 80017c2:	4b11      	ldr	r3, [pc, #68]	; (8001808 <HAL_UART_MspInit+0x88>)
 80017c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017c6:	4a10      	ldr	r2, [pc, #64]	; (8001808 <HAL_UART_MspInit+0x88>)
 80017c8:	f043 0301 	orr.w	r3, r3, #1
 80017cc:	6313      	str	r3, [r2, #48]	; 0x30
 80017ce:	4b0e      	ldr	r3, [pc, #56]	; (8001808 <HAL_UART_MspInit+0x88>)
 80017d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017d2:	f003 0301 	and.w	r3, r3, #1
 80017d6:	60fb      	str	r3, [r7, #12]
 80017d8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80017da:	230c      	movs	r3, #12
 80017dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017de:	2302      	movs	r3, #2
 80017e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e2:	2300      	movs	r3, #0
 80017e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017e6:	2303      	movs	r3, #3
 80017e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80017ea:	2307      	movs	r3, #7
 80017ec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017ee:	f107 0314 	add.w	r3, r7, #20
 80017f2:	4619      	mov	r1, r3
 80017f4:	4805      	ldr	r0, [pc, #20]	; (800180c <HAL_UART_MspInit+0x8c>)
 80017f6:	f000 fd73 	bl	80022e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80017fa:	bf00      	nop
 80017fc:	3728      	adds	r7, #40	; 0x28
 80017fe:	46bd      	mov	sp, r7
 8001800:	bd80      	pop	{r7, pc}
 8001802:	bf00      	nop
 8001804:	40004400 	.word	0x40004400
 8001808:	40023800 	.word	0x40023800
 800180c:	40020000 	.word	0x40020000

08001810 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001810:	b480      	push	{r7}
 8001812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001814:	e7fe      	b.n	8001814 <NMI_Handler+0x4>

08001816 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001816:	b480      	push	{r7}
 8001818:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800181a:	e7fe      	b.n	800181a <HardFault_Handler+0x4>

0800181c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800181c:	b480      	push	{r7}
 800181e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001820:	e7fe      	b.n	8001820 <MemManage_Handler+0x4>

08001822 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001822:	b480      	push	{r7}
 8001824:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001826:	e7fe      	b.n	8001826 <BusFault_Handler+0x4>

08001828 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001828:	b480      	push	{r7}
 800182a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800182c:	e7fe      	b.n	800182c <UsageFault_Handler+0x4>

0800182e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800182e:	b480      	push	{r7}
 8001830:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001832:	bf00      	nop
 8001834:	46bd      	mov	sp, r7
 8001836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183a:	4770      	bx	lr

0800183c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800183c:	b480      	push	{r7}
 800183e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001840:	bf00      	nop
 8001842:	46bd      	mov	sp, r7
 8001844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001848:	4770      	bx	lr

0800184a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800184a:	b480      	push	{r7}
 800184c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800184e:	bf00      	nop
 8001850:	46bd      	mov	sp, r7
 8001852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001856:	4770      	bx	lr

08001858 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

	indx++;
 800185c:	4b10      	ldr	r3, [pc, #64]	; (80018a0 <SysTick_Handler+0x48>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	3301      	adds	r3, #1
 8001862:	4a0f      	ldr	r2, [pc, #60]	; (80018a0 <SysTick_Handler+0x48>)
 8001864:	6013      	str	r3, [r2, #0]

	if (indx == 500)
 8001866:	4b0e      	ldr	r3, [pc, #56]	; (80018a0 <SysTick_Handler+0x48>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800186e:	d112      	bne.n	8001896 <SysTick_Handler+0x3e>
	{
		speed = ((position - oldpos)*2); //speed in clicks/sec
 8001870:	4b0c      	ldr	r3, [pc, #48]	; (80018a4 <SysTick_Handler+0x4c>)
 8001872:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001876:	461a      	mov	r2, r3
 8001878:	4b0b      	ldr	r3, [pc, #44]	; (80018a8 <SysTick_Handler+0x50>)
 800187a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800187e:	1ad3      	subs	r3, r2, r3
 8001880:	005b      	lsls	r3, r3, #1
 8001882:	4a0a      	ldr	r2, [pc, #40]	; (80018ac <SysTick_Handler+0x54>)
 8001884:	6013      	str	r3, [r2, #0]
		oldpos = position;
 8001886:	4b07      	ldr	r3, [pc, #28]	; (80018a4 <SysTick_Handler+0x4c>)
 8001888:	f9b3 2000 	ldrsh.w	r2, [r3]
 800188c:	4b06      	ldr	r3, [pc, #24]	; (80018a8 <SysTick_Handler+0x50>)
 800188e:	801a      	strh	r2, [r3, #0]
		indx=0;
 8001890:	4b03      	ldr	r3, [pc, #12]	; (80018a0 <SysTick_Handler+0x48>)
 8001892:	2200      	movs	r2, #0
 8001894:	601a      	str	r2, [r3, #0]
	}

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001896:	f000 f8e3 	bl	8001a60 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800189a:	bf00      	nop
 800189c:	bd80      	pop	{r7, pc}
 800189e:	bf00      	nop
 80018a0:	200001f4 	.word	0x200001f4
 80018a4:	200001ce 	.word	0x200001ce
 80018a8:	200001f2 	.word	0x200001f2
 80018ac:	200001d0 	.word	0x200001d0

080018b0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80018b4:	4802      	ldr	r0, [pc, #8]	; (80018c0 <TIM2_IRQHandler+0x10>)
 80018b6:	f001 fdf5 	bl	80034a4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80018ba:	bf00      	nop
 80018bc:	bd80      	pop	{r7, pc}
 80018be:	bf00      	nop
 80018c0:	200000d4 	.word	0x200000d4

080018c4 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 80018c8:	4802      	ldr	r0, [pc, #8]	; (80018d4 <DMA2_Stream1_IRQHandler+0x10>)
 80018ca:	f000 facd 	bl	8001e68 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 80018ce:	bf00      	nop
 80018d0:	bd80      	pop	{r7, pc}
 80018d2:	bf00      	nop
 80018d4:	2000011c 	.word	0x2000011c

080018d8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b086      	sub	sp, #24
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80018e0:	4a14      	ldr	r2, [pc, #80]	; (8001934 <_sbrk+0x5c>)
 80018e2:	4b15      	ldr	r3, [pc, #84]	; (8001938 <_sbrk+0x60>)
 80018e4:	1ad3      	subs	r3, r2, r3
 80018e6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80018e8:	697b      	ldr	r3, [r7, #20]
 80018ea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80018ec:	4b13      	ldr	r3, [pc, #76]	; (800193c <_sbrk+0x64>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d102      	bne.n	80018fa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80018f4:	4b11      	ldr	r3, [pc, #68]	; (800193c <_sbrk+0x64>)
 80018f6:	4a12      	ldr	r2, [pc, #72]	; (8001940 <_sbrk+0x68>)
 80018f8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80018fa:	4b10      	ldr	r3, [pc, #64]	; (800193c <_sbrk+0x64>)
 80018fc:	681a      	ldr	r2, [r3, #0]
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	4413      	add	r3, r2
 8001902:	693a      	ldr	r2, [r7, #16]
 8001904:	429a      	cmp	r2, r3
 8001906:	d207      	bcs.n	8001918 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001908:	f002 ffe8 	bl	80048dc <__errno>
 800190c:	4603      	mov	r3, r0
 800190e:	220c      	movs	r2, #12
 8001910:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001912:	f04f 33ff 	mov.w	r3, #4294967295
 8001916:	e009      	b.n	800192c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001918:	4b08      	ldr	r3, [pc, #32]	; (800193c <_sbrk+0x64>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800191e:	4b07      	ldr	r3, [pc, #28]	; (800193c <_sbrk+0x64>)
 8001920:	681a      	ldr	r2, [r3, #0]
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	4413      	add	r3, r2
 8001926:	4a05      	ldr	r2, [pc, #20]	; (800193c <_sbrk+0x64>)
 8001928:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800192a:	68fb      	ldr	r3, [r7, #12]
}
 800192c:	4618      	mov	r0, r3
 800192e:	3718      	adds	r7, #24
 8001930:	46bd      	mov	sp, r7
 8001932:	bd80      	pop	{r7, pc}
 8001934:	20020000 	.word	0x20020000
 8001938:	00000400 	.word	0x00000400
 800193c:	200001f8 	.word	0x200001f8
 8001940:	20000210 	.word	0x20000210

08001944 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001944:	b480      	push	{r7}
 8001946:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001948:	4b06      	ldr	r3, [pc, #24]	; (8001964 <SystemInit+0x20>)
 800194a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800194e:	4a05      	ldr	r2, [pc, #20]	; (8001964 <SystemInit+0x20>)
 8001950:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001954:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001958:	bf00      	nop
 800195a:	46bd      	mov	sp, r7
 800195c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001960:	4770      	bx	lr
 8001962:	bf00      	nop
 8001964:	e000ed00 	.word	0xe000ed00

08001968 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001968:	f8df d034 	ldr.w	sp, [pc, #52]	; 80019a0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800196c:	480d      	ldr	r0, [pc, #52]	; (80019a4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800196e:	490e      	ldr	r1, [pc, #56]	; (80019a8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001970:	4a0e      	ldr	r2, [pc, #56]	; (80019ac <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001972:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001974:	e002      	b.n	800197c <LoopCopyDataInit>

08001976 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001976:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001978:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800197a:	3304      	adds	r3, #4

0800197c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800197c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800197e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001980:	d3f9      	bcc.n	8001976 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001982:	4a0b      	ldr	r2, [pc, #44]	; (80019b0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001984:	4c0b      	ldr	r4, [pc, #44]	; (80019b4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001986:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001988:	e001      	b.n	800198e <LoopFillZerobss>

0800198a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800198a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800198c:	3204      	adds	r2, #4

0800198e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800198e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001990:	d3fb      	bcc.n	800198a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001992:	f7ff ffd7 	bl	8001944 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001996:	f002 ffa7 	bl	80048e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800199a:	f7ff fb05 	bl	8000fa8 <main>
  bx  lr    
 800199e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80019a0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80019a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019a8:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80019ac:	08006520 	.word	0x08006520
  ldr r2, =_sbss
 80019b0:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80019b4:	20000210 	.word	0x20000210

080019b8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80019b8:	e7fe      	b.n	80019b8 <ADC_IRQHandler>
	...

080019bc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80019c0:	4b0e      	ldr	r3, [pc, #56]	; (80019fc <HAL_Init+0x40>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	4a0d      	ldr	r2, [pc, #52]	; (80019fc <HAL_Init+0x40>)
 80019c6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80019ca:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80019cc:	4b0b      	ldr	r3, [pc, #44]	; (80019fc <HAL_Init+0x40>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	4a0a      	ldr	r2, [pc, #40]	; (80019fc <HAL_Init+0x40>)
 80019d2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80019d6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80019d8:	4b08      	ldr	r3, [pc, #32]	; (80019fc <HAL_Init+0x40>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	4a07      	ldr	r2, [pc, #28]	; (80019fc <HAL_Init+0x40>)
 80019de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019e2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019e4:	2003      	movs	r0, #3
 80019e6:	f000 f94f 	bl	8001c88 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80019ea:	2000      	movs	r0, #0
 80019ec:	f000 f808 	bl	8001a00 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80019f0:	f7ff fdc2 	bl	8001578 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80019f4:	2300      	movs	r3, #0
}
 80019f6:	4618      	mov	r0, r3
 80019f8:	bd80      	pop	{r7, pc}
 80019fa:	bf00      	nop
 80019fc:	40023c00 	.word	0x40023c00

08001a00 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b082      	sub	sp, #8
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a08:	4b12      	ldr	r3, [pc, #72]	; (8001a54 <HAL_InitTick+0x54>)
 8001a0a:	681a      	ldr	r2, [r3, #0]
 8001a0c:	4b12      	ldr	r3, [pc, #72]	; (8001a58 <HAL_InitTick+0x58>)
 8001a0e:	781b      	ldrb	r3, [r3, #0]
 8001a10:	4619      	mov	r1, r3
 8001a12:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a16:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a1e:	4618      	mov	r0, r3
 8001a20:	f000 f967 	bl	8001cf2 <HAL_SYSTICK_Config>
 8001a24:	4603      	mov	r3, r0
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d001      	beq.n	8001a2e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	e00e      	b.n	8001a4c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	2b0f      	cmp	r3, #15
 8001a32:	d80a      	bhi.n	8001a4a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a34:	2200      	movs	r2, #0
 8001a36:	6879      	ldr	r1, [r7, #4]
 8001a38:	f04f 30ff 	mov.w	r0, #4294967295
 8001a3c:	f000 f92f 	bl	8001c9e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a40:	4a06      	ldr	r2, [pc, #24]	; (8001a5c <HAL_InitTick+0x5c>)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a46:	2300      	movs	r3, #0
 8001a48:	e000      	b.n	8001a4c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a4a:	2301      	movs	r3, #1
}
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	3708      	adds	r7, #8
 8001a50:	46bd      	mov	sp, r7
 8001a52:	bd80      	pop	{r7, pc}
 8001a54:	20000000 	.word	0x20000000
 8001a58:	20000008 	.word	0x20000008
 8001a5c:	20000004 	.word	0x20000004

08001a60 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a60:	b480      	push	{r7}
 8001a62:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a64:	4b06      	ldr	r3, [pc, #24]	; (8001a80 <HAL_IncTick+0x20>)
 8001a66:	781b      	ldrb	r3, [r3, #0]
 8001a68:	461a      	mov	r2, r3
 8001a6a:	4b06      	ldr	r3, [pc, #24]	; (8001a84 <HAL_IncTick+0x24>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	4413      	add	r3, r2
 8001a70:	4a04      	ldr	r2, [pc, #16]	; (8001a84 <HAL_IncTick+0x24>)
 8001a72:	6013      	str	r3, [r2, #0]
}
 8001a74:	bf00      	nop
 8001a76:	46bd      	mov	sp, r7
 8001a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7c:	4770      	bx	lr
 8001a7e:	bf00      	nop
 8001a80:	20000008 	.word	0x20000008
 8001a84:	200001fc 	.word	0x200001fc

08001a88 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	af00      	add	r7, sp, #0
  return uwTick;
 8001a8c:	4b03      	ldr	r3, [pc, #12]	; (8001a9c <HAL_GetTick+0x14>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
}
 8001a90:	4618      	mov	r0, r3
 8001a92:	46bd      	mov	sp, r7
 8001a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a98:	4770      	bx	lr
 8001a9a:	bf00      	nop
 8001a9c:	200001fc 	.word	0x200001fc

08001aa0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b084      	sub	sp, #16
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001aa8:	f7ff ffee 	bl	8001a88 <HAL_GetTick>
 8001aac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ab8:	d005      	beq.n	8001ac6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001aba:	4b0a      	ldr	r3, [pc, #40]	; (8001ae4 <HAL_Delay+0x44>)
 8001abc:	781b      	ldrb	r3, [r3, #0]
 8001abe:	461a      	mov	r2, r3
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	4413      	add	r3, r2
 8001ac4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001ac6:	bf00      	nop
 8001ac8:	f7ff ffde 	bl	8001a88 <HAL_GetTick>
 8001acc:	4602      	mov	r2, r0
 8001ace:	68bb      	ldr	r3, [r7, #8]
 8001ad0:	1ad3      	subs	r3, r2, r3
 8001ad2:	68fa      	ldr	r2, [r7, #12]
 8001ad4:	429a      	cmp	r2, r3
 8001ad6:	d8f7      	bhi.n	8001ac8 <HAL_Delay+0x28>
  {
  }
}
 8001ad8:	bf00      	nop
 8001ada:	bf00      	nop
 8001adc:	3710      	adds	r7, #16
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd80      	pop	{r7, pc}
 8001ae2:	bf00      	nop
 8001ae4:	20000008 	.word	0x20000008

08001ae8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	b085      	sub	sp, #20
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	f003 0307 	and.w	r3, r3, #7
 8001af6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001af8:	4b0c      	ldr	r3, [pc, #48]	; (8001b2c <__NVIC_SetPriorityGrouping+0x44>)
 8001afa:	68db      	ldr	r3, [r3, #12]
 8001afc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001afe:	68ba      	ldr	r2, [r7, #8]
 8001b00:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b04:	4013      	ands	r3, r2
 8001b06:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b0c:	68bb      	ldr	r3, [r7, #8]
 8001b0e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b10:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b18:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b1a:	4a04      	ldr	r2, [pc, #16]	; (8001b2c <__NVIC_SetPriorityGrouping+0x44>)
 8001b1c:	68bb      	ldr	r3, [r7, #8]
 8001b1e:	60d3      	str	r3, [r2, #12]
}
 8001b20:	bf00      	nop
 8001b22:	3714      	adds	r7, #20
 8001b24:	46bd      	mov	sp, r7
 8001b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2a:	4770      	bx	lr
 8001b2c:	e000ed00 	.word	0xe000ed00

08001b30 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b30:	b480      	push	{r7}
 8001b32:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b34:	4b04      	ldr	r3, [pc, #16]	; (8001b48 <__NVIC_GetPriorityGrouping+0x18>)
 8001b36:	68db      	ldr	r3, [r3, #12]
 8001b38:	0a1b      	lsrs	r3, r3, #8
 8001b3a:	f003 0307 	and.w	r3, r3, #7
}
 8001b3e:	4618      	mov	r0, r3
 8001b40:	46bd      	mov	sp, r7
 8001b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b46:	4770      	bx	lr
 8001b48:	e000ed00 	.word	0xe000ed00

08001b4c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	b083      	sub	sp, #12
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	4603      	mov	r3, r0
 8001b54:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	db0b      	blt.n	8001b76 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b5e:	79fb      	ldrb	r3, [r7, #7]
 8001b60:	f003 021f 	and.w	r2, r3, #31
 8001b64:	4907      	ldr	r1, [pc, #28]	; (8001b84 <__NVIC_EnableIRQ+0x38>)
 8001b66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b6a:	095b      	lsrs	r3, r3, #5
 8001b6c:	2001      	movs	r0, #1
 8001b6e:	fa00 f202 	lsl.w	r2, r0, r2
 8001b72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001b76:	bf00      	nop
 8001b78:	370c      	adds	r7, #12
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b80:	4770      	bx	lr
 8001b82:	bf00      	nop
 8001b84:	e000e100 	.word	0xe000e100

08001b88 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	b083      	sub	sp, #12
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	4603      	mov	r3, r0
 8001b90:	6039      	str	r1, [r7, #0]
 8001b92:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	db0a      	blt.n	8001bb2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	b2da      	uxtb	r2, r3
 8001ba0:	490c      	ldr	r1, [pc, #48]	; (8001bd4 <__NVIC_SetPriority+0x4c>)
 8001ba2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ba6:	0112      	lsls	r2, r2, #4
 8001ba8:	b2d2      	uxtb	r2, r2
 8001baa:	440b      	add	r3, r1
 8001bac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001bb0:	e00a      	b.n	8001bc8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	b2da      	uxtb	r2, r3
 8001bb6:	4908      	ldr	r1, [pc, #32]	; (8001bd8 <__NVIC_SetPriority+0x50>)
 8001bb8:	79fb      	ldrb	r3, [r7, #7]
 8001bba:	f003 030f 	and.w	r3, r3, #15
 8001bbe:	3b04      	subs	r3, #4
 8001bc0:	0112      	lsls	r2, r2, #4
 8001bc2:	b2d2      	uxtb	r2, r2
 8001bc4:	440b      	add	r3, r1
 8001bc6:	761a      	strb	r2, [r3, #24]
}
 8001bc8:	bf00      	nop
 8001bca:	370c      	adds	r7, #12
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd2:	4770      	bx	lr
 8001bd4:	e000e100 	.word	0xe000e100
 8001bd8:	e000ed00 	.word	0xe000ed00

08001bdc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	b089      	sub	sp, #36	; 0x24
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	60f8      	str	r0, [r7, #12]
 8001be4:	60b9      	str	r1, [r7, #8]
 8001be6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	f003 0307 	and.w	r3, r3, #7
 8001bee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001bf0:	69fb      	ldr	r3, [r7, #28]
 8001bf2:	f1c3 0307 	rsb	r3, r3, #7
 8001bf6:	2b04      	cmp	r3, #4
 8001bf8:	bf28      	it	cs
 8001bfa:	2304      	movcs	r3, #4
 8001bfc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001bfe:	69fb      	ldr	r3, [r7, #28]
 8001c00:	3304      	adds	r3, #4
 8001c02:	2b06      	cmp	r3, #6
 8001c04:	d902      	bls.n	8001c0c <NVIC_EncodePriority+0x30>
 8001c06:	69fb      	ldr	r3, [r7, #28]
 8001c08:	3b03      	subs	r3, #3
 8001c0a:	e000      	b.n	8001c0e <NVIC_EncodePriority+0x32>
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c10:	f04f 32ff 	mov.w	r2, #4294967295
 8001c14:	69bb      	ldr	r3, [r7, #24]
 8001c16:	fa02 f303 	lsl.w	r3, r2, r3
 8001c1a:	43da      	mvns	r2, r3
 8001c1c:	68bb      	ldr	r3, [r7, #8]
 8001c1e:	401a      	ands	r2, r3
 8001c20:	697b      	ldr	r3, [r7, #20]
 8001c22:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c24:	f04f 31ff 	mov.w	r1, #4294967295
 8001c28:	697b      	ldr	r3, [r7, #20]
 8001c2a:	fa01 f303 	lsl.w	r3, r1, r3
 8001c2e:	43d9      	mvns	r1, r3
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c34:	4313      	orrs	r3, r2
         );
}
 8001c36:	4618      	mov	r0, r3
 8001c38:	3724      	adds	r7, #36	; 0x24
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c40:	4770      	bx	lr
	...

08001c44 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b082      	sub	sp, #8
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	3b01      	subs	r3, #1
 8001c50:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c54:	d301      	bcc.n	8001c5a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c56:	2301      	movs	r3, #1
 8001c58:	e00f      	b.n	8001c7a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c5a:	4a0a      	ldr	r2, [pc, #40]	; (8001c84 <SysTick_Config+0x40>)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	3b01      	subs	r3, #1
 8001c60:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c62:	210f      	movs	r1, #15
 8001c64:	f04f 30ff 	mov.w	r0, #4294967295
 8001c68:	f7ff ff8e 	bl	8001b88 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c6c:	4b05      	ldr	r3, [pc, #20]	; (8001c84 <SysTick_Config+0x40>)
 8001c6e:	2200      	movs	r2, #0
 8001c70:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c72:	4b04      	ldr	r3, [pc, #16]	; (8001c84 <SysTick_Config+0x40>)
 8001c74:	2207      	movs	r2, #7
 8001c76:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c78:	2300      	movs	r3, #0
}
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	3708      	adds	r7, #8
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bd80      	pop	{r7, pc}
 8001c82:	bf00      	nop
 8001c84:	e000e010 	.word	0xe000e010

08001c88 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b082      	sub	sp, #8
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c90:	6878      	ldr	r0, [r7, #4]
 8001c92:	f7ff ff29 	bl	8001ae8 <__NVIC_SetPriorityGrouping>
}
 8001c96:	bf00      	nop
 8001c98:	3708      	adds	r7, #8
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bd80      	pop	{r7, pc}

08001c9e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c9e:	b580      	push	{r7, lr}
 8001ca0:	b086      	sub	sp, #24
 8001ca2:	af00      	add	r7, sp, #0
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	60b9      	str	r1, [r7, #8]
 8001ca8:	607a      	str	r2, [r7, #4]
 8001caa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001cac:	2300      	movs	r3, #0
 8001cae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001cb0:	f7ff ff3e 	bl	8001b30 <__NVIC_GetPriorityGrouping>
 8001cb4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001cb6:	687a      	ldr	r2, [r7, #4]
 8001cb8:	68b9      	ldr	r1, [r7, #8]
 8001cba:	6978      	ldr	r0, [r7, #20]
 8001cbc:	f7ff ff8e 	bl	8001bdc <NVIC_EncodePriority>
 8001cc0:	4602      	mov	r2, r0
 8001cc2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cc6:	4611      	mov	r1, r2
 8001cc8:	4618      	mov	r0, r3
 8001cca:	f7ff ff5d 	bl	8001b88 <__NVIC_SetPriority>
}
 8001cce:	bf00      	nop
 8001cd0:	3718      	adds	r7, #24
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bd80      	pop	{r7, pc}

08001cd6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cd6:	b580      	push	{r7, lr}
 8001cd8:	b082      	sub	sp, #8
 8001cda:	af00      	add	r7, sp, #0
 8001cdc:	4603      	mov	r3, r0
 8001cde:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ce0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	f7ff ff31 	bl	8001b4c <__NVIC_EnableIRQ>
}
 8001cea:	bf00      	nop
 8001cec:	3708      	adds	r7, #8
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	bd80      	pop	{r7, pc}

08001cf2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001cf2:	b580      	push	{r7, lr}
 8001cf4:	b082      	sub	sp, #8
 8001cf6:	af00      	add	r7, sp, #0
 8001cf8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001cfa:	6878      	ldr	r0, [r7, #4]
 8001cfc:	f7ff ffa2 	bl	8001c44 <SysTick_Config>
 8001d00:	4603      	mov	r3, r0
}
 8001d02:	4618      	mov	r0, r3
 8001d04:	3708      	adds	r7, #8
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bd80      	pop	{r7, pc}
	...

08001d0c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b086      	sub	sp, #24
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001d14:	2300      	movs	r3, #0
 8001d16:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001d18:	f7ff feb6 	bl	8001a88 <HAL_GetTick>
 8001d1c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d101      	bne.n	8001d28 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001d24:	2301      	movs	r3, #1
 8001d26:	e099      	b.n	8001e5c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	2202      	movs	r2, #2
 8001d2c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	2200      	movs	r2, #0
 8001d34:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	681a      	ldr	r2, [r3, #0]
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f022 0201 	bic.w	r2, r2, #1
 8001d46:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001d48:	e00f      	b.n	8001d6a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001d4a:	f7ff fe9d 	bl	8001a88 <HAL_GetTick>
 8001d4e:	4602      	mov	r2, r0
 8001d50:	693b      	ldr	r3, [r7, #16]
 8001d52:	1ad3      	subs	r3, r2, r3
 8001d54:	2b05      	cmp	r3, #5
 8001d56:	d908      	bls.n	8001d6a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	2220      	movs	r2, #32
 8001d5c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	2203      	movs	r2, #3
 8001d62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001d66:	2303      	movs	r3, #3
 8001d68:	e078      	b.n	8001e5c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f003 0301 	and.w	r3, r3, #1
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d1e8      	bne.n	8001d4a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001d80:	697a      	ldr	r2, [r7, #20]
 8001d82:	4b38      	ldr	r3, [pc, #224]	; (8001e64 <HAL_DMA_Init+0x158>)
 8001d84:	4013      	ands	r3, r2
 8001d86:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	685a      	ldr	r2, [r3, #4]
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	689b      	ldr	r3, [r3, #8]
 8001d90:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001d96:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	691b      	ldr	r3, [r3, #16]
 8001d9c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001da2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	699b      	ldr	r3, [r3, #24]
 8001da8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001dae:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	6a1b      	ldr	r3, [r3, #32]
 8001db4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001db6:	697a      	ldr	r2, [r7, #20]
 8001db8:	4313      	orrs	r3, r2
 8001dba:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dc0:	2b04      	cmp	r3, #4
 8001dc2:	d107      	bne.n	8001dd4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dcc:	4313      	orrs	r3, r2
 8001dce:	697a      	ldr	r2, [r7, #20]
 8001dd0:	4313      	orrs	r3, r2
 8001dd2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	697a      	ldr	r2, [r7, #20]
 8001dda:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	695b      	ldr	r3, [r3, #20]
 8001de2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001de4:	697b      	ldr	r3, [r7, #20]
 8001de6:	f023 0307 	bic.w	r3, r3, #7
 8001dea:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001df0:	697a      	ldr	r2, [r7, #20]
 8001df2:	4313      	orrs	r3, r2
 8001df4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dfa:	2b04      	cmp	r3, #4
 8001dfc:	d117      	bne.n	8001e2e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e02:	697a      	ldr	r2, [r7, #20]
 8001e04:	4313      	orrs	r3, r2
 8001e06:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d00e      	beq.n	8001e2e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001e10:	6878      	ldr	r0, [r7, #4]
 8001e12:	f000 f9e9 	bl	80021e8 <DMA_CheckFifoParam>
 8001e16:	4603      	mov	r3, r0
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d008      	beq.n	8001e2e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	2240      	movs	r2, #64	; 0x40
 8001e20:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	2201      	movs	r2, #1
 8001e26:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	e016      	b.n	8001e5c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	697a      	ldr	r2, [r7, #20]
 8001e34:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001e36:	6878      	ldr	r0, [r7, #4]
 8001e38:	f000 f9a0 	bl	800217c <DMA_CalcBaseAndBitshift>
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e44:	223f      	movs	r2, #63	; 0x3f
 8001e46:	409a      	lsls	r2, r3
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	2200      	movs	r2, #0
 8001e50:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	2201      	movs	r2, #1
 8001e56:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001e5a:	2300      	movs	r3, #0
}
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	3718      	adds	r7, #24
 8001e60:	46bd      	mov	sp, r7
 8001e62:	bd80      	pop	{r7, pc}
 8001e64:	f010803f 	.word	0xf010803f

08001e68 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b086      	sub	sp, #24
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001e70:	2300      	movs	r3, #0
 8001e72:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001e74:	4b8e      	ldr	r3, [pc, #568]	; (80020b0 <HAL_DMA_IRQHandler+0x248>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	4a8e      	ldr	r2, [pc, #568]	; (80020b4 <HAL_DMA_IRQHandler+0x24c>)
 8001e7a:	fba2 2303 	umull	r2, r3, r2, r3
 8001e7e:	0a9b      	lsrs	r3, r3, #10
 8001e80:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e86:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001e88:	693b      	ldr	r3, [r7, #16]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e92:	2208      	movs	r2, #8
 8001e94:	409a      	lsls	r2, r3
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	4013      	ands	r3, r2
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d01a      	beq.n	8001ed4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f003 0304 	and.w	r3, r3, #4
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d013      	beq.n	8001ed4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	681a      	ldr	r2, [r3, #0]
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f022 0204 	bic.w	r2, r2, #4
 8001eba:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ec0:	2208      	movs	r2, #8
 8001ec2:	409a      	lsls	r2, r3
 8001ec4:	693b      	ldr	r3, [r7, #16]
 8001ec6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ecc:	f043 0201 	orr.w	r2, r3, #1
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ed8:	2201      	movs	r2, #1
 8001eda:	409a      	lsls	r2, r3
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	4013      	ands	r3, r2
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d012      	beq.n	8001f0a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	695b      	ldr	r3, [r3, #20]
 8001eea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d00b      	beq.n	8001f0a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ef6:	2201      	movs	r2, #1
 8001ef8:	409a      	lsls	r2, r3
 8001efa:	693b      	ldr	r3, [r7, #16]
 8001efc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f02:	f043 0202 	orr.w	r2, r3, #2
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f0e:	2204      	movs	r2, #4
 8001f10:	409a      	lsls	r2, r3
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	4013      	ands	r3, r2
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d012      	beq.n	8001f40 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f003 0302 	and.w	r3, r3, #2
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d00b      	beq.n	8001f40 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f2c:	2204      	movs	r2, #4
 8001f2e:	409a      	lsls	r2, r3
 8001f30:	693b      	ldr	r3, [r7, #16]
 8001f32:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f38:	f043 0204 	orr.w	r2, r3, #4
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f44:	2210      	movs	r2, #16
 8001f46:	409a      	lsls	r2, r3
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	4013      	ands	r3, r2
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d043      	beq.n	8001fd8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f003 0308 	and.w	r3, r3, #8
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d03c      	beq.n	8001fd8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f62:	2210      	movs	r2, #16
 8001f64:	409a      	lsls	r2, r3
 8001f66:	693b      	ldr	r3, [r7, #16]
 8001f68:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d018      	beq.n	8001faa <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d108      	bne.n	8001f98 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d024      	beq.n	8001fd8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f92:	6878      	ldr	r0, [r7, #4]
 8001f94:	4798      	blx	r3
 8001f96:	e01f      	b.n	8001fd8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d01b      	beq.n	8001fd8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001fa4:	6878      	ldr	r0, [r7, #4]
 8001fa6:	4798      	blx	r3
 8001fa8:	e016      	b.n	8001fd8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d107      	bne.n	8001fc8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	681a      	ldr	r2, [r3, #0]
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f022 0208 	bic.w	r2, r2, #8
 8001fc6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d003      	beq.n	8001fd8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fd4:	6878      	ldr	r0, [r7, #4]
 8001fd6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fdc:	2220      	movs	r2, #32
 8001fde:	409a      	lsls	r2, r3
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	4013      	ands	r3, r2
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	f000 808f 	beq.w	8002108 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f003 0310 	and.w	r3, r3, #16
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	f000 8087 	beq.w	8002108 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ffe:	2220      	movs	r2, #32
 8002000:	409a      	lsls	r2, r3
 8002002:	693b      	ldr	r3, [r7, #16]
 8002004:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800200c:	b2db      	uxtb	r3, r3
 800200e:	2b05      	cmp	r3, #5
 8002010:	d136      	bne.n	8002080 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	681a      	ldr	r2, [r3, #0]
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f022 0216 	bic.w	r2, r2, #22
 8002020:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	695a      	ldr	r2, [r3, #20]
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002030:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002036:	2b00      	cmp	r3, #0
 8002038:	d103      	bne.n	8002042 <HAL_DMA_IRQHandler+0x1da>
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800203e:	2b00      	cmp	r3, #0
 8002040:	d007      	beq.n	8002052 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	681a      	ldr	r2, [r3, #0]
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f022 0208 	bic.w	r2, r2, #8
 8002050:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002056:	223f      	movs	r2, #63	; 0x3f
 8002058:	409a      	lsls	r2, r3
 800205a:	693b      	ldr	r3, [r7, #16]
 800205c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	2201      	movs	r2, #1
 8002062:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	2200      	movs	r2, #0
 800206a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002072:	2b00      	cmp	r3, #0
 8002074:	d07e      	beq.n	8002174 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800207a:	6878      	ldr	r0, [r7, #4]
 800207c:	4798      	blx	r3
        }
        return;
 800207e:	e079      	b.n	8002174 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800208a:	2b00      	cmp	r3, #0
 800208c:	d01d      	beq.n	80020ca <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002098:	2b00      	cmp	r3, #0
 800209a:	d10d      	bne.n	80020b8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d031      	beq.n	8002108 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020a8:	6878      	ldr	r0, [r7, #4]
 80020aa:	4798      	blx	r3
 80020ac:	e02c      	b.n	8002108 <HAL_DMA_IRQHandler+0x2a0>
 80020ae:	bf00      	nop
 80020b0:	20000000 	.word	0x20000000
 80020b4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d023      	beq.n	8002108 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020c4:	6878      	ldr	r0, [r7, #4]
 80020c6:	4798      	blx	r3
 80020c8:	e01e      	b.n	8002108 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d10f      	bne.n	80020f8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	681a      	ldr	r2, [r3, #0]
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f022 0210 	bic.w	r2, r2, #16
 80020e6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	2201      	movs	r2, #1
 80020ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	2200      	movs	r2, #0
 80020f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d003      	beq.n	8002108 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002104:	6878      	ldr	r0, [r7, #4]
 8002106:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800210c:	2b00      	cmp	r3, #0
 800210e:	d032      	beq.n	8002176 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002114:	f003 0301 	and.w	r3, r3, #1
 8002118:	2b00      	cmp	r3, #0
 800211a:	d022      	beq.n	8002162 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	2205      	movs	r2, #5
 8002120:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	681a      	ldr	r2, [r3, #0]
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f022 0201 	bic.w	r2, r2, #1
 8002132:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002134:	68bb      	ldr	r3, [r7, #8]
 8002136:	3301      	adds	r3, #1
 8002138:	60bb      	str	r3, [r7, #8]
 800213a:	697a      	ldr	r2, [r7, #20]
 800213c:	429a      	cmp	r2, r3
 800213e:	d307      	bcc.n	8002150 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f003 0301 	and.w	r3, r3, #1
 800214a:	2b00      	cmp	r3, #0
 800214c:	d1f2      	bne.n	8002134 <HAL_DMA_IRQHandler+0x2cc>
 800214e:	e000      	b.n	8002152 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002150:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	2201      	movs	r2, #1
 8002156:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	2200      	movs	r2, #0
 800215e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002166:	2b00      	cmp	r3, #0
 8002168:	d005      	beq.n	8002176 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800216e:	6878      	ldr	r0, [r7, #4]
 8002170:	4798      	blx	r3
 8002172:	e000      	b.n	8002176 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002174:	bf00      	nop
    }
  }
}
 8002176:	3718      	adds	r7, #24
 8002178:	46bd      	mov	sp, r7
 800217a:	bd80      	pop	{r7, pc}

0800217c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800217c:	b480      	push	{r7}
 800217e:	b085      	sub	sp, #20
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	b2db      	uxtb	r3, r3
 800218a:	3b10      	subs	r3, #16
 800218c:	4a14      	ldr	r2, [pc, #80]	; (80021e0 <DMA_CalcBaseAndBitshift+0x64>)
 800218e:	fba2 2303 	umull	r2, r3, r2, r3
 8002192:	091b      	lsrs	r3, r3, #4
 8002194:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002196:	4a13      	ldr	r2, [pc, #76]	; (80021e4 <DMA_CalcBaseAndBitshift+0x68>)
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	4413      	add	r3, r2
 800219c:	781b      	ldrb	r3, [r3, #0]
 800219e:	461a      	mov	r2, r3
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	2b03      	cmp	r3, #3
 80021a8:	d909      	bls.n	80021be <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80021b2:	f023 0303 	bic.w	r3, r3, #3
 80021b6:	1d1a      	adds	r2, r3, #4
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	659a      	str	r2, [r3, #88]	; 0x58
 80021bc:	e007      	b.n	80021ce <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80021c6:	f023 0303 	bic.w	r3, r3, #3
 80021ca:	687a      	ldr	r2, [r7, #4]
 80021cc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80021d2:	4618      	mov	r0, r3
 80021d4:	3714      	adds	r7, #20
 80021d6:	46bd      	mov	sp, r7
 80021d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021dc:	4770      	bx	lr
 80021de:	bf00      	nop
 80021e0:	aaaaaaab 	.word	0xaaaaaaab
 80021e4:	080062f8 	.word	0x080062f8

080021e8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80021e8:	b480      	push	{r7}
 80021ea:	b085      	sub	sp, #20
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80021f0:	2300      	movs	r3, #0
 80021f2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021f8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	699b      	ldr	r3, [r3, #24]
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d11f      	bne.n	8002242 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002202:	68bb      	ldr	r3, [r7, #8]
 8002204:	2b03      	cmp	r3, #3
 8002206:	d856      	bhi.n	80022b6 <DMA_CheckFifoParam+0xce>
 8002208:	a201      	add	r2, pc, #4	; (adr r2, 8002210 <DMA_CheckFifoParam+0x28>)
 800220a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800220e:	bf00      	nop
 8002210:	08002221 	.word	0x08002221
 8002214:	08002233 	.word	0x08002233
 8002218:	08002221 	.word	0x08002221
 800221c:	080022b7 	.word	0x080022b7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002224:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002228:	2b00      	cmp	r3, #0
 800222a:	d046      	beq.n	80022ba <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800222c:	2301      	movs	r3, #1
 800222e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002230:	e043      	b.n	80022ba <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002236:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800223a:	d140      	bne.n	80022be <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800223c:	2301      	movs	r3, #1
 800223e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002240:	e03d      	b.n	80022be <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	699b      	ldr	r3, [r3, #24]
 8002246:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800224a:	d121      	bne.n	8002290 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800224c:	68bb      	ldr	r3, [r7, #8]
 800224e:	2b03      	cmp	r3, #3
 8002250:	d837      	bhi.n	80022c2 <DMA_CheckFifoParam+0xda>
 8002252:	a201      	add	r2, pc, #4	; (adr r2, 8002258 <DMA_CheckFifoParam+0x70>)
 8002254:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002258:	08002269 	.word	0x08002269
 800225c:	0800226f 	.word	0x0800226f
 8002260:	08002269 	.word	0x08002269
 8002264:	08002281 	.word	0x08002281
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002268:	2301      	movs	r3, #1
 800226a:	73fb      	strb	r3, [r7, #15]
      break;
 800226c:	e030      	b.n	80022d0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002272:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002276:	2b00      	cmp	r3, #0
 8002278:	d025      	beq.n	80022c6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800227a:	2301      	movs	r3, #1
 800227c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800227e:	e022      	b.n	80022c6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002284:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002288:	d11f      	bne.n	80022ca <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800228a:	2301      	movs	r3, #1
 800228c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800228e:	e01c      	b.n	80022ca <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002290:	68bb      	ldr	r3, [r7, #8]
 8002292:	2b02      	cmp	r3, #2
 8002294:	d903      	bls.n	800229e <DMA_CheckFifoParam+0xb6>
 8002296:	68bb      	ldr	r3, [r7, #8]
 8002298:	2b03      	cmp	r3, #3
 800229a:	d003      	beq.n	80022a4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800229c:	e018      	b.n	80022d0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800229e:	2301      	movs	r3, #1
 80022a0:	73fb      	strb	r3, [r7, #15]
      break;
 80022a2:	e015      	b.n	80022d0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022a8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d00e      	beq.n	80022ce <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80022b0:	2301      	movs	r3, #1
 80022b2:	73fb      	strb	r3, [r7, #15]
      break;
 80022b4:	e00b      	b.n	80022ce <DMA_CheckFifoParam+0xe6>
      break;
 80022b6:	bf00      	nop
 80022b8:	e00a      	b.n	80022d0 <DMA_CheckFifoParam+0xe8>
      break;
 80022ba:	bf00      	nop
 80022bc:	e008      	b.n	80022d0 <DMA_CheckFifoParam+0xe8>
      break;
 80022be:	bf00      	nop
 80022c0:	e006      	b.n	80022d0 <DMA_CheckFifoParam+0xe8>
      break;
 80022c2:	bf00      	nop
 80022c4:	e004      	b.n	80022d0 <DMA_CheckFifoParam+0xe8>
      break;
 80022c6:	bf00      	nop
 80022c8:	e002      	b.n	80022d0 <DMA_CheckFifoParam+0xe8>
      break;   
 80022ca:	bf00      	nop
 80022cc:	e000      	b.n	80022d0 <DMA_CheckFifoParam+0xe8>
      break;
 80022ce:	bf00      	nop
    }
  } 
  
  return status; 
 80022d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80022d2:	4618      	mov	r0, r3
 80022d4:	3714      	adds	r7, #20
 80022d6:	46bd      	mov	sp, r7
 80022d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022dc:	4770      	bx	lr
 80022de:	bf00      	nop

080022e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80022e0:	b480      	push	{r7}
 80022e2:	b089      	sub	sp, #36	; 0x24
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
 80022e8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80022ea:	2300      	movs	r3, #0
 80022ec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80022ee:	2300      	movs	r3, #0
 80022f0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80022f2:	2300      	movs	r3, #0
 80022f4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80022f6:	2300      	movs	r3, #0
 80022f8:	61fb      	str	r3, [r7, #28]
 80022fa:	e159      	b.n	80025b0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80022fc:	2201      	movs	r2, #1
 80022fe:	69fb      	ldr	r3, [r7, #28]
 8002300:	fa02 f303 	lsl.w	r3, r2, r3
 8002304:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	697a      	ldr	r2, [r7, #20]
 800230c:	4013      	ands	r3, r2
 800230e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002310:	693a      	ldr	r2, [r7, #16]
 8002312:	697b      	ldr	r3, [r7, #20]
 8002314:	429a      	cmp	r2, r3
 8002316:	f040 8148 	bne.w	80025aa <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800231a:	683b      	ldr	r3, [r7, #0]
 800231c:	685b      	ldr	r3, [r3, #4]
 800231e:	f003 0303 	and.w	r3, r3, #3
 8002322:	2b01      	cmp	r3, #1
 8002324:	d005      	beq.n	8002332 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	685b      	ldr	r3, [r3, #4]
 800232a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800232e:	2b02      	cmp	r3, #2
 8002330:	d130      	bne.n	8002394 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	689b      	ldr	r3, [r3, #8]
 8002336:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002338:	69fb      	ldr	r3, [r7, #28]
 800233a:	005b      	lsls	r3, r3, #1
 800233c:	2203      	movs	r2, #3
 800233e:	fa02 f303 	lsl.w	r3, r2, r3
 8002342:	43db      	mvns	r3, r3
 8002344:	69ba      	ldr	r2, [r7, #24]
 8002346:	4013      	ands	r3, r2
 8002348:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	68da      	ldr	r2, [r3, #12]
 800234e:	69fb      	ldr	r3, [r7, #28]
 8002350:	005b      	lsls	r3, r3, #1
 8002352:	fa02 f303 	lsl.w	r3, r2, r3
 8002356:	69ba      	ldr	r2, [r7, #24]
 8002358:	4313      	orrs	r3, r2
 800235a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	69ba      	ldr	r2, [r7, #24]
 8002360:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	685b      	ldr	r3, [r3, #4]
 8002366:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002368:	2201      	movs	r2, #1
 800236a:	69fb      	ldr	r3, [r7, #28]
 800236c:	fa02 f303 	lsl.w	r3, r2, r3
 8002370:	43db      	mvns	r3, r3
 8002372:	69ba      	ldr	r2, [r7, #24]
 8002374:	4013      	ands	r3, r2
 8002376:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	685b      	ldr	r3, [r3, #4]
 800237c:	091b      	lsrs	r3, r3, #4
 800237e:	f003 0201 	and.w	r2, r3, #1
 8002382:	69fb      	ldr	r3, [r7, #28]
 8002384:	fa02 f303 	lsl.w	r3, r2, r3
 8002388:	69ba      	ldr	r2, [r7, #24]
 800238a:	4313      	orrs	r3, r2
 800238c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	69ba      	ldr	r2, [r7, #24]
 8002392:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	685b      	ldr	r3, [r3, #4]
 8002398:	f003 0303 	and.w	r3, r3, #3
 800239c:	2b03      	cmp	r3, #3
 800239e:	d017      	beq.n	80023d0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	68db      	ldr	r3, [r3, #12]
 80023a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80023a6:	69fb      	ldr	r3, [r7, #28]
 80023a8:	005b      	lsls	r3, r3, #1
 80023aa:	2203      	movs	r2, #3
 80023ac:	fa02 f303 	lsl.w	r3, r2, r3
 80023b0:	43db      	mvns	r3, r3
 80023b2:	69ba      	ldr	r2, [r7, #24]
 80023b4:	4013      	ands	r3, r2
 80023b6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	689a      	ldr	r2, [r3, #8]
 80023bc:	69fb      	ldr	r3, [r7, #28]
 80023be:	005b      	lsls	r3, r3, #1
 80023c0:	fa02 f303 	lsl.w	r3, r2, r3
 80023c4:	69ba      	ldr	r2, [r7, #24]
 80023c6:	4313      	orrs	r3, r2
 80023c8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	69ba      	ldr	r2, [r7, #24]
 80023ce:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	685b      	ldr	r3, [r3, #4]
 80023d4:	f003 0303 	and.w	r3, r3, #3
 80023d8:	2b02      	cmp	r3, #2
 80023da:	d123      	bne.n	8002424 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80023dc:	69fb      	ldr	r3, [r7, #28]
 80023de:	08da      	lsrs	r2, r3, #3
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	3208      	adds	r2, #8
 80023e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80023ea:	69fb      	ldr	r3, [r7, #28]
 80023ec:	f003 0307 	and.w	r3, r3, #7
 80023f0:	009b      	lsls	r3, r3, #2
 80023f2:	220f      	movs	r2, #15
 80023f4:	fa02 f303 	lsl.w	r3, r2, r3
 80023f8:	43db      	mvns	r3, r3
 80023fa:	69ba      	ldr	r2, [r7, #24]
 80023fc:	4013      	ands	r3, r2
 80023fe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	691a      	ldr	r2, [r3, #16]
 8002404:	69fb      	ldr	r3, [r7, #28]
 8002406:	f003 0307 	and.w	r3, r3, #7
 800240a:	009b      	lsls	r3, r3, #2
 800240c:	fa02 f303 	lsl.w	r3, r2, r3
 8002410:	69ba      	ldr	r2, [r7, #24]
 8002412:	4313      	orrs	r3, r2
 8002414:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002416:	69fb      	ldr	r3, [r7, #28]
 8002418:	08da      	lsrs	r2, r3, #3
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	3208      	adds	r2, #8
 800241e:	69b9      	ldr	r1, [r7, #24]
 8002420:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800242a:	69fb      	ldr	r3, [r7, #28]
 800242c:	005b      	lsls	r3, r3, #1
 800242e:	2203      	movs	r2, #3
 8002430:	fa02 f303 	lsl.w	r3, r2, r3
 8002434:	43db      	mvns	r3, r3
 8002436:	69ba      	ldr	r2, [r7, #24]
 8002438:	4013      	ands	r3, r2
 800243a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	685b      	ldr	r3, [r3, #4]
 8002440:	f003 0203 	and.w	r2, r3, #3
 8002444:	69fb      	ldr	r3, [r7, #28]
 8002446:	005b      	lsls	r3, r3, #1
 8002448:	fa02 f303 	lsl.w	r3, r2, r3
 800244c:	69ba      	ldr	r2, [r7, #24]
 800244e:	4313      	orrs	r3, r2
 8002450:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	69ba      	ldr	r2, [r7, #24]
 8002456:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	685b      	ldr	r3, [r3, #4]
 800245c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002460:	2b00      	cmp	r3, #0
 8002462:	f000 80a2 	beq.w	80025aa <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002466:	2300      	movs	r3, #0
 8002468:	60fb      	str	r3, [r7, #12]
 800246a:	4b57      	ldr	r3, [pc, #348]	; (80025c8 <HAL_GPIO_Init+0x2e8>)
 800246c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800246e:	4a56      	ldr	r2, [pc, #344]	; (80025c8 <HAL_GPIO_Init+0x2e8>)
 8002470:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002474:	6453      	str	r3, [r2, #68]	; 0x44
 8002476:	4b54      	ldr	r3, [pc, #336]	; (80025c8 <HAL_GPIO_Init+0x2e8>)
 8002478:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800247a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800247e:	60fb      	str	r3, [r7, #12]
 8002480:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002482:	4a52      	ldr	r2, [pc, #328]	; (80025cc <HAL_GPIO_Init+0x2ec>)
 8002484:	69fb      	ldr	r3, [r7, #28]
 8002486:	089b      	lsrs	r3, r3, #2
 8002488:	3302      	adds	r3, #2
 800248a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800248e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002490:	69fb      	ldr	r3, [r7, #28]
 8002492:	f003 0303 	and.w	r3, r3, #3
 8002496:	009b      	lsls	r3, r3, #2
 8002498:	220f      	movs	r2, #15
 800249a:	fa02 f303 	lsl.w	r3, r2, r3
 800249e:	43db      	mvns	r3, r3
 80024a0:	69ba      	ldr	r2, [r7, #24]
 80024a2:	4013      	ands	r3, r2
 80024a4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	4a49      	ldr	r2, [pc, #292]	; (80025d0 <HAL_GPIO_Init+0x2f0>)
 80024aa:	4293      	cmp	r3, r2
 80024ac:	d019      	beq.n	80024e2 <HAL_GPIO_Init+0x202>
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	4a48      	ldr	r2, [pc, #288]	; (80025d4 <HAL_GPIO_Init+0x2f4>)
 80024b2:	4293      	cmp	r3, r2
 80024b4:	d013      	beq.n	80024de <HAL_GPIO_Init+0x1fe>
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	4a47      	ldr	r2, [pc, #284]	; (80025d8 <HAL_GPIO_Init+0x2f8>)
 80024ba:	4293      	cmp	r3, r2
 80024bc:	d00d      	beq.n	80024da <HAL_GPIO_Init+0x1fa>
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	4a46      	ldr	r2, [pc, #280]	; (80025dc <HAL_GPIO_Init+0x2fc>)
 80024c2:	4293      	cmp	r3, r2
 80024c4:	d007      	beq.n	80024d6 <HAL_GPIO_Init+0x1f6>
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	4a45      	ldr	r2, [pc, #276]	; (80025e0 <HAL_GPIO_Init+0x300>)
 80024ca:	4293      	cmp	r3, r2
 80024cc:	d101      	bne.n	80024d2 <HAL_GPIO_Init+0x1f2>
 80024ce:	2304      	movs	r3, #4
 80024d0:	e008      	b.n	80024e4 <HAL_GPIO_Init+0x204>
 80024d2:	2307      	movs	r3, #7
 80024d4:	e006      	b.n	80024e4 <HAL_GPIO_Init+0x204>
 80024d6:	2303      	movs	r3, #3
 80024d8:	e004      	b.n	80024e4 <HAL_GPIO_Init+0x204>
 80024da:	2302      	movs	r3, #2
 80024dc:	e002      	b.n	80024e4 <HAL_GPIO_Init+0x204>
 80024de:	2301      	movs	r3, #1
 80024e0:	e000      	b.n	80024e4 <HAL_GPIO_Init+0x204>
 80024e2:	2300      	movs	r3, #0
 80024e4:	69fa      	ldr	r2, [r7, #28]
 80024e6:	f002 0203 	and.w	r2, r2, #3
 80024ea:	0092      	lsls	r2, r2, #2
 80024ec:	4093      	lsls	r3, r2
 80024ee:	69ba      	ldr	r2, [r7, #24]
 80024f0:	4313      	orrs	r3, r2
 80024f2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80024f4:	4935      	ldr	r1, [pc, #212]	; (80025cc <HAL_GPIO_Init+0x2ec>)
 80024f6:	69fb      	ldr	r3, [r7, #28]
 80024f8:	089b      	lsrs	r3, r3, #2
 80024fa:	3302      	adds	r3, #2
 80024fc:	69ba      	ldr	r2, [r7, #24]
 80024fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002502:	4b38      	ldr	r3, [pc, #224]	; (80025e4 <HAL_GPIO_Init+0x304>)
 8002504:	689b      	ldr	r3, [r3, #8]
 8002506:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002508:	693b      	ldr	r3, [r7, #16]
 800250a:	43db      	mvns	r3, r3
 800250c:	69ba      	ldr	r2, [r7, #24]
 800250e:	4013      	ands	r3, r2
 8002510:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	685b      	ldr	r3, [r3, #4]
 8002516:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800251a:	2b00      	cmp	r3, #0
 800251c:	d003      	beq.n	8002526 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800251e:	69ba      	ldr	r2, [r7, #24]
 8002520:	693b      	ldr	r3, [r7, #16]
 8002522:	4313      	orrs	r3, r2
 8002524:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002526:	4a2f      	ldr	r2, [pc, #188]	; (80025e4 <HAL_GPIO_Init+0x304>)
 8002528:	69bb      	ldr	r3, [r7, #24]
 800252a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800252c:	4b2d      	ldr	r3, [pc, #180]	; (80025e4 <HAL_GPIO_Init+0x304>)
 800252e:	68db      	ldr	r3, [r3, #12]
 8002530:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002532:	693b      	ldr	r3, [r7, #16]
 8002534:	43db      	mvns	r3, r3
 8002536:	69ba      	ldr	r2, [r7, #24]
 8002538:	4013      	ands	r3, r2
 800253a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	685b      	ldr	r3, [r3, #4]
 8002540:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002544:	2b00      	cmp	r3, #0
 8002546:	d003      	beq.n	8002550 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002548:	69ba      	ldr	r2, [r7, #24]
 800254a:	693b      	ldr	r3, [r7, #16]
 800254c:	4313      	orrs	r3, r2
 800254e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002550:	4a24      	ldr	r2, [pc, #144]	; (80025e4 <HAL_GPIO_Init+0x304>)
 8002552:	69bb      	ldr	r3, [r7, #24]
 8002554:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002556:	4b23      	ldr	r3, [pc, #140]	; (80025e4 <HAL_GPIO_Init+0x304>)
 8002558:	685b      	ldr	r3, [r3, #4]
 800255a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800255c:	693b      	ldr	r3, [r7, #16]
 800255e:	43db      	mvns	r3, r3
 8002560:	69ba      	ldr	r2, [r7, #24]
 8002562:	4013      	ands	r3, r2
 8002564:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	685b      	ldr	r3, [r3, #4]
 800256a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800256e:	2b00      	cmp	r3, #0
 8002570:	d003      	beq.n	800257a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002572:	69ba      	ldr	r2, [r7, #24]
 8002574:	693b      	ldr	r3, [r7, #16]
 8002576:	4313      	orrs	r3, r2
 8002578:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800257a:	4a1a      	ldr	r2, [pc, #104]	; (80025e4 <HAL_GPIO_Init+0x304>)
 800257c:	69bb      	ldr	r3, [r7, #24]
 800257e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002580:	4b18      	ldr	r3, [pc, #96]	; (80025e4 <HAL_GPIO_Init+0x304>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002586:	693b      	ldr	r3, [r7, #16]
 8002588:	43db      	mvns	r3, r3
 800258a:	69ba      	ldr	r2, [r7, #24]
 800258c:	4013      	ands	r3, r2
 800258e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	685b      	ldr	r3, [r3, #4]
 8002594:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002598:	2b00      	cmp	r3, #0
 800259a:	d003      	beq.n	80025a4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800259c:	69ba      	ldr	r2, [r7, #24]
 800259e:	693b      	ldr	r3, [r7, #16]
 80025a0:	4313      	orrs	r3, r2
 80025a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80025a4:	4a0f      	ldr	r2, [pc, #60]	; (80025e4 <HAL_GPIO_Init+0x304>)
 80025a6:	69bb      	ldr	r3, [r7, #24]
 80025a8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80025aa:	69fb      	ldr	r3, [r7, #28]
 80025ac:	3301      	adds	r3, #1
 80025ae:	61fb      	str	r3, [r7, #28]
 80025b0:	69fb      	ldr	r3, [r7, #28]
 80025b2:	2b0f      	cmp	r3, #15
 80025b4:	f67f aea2 	bls.w	80022fc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80025b8:	bf00      	nop
 80025ba:	bf00      	nop
 80025bc:	3724      	adds	r7, #36	; 0x24
 80025be:	46bd      	mov	sp, r7
 80025c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c4:	4770      	bx	lr
 80025c6:	bf00      	nop
 80025c8:	40023800 	.word	0x40023800
 80025cc:	40013800 	.word	0x40013800
 80025d0:	40020000 	.word	0x40020000
 80025d4:	40020400 	.word	0x40020400
 80025d8:	40020800 	.word	0x40020800
 80025dc:	40020c00 	.word	0x40020c00
 80025e0:	40021000 	.word	0x40021000
 80025e4:	40013c00 	.word	0x40013c00

080025e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80025e8:	b480      	push	{r7}
 80025ea:	b083      	sub	sp, #12
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
 80025f0:	460b      	mov	r3, r1
 80025f2:	807b      	strh	r3, [r7, #2]
 80025f4:	4613      	mov	r3, r2
 80025f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80025f8:	787b      	ldrb	r3, [r7, #1]
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d003      	beq.n	8002606 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80025fe:	887a      	ldrh	r2, [r7, #2]
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002604:	e003      	b.n	800260e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002606:	887b      	ldrh	r3, [r7, #2]
 8002608:	041a      	lsls	r2, r3, #16
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	619a      	str	r2, [r3, #24]
}
 800260e:	bf00      	nop
 8002610:	370c      	adds	r7, #12
 8002612:	46bd      	mov	sp, r7
 8002614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002618:	4770      	bx	lr
	...

0800261c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b086      	sub	sp, #24
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	2b00      	cmp	r3, #0
 8002628:	d101      	bne.n	800262e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800262a:	2301      	movs	r3, #1
 800262c:	e267      	b.n	8002afe <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f003 0301 	and.w	r3, r3, #1
 8002636:	2b00      	cmp	r3, #0
 8002638:	d075      	beq.n	8002726 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800263a:	4b88      	ldr	r3, [pc, #544]	; (800285c <HAL_RCC_OscConfig+0x240>)
 800263c:	689b      	ldr	r3, [r3, #8]
 800263e:	f003 030c 	and.w	r3, r3, #12
 8002642:	2b04      	cmp	r3, #4
 8002644:	d00c      	beq.n	8002660 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002646:	4b85      	ldr	r3, [pc, #532]	; (800285c <HAL_RCC_OscConfig+0x240>)
 8002648:	689b      	ldr	r3, [r3, #8]
 800264a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800264e:	2b08      	cmp	r3, #8
 8002650:	d112      	bne.n	8002678 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002652:	4b82      	ldr	r3, [pc, #520]	; (800285c <HAL_RCC_OscConfig+0x240>)
 8002654:	685b      	ldr	r3, [r3, #4]
 8002656:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800265a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800265e:	d10b      	bne.n	8002678 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002660:	4b7e      	ldr	r3, [pc, #504]	; (800285c <HAL_RCC_OscConfig+0x240>)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002668:	2b00      	cmp	r3, #0
 800266a:	d05b      	beq.n	8002724 <HAL_RCC_OscConfig+0x108>
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	685b      	ldr	r3, [r3, #4]
 8002670:	2b00      	cmp	r3, #0
 8002672:	d157      	bne.n	8002724 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002674:	2301      	movs	r3, #1
 8002676:	e242      	b.n	8002afe <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	685b      	ldr	r3, [r3, #4]
 800267c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002680:	d106      	bne.n	8002690 <HAL_RCC_OscConfig+0x74>
 8002682:	4b76      	ldr	r3, [pc, #472]	; (800285c <HAL_RCC_OscConfig+0x240>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	4a75      	ldr	r2, [pc, #468]	; (800285c <HAL_RCC_OscConfig+0x240>)
 8002688:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800268c:	6013      	str	r3, [r2, #0]
 800268e:	e01d      	b.n	80026cc <HAL_RCC_OscConfig+0xb0>
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	685b      	ldr	r3, [r3, #4]
 8002694:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002698:	d10c      	bne.n	80026b4 <HAL_RCC_OscConfig+0x98>
 800269a:	4b70      	ldr	r3, [pc, #448]	; (800285c <HAL_RCC_OscConfig+0x240>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	4a6f      	ldr	r2, [pc, #444]	; (800285c <HAL_RCC_OscConfig+0x240>)
 80026a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80026a4:	6013      	str	r3, [r2, #0]
 80026a6:	4b6d      	ldr	r3, [pc, #436]	; (800285c <HAL_RCC_OscConfig+0x240>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	4a6c      	ldr	r2, [pc, #432]	; (800285c <HAL_RCC_OscConfig+0x240>)
 80026ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026b0:	6013      	str	r3, [r2, #0]
 80026b2:	e00b      	b.n	80026cc <HAL_RCC_OscConfig+0xb0>
 80026b4:	4b69      	ldr	r3, [pc, #420]	; (800285c <HAL_RCC_OscConfig+0x240>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	4a68      	ldr	r2, [pc, #416]	; (800285c <HAL_RCC_OscConfig+0x240>)
 80026ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026be:	6013      	str	r3, [r2, #0]
 80026c0:	4b66      	ldr	r3, [pc, #408]	; (800285c <HAL_RCC_OscConfig+0x240>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	4a65      	ldr	r2, [pc, #404]	; (800285c <HAL_RCC_OscConfig+0x240>)
 80026c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80026ca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	685b      	ldr	r3, [r3, #4]
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d013      	beq.n	80026fc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026d4:	f7ff f9d8 	bl	8001a88 <HAL_GetTick>
 80026d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026da:	e008      	b.n	80026ee <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80026dc:	f7ff f9d4 	bl	8001a88 <HAL_GetTick>
 80026e0:	4602      	mov	r2, r0
 80026e2:	693b      	ldr	r3, [r7, #16]
 80026e4:	1ad3      	subs	r3, r2, r3
 80026e6:	2b64      	cmp	r3, #100	; 0x64
 80026e8:	d901      	bls.n	80026ee <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80026ea:	2303      	movs	r3, #3
 80026ec:	e207      	b.n	8002afe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026ee:	4b5b      	ldr	r3, [pc, #364]	; (800285c <HAL_RCC_OscConfig+0x240>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d0f0      	beq.n	80026dc <HAL_RCC_OscConfig+0xc0>
 80026fa:	e014      	b.n	8002726 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026fc:	f7ff f9c4 	bl	8001a88 <HAL_GetTick>
 8002700:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002702:	e008      	b.n	8002716 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002704:	f7ff f9c0 	bl	8001a88 <HAL_GetTick>
 8002708:	4602      	mov	r2, r0
 800270a:	693b      	ldr	r3, [r7, #16]
 800270c:	1ad3      	subs	r3, r2, r3
 800270e:	2b64      	cmp	r3, #100	; 0x64
 8002710:	d901      	bls.n	8002716 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002712:	2303      	movs	r3, #3
 8002714:	e1f3      	b.n	8002afe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002716:	4b51      	ldr	r3, [pc, #324]	; (800285c <HAL_RCC_OscConfig+0x240>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800271e:	2b00      	cmp	r3, #0
 8002720:	d1f0      	bne.n	8002704 <HAL_RCC_OscConfig+0xe8>
 8002722:	e000      	b.n	8002726 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002724:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f003 0302 	and.w	r3, r3, #2
 800272e:	2b00      	cmp	r3, #0
 8002730:	d063      	beq.n	80027fa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002732:	4b4a      	ldr	r3, [pc, #296]	; (800285c <HAL_RCC_OscConfig+0x240>)
 8002734:	689b      	ldr	r3, [r3, #8]
 8002736:	f003 030c 	and.w	r3, r3, #12
 800273a:	2b00      	cmp	r3, #0
 800273c:	d00b      	beq.n	8002756 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800273e:	4b47      	ldr	r3, [pc, #284]	; (800285c <HAL_RCC_OscConfig+0x240>)
 8002740:	689b      	ldr	r3, [r3, #8]
 8002742:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002746:	2b08      	cmp	r3, #8
 8002748:	d11c      	bne.n	8002784 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800274a:	4b44      	ldr	r3, [pc, #272]	; (800285c <HAL_RCC_OscConfig+0x240>)
 800274c:	685b      	ldr	r3, [r3, #4]
 800274e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002752:	2b00      	cmp	r3, #0
 8002754:	d116      	bne.n	8002784 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002756:	4b41      	ldr	r3, [pc, #260]	; (800285c <HAL_RCC_OscConfig+0x240>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f003 0302 	and.w	r3, r3, #2
 800275e:	2b00      	cmp	r3, #0
 8002760:	d005      	beq.n	800276e <HAL_RCC_OscConfig+0x152>
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	68db      	ldr	r3, [r3, #12]
 8002766:	2b01      	cmp	r3, #1
 8002768:	d001      	beq.n	800276e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800276a:	2301      	movs	r3, #1
 800276c:	e1c7      	b.n	8002afe <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800276e:	4b3b      	ldr	r3, [pc, #236]	; (800285c <HAL_RCC_OscConfig+0x240>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	691b      	ldr	r3, [r3, #16]
 800277a:	00db      	lsls	r3, r3, #3
 800277c:	4937      	ldr	r1, [pc, #220]	; (800285c <HAL_RCC_OscConfig+0x240>)
 800277e:	4313      	orrs	r3, r2
 8002780:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002782:	e03a      	b.n	80027fa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	68db      	ldr	r3, [r3, #12]
 8002788:	2b00      	cmp	r3, #0
 800278a:	d020      	beq.n	80027ce <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800278c:	4b34      	ldr	r3, [pc, #208]	; (8002860 <HAL_RCC_OscConfig+0x244>)
 800278e:	2201      	movs	r2, #1
 8002790:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002792:	f7ff f979 	bl	8001a88 <HAL_GetTick>
 8002796:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002798:	e008      	b.n	80027ac <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800279a:	f7ff f975 	bl	8001a88 <HAL_GetTick>
 800279e:	4602      	mov	r2, r0
 80027a0:	693b      	ldr	r3, [r7, #16]
 80027a2:	1ad3      	subs	r3, r2, r3
 80027a4:	2b02      	cmp	r3, #2
 80027a6:	d901      	bls.n	80027ac <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80027a8:	2303      	movs	r3, #3
 80027aa:	e1a8      	b.n	8002afe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027ac:	4b2b      	ldr	r3, [pc, #172]	; (800285c <HAL_RCC_OscConfig+0x240>)
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f003 0302 	and.w	r3, r3, #2
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d0f0      	beq.n	800279a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027b8:	4b28      	ldr	r3, [pc, #160]	; (800285c <HAL_RCC_OscConfig+0x240>)
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	691b      	ldr	r3, [r3, #16]
 80027c4:	00db      	lsls	r3, r3, #3
 80027c6:	4925      	ldr	r1, [pc, #148]	; (800285c <HAL_RCC_OscConfig+0x240>)
 80027c8:	4313      	orrs	r3, r2
 80027ca:	600b      	str	r3, [r1, #0]
 80027cc:	e015      	b.n	80027fa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80027ce:	4b24      	ldr	r3, [pc, #144]	; (8002860 <HAL_RCC_OscConfig+0x244>)
 80027d0:	2200      	movs	r2, #0
 80027d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027d4:	f7ff f958 	bl	8001a88 <HAL_GetTick>
 80027d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027da:	e008      	b.n	80027ee <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80027dc:	f7ff f954 	bl	8001a88 <HAL_GetTick>
 80027e0:	4602      	mov	r2, r0
 80027e2:	693b      	ldr	r3, [r7, #16]
 80027e4:	1ad3      	subs	r3, r2, r3
 80027e6:	2b02      	cmp	r3, #2
 80027e8:	d901      	bls.n	80027ee <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80027ea:	2303      	movs	r3, #3
 80027ec:	e187      	b.n	8002afe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027ee:	4b1b      	ldr	r3, [pc, #108]	; (800285c <HAL_RCC_OscConfig+0x240>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f003 0302 	and.w	r3, r3, #2
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d1f0      	bne.n	80027dc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f003 0308 	and.w	r3, r3, #8
 8002802:	2b00      	cmp	r3, #0
 8002804:	d036      	beq.n	8002874 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	695b      	ldr	r3, [r3, #20]
 800280a:	2b00      	cmp	r3, #0
 800280c:	d016      	beq.n	800283c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800280e:	4b15      	ldr	r3, [pc, #84]	; (8002864 <HAL_RCC_OscConfig+0x248>)
 8002810:	2201      	movs	r2, #1
 8002812:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002814:	f7ff f938 	bl	8001a88 <HAL_GetTick>
 8002818:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800281a:	e008      	b.n	800282e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800281c:	f7ff f934 	bl	8001a88 <HAL_GetTick>
 8002820:	4602      	mov	r2, r0
 8002822:	693b      	ldr	r3, [r7, #16]
 8002824:	1ad3      	subs	r3, r2, r3
 8002826:	2b02      	cmp	r3, #2
 8002828:	d901      	bls.n	800282e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800282a:	2303      	movs	r3, #3
 800282c:	e167      	b.n	8002afe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800282e:	4b0b      	ldr	r3, [pc, #44]	; (800285c <HAL_RCC_OscConfig+0x240>)
 8002830:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002832:	f003 0302 	and.w	r3, r3, #2
 8002836:	2b00      	cmp	r3, #0
 8002838:	d0f0      	beq.n	800281c <HAL_RCC_OscConfig+0x200>
 800283a:	e01b      	b.n	8002874 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800283c:	4b09      	ldr	r3, [pc, #36]	; (8002864 <HAL_RCC_OscConfig+0x248>)
 800283e:	2200      	movs	r2, #0
 8002840:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002842:	f7ff f921 	bl	8001a88 <HAL_GetTick>
 8002846:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002848:	e00e      	b.n	8002868 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800284a:	f7ff f91d 	bl	8001a88 <HAL_GetTick>
 800284e:	4602      	mov	r2, r0
 8002850:	693b      	ldr	r3, [r7, #16]
 8002852:	1ad3      	subs	r3, r2, r3
 8002854:	2b02      	cmp	r3, #2
 8002856:	d907      	bls.n	8002868 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002858:	2303      	movs	r3, #3
 800285a:	e150      	b.n	8002afe <HAL_RCC_OscConfig+0x4e2>
 800285c:	40023800 	.word	0x40023800
 8002860:	42470000 	.word	0x42470000
 8002864:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002868:	4b88      	ldr	r3, [pc, #544]	; (8002a8c <HAL_RCC_OscConfig+0x470>)
 800286a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800286c:	f003 0302 	and.w	r3, r3, #2
 8002870:	2b00      	cmp	r3, #0
 8002872:	d1ea      	bne.n	800284a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f003 0304 	and.w	r3, r3, #4
 800287c:	2b00      	cmp	r3, #0
 800287e:	f000 8097 	beq.w	80029b0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002882:	2300      	movs	r3, #0
 8002884:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002886:	4b81      	ldr	r3, [pc, #516]	; (8002a8c <HAL_RCC_OscConfig+0x470>)
 8002888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800288a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800288e:	2b00      	cmp	r3, #0
 8002890:	d10f      	bne.n	80028b2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002892:	2300      	movs	r3, #0
 8002894:	60bb      	str	r3, [r7, #8]
 8002896:	4b7d      	ldr	r3, [pc, #500]	; (8002a8c <HAL_RCC_OscConfig+0x470>)
 8002898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800289a:	4a7c      	ldr	r2, [pc, #496]	; (8002a8c <HAL_RCC_OscConfig+0x470>)
 800289c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028a0:	6413      	str	r3, [r2, #64]	; 0x40
 80028a2:	4b7a      	ldr	r3, [pc, #488]	; (8002a8c <HAL_RCC_OscConfig+0x470>)
 80028a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028aa:	60bb      	str	r3, [r7, #8]
 80028ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80028ae:	2301      	movs	r3, #1
 80028b0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028b2:	4b77      	ldr	r3, [pc, #476]	; (8002a90 <HAL_RCC_OscConfig+0x474>)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d118      	bne.n	80028f0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80028be:	4b74      	ldr	r3, [pc, #464]	; (8002a90 <HAL_RCC_OscConfig+0x474>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	4a73      	ldr	r2, [pc, #460]	; (8002a90 <HAL_RCC_OscConfig+0x474>)
 80028c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028c8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80028ca:	f7ff f8dd 	bl	8001a88 <HAL_GetTick>
 80028ce:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028d0:	e008      	b.n	80028e4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028d2:	f7ff f8d9 	bl	8001a88 <HAL_GetTick>
 80028d6:	4602      	mov	r2, r0
 80028d8:	693b      	ldr	r3, [r7, #16]
 80028da:	1ad3      	subs	r3, r2, r3
 80028dc:	2b02      	cmp	r3, #2
 80028de:	d901      	bls.n	80028e4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80028e0:	2303      	movs	r3, #3
 80028e2:	e10c      	b.n	8002afe <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028e4:	4b6a      	ldr	r3, [pc, #424]	; (8002a90 <HAL_RCC_OscConfig+0x474>)
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d0f0      	beq.n	80028d2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	689b      	ldr	r3, [r3, #8]
 80028f4:	2b01      	cmp	r3, #1
 80028f6:	d106      	bne.n	8002906 <HAL_RCC_OscConfig+0x2ea>
 80028f8:	4b64      	ldr	r3, [pc, #400]	; (8002a8c <HAL_RCC_OscConfig+0x470>)
 80028fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028fc:	4a63      	ldr	r2, [pc, #396]	; (8002a8c <HAL_RCC_OscConfig+0x470>)
 80028fe:	f043 0301 	orr.w	r3, r3, #1
 8002902:	6713      	str	r3, [r2, #112]	; 0x70
 8002904:	e01c      	b.n	8002940 <HAL_RCC_OscConfig+0x324>
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	689b      	ldr	r3, [r3, #8]
 800290a:	2b05      	cmp	r3, #5
 800290c:	d10c      	bne.n	8002928 <HAL_RCC_OscConfig+0x30c>
 800290e:	4b5f      	ldr	r3, [pc, #380]	; (8002a8c <HAL_RCC_OscConfig+0x470>)
 8002910:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002912:	4a5e      	ldr	r2, [pc, #376]	; (8002a8c <HAL_RCC_OscConfig+0x470>)
 8002914:	f043 0304 	orr.w	r3, r3, #4
 8002918:	6713      	str	r3, [r2, #112]	; 0x70
 800291a:	4b5c      	ldr	r3, [pc, #368]	; (8002a8c <HAL_RCC_OscConfig+0x470>)
 800291c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800291e:	4a5b      	ldr	r2, [pc, #364]	; (8002a8c <HAL_RCC_OscConfig+0x470>)
 8002920:	f043 0301 	orr.w	r3, r3, #1
 8002924:	6713      	str	r3, [r2, #112]	; 0x70
 8002926:	e00b      	b.n	8002940 <HAL_RCC_OscConfig+0x324>
 8002928:	4b58      	ldr	r3, [pc, #352]	; (8002a8c <HAL_RCC_OscConfig+0x470>)
 800292a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800292c:	4a57      	ldr	r2, [pc, #348]	; (8002a8c <HAL_RCC_OscConfig+0x470>)
 800292e:	f023 0301 	bic.w	r3, r3, #1
 8002932:	6713      	str	r3, [r2, #112]	; 0x70
 8002934:	4b55      	ldr	r3, [pc, #340]	; (8002a8c <HAL_RCC_OscConfig+0x470>)
 8002936:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002938:	4a54      	ldr	r2, [pc, #336]	; (8002a8c <HAL_RCC_OscConfig+0x470>)
 800293a:	f023 0304 	bic.w	r3, r3, #4
 800293e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	689b      	ldr	r3, [r3, #8]
 8002944:	2b00      	cmp	r3, #0
 8002946:	d015      	beq.n	8002974 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002948:	f7ff f89e 	bl	8001a88 <HAL_GetTick>
 800294c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800294e:	e00a      	b.n	8002966 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002950:	f7ff f89a 	bl	8001a88 <HAL_GetTick>
 8002954:	4602      	mov	r2, r0
 8002956:	693b      	ldr	r3, [r7, #16]
 8002958:	1ad3      	subs	r3, r2, r3
 800295a:	f241 3288 	movw	r2, #5000	; 0x1388
 800295e:	4293      	cmp	r3, r2
 8002960:	d901      	bls.n	8002966 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002962:	2303      	movs	r3, #3
 8002964:	e0cb      	b.n	8002afe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002966:	4b49      	ldr	r3, [pc, #292]	; (8002a8c <HAL_RCC_OscConfig+0x470>)
 8002968:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800296a:	f003 0302 	and.w	r3, r3, #2
 800296e:	2b00      	cmp	r3, #0
 8002970:	d0ee      	beq.n	8002950 <HAL_RCC_OscConfig+0x334>
 8002972:	e014      	b.n	800299e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002974:	f7ff f888 	bl	8001a88 <HAL_GetTick>
 8002978:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800297a:	e00a      	b.n	8002992 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800297c:	f7ff f884 	bl	8001a88 <HAL_GetTick>
 8002980:	4602      	mov	r2, r0
 8002982:	693b      	ldr	r3, [r7, #16]
 8002984:	1ad3      	subs	r3, r2, r3
 8002986:	f241 3288 	movw	r2, #5000	; 0x1388
 800298a:	4293      	cmp	r3, r2
 800298c:	d901      	bls.n	8002992 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800298e:	2303      	movs	r3, #3
 8002990:	e0b5      	b.n	8002afe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002992:	4b3e      	ldr	r3, [pc, #248]	; (8002a8c <HAL_RCC_OscConfig+0x470>)
 8002994:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002996:	f003 0302 	and.w	r3, r3, #2
 800299a:	2b00      	cmp	r3, #0
 800299c:	d1ee      	bne.n	800297c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800299e:	7dfb      	ldrb	r3, [r7, #23]
 80029a0:	2b01      	cmp	r3, #1
 80029a2:	d105      	bne.n	80029b0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80029a4:	4b39      	ldr	r3, [pc, #228]	; (8002a8c <HAL_RCC_OscConfig+0x470>)
 80029a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029a8:	4a38      	ldr	r2, [pc, #224]	; (8002a8c <HAL_RCC_OscConfig+0x470>)
 80029aa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80029ae:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	699b      	ldr	r3, [r3, #24]
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	f000 80a1 	beq.w	8002afc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80029ba:	4b34      	ldr	r3, [pc, #208]	; (8002a8c <HAL_RCC_OscConfig+0x470>)
 80029bc:	689b      	ldr	r3, [r3, #8]
 80029be:	f003 030c 	and.w	r3, r3, #12
 80029c2:	2b08      	cmp	r3, #8
 80029c4:	d05c      	beq.n	8002a80 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	699b      	ldr	r3, [r3, #24]
 80029ca:	2b02      	cmp	r3, #2
 80029cc:	d141      	bne.n	8002a52 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029ce:	4b31      	ldr	r3, [pc, #196]	; (8002a94 <HAL_RCC_OscConfig+0x478>)
 80029d0:	2200      	movs	r2, #0
 80029d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029d4:	f7ff f858 	bl	8001a88 <HAL_GetTick>
 80029d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029da:	e008      	b.n	80029ee <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029dc:	f7ff f854 	bl	8001a88 <HAL_GetTick>
 80029e0:	4602      	mov	r2, r0
 80029e2:	693b      	ldr	r3, [r7, #16]
 80029e4:	1ad3      	subs	r3, r2, r3
 80029e6:	2b02      	cmp	r3, #2
 80029e8:	d901      	bls.n	80029ee <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80029ea:	2303      	movs	r3, #3
 80029ec:	e087      	b.n	8002afe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029ee:	4b27      	ldr	r3, [pc, #156]	; (8002a8c <HAL_RCC_OscConfig+0x470>)
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d1f0      	bne.n	80029dc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	69da      	ldr	r2, [r3, #28]
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6a1b      	ldr	r3, [r3, #32]
 8002a02:	431a      	orrs	r2, r3
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a08:	019b      	lsls	r3, r3, #6
 8002a0a:	431a      	orrs	r2, r3
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a10:	085b      	lsrs	r3, r3, #1
 8002a12:	3b01      	subs	r3, #1
 8002a14:	041b      	lsls	r3, r3, #16
 8002a16:	431a      	orrs	r2, r3
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a1c:	061b      	lsls	r3, r3, #24
 8002a1e:	491b      	ldr	r1, [pc, #108]	; (8002a8c <HAL_RCC_OscConfig+0x470>)
 8002a20:	4313      	orrs	r3, r2
 8002a22:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a24:	4b1b      	ldr	r3, [pc, #108]	; (8002a94 <HAL_RCC_OscConfig+0x478>)
 8002a26:	2201      	movs	r2, #1
 8002a28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a2a:	f7ff f82d 	bl	8001a88 <HAL_GetTick>
 8002a2e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a30:	e008      	b.n	8002a44 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a32:	f7ff f829 	bl	8001a88 <HAL_GetTick>
 8002a36:	4602      	mov	r2, r0
 8002a38:	693b      	ldr	r3, [r7, #16]
 8002a3a:	1ad3      	subs	r3, r2, r3
 8002a3c:	2b02      	cmp	r3, #2
 8002a3e:	d901      	bls.n	8002a44 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002a40:	2303      	movs	r3, #3
 8002a42:	e05c      	b.n	8002afe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a44:	4b11      	ldr	r3, [pc, #68]	; (8002a8c <HAL_RCC_OscConfig+0x470>)
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d0f0      	beq.n	8002a32 <HAL_RCC_OscConfig+0x416>
 8002a50:	e054      	b.n	8002afc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a52:	4b10      	ldr	r3, [pc, #64]	; (8002a94 <HAL_RCC_OscConfig+0x478>)
 8002a54:	2200      	movs	r2, #0
 8002a56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a58:	f7ff f816 	bl	8001a88 <HAL_GetTick>
 8002a5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a5e:	e008      	b.n	8002a72 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a60:	f7ff f812 	bl	8001a88 <HAL_GetTick>
 8002a64:	4602      	mov	r2, r0
 8002a66:	693b      	ldr	r3, [r7, #16]
 8002a68:	1ad3      	subs	r3, r2, r3
 8002a6a:	2b02      	cmp	r3, #2
 8002a6c:	d901      	bls.n	8002a72 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002a6e:	2303      	movs	r3, #3
 8002a70:	e045      	b.n	8002afe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a72:	4b06      	ldr	r3, [pc, #24]	; (8002a8c <HAL_RCC_OscConfig+0x470>)
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d1f0      	bne.n	8002a60 <HAL_RCC_OscConfig+0x444>
 8002a7e:	e03d      	b.n	8002afc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	699b      	ldr	r3, [r3, #24]
 8002a84:	2b01      	cmp	r3, #1
 8002a86:	d107      	bne.n	8002a98 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002a88:	2301      	movs	r3, #1
 8002a8a:	e038      	b.n	8002afe <HAL_RCC_OscConfig+0x4e2>
 8002a8c:	40023800 	.word	0x40023800
 8002a90:	40007000 	.word	0x40007000
 8002a94:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002a98:	4b1b      	ldr	r3, [pc, #108]	; (8002b08 <HAL_RCC_OscConfig+0x4ec>)
 8002a9a:	685b      	ldr	r3, [r3, #4]
 8002a9c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	699b      	ldr	r3, [r3, #24]
 8002aa2:	2b01      	cmp	r3, #1
 8002aa4:	d028      	beq.n	8002af8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ab0:	429a      	cmp	r2, r3
 8002ab2:	d121      	bne.n	8002af8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002abe:	429a      	cmp	r2, r3
 8002ac0:	d11a      	bne.n	8002af8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002ac2:	68fa      	ldr	r2, [r7, #12]
 8002ac4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002ac8:	4013      	ands	r3, r2
 8002aca:	687a      	ldr	r2, [r7, #4]
 8002acc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002ace:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002ad0:	4293      	cmp	r3, r2
 8002ad2:	d111      	bne.n	8002af8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ade:	085b      	lsrs	r3, r3, #1
 8002ae0:	3b01      	subs	r3, #1
 8002ae2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002ae4:	429a      	cmp	r2, r3
 8002ae6:	d107      	bne.n	8002af8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002af2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002af4:	429a      	cmp	r2, r3
 8002af6:	d001      	beq.n	8002afc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002af8:	2301      	movs	r3, #1
 8002afa:	e000      	b.n	8002afe <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002afc:	2300      	movs	r3, #0
}
 8002afe:	4618      	mov	r0, r3
 8002b00:	3718      	adds	r7, #24
 8002b02:	46bd      	mov	sp, r7
 8002b04:	bd80      	pop	{r7, pc}
 8002b06:	bf00      	nop
 8002b08:	40023800 	.word	0x40023800

08002b0c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b084      	sub	sp, #16
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
 8002b14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d101      	bne.n	8002b20 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b1c:	2301      	movs	r3, #1
 8002b1e:	e0cc      	b.n	8002cba <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002b20:	4b68      	ldr	r3, [pc, #416]	; (8002cc4 <HAL_RCC_ClockConfig+0x1b8>)
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f003 0307 	and.w	r3, r3, #7
 8002b28:	683a      	ldr	r2, [r7, #0]
 8002b2a:	429a      	cmp	r2, r3
 8002b2c:	d90c      	bls.n	8002b48 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b2e:	4b65      	ldr	r3, [pc, #404]	; (8002cc4 <HAL_RCC_ClockConfig+0x1b8>)
 8002b30:	683a      	ldr	r2, [r7, #0]
 8002b32:	b2d2      	uxtb	r2, r2
 8002b34:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b36:	4b63      	ldr	r3, [pc, #396]	; (8002cc4 <HAL_RCC_ClockConfig+0x1b8>)
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f003 0307 	and.w	r3, r3, #7
 8002b3e:	683a      	ldr	r2, [r7, #0]
 8002b40:	429a      	cmp	r2, r3
 8002b42:	d001      	beq.n	8002b48 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002b44:	2301      	movs	r3, #1
 8002b46:	e0b8      	b.n	8002cba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f003 0302 	and.w	r3, r3, #2
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d020      	beq.n	8002b96 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f003 0304 	and.w	r3, r3, #4
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d005      	beq.n	8002b6c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002b60:	4b59      	ldr	r3, [pc, #356]	; (8002cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8002b62:	689b      	ldr	r3, [r3, #8]
 8002b64:	4a58      	ldr	r2, [pc, #352]	; (8002cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8002b66:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002b6a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f003 0308 	and.w	r3, r3, #8
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d005      	beq.n	8002b84 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002b78:	4b53      	ldr	r3, [pc, #332]	; (8002cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8002b7a:	689b      	ldr	r3, [r3, #8]
 8002b7c:	4a52      	ldr	r2, [pc, #328]	; (8002cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8002b7e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002b82:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b84:	4b50      	ldr	r3, [pc, #320]	; (8002cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8002b86:	689b      	ldr	r3, [r3, #8]
 8002b88:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	689b      	ldr	r3, [r3, #8]
 8002b90:	494d      	ldr	r1, [pc, #308]	; (8002cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8002b92:	4313      	orrs	r3, r2
 8002b94:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f003 0301 	and.w	r3, r3, #1
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d044      	beq.n	8002c2c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	685b      	ldr	r3, [r3, #4]
 8002ba6:	2b01      	cmp	r3, #1
 8002ba8:	d107      	bne.n	8002bba <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002baa:	4b47      	ldr	r3, [pc, #284]	; (8002cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d119      	bne.n	8002bea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bb6:	2301      	movs	r3, #1
 8002bb8:	e07f      	b.n	8002cba <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	685b      	ldr	r3, [r3, #4]
 8002bbe:	2b02      	cmp	r3, #2
 8002bc0:	d003      	beq.n	8002bca <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002bc6:	2b03      	cmp	r3, #3
 8002bc8:	d107      	bne.n	8002bda <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002bca:	4b3f      	ldr	r3, [pc, #252]	; (8002cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d109      	bne.n	8002bea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	e06f      	b.n	8002cba <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bda:	4b3b      	ldr	r3, [pc, #236]	; (8002cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f003 0302 	and.w	r3, r3, #2
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d101      	bne.n	8002bea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002be6:	2301      	movs	r3, #1
 8002be8:	e067      	b.n	8002cba <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002bea:	4b37      	ldr	r3, [pc, #220]	; (8002cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8002bec:	689b      	ldr	r3, [r3, #8]
 8002bee:	f023 0203 	bic.w	r2, r3, #3
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	685b      	ldr	r3, [r3, #4]
 8002bf6:	4934      	ldr	r1, [pc, #208]	; (8002cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8002bf8:	4313      	orrs	r3, r2
 8002bfa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002bfc:	f7fe ff44 	bl	8001a88 <HAL_GetTick>
 8002c00:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c02:	e00a      	b.n	8002c1a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c04:	f7fe ff40 	bl	8001a88 <HAL_GetTick>
 8002c08:	4602      	mov	r2, r0
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	1ad3      	subs	r3, r2, r3
 8002c0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c12:	4293      	cmp	r3, r2
 8002c14:	d901      	bls.n	8002c1a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002c16:	2303      	movs	r3, #3
 8002c18:	e04f      	b.n	8002cba <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c1a:	4b2b      	ldr	r3, [pc, #172]	; (8002cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8002c1c:	689b      	ldr	r3, [r3, #8]
 8002c1e:	f003 020c 	and.w	r2, r3, #12
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	685b      	ldr	r3, [r3, #4]
 8002c26:	009b      	lsls	r3, r3, #2
 8002c28:	429a      	cmp	r2, r3
 8002c2a:	d1eb      	bne.n	8002c04 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002c2c:	4b25      	ldr	r3, [pc, #148]	; (8002cc4 <HAL_RCC_ClockConfig+0x1b8>)
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f003 0307 	and.w	r3, r3, #7
 8002c34:	683a      	ldr	r2, [r7, #0]
 8002c36:	429a      	cmp	r2, r3
 8002c38:	d20c      	bcs.n	8002c54 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c3a:	4b22      	ldr	r3, [pc, #136]	; (8002cc4 <HAL_RCC_ClockConfig+0x1b8>)
 8002c3c:	683a      	ldr	r2, [r7, #0]
 8002c3e:	b2d2      	uxtb	r2, r2
 8002c40:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c42:	4b20      	ldr	r3, [pc, #128]	; (8002cc4 <HAL_RCC_ClockConfig+0x1b8>)
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f003 0307 	and.w	r3, r3, #7
 8002c4a:	683a      	ldr	r2, [r7, #0]
 8002c4c:	429a      	cmp	r2, r3
 8002c4e:	d001      	beq.n	8002c54 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002c50:	2301      	movs	r3, #1
 8002c52:	e032      	b.n	8002cba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f003 0304 	and.w	r3, r3, #4
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d008      	beq.n	8002c72 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c60:	4b19      	ldr	r3, [pc, #100]	; (8002cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8002c62:	689b      	ldr	r3, [r3, #8]
 8002c64:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	68db      	ldr	r3, [r3, #12]
 8002c6c:	4916      	ldr	r1, [pc, #88]	; (8002cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8002c6e:	4313      	orrs	r3, r2
 8002c70:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f003 0308 	and.w	r3, r3, #8
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d009      	beq.n	8002c92 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002c7e:	4b12      	ldr	r3, [pc, #72]	; (8002cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8002c80:	689b      	ldr	r3, [r3, #8]
 8002c82:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	691b      	ldr	r3, [r3, #16]
 8002c8a:	00db      	lsls	r3, r3, #3
 8002c8c:	490e      	ldr	r1, [pc, #56]	; (8002cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8002c8e:	4313      	orrs	r3, r2
 8002c90:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002c92:	f000 f821 	bl	8002cd8 <HAL_RCC_GetSysClockFreq>
 8002c96:	4602      	mov	r2, r0
 8002c98:	4b0b      	ldr	r3, [pc, #44]	; (8002cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8002c9a:	689b      	ldr	r3, [r3, #8]
 8002c9c:	091b      	lsrs	r3, r3, #4
 8002c9e:	f003 030f 	and.w	r3, r3, #15
 8002ca2:	490a      	ldr	r1, [pc, #40]	; (8002ccc <HAL_RCC_ClockConfig+0x1c0>)
 8002ca4:	5ccb      	ldrb	r3, [r1, r3]
 8002ca6:	fa22 f303 	lsr.w	r3, r2, r3
 8002caa:	4a09      	ldr	r2, [pc, #36]	; (8002cd0 <HAL_RCC_ClockConfig+0x1c4>)
 8002cac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002cae:	4b09      	ldr	r3, [pc, #36]	; (8002cd4 <HAL_RCC_ClockConfig+0x1c8>)
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	f7fe fea4 	bl	8001a00 <HAL_InitTick>

  return HAL_OK;
 8002cb8:	2300      	movs	r3, #0
}
 8002cba:	4618      	mov	r0, r3
 8002cbc:	3710      	adds	r7, #16
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	bd80      	pop	{r7, pc}
 8002cc2:	bf00      	nop
 8002cc4:	40023c00 	.word	0x40023c00
 8002cc8:	40023800 	.word	0x40023800
 8002ccc:	080062e0 	.word	0x080062e0
 8002cd0:	20000000 	.word	0x20000000
 8002cd4:	20000004 	.word	0x20000004

08002cd8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002cd8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002cdc:	b094      	sub	sp, #80	; 0x50
 8002cde:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	647b      	str	r3, [r7, #68]	; 0x44
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002ce8:	2300      	movs	r3, #0
 8002cea:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002cec:	2300      	movs	r3, #0
 8002cee:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002cf0:	4b79      	ldr	r3, [pc, #484]	; (8002ed8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002cf2:	689b      	ldr	r3, [r3, #8]
 8002cf4:	f003 030c 	and.w	r3, r3, #12
 8002cf8:	2b08      	cmp	r3, #8
 8002cfa:	d00d      	beq.n	8002d18 <HAL_RCC_GetSysClockFreq+0x40>
 8002cfc:	2b08      	cmp	r3, #8
 8002cfe:	f200 80e1 	bhi.w	8002ec4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d002      	beq.n	8002d0c <HAL_RCC_GetSysClockFreq+0x34>
 8002d06:	2b04      	cmp	r3, #4
 8002d08:	d003      	beq.n	8002d12 <HAL_RCC_GetSysClockFreq+0x3a>
 8002d0a:	e0db      	b.n	8002ec4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002d0c:	4b73      	ldr	r3, [pc, #460]	; (8002edc <HAL_RCC_GetSysClockFreq+0x204>)
 8002d0e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002d10:	e0db      	b.n	8002eca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002d12:	4b73      	ldr	r3, [pc, #460]	; (8002ee0 <HAL_RCC_GetSysClockFreq+0x208>)
 8002d14:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002d16:	e0d8      	b.n	8002eca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002d18:	4b6f      	ldr	r3, [pc, #444]	; (8002ed8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002d1a:	685b      	ldr	r3, [r3, #4]
 8002d1c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002d20:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002d22:	4b6d      	ldr	r3, [pc, #436]	; (8002ed8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002d24:	685b      	ldr	r3, [r3, #4]
 8002d26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d063      	beq.n	8002df6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d2e:	4b6a      	ldr	r3, [pc, #424]	; (8002ed8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002d30:	685b      	ldr	r3, [r3, #4]
 8002d32:	099b      	lsrs	r3, r3, #6
 8002d34:	2200      	movs	r2, #0
 8002d36:	63bb      	str	r3, [r7, #56]	; 0x38
 8002d38:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002d3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d3c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d40:	633b      	str	r3, [r7, #48]	; 0x30
 8002d42:	2300      	movs	r3, #0
 8002d44:	637b      	str	r3, [r7, #52]	; 0x34
 8002d46:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002d4a:	4622      	mov	r2, r4
 8002d4c:	462b      	mov	r3, r5
 8002d4e:	f04f 0000 	mov.w	r0, #0
 8002d52:	f04f 0100 	mov.w	r1, #0
 8002d56:	0159      	lsls	r1, r3, #5
 8002d58:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002d5c:	0150      	lsls	r0, r2, #5
 8002d5e:	4602      	mov	r2, r0
 8002d60:	460b      	mov	r3, r1
 8002d62:	4621      	mov	r1, r4
 8002d64:	1a51      	subs	r1, r2, r1
 8002d66:	6139      	str	r1, [r7, #16]
 8002d68:	4629      	mov	r1, r5
 8002d6a:	eb63 0301 	sbc.w	r3, r3, r1
 8002d6e:	617b      	str	r3, [r7, #20]
 8002d70:	f04f 0200 	mov.w	r2, #0
 8002d74:	f04f 0300 	mov.w	r3, #0
 8002d78:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002d7c:	4659      	mov	r1, fp
 8002d7e:	018b      	lsls	r3, r1, #6
 8002d80:	4651      	mov	r1, sl
 8002d82:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002d86:	4651      	mov	r1, sl
 8002d88:	018a      	lsls	r2, r1, #6
 8002d8a:	4651      	mov	r1, sl
 8002d8c:	ebb2 0801 	subs.w	r8, r2, r1
 8002d90:	4659      	mov	r1, fp
 8002d92:	eb63 0901 	sbc.w	r9, r3, r1
 8002d96:	f04f 0200 	mov.w	r2, #0
 8002d9a:	f04f 0300 	mov.w	r3, #0
 8002d9e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002da2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002da6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002daa:	4690      	mov	r8, r2
 8002dac:	4699      	mov	r9, r3
 8002dae:	4623      	mov	r3, r4
 8002db0:	eb18 0303 	adds.w	r3, r8, r3
 8002db4:	60bb      	str	r3, [r7, #8]
 8002db6:	462b      	mov	r3, r5
 8002db8:	eb49 0303 	adc.w	r3, r9, r3
 8002dbc:	60fb      	str	r3, [r7, #12]
 8002dbe:	f04f 0200 	mov.w	r2, #0
 8002dc2:	f04f 0300 	mov.w	r3, #0
 8002dc6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002dca:	4629      	mov	r1, r5
 8002dcc:	024b      	lsls	r3, r1, #9
 8002dce:	4621      	mov	r1, r4
 8002dd0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002dd4:	4621      	mov	r1, r4
 8002dd6:	024a      	lsls	r2, r1, #9
 8002dd8:	4610      	mov	r0, r2
 8002dda:	4619      	mov	r1, r3
 8002ddc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002dde:	2200      	movs	r2, #0
 8002de0:	62bb      	str	r3, [r7, #40]	; 0x28
 8002de2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002de4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002de8:	f7fd ff38 	bl	8000c5c <__aeabi_uldivmod>
 8002dec:	4602      	mov	r2, r0
 8002dee:	460b      	mov	r3, r1
 8002df0:	4613      	mov	r3, r2
 8002df2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002df4:	e058      	b.n	8002ea8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002df6:	4b38      	ldr	r3, [pc, #224]	; (8002ed8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002df8:	685b      	ldr	r3, [r3, #4]
 8002dfa:	099b      	lsrs	r3, r3, #6
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	4618      	mov	r0, r3
 8002e00:	4611      	mov	r1, r2
 8002e02:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002e06:	623b      	str	r3, [r7, #32]
 8002e08:	2300      	movs	r3, #0
 8002e0a:	627b      	str	r3, [r7, #36]	; 0x24
 8002e0c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002e10:	4642      	mov	r2, r8
 8002e12:	464b      	mov	r3, r9
 8002e14:	f04f 0000 	mov.w	r0, #0
 8002e18:	f04f 0100 	mov.w	r1, #0
 8002e1c:	0159      	lsls	r1, r3, #5
 8002e1e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002e22:	0150      	lsls	r0, r2, #5
 8002e24:	4602      	mov	r2, r0
 8002e26:	460b      	mov	r3, r1
 8002e28:	4641      	mov	r1, r8
 8002e2a:	ebb2 0a01 	subs.w	sl, r2, r1
 8002e2e:	4649      	mov	r1, r9
 8002e30:	eb63 0b01 	sbc.w	fp, r3, r1
 8002e34:	f04f 0200 	mov.w	r2, #0
 8002e38:	f04f 0300 	mov.w	r3, #0
 8002e3c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002e40:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002e44:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002e48:	ebb2 040a 	subs.w	r4, r2, sl
 8002e4c:	eb63 050b 	sbc.w	r5, r3, fp
 8002e50:	f04f 0200 	mov.w	r2, #0
 8002e54:	f04f 0300 	mov.w	r3, #0
 8002e58:	00eb      	lsls	r3, r5, #3
 8002e5a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002e5e:	00e2      	lsls	r2, r4, #3
 8002e60:	4614      	mov	r4, r2
 8002e62:	461d      	mov	r5, r3
 8002e64:	4643      	mov	r3, r8
 8002e66:	18e3      	adds	r3, r4, r3
 8002e68:	603b      	str	r3, [r7, #0]
 8002e6a:	464b      	mov	r3, r9
 8002e6c:	eb45 0303 	adc.w	r3, r5, r3
 8002e70:	607b      	str	r3, [r7, #4]
 8002e72:	f04f 0200 	mov.w	r2, #0
 8002e76:	f04f 0300 	mov.w	r3, #0
 8002e7a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002e7e:	4629      	mov	r1, r5
 8002e80:	028b      	lsls	r3, r1, #10
 8002e82:	4621      	mov	r1, r4
 8002e84:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002e88:	4621      	mov	r1, r4
 8002e8a:	028a      	lsls	r2, r1, #10
 8002e8c:	4610      	mov	r0, r2
 8002e8e:	4619      	mov	r1, r3
 8002e90:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e92:	2200      	movs	r2, #0
 8002e94:	61bb      	str	r3, [r7, #24]
 8002e96:	61fa      	str	r2, [r7, #28]
 8002e98:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002e9c:	f7fd fede 	bl	8000c5c <__aeabi_uldivmod>
 8002ea0:	4602      	mov	r2, r0
 8002ea2:	460b      	mov	r3, r1
 8002ea4:	4613      	mov	r3, r2
 8002ea6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002ea8:	4b0b      	ldr	r3, [pc, #44]	; (8002ed8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002eaa:	685b      	ldr	r3, [r3, #4]
 8002eac:	0c1b      	lsrs	r3, r3, #16
 8002eae:	f003 0303 	and.w	r3, r3, #3
 8002eb2:	3301      	adds	r3, #1
 8002eb4:	005b      	lsls	r3, r3, #1
 8002eb6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002eb8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002eba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ebc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ec0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002ec2:	e002      	b.n	8002eca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002ec4:	4b05      	ldr	r3, [pc, #20]	; (8002edc <HAL_RCC_GetSysClockFreq+0x204>)
 8002ec6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002ec8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002eca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002ecc:	4618      	mov	r0, r3
 8002ece:	3750      	adds	r7, #80	; 0x50
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002ed6:	bf00      	nop
 8002ed8:	40023800 	.word	0x40023800
 8002edc:	00f42400 	.word	0x00f42400
 8002ee0:	007a1200 	.word	0x007a1200

08002ee4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ee4:	b480      	push	{r7}
 8002ee6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ee8:	4b03      	ldr	r3, [pc, #12]	; (8002ef8 <HAL_RCC_GetHCLKFreq+0x14>)
 8002eea:	681b      	ldr	r3, [r3, #0]
}
 8002eec:	4618      	mov	r0, r3
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef4:	4770      	bx	lr
 8002ef6:	bf00      	nop
 8002ef8:	20000000 	.word	0x20000000

08002efc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002f00:	f7ff fff0 	bl	8002ee4 <HAL_RCC_GetHCLKFreq>
 8002f04:	4602      	mov	r2, r0
 8002f06:	4b05      	ldr	r3, [pc, #20]	; (8002f1c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002f08:	689b      	ldr	r3, [r3, #8]
 8002f0a:	0a9b      	lsrs	r3, r3, #10
 8002f0c:	f003 0307 	and.w	r3, r3, #7
 8002f10:	4903      	ldr	r1, [pc, #12]	; (8002f20 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002f12:	5ccb      	ldrb	r3, [r1, r3]
 8002f14:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f18:	4618      	mov	r0, r3
 8002f1a:	bd80      	pop	{r7, pc}
 8002f1c:	40023800 	.word	0x40023800
 8002f20:	080062f0 	.word	0x080062f0

08002f24 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002f28:	f7ff ffdc 	bl	8002ee4 <HAL_RCC_GetHCLKFreq>
 8002f2c:	4602      	mov	r2, r0
 8002f2e:	4b05      	ldr	r3, [pc, #20]	; (8002f44 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002f30:	689b      	ldr	r3, [r3, #8]
 8002f32:	0b5b      	lsrs	r3, r3, #13
 8002f34:	f003 0307 	and.w	r3, r3, #7
 8002f38:	4903      	ldr	r1, [pc, #12]	; (8002f48 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002f3a:	5ccb      	ldrb	r3, [r1, r3]
 8002f3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f40:	4618      	mov	r0, r3
 8002f42:	bd80      	pop	{r7, pc}
 8002f44:	40023800 	.word	0x40023800
 8002f48:	080062f0 	.word	0x080062f0

08002f4c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b082      	sub	sp, #8
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d101      	bne.n	8002f5e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002f5a:	2301      	movs	r3, #1
 8002f5c:	e041      	b.n	8002fe2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f64:	b2db      	uxtb	r3, r3
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d106      	bne.n	8002f78 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002f72:	6878      	ldr	r0, [r7, #4]
 8002f74:	f7fe fb28 	bl	80015c8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2202      	movs	r2, #2
 8002f7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681a      	ldr	r2, [r3, #0]
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	3304      	adds	r3, #4
 8002f88:	4619      	mov	r1, r3
 8002f8a:	4610      	mov	r0, r2
 8002f8c:	f000 fd44 	bl	8003a18 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2201      	movs	r2, #1
 8002f94:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2201      	movs	r2, #1
 8002f9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2201      	movs	r2, #1
 8002fa4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2201      	movs	r2, #1
 8002fac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2201      	movs	r2, #1
 8002fb4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	2201      	movs	r2, #1
 8002fbc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2201      	movs	r2, #1
 8002fc4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	2201      	movs	r2, #1
 8002fcc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2201      	movs	r2, #1
 8002fd4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2201      	movs	r2, #1
 8002fdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002fe0:	2300      	movs	r3, #0
}
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	3708      	adds	r7, #8
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	bd80      	pop	{r7, pc}

08002fea <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002fea:	b580      	push	{r7, lr}
 8002fec:	b082      	sub	sp, #8
 8002fee:	af00      	add	r7, sp, #0
 8002ff0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d101      	bne.n	8002ffc <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002ff8:	2301      	movs	r3, #1
 8002ffa:	e041      	b.n	8003080 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003002:	b2db      	uxtb	r3, r3
 8003004:	2b00      	cmp	r3, #0
 8003006:	d106      	bne.n	8003016 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2200      	movs	r2, #0
 800300c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003010:	6878      	ldr	r0, [r7, #4]
 8003012:	f000 f839 	bl	8003088 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	2202      	movs	r2, #2
 800301a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681a      	ldr	r2, [r3, #0]
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	3304      	adds	r3, #4
 8003026:	4619      	mov	r1, r3
 8003028:	4610      	mov	r0, r2
 800302a:	f000 fcf5 	bl	8003a18 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	2201      	movs	r2, #1
 8003032:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	2201      	movs	r2, #1
 800303a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	2201      	movs	r2, #1
 8003042:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	2201      	movs	r2, #1
 800304a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	2201      	movs	r2, #1
 8003052:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	2201      	movs	r2, #1
 800305a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	2201      	movs	r2, #1
 8003062:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	2201      	movs	r2, #1
 800306a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	2201      	movs	r2, #1
 8003072:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	2201      	movs	r2, #1
 800307a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800307e:	2300      	movs	r3, #0
}
 8003080:	4618      	mov	r0, r3
 8003082:	3708      	adds	r7, #8
 8003084:	46bd      	mov	sp, r7
 8003086:	bd80      	pop	{r7, pc}

08003088 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003088:	b480      	push	{r7}
 800308a:	b083      	sub	sp, #12
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003090:	bf00      	nop
 8003092:	370c      	adds	r7, #12
 8003094:	46bd      	mov	sp, r7
 8003096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309a:	4770      	bx	lr

0800309c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	b084      	sub	sp, #16
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
 80030a4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80030a6:	683b      	ldr	r3, [r7, #0]
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d109      	bne.n	80030c0 <HAL_TIM_PWM_Start+0x24>
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80030b2:	b2db      	uxtb	r3, r3
 80030b4:	2b01      	cmp	r3, #1
 80030b6:	bf14      	ite	ne
 80030b8:	2301      	movne	r3, #1
 80030ba:	2300      	moveq	r3, #0
 80030bc:	b2db      	uxtb	r3, r3
 80030be:	e022      	b.n	8003106 <HAL_TIM_PWM_Start+0x6a>
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	2b04      	cmp	r3, #4
 80030c4:	d109      	bne.n	80030da <HAL_TIM_PWM_Start+0x3e>
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80030cc:	b2db      	uxtb	r3, r3
 80030ce:	2b01      	cmp	r3, #1
 80030d0:	bf14      	ite	ne
 80030d2:	2301      	movne	r3, #1
 80030d4:	2300      	moveq	r3, #0
 80030d6:	b2db      	uxtb	r3, r3
 80030d8:	e015      	b.n	8003106 <HAL_TIM_PWM_Start+0x6a>
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	2b08      	cmp	r3, #8
 80030de:	d109      	bne.n	80030f4 <HAL_TIM_PWM_Start+0x58>
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80030e6:	b2db      	uxtb	r3, r3
 80030e8:	2b01      	cmp	r3, #1
 80030ea:	bf14      	ite	ne
 80030ec:	2301      	movne	r3, #1
 80030ee:	2300      	moveq	r3, #0
 80030f0:	b2db      	uxtb	r3, r3
 80030f2:	e008      	b.n	8003106 <HAL_TIM_PWM_Start+0x6a>
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80030fa:	b2db      	uxtb	r3, r3
 80030fc:	2b01      	cmp	r3, #1
 80030fe:	bf14      	ite	ne
 8003100:	2301      	movne	r3, #1
 8003102:	2300      	moveq	r3, #0
 8003104:	b2db      	uxtb	r3, r3
 8003106:	2b00      	cmp	r3, #0
 8003108:	d001      	beq.n	800310e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800310a:	2301      	movs	r3, #1
 800310c:	e068      	b.n	80031e0 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800310e:	683b      	ldr	r3, [r7, #0]
 8003110:	2b00      	cmp	r3, #0
 8003112:	d104      	bne.n	800311e <HAL_TIM_PWM_Start+0x82>
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2202      	movs	r2, #2
 8003118:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800311c:	e013      	b.n	8003146 <HAL_TIM_PWM_Start+0xaa>
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	2b04      	cmp	r3, #4
 8003122:	d104      	bne.n	800312e <HAL_TIM_PWM_Start+0x92>
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2202      	movs	r2, #2
 8003128:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800312c:	e00b      	b.n	8003146 <HAL_TIM_PWM_Start+0xaa>
 800312e:	683b      	ldr	r3, [r7, #0]
 8003130:	2b08      	cmp	r3, #8
 8003132:	d104      	bne.n	800313e <HAL_TIM_PWM_Start+0xa2>
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2202      	movs	r2, #2
 8003138:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800313c:	e003      	b.n	8003146 <HAL_TIM_PWM_Start+0xaa>
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	2202      	movs	r2, #2
 8003142:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	2201      	movs	r2, #1
 800314c:	6839      	ldr	r1, [r7, #0]
 800314e:	4618      	mov	r0, r3
 8003150:	f000 ff08 	bl	8003f64 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	4a23      	ldr	r2, [pc, #140]	; (80031e8 <HAL_TIM_PWM_Start+0x14c>)
 800315a:	4293      	cmp	r3, r2
 800315c:	d107      	bne.n	800316e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800316c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	4a1d      	ldr	r2, [pc, #116]	; (80031e8 <HAL_TIM_PWM_Start+0x14c>)
 8003174:	4293      	cmp	r3, r2
 8003176:	d018      	beq.n	80031aa <HAL_TIM_PWM_Start+0x10e>
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003180:	d013      	beq.n	80031aa <HAL_TIM_PWM_Start+0x10e>
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	4a19      	ldr	r2, [pc, #100]	; (80031ec <HAL_TIM_PWM_Start+0x150>)
 8003188:	4293      	cmp	r3, r2
 800318a:	d00e      	beq.n	80031aa <HAL_TIM_PWM_Start+0x10e>
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	4a17      	ldr	r2, [pc, #92]	; (80031f0 <HAL_TIM_PWM_Start+0x154>)
 8003192:	4293      	cmp	r3, r2
 8003194:	d009      	beq.n	80031aa <HAL_TIM_PWM_Start+0x10e>
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	4a16      	ldr	r2, [pc, #88]	; (80031f4 <HAL_TIM_PWM_Start+0x158>)
 800319c:	4293      	cmp	r3, r2
 800319e:	d004      	beq.n	80031aa <HAL_TIM_PWM_Start+0x10e>
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	4a14      	ldr	r2, [pc, #80]	; (80031f8 <HAL_TIM_PWM_Start+0x15c>)
 80031a6:	4293      	cmp	r3, r2
 80031a8:	d111      	bne.n	80031ce <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	689b      	ldr	r3, [r3, #8]
 80031b0:	f003 0307 	and.w	r3, r3, #7
 80031b4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	2b06      	cmp	r3, #6
 80031ba:	d010      	beq.n	80031de <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	681a      	ldr	r2, [r3, #0]
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f042 0201 	orr.w	r2, r2, #1
 80031ca:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80031cc:	e007      	b.n	80031de <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	681a      	ldr	r2, [r3, #0]
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f042 0201 	orr.w	r2, r2, #1
 80031dc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80031de:	2300      	movs	r3, #0
}
 80031e0:	4618      	mov	r0, r3
 80031e2:	3710      	adds	r7, #16
 80031e4:	46bd      	mov	sp, r7
 80031e6:	bd80      	pop	{r7, pc}
 80031e8:	40010000 	.word	0x40010000
 80031ec:	40000400 	.word	0x40000400
 80031f0:	40000800 	.word	0x40000800
 80031f4:	40000c00 	.word	0x40000c00
 80031f8:	40014000 	.word	0x40014000

080031fc <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	b086      	sub	sp, #24
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
 8003204:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	2b00      	cmp	r3, #0
 800320a:	d101      	bne.n	8003210 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800320c:	2301      	movs	r3, #1
 800320e:	e097      	b.n	8003340 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003216:	b2db      	uxtb	r3, r3
 8003218:	2b00      	cmp	r3, #0
 800321a:	d106      	bne.n	800322a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2200      	movs	r2, #0
 8003220:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8003224:	6878      	ldr	r0, [r7, #4]
 8003226:	f7fe fa23 	bl	8001670 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	2202      	movs	r2, #2
 800322e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	689b      	ldr	r3, [r3, #8]
 8003238:	687a      	ldr	r2, [r7, #4]
 800323a:	6812      	ldr	r2, [r2, #0]
 800323c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003240:	f023 0307 	bic.w	r3, r3, #7
 8003244:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681a      	ldr	r2, [r3, #0]
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	3304      	adds	r3, #4
 800324e:	4619      	mov	r1, r3
 8003250:	4610      	mov	r0, r2
 8003252:	f000 fbe1 	bl	8003a18 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	689b      	ldr	r3, [r3, #8]
 800325c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	699b      	ldr	r3, [r3, #24]
 8003264:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	6a1b      	ldr	r3, [r3, #32]
 800326c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800326e:	683b      	ldr	r3, [r7, #0]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	697a      	ldr	r2, [r7, #20]
 8003274:	4313      	orrs	r3, r2
 8003276:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003278:	693b      	ldr	r3, [r7, #16]
 800327a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800327e:	f023 0303 	bic.w	r3, r3, #3
 8003282:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	689a      	ldr	r2, [r3, #8]
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	699b      	ldr	r3, [r3, #24]
 800328c:	021b      	lsls	r3, r3, #8
 800328e:	4313      	orrs	r3, r2
 8003290:	693a      	ldr	r2, [r7, #16]
 8003292:	4313      	orrs	r3, r2
 8003294:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8003296:	693b      	ldr	r3, [r7, #16]
 8003298:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800329c:	f023 030c 	bic.w	r3, r3, #12
 80032a0:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80032a2:	693b      	ldr	r3, [r7, #16]
 80032a4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80032a8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80032ac:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80032ae:	683b      	ldr	r3, [r7, #0]
 80032b0:	68da      	ldr	r2, [r3, #12]
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	69db      	ldr	r3, [r3, #28]
 80032b6:	021b      	lsls	r3, r3, #8
 80032b8:	4313      	orrs	r3, r2
 80032ba:	693a      	ldr	r2, [r7, #16]
 80032bc:	4313      	orrs	r3, r2
 80032be:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	691b      	ldr	r3, [r3, #16]
 80032c4:	011a      	lsls	r2, r3, #4
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	6a1b      	ldr	r3, [r3, #32]
 80032ca:	031b      	lsls	r3, r3, #12
 80032cc:	4313      	orrs	r3, r2
 80032ce:	693a      	ldr	r2, [r7, #16]
 80032d0:	4313      	orrs	r3, r2
 80032d2:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80032da:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80032e2:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	685a      	ldr	r2, [r3, #4]
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	695b      	ldr	r3, [r3, #20]
 80032ec:	011b      	lsls	r3, r3, #4
 80032ee:	4313      	orrs	r3, r2
 80032f0:	68fa      	ldr	r2, [r7, #12]
 80032f2:	4313      	orrs	r3, r2
 80032f4:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	697a      	ldr	r2, [r7, #20]
 80032fc:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	693a      	ldr	r2, [r7, #16]
 8003304:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	68fa      	ldr	r2, [r7, #12]
 800330c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	2201      	movs	r2, #1
 8003312:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	2201      	movs	r2, #1
 800331a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	2201      	movs	r2, #1
 8003322:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	2201      	movs	r2, #1
 800332a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	2201      	movs	r2, #1
 8003332:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	2201      	movs	r2, #1
 800333a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800333e:	2300      	movs	r3, #0
}
 8003340:	4618      	mov	r0, r3
 8003342:	3718      	adds	r7, #24
 8003344:	46bd      	mov	sp, r7
 8003346:	bd80      	pop	{r7, pc}

08003348 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003348:	b580      	push	{r7, lr}
 800334a:	b084      	sub	sp, #16
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
 8003350:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003358:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003360:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003368:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003370:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	2b00      	cmp	r3, #0
 8003376:	d110      	bne.n	800339a <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003378:	7bfb      	ldrb	r3, [r7, #15]
 800337a:	2b01      	cmp	r3, #1
 800337c:	d102      	bne.n	8003384 <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800337e:	7b7b      	ldrb	r3, [r7, #13]
 8003380:	2b01      	cmp	r3, #1
 8003382:	d001      	beq.n	8003388 <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 8003384:	2301      	movs	r3, #1
 8003386:	e089      	b.n	800349c <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2202      	movs	r2, #2
 800338c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2202      	movs	r2, #2
 8003394:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003398:	e031      	b.n	80033fe <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800339a:	683b      	ldr	r3, [r7, #0]
 800339c:	2b04      	cmp	r3, #4
 800339e:	d110      	bne.n	80033c2 <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80033a0:	7bbb      	ldrb	r3, [r7, #14]
 80033a2:	2b01      	cmp	r3, #1
 80033a4:	d102      	bne.n	80033ac <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80033a6:	7b3b      	ldrb	r3, [r7, #12]
 80033a8:	2b01      	cmp	r3, #1
 80033aa:	d001      	beq.n	80033b0 <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 80033ac:	2301      	movs	r3, #1
 80033ae:	e075      	b.n	800349c <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2202      	movs	r2, #2
 80033b4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2202      	movs	r2, #2
 80033bc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80033c0:	e01d      	b.n	80033fe <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80033c2:	7bfb      	ldrb	r3, [r7, #15]
 80033c4:	2b01      	cmp	r3, #1
 80033c6:	d108      	bne.n	80033da <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80033c8:	7bbb      	ldrb	r3, [r7, #14]
 80033ca:	2b01      	cmp	r3, #1
 80033cc:	d105      	bne.n	80033da <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80033ce:	7b7b      	ldrb	r3, [r7, #13]
 80033d0:	2b01      	cmp	r3, #1
 80033d2:	d102      	bne.n	80033da <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80033d4:	7b3b      	ldrb	r3, [r7, #12]
 80033d6:	2b01      	cmp	r3, #1
 80033d8:	d001      	beq.n	80033de <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 80033da:	2301      	movs	r3, #1
 80033dc:	e05e      	b.n	800349c <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	2202      	movs	r2, #2
 80033e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	2202      	movs	r2, #2
 80033ea:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	2202      	movs	r2, #2
 80033f2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	2202      	movs	r2, #2
 80033fa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	2b00      	cmp	r3, #0
 8003402:	d003      	beq.n	800340c <HAL_TIM_Encoder_Start_IT+0xc4>
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	2b04      	cmp	r3, #4
 8003408:	d010      	beq.n	800342c <HAL_TIM_Encoder_Start_IT+0xe4>
 800340a:	e01f      	b.n	800344c <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	2201      	movs	r2, #1
 8003412:	2100      	movs	r1, #0
 8003414:	4618      	mov	r0, r3
 8003416:	f000 fda5 	bl	8003f64 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	68da      	ldr	r2, [r3, #12]
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f042 0202 	orr.w	r2, r2, #2
 8003428:	60da      	str	r2, [r3, #12]
      break;
 800342a:	e02e      	b.n	800348a <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	2201      	movs	r2, #1
 8003432:	2104      	movs	r1, #4
 8003434:	4618      	mov	r0, r3
 8003436:	f000 fd95 	bl	8003f64 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	68da      	ldr	r2, [r3, #12]
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f042 0204 	orr.w	r2, r2, #4
 8003448:	60da      	str	r2, [r3, #12]
      break;
 800344a:	e01e      	b.n	800348a <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	2201      	movs	r2, #1
 8003452:	2100      	movs	r1, #0
 8003454:	4618      	mov	r0, r3
 8003456:	f000 fd85 	bl	8003f64 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	2201      	movs	r2, #1
 8003460:	2104      	movs	r1, #4
 8003462:	4618      	mov	r0, r3
 8003464:	f000 fd7e 	bl	8003f64 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	68da      	ldr	r2, [r3, #12]
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f042 0202 	orr.w	r2, r2, #2
 8003476:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	68da      	ldr	r2, [r3, #12]
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f042 0204 	orr.w	r2, r2, #4
 8003486:	60da      	str	r2, [r3, #12]
      break;
 8003488:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	681a      	ldr	r2, [r3, #0]
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f042 0201 	orr.w	r2, r2, #1
 8003498:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800349a:	2300      	movs	r3, #0
}
 800349c:	4618      	mov	r0, r3
 800349e:	3710      	adds	r7, #16
 80034a0:	46bd      	mov	sp, r7
 80034a2:	bd80      	pop	{r7, pc}

080034a4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	b082      	sub	sp, #8
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	691b      	ldr	r3, [r3, #16]
 80034b2:	f003 0302 	and.w	r3, r3, #2
 80034b6:	2b02      	cmp	r3, #2
 80034b8:	d122      	bne.n	8003500 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	68db      	ldr	r3, [r3, #12]
 80034c0:	f003 0302 	and.w	r3, r3, #2
 80034c4:	2b02      	cmp	r3, #2
 80034c6:	d11b      	bne.n	8003500 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f06f 0202 	mvn.w	r2, #2
 80034d0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	2201      	movs	r2, #1
 80034d6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	699b      	ldr	r3, [r3, #24]
 80034de:	f003 0303 	and.w	r3, r3, #3
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d003      	beq.n	80034ee <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80034e6:	6878      	ldr	r0, [r7, #4]
 80034e8:	f7fd fd3a 	bl	8000f60 <HAL_TIM_IC_CaptureCallback>
 80034ec:	e005      	b.n	80034fa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80034ee:	6878      	ldr	r0, [r7, #4]
 80034f0:	f000 fa73 	bl	80039da <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034f4:	6878      	ldr	r0, [r7, #4]
 80034f6:	f000 fa7a 	bl	80039ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	2200      	movs	r2, #0
 80034fe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	691b      	ldr	r3, [r3, #16]
 8003506:	f003 0304 	and.w	r3, r3, #4
 800350a:	2b04      	cmp	r3, #4
 800350c:	d122      	bne.n	8003554 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	68db      	ldr	r3, [r3, #12]
 8003514:	f003 0304 	and.w	r3, r3, #4
 8003518:	2b04      	cmp	r3, #4
 800351a:	d11b      	bne.n	8003554 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f06f 0204 	mvn.w	r2, #4
 8003524:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	2202      	movs	r2, #2
 800352a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	699b      	ldr	r3, [r3, #24]
 8003532:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003536:	2b00      	cmp	r3, #0
 8003538:	d003      	beq.n	8003542 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800353a:	6878      	ldr	r0, [r7, #4]
 800353c:	f7fd fd10 	bl	8000f60 <HAL_TIM_IC_CaptureCallback>
 8003540:	e005      	b.n	800354e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003542:	6878      	ldr	r0, [r7, #4]
 8003544:	f000 fa49 	bl	80039da <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003548:	6878      	ldr	r0, [r7, #4]
 800354a:	f000 fa50 	bl	80039ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	2200      	movs	r2, #0
 8003552:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	691b      	ldr	r3, [r3, #16]
 800355a:	f003 0308 	and.w	r3, r3, #8
 800355e:	2b08      	cmp	r3, #8
 8003560:	d122      	bne.n	80035a8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	68db      	ldr	r3, [r3, #12]
 8003568:	f003 0308 	and.w	r3, r3, #8
 800356c:	2b08      	cmp	r3, #8
 800356e:	d11b      	bne.n	80035a8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f06f 0208 	mvn.w	r2, #8
 8003578:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	2204      	movs	r2, #4
 800357e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	69db      	ldr	r3, [r3, #28]
 8003586:	f003 0303 	and.w	r3, r3, #3
 800358a:	2b00      	cmp	r3, #0
 800358c:	d003      	beq.n	8003596 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800358e:	6878      	ldr	r0, [r7, #4]
 8003590:	f7fd fce6 	bl	8000f60 <HAL_TIM_IC_CaptureCallback>
 8003594:	e005      	b.n	80035a2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003596:	6878      	ldr	r0, [r7, #4]
 8003598:	f000 fa1f 	bl	80039da <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800359c:	6878      	ldr	r0, [r7, #4]
 800359e:	f000 fa26 	bl	80039ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	2200      	movs	r2, #0
 80035a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	691b      	ldr	r3, [r3, #16]
 80035ae:	f003 0310 	and.w	r3, r3, #16
 80035b2:	2b10      	cmp	r3, #16
 80035b4:	d122      	bne.n	80035fc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	68db      	ldr	r3, [r3, #12]
 80035bc:	f003 0310 	and.w	r3, r3, #16
 80035c0:	2b10      	cmp	r3, #16
 80035c2:	d11b      	bne.n	80035fc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f06f 0210 	mvn.w	r2, #16
 80035cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	2208      	movs	r2, #8
 80035d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	69db      	ldr	r3, [r3, #28]
 80035da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d003      	beq.n	80035ea <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80035e2:	6878      	ldr	r0, [r7, #4]
 80035e4:	f7fd fcbc 	bl	8000f60 <HAL_TIM_IC_CaptureCallback>
 80035e8:	e005      	b.n	80035f6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80035ea:	6878      	ldr	r0, [r7, #4]
 80035ec:	f000 f9f5 	bl	80039da <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035f0:	6878      	ldr	r0, [r7, #4]
 80035f2:	f000 f9fc 	bl	80039ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	2200      	movs	r2, #0
 80035fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	691b      	ldr	r3, [r3, #16]
 8003602:	f003 0301 	and.w	r3, r3, #1
 8003606:	2b01      	cmp	r3, #1
 8003608:	d10e      	bne.n	8003628 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	68db      	ldr	r3, [r3, #12]
 8003610:	f003 0301 	and.w	r3, r3, #1
 8003614:	2b01      	cmp	r3, #1
 8003616:	d107      	bne.n	8003628 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f06f 0201 	mvn.w	r2, #1
 8003620:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003622:	6878      	ldr	r0, [r7, #4]
 8003624:	f000 f9cf 	bl	80039c6 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	691b      	ldr	r3, [r3, #16]
 800362e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003632:	2b80      	cmp	r3, #128	; 0x80
 8003634:	d10e      	bne.n	8003654 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	68db      	ldr	r3, [r3, #12]
 800363c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003640:	2b80      	cmp	r3, #128	; 0x80
 8003642:	d107      	bne.n	8003654 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800364c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800364e:	6878      	ldr	r0, [r7, #4]
 8003650:	f000 fd78 	bl	8004144 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	691b      	ldr	r3, [r3, #16]
 800365a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800365e:	2b40      	cmp	r3, #64	; 0x40
 8003660:	d10e      	bne.n	8003680 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	68db      	ldr	r3, [r3, #12]
 8003668:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800366c:	2b40      	cmp	r3, #64	; 0x40
 800366e:	d107      	bne.n	8003680 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003678:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800367a:	6878      	ldr	r0, [r7, #4]
 800367c:	f000 f9c1 	bl	8003a02 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	691b      	ldr	r3, [r3, #16]
 8003686:	f003 0320 	and.w	r3, r3, #32
 800368a:	2b20      	cmp	r3, #32
 800368c:	d10e      	bne.n	80036ac <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	68db      	ldr	r3, [r3, #12]
 8003694:	f003 0320 	and.w	r3, r3, #32
 8003698:	2b20      	cmp	r3, #32
 800369a:	d107      	bne.n	80036ac <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f06f 0220 	mvn.w	r2, #32
 80036a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80036a6:	6878      	ldr	r0, [r7, #4]
 80036a8:	f000 fd42 	bl	8004130 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80036ac:	bf00      	nop
 80036ae:	3708      	adds	r7, #8
 80036b0:	46bd      	mov	sp, r7
 80036b2:	bd80      	pop	{r7, pc}

080036b4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	b086      	sub	sp, #24
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	60f8      	str	r0, [r7, #12]
 80036bc:	60b9      	str	r1, [r7, #8]
 80036be:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80036c0:	2300      	movs	r3, #0
 80036c2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80036ca:	2b01      	cmp	r3, #1
 80036cc:	d101      	bne.n	80036d2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80036ce:	2302      	movs	r3, #2
 80036d0:	e0ae      	b.n	8003830 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	2201      	movs	r2, #1
 80036d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	2b0c      	cmp	r3, #12
 80036de:	f200 809f 	bhi.w	8003820 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80036e2:	a201      	add	r2, pc, #4	; (adr r2, 80036e8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80036e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036e8:	0800371d 	.word	0x0800371d
 80036ec:	08003821 	.word	0x08003821
 80036f0:	08003821 	.word	0x08003821
 80036f4:	08003821 	.word	0x08003821
 80036f8:	0800375d 	.word	0x0800375d
 80036fc:	08003821 	.word	0x08003821
 8003700:	08003821 	.word	0x08003821
 8003704:	08003821 	.word	0x08003821
 8003708:	0800379f 	.word	0x0800379f
 800370c:	08003821 	.word	0x08003821
 8003710:	08003821 	.word	0x08003821
 8003714:	08003821 	.word	0x08003821
 8003718:	080037df 	.word	0x080037df
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	68b9      	ldr	r1, [r7, #8]
 8003722:	4618      	mov	r0, r3
 8003724:	f000 f9f8 	bl	8003b18 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	699a      	ldr	r2, [r3, #24]
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f042 0208 	orr.w	r2, r2, #8
 8003736:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	699a      	ldr	r2, [r3, #24]
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f022 0204 	bic.w	r2, r2, #4
 8003746:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	6999      	ldr	r1, [r3, #24]
 800374e:	68bb      	ldr	r3, [r7, #8]
 8003750:	691a      	ldr	r2, [r3, #16]
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	430a      	orrs	r2, r1
 8003758:	619a      	str	r2, [r3, #24]
      break;
 800375a:	e064      	b.n	8003826 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	68b9      	ldr	r1, [r7, #8]
 8003762:	4618      	mov	r0, r3
 8003764:	f000 fa3e 	bl	8003be4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	699a      	ldr	r2, [r3, #24]
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003776:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	699a      	ldr	r2, [r3, #24]
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003786:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	6999      	ldr	r1, [r3, #24]
 800378e:	68bb      	ldr	r3, [r7, #8]
 8003790:	691b      	ldr	r3, [r3, #16]
 8003792:	021a      	lsls	r2, r3, #8
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	430a      	orrs	r2, r1
 800379a:	619a      	str	r2, [r3, #24]
      break;
 800379c:	e043      	b.n	8003826 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	68b9      	ldr	r1, [r7, #8]
 80037a4:	4618      	mov	r0, r3
 80037a6:	f000 fa89 	bl	8003cbc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	69da      	ldr	r2, [r3, #28]
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f042 0208 	orr.w	r2, r2, #8
 80037b8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	69da      	ldr	r2, [r3, #28]
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f022 0204 	bic.w	r2, r2, #4
 80037c8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	69d9      	ldr	r1, [r3, #28]
 80037d0:	68bb      	ldr	r3, [r7, #8]
 80037d2:	691a      	ldr	r2, [r3, #16]
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	430a      	orrs	r2, r1
 80037da:	61da      	str	r2, [r3, #28]
      break;
 80037dc:	e023      	b.n	8003826 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	68b9      	ldr	r1, [r7, #8]
 80037e4:	4618      	mov	r0, r3
 80037e6:	f000 fad3 	bl	8003d90 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	69da      	ldr	r2, [r3, #28]
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80037f8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	69da      	ldr	r2, [r3, #28]
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003808:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	69d9      	ldr	r1, [r3, #28]
 8003810:	68bb      	ldr	r3, [r7, #8]
 8003812:	691b      	ldr	r3, [r3, #16]
 8003814:	021a      	lsls	r2, r3, #8
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	430a      	orrs	r2, r1
 800381c:	61da      	str	r2, [r3, #28]
      break;
 800381e:	e002      	b.n	8003826 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003820:	2301      	movs	r3, #1
 8003822:	75fb      	strb	r3, [r7, #23]
      break;
 8003824:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	2200      	movs	r2, #0
 800382a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800382e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003830:	4618      	mov	r0, r3
 8003832:	3718      	adds	r7, #24
 8003834:	46bd      	mov	sp, r7
 8003836:	bd80      	pop	{r7, pc}

08003838 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003838:	b580      	push	{r7, lr}
 800383a:	b084      	sub	sp, #16
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
 8003840:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003842:	2300      	movs	r3, #0
 8003844:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800384c:	2b01      	cmp	r3, #1
 800384e:	d101      	bne.n	8003854 <HAL_TIM_ConfigClockSource+0x1c>
 8003850:	2302      	movs	r3, #2
 8003852:	e0b4      	b.n	80039be <HAL_TIM_ConfigClockSource+0x186>
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2201      	movs	r2, #1
 8003858:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2202      	movs	r2, #2
 8003860:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	689b      	ldr	r3, [r3, #8]
 800386a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800386c:	68bb      	ldr	r3, [r7, #8]
 800386e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003872:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003874:	68bb      	ldr	r3, [r7, #8]
 8003876:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800387a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	68ba      	ldr	r2, [r7, #8]
 8003882:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003884:	683b      	ldr	r3, [r7, #0]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800388c:	d03e      	beq.n	800390c <HAL_TIM_ConfigClockSource+0xd4>
 800388e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003892:	f200 8087 	bhi.w	80039a4 <HAL_TIM_ConfigClockSource+0x16c>
 8003896:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800389a:	f000 8086 	beq.w	80039aa <HAL_TIM_ConfigClockSource+0x172>
 800389e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038a2:	d87f      	bhi.n	80039a4 <HAL_TIM_ConfigClockSource+0x16c>
 80038a4:	2b70      	cmp	r3, #112	; 0x70
 80038a6:	d01a      	beq.n	80038de <HAL_TIM_ConfigClockSource+0xa6>
 80038a8:	2b70      	cmp	r3, #112	; 0x70
 80038aa:	d87b      	bhi.n	80039a4 <HAL_TIM_ConfigClockSource+0x16c>
 80038ac:	2b60      	cmp	r3, #96	; 0x60
 80038ae:	d050      	beq.n	8003952 <HAL_TIM_ConfigClockSource+0x11a>
 80038b0:	2b60      	cmp	r3, #96	; 0x60
 80038b2:	d877      	bhi.n	80039a4 <HAL_TIM_ConfigClockSource+0x16c>
 80038b4:	2b50      	cmp	r3, #80	; 0x50
 80038b6:	d03c      	beq.n	8003932 <HAL_TIM_ConfigClockSource+0xfa>
 80038b8:	2b50      	cmp	r3, #80	; 0x50
 80038ba:	d873      	bhi.n	80039a4 <HAL_TIM_ConfigClockSource+0x16c>
 80038bc:	2b40      	cmp	r3, #64	; 0x40
 80038be:	d058      	beq.n	8003972 <HAL_TIM_ConfigClockSource+0x13a>
 80038c0:	2b40      	cmp	r3, #64	; 0x40
 80038c2:	d86f      	bhi.n	80039a4 <HAL_TIM_ConfigClockSource+0x16c>
 80038c4:	2b30      	cmp	r3, #48	; 0x30
 80038c6:	d064      	beq.n	8003992 <HAL_TIM_ConfigClockSource+0x15a>
 80038c8:	2b30      	cmp	r3, #48	; 0x30
 80038ca:	d86b      	bhi.n	80039a4 <HAL_TIM_ConfigClockSource+0x16c>
 80038cc:	2b20      	cmp	r3, #32
 80038ce:	d060      	beq.n	8003992 <HAL_TIM_ConfigClockSource+0x15a>
 80038d0:	2b20      	cmp	r3, #32
 80038d2:	d867      	bhi.n	80039a4 <HAL_TIM_ConfigClockSource+0x16c>
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d05c      	beq.n	8003992 <HAL_TIM_ConfigClockSource+0x15a>
 80038d8:	2b10      	cmp	r3, #16
 80038da:	d05a      	beq.n	8003992 <HAL_TIM_ConfigClockSource+0x15a>
 80038dc:	e062      	b.n	80039a4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6818      	ldr	r0, [r3, #0]
 80038e2:	683b      	ldr	r3, [r7, #0]
 80038e4:	6899      	ldr	r1, [r3, #8]
 80038e6:	683b      	ldr	r3, [r7, #0]
 80038e8:	685a      	ldr	r2, [r3, #4]
 80038ea:	683b      	ldr	r3, [r7, #0]
 80038ec:	68db      	ldr	r3, [r3, #12]
 80038ee:	f000 fb19 	bl	8003f24 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	689b      	ldr	r3, [r3, #8]
 80038f8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80038fa:	68bb      	ldr	r3, [r7, #8]
 80038fc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003900:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	68ba      	ldr	r2, [r7, #8]
 8003908:	609a      	str	r2, [r3, #8]
      break;
 800390a:	e04f      	b.n	80039ac <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	6818      	ldr	r0, [r3, #0]
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	6899      	ldr	r1, [r3, #8]
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	685a      	ldr	r2, [r3, #4]
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	68db      	ldr	r3, [r3, #12]
 800391c:	f000 fb02 	bl	8003f24 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	689a      	ldr	r2, [r3, #8]
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800392e:	609a      	str	r2, [r3, #8]
      break;
 8003930:	e03c      	b.n	80039ac <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6818      	ldr	r0, [r3, #0]
 8003936:	683b      	ldr	r3, [r7, #0]
 8003938:	6859      	ldr	r1, [r3, #4]
 800393a:	683b      	ldr	r3, [r7, #0]
 800393c:	68db      	ldr	r3, [r3, #12]
 800393e:	461a      	mov	r2, r3
 8003940:	f000 fa76 	bl	8003e30 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	2150      	movs	r1, #80	; 0x50
 800394a:	4618      	mov	r0, r3
 800394c:	f000 facf 	bl	8003eee <TIM_ITRx_SetConfig>
      break;
 8003950:	e02c      	b.n	80039ac <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6818      	ldr	r0, [r3, #0]
 8003956:	683b      	ldr	r3, [r7, #0]
 8003958:	6859      	ldr	r1, [r3, #4]
 800395a:	683b      	ldr	r3, [r7, #0]
 800395c:	68db      	ldr	r3, [r3, #12]
 800395e:	461a      	mov	r2, r3
 8003960:	f000 fa95 	bl	8003e8e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	2160      	movs	r1, #96	; 0x60
 800396a:	4618      	mov	r0, r3
 800396c:	f000 fabf 	bl	8003eee <TIM_ITRx_SetConfig>
      break;
 8003970:	e01c      	b.n	80039ac <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6818      	ldr	r0, [r3, #0]
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	6859      	ldr	r1, [r3, #4]
 800397a:	683b      	ldr	r3, [r7, #0]
 800397c:	68db      	ldr	r3, [r3, #12]
 800397e:	461a      	mov	r2, r3
 8003980:	f000 fa56 	bl	8003e30 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	2140      	movs	r1, #64	; 0x40
 800398a:	4618      	mov	r0, r3
 800398c:	f000 faaf 	bl	8003eee <TIM_ITRx_SetConfig>
      break;
 8003990:	e00c      	b.n	80039ac <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681a      	ldr	r2, [r3, #0]
 8003996:	683b      	ldr	r3, [r7, #0]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	4619      	mov	r1, r3
 800399c:	4610      	mov	r0, r2
 800399e:	f000 faa6 	bl	8003eee <TIM_ITRx_SetConfig>
      break;
 80039a2:	e003      	b.n	80039ac <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80039a4:	2301      	movs	r3, #1
 80039a6:	73fb      	strb	r3, [r7, #15]
      break;
 80039a8:	e000      	b.n	80039ac <HAL_TIM_ConfigClockSource+0x174>
      break;
 80039aa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2201      	movs	r2, #1
 80039b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2200      	movs	r2, #0
 80039b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80039bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80039be:	4618      	mov	r0, r3
 80039c0:	3710      	adds	r7, #16
 80039c2:	46bd      	mov	sp, r7
 80039c4:	bd80      	pop	{r7, pc}

080039c6 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80039c6:	b480      	push	{r7}
 80039c8:	b083      	sub	sp, #12
 80039ca:	af00      	add	r7, sp, #0
 80039cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80039ce:	bf00      	nop
 80039d0:	370c      	adds	r7, #12
 80039d2:	46bd      	mov	sp, r7
 80039d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d8:	4770      	bx	lr

080039da <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80039da:	b480      	push	{r7}
 80039dc:	b083      	sub	sp, #12
 80039de:	af00      	add	r7, sp, #0
 80039e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80039e2:	bf00      	nop
 80039e4:	370c      	adds	r7, #12
 80039e6:	46bd      	mov	sp, r7
 80039e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ec:	4770      	bx	lr

080039ee <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80039ee:	b480      	push	{r7}
 80039f0:	b083      	sub	sp, #12
 80039f2:	af00      	add	r7, sp, #0
 80039f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80039f6:	bf00      	nop
 80039f8:	370c      	adds	r7, #12
 80039fa:	46bd      	mov	sp, r7
 80039fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a00:	4770      	bx	lr

08003a02 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003a02:	b480      	push	{r7}
 8003a04:	b083      	sub	sp, #12
 8003a06:	af00      	add	r7, sp, #0
 8003a08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003a0a:	bf00      	nop
 8003a0c:	370c      	adds	r7, #12
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a14:	4770      	bx	lr
	...

08003a18 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003a18:	b480      	push	{r7}
 8003a1a:	b085      	sub	sp, #20
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
 8003a20:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	4a34      	ldr	r2, [pc, #208]	; (8003afc <TIM_Base_SetConfig+0xe4>)
 8003a2c:	4293      	cmp	r3, r2
 8003a2e:	d00f      	beq.n	8003a50 <TIM_Base_SetConfig+0x38>
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a36:	d00b      	beq.n	8003a50 <TIM_Base_SetConfig+0x38>
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	4a31      	ldr	r2, [pc, #196]	; (8003b00 <TIM_Base_SetConfig+0xe8>)
 8003a3c:	4293      	cmp	r3, r2
 8003a3e:	d007      	beq.n	8003a50 <TIM_Base_SetConfig+0x38>
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	4a30      	ldr	r2, [pc, #192]	; (8003b04 <TIM_Base_SetConfig+0xec>)
 8003a44:	4293      	cmp	r3, r2
 8003a46:	d003      	beq.n	8003a50 <TIM_Base_SetConfig+0x38>
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	4a2f      	ldr	r2, [pc, #188]	; (8003b08 <TIM_Base_SetConfig+0xf0>)
 8003a4c:	4293      	cmp	r3, r2
 8003a4e:	d108      	bne.n	8003a62 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a56:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003a58:	683b      	ldr	r3, [r7, #0]
 8003a5a:	685b      	ldr	r3, [r3, #4]
 8003a5c:	68fa      	ldr	r2, [r7, #12]
 8003a5e:	4313      	orrs	r3, r2
 8003a60:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	4a25      	ldr	r2, [pc, #148]	; (8003afc <TIM_Base_SetConfig+0xe4>)
 8003a66:	4293      	cmp	r3, r2
 8003a68:	d01b      	beq.n	8003aa2 <TIM_Base_SetConfig+0x8a>
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a70:	d017      	beq.n	8003aa2 <TIM_Base_SetConfig+0x8a>
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	4a22      	ldr	r2, [pc, #136]	; (8003b00 <TIM_Base_SetConfig+0xe8>)
 8003a76:	4293      	cmp	r3, r2
 8003a78:	d013      	beq.n	8003aa2 <TIM_Base_SetConfig+0x8a>
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	4a21      	ldr	r2, [pc, #132]	; (8003b04 <TIM_Base_SetConfig+0xec>)
 8003a7e:	4293      	cmp	r3, r2
 8003a80:	d00f      	beq.n	8003aa2 <TIM_Base_SetConfig+0x8a>
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	4a20      	ldr	r2, [pc, #128]	; (8003b08 <TIM_Base_SetConfig+0xf0>)
 8003a86:	4293      	cmp	r3, r2
 8003a88:	d00b      	beq.n	8003aa2 <TIM_Base_SetConfig+0x8a>
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	4a1f      	ldr	r2, [pc, #124]	; (8003b0c <TIM_Base_SetConfig+0xf4>)
 8003a8e:	4293      	cmp	r3, r2
 8003a90:	d007      	beq.n	8003aa2 <TIM_Base_SetConfig+0x8a>
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	4a1e      	ldr	r2, [pc, #120]	; (8003b10 <TIM_Base_SetConfig+0xf8>)
 8003a96:	4293      	cmp	r3, r2
 8003a98:	d003      	beq.n	8003aa2 <TIM_Base_SetConfig+0x8a>
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	4a1d      	ldr	r2, [pc, #116]	; (8003b14 <TIM_Base_SetConfig+0xfc>)
 8003a9e:	4293      	cmp	r3, r2
 8003aa0:	d108      	bne.n	8003ab4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003aa8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003aaa:	683b      	ldr	r3, [r7, #0]
 8003aac:	68db      	ldr	r3, [r3, #12]
 8003aae:	68fa      	ldr	r2, [r7, #12]
 8003ab0:	4313      	orrs	r3, r2
 8003ab2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003aba:	683b      	ldr	r3, [r7, #0]
 8003abc:	695b      	ldr	r3, [r3, #20]
 8003abe:	4313      	orrs	r3, r2
 8003ac0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	68fa      	ldr	r2, [r7, #12]
 8003ac6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003ac8:	683b      	ldr	r3, [r7, #0]
 8003aca:	689a      	ldr	r2, [r3, #8]
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003ad0:	683b      	ldr	r3, [r7, #0]
 8003ad2:	681a      	ldr	r2, [r3, #0]
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	4a08      	ldr	r2, [pc, #32]	; (8003afc <TIM_Base_SetConfig+0xe4>)
 8003adc:	4293      	cmp	r3, r2
 8003ade:	d103      	bne.n	8003ae8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	691a      	ldr	r2, [r3, #16]
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2201      	movs	r2, #1
 8003aec:	615a      	str	r2, [r3, #20]
}
 8003aee:	bf00      	nop
 8003af0:	3714      	adds	r7, #20
 8003af2:	46bd      	mov	sp, r7
 8003af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af8:	4770      	bx	lr
 8003afa:	bf00      	nop
 8003afc:	40010000 	.word	0x40010000
 8003b00:	40000400 	.word	0x40000400
 8003b04:	40000800 	.word	0x40000800
 8003b08:	40000c00 	.word	0x40000c00
 8003b0c:	40014000 	.word	0x40014000
 8003b10:	40014400 	.word	0x40014400
 8003b14:	40014800 	.word	0x40014800

08003b18 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003b18:	b480      	push	{r7}
 8003b1a:	b087      	sub	sp, #28
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
 8003b20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6a1b      	ldr	r3, [r3, #32]
 8003b26:	f023 0201 	bic.w	r2, r3, #1
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6a1b      	ldr	r3, [r3, #32]
 8003b32:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	685b      	ldr	r3, [r3, #4]
 8003b38:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	699b      	ldr	r3, [r3, #24]
 8003b3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	f023 0303 	bic.w	r3, r3, #3
 8003b4e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	68fa      	ldr	r2, [r7, #12]
 8003b56:	4313      	orrs	r3, r2
 8003b58:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003b5a:	697b      	ldr	r3, [r7, #20]
 8003b5c:	f023 0302 	bic.w	r3, r3, #2
 8003b60:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003b62:	683b      	ldr	r3, [r7, #0]
 8003b64:	689b      	ldr	r3, [r3, #8]
 8003b66:	697a      	ldr	r2, [r7, #20]
 8003b68:	4313      	orrs	r3, r2
 8003b6a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	4a1c      	ldr	r2, [pc, #112]	; (8003be0 <TIM_OC1_SetConfig+0xc8>)
 8003b70:	4293      	cmp	r3, r2
 8003b72:	d10c      	bne.n	8003b8e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003b74:	697b      	ldr	r3, [r7, #20]
 8003b76:	f023 0308 	bic.w	r3, r3, #8
 8003b7a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003b7c:	683b      	ldr	r3, [r7, #0]
 8003b7e:	68db      	ldr	r3, [r3, #12]
 8003b80:	697a      	ldr	r2, [r7, #20]
 8003b82:	4313      	orrs	r3, r2
 8003b84:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003b86:	697b      	ldr	r3, [r7, #20]
 8003b88:	f023 0304 	bic.w	r3, r3, #4
 8003b8c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	4a13      	ldr	r2, [pc, #76]	; (8003be0 <TIM_OC1_SetConfig+0xc8>)
 8003b92:	4293      	cmp	r3, r2
 8003b94:	d111      	bne.n	8003bba <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003b96:	693b      	ldr	r3, [r7, #16]
 8003b98:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003b9c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003b9e:	693b      	ldr	r3, [r7, #16]
 8003ba0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003ba4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003ba6:	683b      	ldr	r3, [r7, #0]
 8003ba8:	695b      	ldr	r3, [r3, #20]
 8003baa:	693a      	ldr	r2, [r7, #16]
 8003bac:	4313      	orrs	r3, r2
 8003bae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003bb0:	683b      	ldr	r3, [r7, #0]
 8003bb2:	699b      	ldr	r3, [r3, #24]
 8003bb4:	693a      	ldr	r2, [r7, #16]
 8003bb6:	4313      	orrs	r3, r2
 8003bb8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	693a      	ldr	r2, [r7, #16]
 8003bbe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	68fa      	ldr	r2, [r7, #12]
 8003bc4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003bc6:	683b      	ldr	r3, [r7, #0]
 8003bc8:	685a      	ldr	r2, [r3, #4]
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	697a      	ldr	r2, [r7, #20]
 8003bd2:	621a      	str	r2, [r3, #32]
}
 8003bd4:	bf00      	nop
 8003bd6:	371c      	adds	r7, #28
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bde:	4770      	bx	lr
 8003be0:	40010000 	.word	0x40010000

08003be4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003be4:	b480      	push	{r7}
 8003be6:	b087      	sub	sp, #28
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
 8003bec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6a1b      	ldr	r3, [r3, #32]
 8003bf2:	f023 0210 	bic.w	r2, r3, #16
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6a1b      	ldr	r3, [r3, #32]
 8003bfe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	685b      	ldr	r3, [r3, #4]
 8003c04:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	699b      	ldr	r3, [r3, #24]
 8003c0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003c12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c1a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003c1c:	683b      	ldr	r3, [r7, #0]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	021b      	lsls	r3, r3, #8
 8003c22:	68fa      	ldr	r2, [r7, #12]
 8003c24:	4313      	orrs	r3, r2
 8003c26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003c28:	697b      	ldr	r3, [r7, #20]
 8003c2a:	f023 0320 	bic.w	r3, r3, #32
 8003c2e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003c30:	683b      	ldr	r3, [r7, #0]
 8003c32:	689b      	ldr	r3, [r3, #8]
 8003c34:	011b      	lsls	r3, r3, #4
 8003c36:	697a      	ldr	r2, [r7, #20]
 8003c38:	4313      	orrs	r3, r2
 8003c3a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	4a1e      	ldr	r2, [pc, #120]	; (8003cb8 <TIM_OC2_SetConfig+0xd4>)
 8003c40:	4293      	cmp	r3, r2
 8003c42:	d10d      	bne.n	8003c60 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003c44:	697b      	ldr	r3, [r7, #20]
 8003c46:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003c4a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003c4c:	683b      	ldr	r3, [r7, #0]
 8003c4e:	68db      	ldr	r3, [r3, #12]
 8003c50:	011b      	lsls	r3, r3, #4
 8003c52:	697a      	ldr	r2, [r7, #20]
 8003c54:	4313      	orrs	r3, r2
 8003c56:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003c58:	697b      	ldr	r3, [r7, #20]
 8003c5a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003c5e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	4a15      	ldr	r2, [pc, #84]	; (8003cb8 <TIM_OC2_SetConfig+0xd4>)
 8003c64:	4293      	cmp	r3, r2
 8003c66:	d113      	bne.n	8003c90 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003c68:	693b      	ldr	r3, [r7, #16]
 8003c6a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003c6e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003c70:	693b      	ldr	r3, [r7, #16]
 8003c72:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003c76:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003c78:	683b      	ldr	r3, [r7, #0]
 8003c7a:	695b      	ldr	r3, [r3, #20]
 8003c7c:	009b      	lsls	r3, r3, #2
 8003c7e:	693a      	ldr	r2, [r7, #16]
 8003c80:	4313      	orrs	r3, r2
 8003c82:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003c84:	683b      	ldr	r3, [r7, #0]
 8003c86:	699b      	ldr	r3, [r3, #24]
 8003c88:	009b      	lsls	r3, r3, #2
 8003c8a:	693a      	ldr	r2, [r7, #16]
 8003c8c:	4313      	orrs	r3, r2
 8003c8e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	693a      	ldr	r2, [r7, #16]
 8003c94:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	68fa      	ldr	r2, [r7, #12]
 8003c9a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003c9c:	683b      	ldr	r3, [r7, #0]
 8003c9e:	685a      	ldr	r2, [r3, #4]
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	697a      	ldr	r2, [r7, #20]
 8003ca8:	621a      	str	r2, [r3, #32]
}
 8003caa:	bf00      	nop
 8003cac:	371c      	adds	r7, #28
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb4:	4770      	bx	lr
 8003cb6:	bf00      	nop
 8003cb8:	40010000 	.word	0x40010000

08003cbc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003cbc:	b480      	push	{r7}
 8003cbe:	b087      	sub	sp, #28
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
 8003cc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6a1b      	ldr	r3, [r3, #32]
 8003cca:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	6a1b      	ldr	r3, [r3, #32]
 8003cd6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	685b      	ldr	r3, [r3, #4]
 8003cdc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	69db      	ldr	r3, [r3, #28]
 8003ce2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003cea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	f023 0303 	bic.w	r3, r3, #3
 8003cf2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003cf4:	683b      	ldr	r3, [r7, #0]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	68fa      	ldr	r2, [r7, #12]
 8003cfa:	4313      	orrs	r3, r2
 8003cfc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003cfe:	697b      	ldr	r3, [r7, #20]
 8003d00:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003d04:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003d06:	683b      	ldr	r3, [r7, #0]
 8003d08:	689b      	ldr	r3, [r3, #8]
 8003d0a:	021b      	lsls	r3, r3, #8
 8003d0c:	697a      	ldr	r2, [r7, #20]
 8003d0e:	4313      	orrs	r3, r2
 8003d10:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	4a1d      	ldr	r2, [pc, #116]	; (8003d8c <TIM_OC3_SetConfig+0xd0>)
 8003d16:	4293      	cmp	r3, r2
 8003d18:	d10d      	bne.n	8003d36 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003d1a:	697b      	ldr	r3, [r7, #20]
 8003d1c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003d20:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003d22:	683b      	ldr	r3, [r7, #0]
 8003d24:	68db      	ldr	r3, [r3, #12]
 8003d26:	021b      	lsls	r3, r3, #8
 8003d28:	697a      	ldr	r2, [r7, #20]
 8003d2a:	4313      	orrs	r3, r2
 8003d2c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003d2e:	697b      	ldr	r3, [r7, #20]
 8003d30:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003d34:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	4a14      	ldr	r2, [pc, #80]	; (8003d8c <TIM_OC3_SetConfig+0xd0>)
 8003d3a:	4293      	cmp	r3, r2
 8003d3c:	d113      	bne.n	8003d66 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003d3e:	693b      	ldr	r3, [r7, #16]
 8003d40:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003d44:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003d46:	693b      	ldr	r3, [r7, #16]
 8003d48:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003d4c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003d4e:	683b      	ldr	r3, [r7, #0]
 8003d50:	695b      	ldr	r3, [r3, #20]
 8003d52:	011b      	lsls	r3, r3, #4
 8003d54:	693a      	ldr	r2, [r7, #16]
 8003d56:	4313      	orrs	r3, r2
 8003d58:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003d5a:	683b      	ldr	r3, [r7, #0]
 8003d5c:	699b      	ldr	r3, [r3, #24]
 8003d5e:	011b      	lsls	r3, r3, #4
 8003d60:	693a      	ldr	r2, [r7, #16]
 8003d62:	4313      	orrs	r3, r2
 8003d64:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	693a      	ldr	r2, [r7, #16]
 8003d6a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	68fa      	ldr	r2, [r7, #12]
 8003d70:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003d72:	683b      	ldr	r3, [r7, #0]
 8003d74:	685a      	ldr	r2, [r3, #4]
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	697a      	ldr	r2, [r7, #20]
 8003d7e:	621a      	str	r2, [r3, #32]
}
 8003d80:	bf00      	nop
 8003d82:	371c      	adds	r7, #28
 8003d84:	46bd      	mov	sp, r7
 8003d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8a:	4770      	bx	lr
 8003d8c:	40010000 	.word	0x40010000

08003d90 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003d90:	b480      	push	{r7}
 8003d92:	b087      	sub	sp, #28
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]
 8003d98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6a1b      	ldr	r3, [r3, #32]
 8003d9e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6a1b      	ldr	r3, [r3, #32]
 8003daa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	685b      	ldr	r3, [r3, #4]
 8003db0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	69db      	ldr	r3, [r3, #28]
 8003db6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003dbe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003dc6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003dc8:	683b      	ldr	r3, [r7, #0]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	021b      	lsls	r3, r3, #8
 8003dce:	68fa      	ldr	r2, [r7, #12]
 8003dd0:	4313      	orrs	r3, r2
 8003dd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003dd4:	693b      	ldr	r3, [r7, #16]
 8003dd6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003dda:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	689b      	ldr	r3, [r3, #8]
 8003de0:	031b      	lsls	r3, r3, #12
 8003de2:	693a      	ldr	r2, [r7, #16]
 8003de4:	4313      	orrs	r3, r2
 8003de6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	4a10      	ldr	r2, [pc, #64]	; (8003e2c <TIM_OC4_SetConfig+0x9c>)
 8003dec:	4293      	cmp	r3, r2
 8003dee:	d109      	bne.n	8003e04 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003df0:	697b      	ldr	r3, [r7, #20]
 8003df2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003df6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003df8:	683b      	ldr	r3, [r7, #0]
 8003dfa:	695b      	ldr	r3, [r3, #20]
 8003dfc:	019b      	lsls	r3, r3, #6
 8003dfe:	697a      	ldr	r2, [r7, #20]
 8003e00:	4313      	orrs	r3, r2
 8003e02:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	697a      	ldr	r2, [r7, #20]
 8003e08:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	68fa      	ldr	r2, [r7, #12]
 8003e0e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003e10:	683b      	ldr	r3, [r7, #0]
 8003e12:	685a      	ldr	r2, [r3, #4]
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	693a      	ldr	r2, [r7, #16]
 8003e1c:	621a      	str	r2, [r3, #32]
}
 8003e1e:	bf00      	nop
 8003e20:	371c      	adds	r7, #28
 8003e22:	46bd      	mov	sp, r7
 8003e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e28:	4770      	bx	lr
 8003e2a:	bf00      	nop
 8003e2c:	40010000 	.word	0x40010000

08003e30 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003e30:	b480      	push	{r7}
 8003e32:	b087      	sub	sp, #28
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	60f8      	str	r0, [r7, #12]
 8003e38:	60b9      	str	r1, [r7, #8]
 8003e3a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	6a1b      	ldr	r3, [r3, #32]
 8003e40:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	6a1b      	ldr	r3, [r3, #32]
 8003e46:	f023 0201 	bic.w	r2, r3, #1
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	699b      	ldr	r3, [r3, #24]
 8003e52:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003e54:	693b      	ldr	r3, [r7, #16]
 8003e56:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003e5a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	011b      	lsls	r3, r3, #4
 8003e60:	693a      	ldr	r2, [r7, #16]
 8003e62:	4313      	orrs	r3, r2
 8003e64:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003e66:	697b      	ldr	r3, [r7, #20]
 8003e68:	f023 030a 	bic.w	r3, r3, #10
 8003e6c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003e6e:	697a      	ldr	r2, [r7, #20]
 8003e70:	68bb      	ldr	r3, [r7, #8]
 8003e72:	4313      	orrs	r3, r2
 8003e74:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	693a      	ldr	r2, [r7, #16]
 8003e7a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	697a      	ldr	r2, [r7, #20]
 8003e80:	621a      	str	r2, [r3, #32]
}
 8003e82:	bf00      	nop
 8003e84:	371c      	adds	r7, #28
 8003e86:	46bd      	mov	sp, r7
 8003e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8c:	4770      	bx	lr

08003e8e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003e8e:	b480      	push	{r7}
 8003e90:	b087      	sub	sp, #28
 8003e92:	af00      	add	r7, sp, #0
 8003e94:	60f8      	str	r0, [r7, #12]
 8003e96:	60b9      	str	r1, [r7, #8]
 8003e98:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	6a1b      	ldr	r3, [r3, #32]
 8003e9e:	f023 0210 	bic.w	r2, r3, #16
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	699b      	ldr	r3, [r3, #24]
 8003eaa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	6a1b      	ldr	r3, [r3, #32]
 8003eb0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003eb2:	697b      	ldr	r3, [r7, #20]
 8003eb4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003eb8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	031b      	lsls	r3, r3, #12
 8003ebe:	697a      	ldr	r2, [r7, #20]
 8003ec0:	4313      	orrs	r3, r2
 8003ec2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003ec4:	693b      	ldr	r3, [r7, #16]
 8003ec6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003eca:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003ecc:	68bb      	ldr	r3, [r7, #8]
 8003ece:	011b      	lsls	r3, r3, #4
 8003ed0:	693a      	ldr	r2, [r7, #16]
 8003ed2:	4313      	orrs	r3, r2
 8003ed4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	697a      	ldr	r2, [r7, #20]
 8003eda:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	693a      	ldr	r2, [r7, #16]
 8003ee0:	621a      	str	r2, [r3, #32]
}
 8003ee2:	bf00      	nop
 8003ee4:	371c      	adds	r7, #28
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eec:	4770      	bx	lr

08003eee <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003eee:	b480      	push	{r7}
 8003ef0:	b085      	sub	sp, #20
 8003ef2:	af00      	add	r7, sp, #0
 8003ef4:	6078      	str	r0, [r7, #4]
 8003ef6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	689b      	ldr	r3, [r3, #8]
 8003efc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f04:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003f06:	683a      	ldr	r2, [r7, #0]
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	4313      	orrs	r3, r2
 8003f0c:	f043 0307 	orr.w	r3, r3, #7
 8003f10:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	68fa      	ldr	r2, [r7, #12]
 8003f16:	609a      	str	r2, [r3, #8]
}
 8003f18:	bf00      	nop
 8003f1a:	3714      	adds	r7, #20
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f22:	4770      	bx	lr

08003f24 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003f24:	b480      	push	{r7}
 8003f26:	b087      	sub	sp, #28
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	60f8      	str	r0, [r7, #12]
 8003f2c:	60b9      	str	r1, [r7, #8]
 8003f2e:	607a      	str	r2, [r7, #4]
 8003f30:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	689b      	ldr	r3, [r3, #8]
 8003f36:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003f38:	697b      	ldr	r3, [r7, #20]
 8003f3a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003f3e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003f40:	683b      	ldr	r3, [r7, #0]
 8003f42:	021a      	lsls	r2, r3, #8
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	431a      	orrs	r2, r3
 8003f48:	68bb      	ldr	r3, [r7, #8]
 8003f4a:	4313      	orrs	r3, r2
 8003f4c:	697a      	ldr	r2, [r7, #20]
 8003f4e:	4313      	orrs	r3, r2
 8003f50:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	697a      	ldr	r2, [r7, #20]
 8003f56:	609a      	str	r2, [r3, #8]
}
 8003f58:	bf00      	nop
 8003f5a:	371c      	adds	r7, #28
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f62:	4770      	bx	lr

08003f64 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003f64:	b480      	push	{r7}
 8003f66:	b087      	sub	sp, #28
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	60f8      	str	r0, [r7, #12]
 8003f6c:	60b9      	str	r1, [r7, #8]
 8003f6e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003f70:	68bb      	ldr	r3, [r7, #8]
 8003f72:	f003 031f 	and.w	r3, r3, #31
 8003f76:	2201      	movs	r2, #1
 8003f78:	fa02 f303 	lsl.w	r3, r2, r3
 8003f7c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	6a1a      	ldr	r2, [r3, #32]
 8003f82:	697b      	ldr	r3, [r7, #20]
 8003f84:	43db      	mvns	r3, r3
 8003f86:	401a      	ands	r2, r3
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	6a1a      	ldr	r2, [r3, #32]
 8003f90:	68bb      	ldr	r3, [r7, #8]
 8003f92:	f003 031f 	and.w	r3, r3, #31
 8003f96:	6879      	ldr	r1, [r7, #4]
 8003f98:	fa01 f303 	lsl.w	r3, r1, r3
 8003f9c:	431a      	orrs	r2, r3
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	621a      	str	r2, [r3, #32]
}
 8003fa2:	bf00      	nop
 8003fa4:	371c      	adds	r7, #28
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fac:	4770      	bx	lr
	...

08003fb0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003fb0:	b480      	push	{r7}
 8003fb2:	b085      	sub	sp, #20
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
 8003fb8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003fc0:	2b01      	cmp	r3, #1
 8003fc2:	d101      	bne.n	8003fc8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003fc4:	2302      	movs	r3, #2
 8003fc6:	e050      	b.n	800406a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2201      	movs	r2, #1
 8003fcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2202      	movs	r2, #2
 8003fd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	685b      	ldr	r3, [r3, #4]
 8003fde:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	689b      	ldr	r3, [r3, #8]
 8003fe6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fee:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003ff0:	683b      	ldr	r3, [r7, #0]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	68fa      	ldr	r2, [r7, #12]
 8003ff6:	4313      	orrs	r3, r2
 8003ff8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	68fa      	ldr	r2, [r7, #12]
 8004000:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	4a1c      	ldr	r2, [pc, #112]	; (8004078 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004008:	4293      	cmp	r3, r2
 800400a:	d018      	beq.n	800403e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004014:	d013      	beq.n	800403e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	4a18      	ldr	r2, [pc, #96]	; (800407c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800401c:	4293      	cmp	r3, r2
 800401e:	d00e      	beq.n	800403e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	4a16      	ldr	r2, [pc, #88]	; (8004080 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004026:	4293      	cmp	r3, r2
 8004028:	d009      	beq.n	800403e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	4a15      	ldr	r2, [pc, #84]	; (8004084 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004030:	4293      	cmp	r3, r2
 8004032:	d004      	beq.n	800403e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	4a13      	ldr	r2, [pc, #76]	; (8004088 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800403a:	4293      	cmp	r3, r2
 800403c:	d10c      	bne.n	8004058 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800403e:	68bb      	ldr	r3, [r7, #8]
 8004040:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004044:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004046:	683b      	ldr	r3, [r7, #0]
 8004048:	685b      	ldr	r3, [r3, #4]
 800404a:	68ba      	ldr	r2, [r7, #8]
 800404c:	4313      	orrs	r3, r2
 800404e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	68ba      	ldr	r2, [r7, #8]
 8004056:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2201      	movs	r2, #1
 800405c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2200      	movs	r2, #0
 8004064:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004068:	2300      	movs	r3, #0
}
 800406a:	4618      	mov	r0, r3
 800406c:	3714      	adds	r7, #20
 800406e:	46bd      	mov	sp, r7
 8004070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004074:	4770      	bx	lr
 8004076:	bf00      	nop
 8004078:	40010000 	.word	0x40010000
 800407c:	40000400 	.word	0x40000400
 8004080:	40000800 	.word	0x40000800
 8004084:	40000c00 	.word	0x40000c00
 8004088:	40014000 	.word	0x40014000

0800408c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800408c:	b480      	push	{r7}
 800408e:	b085      	sub	sp, #20
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]
 8004094:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004096:	2300      	movs	r3, #0
 8004098:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80040a0:	2b01      	cmp	r3, #1
 80040a2:	d101      	bne.n	80040a8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80040a4:	2302      	movs	r3, #2
 80040a6:	e03d      	b.n	8004124 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2201      	movs	r2, #1
 80040ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80040b6:	683b      	ldr	r3, [r7, #0]
 80040b8:	68db      	ldr	r3, [r3, #12]
 80040ba:	4313      	orrs	r3, r2
 80040bc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	689b      	ldr	r3, [r3, #8]
 80040c8:	4313      	orrs	r3, r2
 80040ca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80040d2:	683b      	ldr	r3, [r7, #0]
 80040d4:	685b      	ldr	r3, [r3, #4]
 80040d6:	4313      	orrs	r3, r2
 80040d8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	4313      	orrs	r3, r2
 80040e6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80040ee:	683b      	ldr	r3, [r7, #0]
 80040f0:	691b      	ldr	r3, [r3, #16]
 80040f2:	4313      	orrs	r3, r2
 80040f4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80040fc:	683b      	ldr	r3, [r7, #0]
 80040fe:	695b      	ldr	r3, [r3, #20]
 8004100:	4313      	orrs	r3, r2
 8004102:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800410a:	683b      	ldr	r3, [r7, #0]
 800410c:	69db      	ldr	r3, [r3, #28]
 800410e:	4313      	orrs	r3, r2
 8004110:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	68fa      	ldr	r2, [r7, #12]
 8004118:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	2200      	movs	r2, #0
 800411e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004122:	2300      	movs	r3, #0
}
 8004124:	4618      	mov	r0, r3
 8004126:	3714      	adds	r7, #20
 8004128:	46bd      	mov	sp, r7
 800412a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412e:	4770      	bx	lr

08004130 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004130:	b480      	push	{r7}
 8004132:	b083      	sub	sp, #12
 8004134:	af00      	add	r7, sp, #0
 8004136:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004138:	bf00      	nop
 800413a:	370c      	adds	r7, #12
 800413c:	46bd      	mov	sp, r7
 800413e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004142:	4770      	bx	lr

08004144 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004144:	b480      	push	{r7}
 8004146:	b083      	sub	sp, #12
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800414c:	bf00      	nop
 800414e:	370c      	adds	r7, #12
 8004150:	46bd      	mov	sp, r7
 8004152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004156:	4770      	bx	lr

08004158 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004158:	b580      	push	{r7, lr}
 800415a:	b082      	sub	sp, #8
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2b00      	cmp	r3, #0
 8004164:	d101      	bne.n	800416a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004166:	2301      	movs	r3, #1
 8004168:	e03f      	b.n	80041ea <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004170:	b2db      	uxtb	r3, r3
 8004172:	2b00      	cmp	r3, #0
 8004174:	d106      	bne.n	8004184 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	2200      	movs	r2, #0
 800417a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800417e:	6878      	ldr	r0, [r7, #4]
 8004180:	f7fd fafe 	bl	8001780 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2224      	movs	r2, #36	; 0x24
 8004188:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	68da      	ldr	r2, [r3, #12]
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800419a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800419c:	6878      	ldr	r0, [r7, #4]
 800419e:	f000 f929 	bl	80043f4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	691a      	ldr	r2, [r3, #16]
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80041b0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	695a      	ldr	r2, [r3, #20]
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80041c0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	68da      	ldr	r2, [r3, #12]
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80041d0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	2200      	movs	r2, #0
 80041d6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2220      	movs	r2, #32
 80041dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2220      	movs	r2, #32
 80041e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80041e8:	2300      	movs	r3, #0
}
 80041ea:	4618      	mov	r0, r3
 80041ec:	3708      	adds	r7, #8
 80041ee:	46bd      	mov	sp, r7
 80041f0:	bd80      	pop	{r7, pc}

080041f2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80041f2:	b580      	push	{r7, lr}
 80041f4:	b08a      	sub	sp, #40	; 0x28
 80041f6:	af02      	add	r7, sp, #8
 80041f8:	60f8      	str	r0, [r7, #12]
 80041fa:	60b9      	str	r1, [r7, #8]
 80041fc:	603b      	str	r3, [r7, #0]
 80041fe:	4613      	mov	r3, r2
 8004200:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004202:	2300      	movs	r3, #0
 8004204:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800420c:	b2db      	uxtb	r3, r3
 800420e:	2b20      	cmp	r3, #32
 8004210:	d17c      	bne.n	800430c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004212:	68bb      	ldr	r3, [r7, #8]
 8004214:	2b00      	cmp	r3, #0
 8004216:	d002      	beq.n	800421e <HAL_UART_Transmit+0x2c>
 8004218:	88fb      	ldrh	r3, [r7, #6]
 800421a:	2b00      	cmp	r3, #0
 800421c:	d101      	bne.n	8004222 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800421e:	2301      	movs	r3, #1
 8004220:	e075      	b.n	800430e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004228:	2b01      	cmp	r3, #1
 800422a:	d101      	bne.n	8004230 <HAL_UART_Transmit+0x3e>
 800422c:	2302      	movs	r3, #2
 800422e:	e06e      	b.n	800430e <HAL_UART_Transmit+0x11c>
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	2201      	movs	r2, #1
 8004234:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	2200      	movs	r2, #0
 800423c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	2221      	movs	r2, #33	; 0x21
 8004242:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004246:	f7fd fc1f 	bl	8001a88 <HAL_GetTick>
 800424a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	88fa      	ldrh	r2, [r7, #6]
 8004250:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	88fa      	ldrh	r2, [r7, #6]
 8004256:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	689b      	ldr	r3, [r3, #8]
 800425c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004260:	d108      	bne.n	8004274 <HAL_UART_Transmit+0x82>
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	691b      	ldr	r3, [r3, #16]
 8004266:	2b00      	cmp	r3, #0
 8004268:	d104      	bne.n	8004274 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800426a:	2300      	movs	r3, #0
 800426c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800426e:	68bb      	ldr	r3, [r7, #8]
 8004270:	61bb      	str	r3, [r7, #24]
 8004272:	e003      	b.n	800427c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004274:	68bb      	ldr	r3, [r7, #8]
 8004276:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004278:	2300      	movs	r3, #0
 800427a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	2200      	movs	r2, #0
 8004280:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004284:	e02a      	b.n	80042dc <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004286:	683b      	ldr	r3, [r7, #0]
 8004288:	9300      	str	r3, [sp, #0]
 800428a:	697b      	ldr	r3, [r7, #20]
 800428c:	2200      	movs	r2, #0
 800428e:	2180      	movs	r1, #128	; 0x80
 8004290:	68f8      	ldr	r0, [r7, #12]
 8004292:	f000 f840 	bl	8004316 <UART_WaitOnFlagUntilTimeout>
 8004296:	4603      	mov	r3, r0
 8004298:	2b00      	cmp	r3, #0
 800429a:	d001      	beq.n	80042a0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800429c:	2303      	movs	r3, #3
 800429e:	e036      	b.n	800430e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80042a0:	69fb      	ldr	r3, [r7, #28]
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d10b      	bne.n	80042be <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80042a6:	69bb      	ldr	r3, [r7, #24]
 80042a8:	881b      	ldrh	r3, [r3, #0]
 80042aa:	461a      	mov	r2, r3
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80042b4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80042b6:	69bb      	ldr	r3, [r7, #24]
 80042b8:	3302      	adds	r3, #2
 80042ba:	61bb      	str	r3, [r7, #24]
 80042bc:	e007      	b.n	80042ce <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80042be:	69fb      	ldr	r3, [r7, #28]
 80042c0:	781a      	ldrb	r2, [r3, #0]
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80042c8:	69fb      	ldr	r3, [r7, #28]
 80042ca:	3301      	adds	r3, #1
 80042cc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80042d2:	b29b      	uxth	r3, r3
 80042d4:	3b01      	subs	r3, #1
 80042d6:	b29a      	uxth	r2, r3
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80042e0:	b29b      	uxth	r3, r3
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d1cf      	bne.n	8004286 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80042e6:	683b      	ldr	r3, [r7, #0]
 80042e8:	9300      	str	r3, [sp, #0]
 80042ea:	697b      	ldr	r3, [r7, #20]
 80042ec:	2200      	movs	r2, #0
 80042ee:	2140      	movs	r1, #64	; 0x40
 80042f0:	68f8      	ldr	r0, [r7, #12]
 80042f2:	f000 f810 	bl	8004316 <UART_WaitOnFlagUntilTimeout>
 80042f6:	4603      	mov	r3, r0
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d001      	beq.n	8004300 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80042fc:	2303      	movs	r3, #3
 80042fe:	e006      	b.n	800430e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	2220      	movs	r2, #32
 8004304:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004308:	2300      	movs	r3, #0
 800430a:	e000      	b.n	800430e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800430c:	2302      	movs	r3, #2
  }
}
 800430e:	4618      	mov	r0, r3
 8004310:	3720      	adds	r7, #32
 8004312:	46bd      	mov	sp, r7
 8004314:	bd80      	pop	{r7, pc}

08004316 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004316:	b580      	push	{r7, lr}
 8004318:	b090      	sub	sp, #64	; 0x40
 800431a:	af00      	add	r7, sp, #0
 800431c:	60f8      	str	r0, [r7, #12]
 800431e:	60b9      	str	r1, [r7, #8]
 8004320:	603b      	str	r3, [r7, #0]
 8004322:	4613      	mov	r3, r2
 8004324:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004326:	e050      	b.n	80043ca <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004328:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800432a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800432e:	d04c      	beq.n	80043ca <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004330:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004332:	2b00      	cmp	r3, #0
 8004334:	d007      	beq.n	8004346 <UART_WaitOnFlagUntilTimeout+0x30>
 8004336:	f7fd fba7 	bl	8001a88 <HAL_GetTick>
 800433a:	4602      	mov	r2, r0
 800433c:	683b      	ldr	r3, [r7, #0]
 800433e:	1ad3      	subs	r3, r2, r3
 8004340:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004342:	429a      	cmp	r2, r3
 8004344:	d241      	bcs.n	80043ca <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	330c      	adds	r3, #12
 800434c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800434e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004350:	e853 3f00 	ldrex	r3, [r3]
 8004354:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004358:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800435c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	330c      	adds	r3, #12
 8004364:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004366:	637a      	str	r2, [r7, #52]	; 0x34
 8004368:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800436a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800436c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800436e:	e841 2300 	strex	r3, r2, [r1]
 8004372:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004374:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004376:	2b00      	cmp	r3, #0
 8004378:	d1e5      	bne.n	8004346 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	3314      	adds	r3, #20
 8004380:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004382:	697b      	ldr	r3, [r7, #20]
 8004384:	e853 3f00 	ldrex	r3, [r3]
 8004388:	613b      	str	r3, [r7, #16]
   return(result);
 800438a:	693b      	ldr	r3, [r7, #16]
 800438c:	f023 0301 	bic.w	r3, r3, #1
 8004390:	63bb      	str	r3, [r7, #56]	; 0x38
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	3314      	adds	r3, #20
 8004398:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800439a:	623a      	str	r2, [r7, #32]
 800439c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800439e:	69f9      	ldr	r1, [r7, #28]
 80043a0:	6a3a      	ldr	r2, [r7, #32]
 80043a2:	e841 2300 	strex	r3, r2, [r1]
 80043a6:	61bb      	str	r3, [r7, #24]
   return(result);
 80043a8:	69bb      	ldr	r3, [r7, #24]
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d1e5      	bne.n	800437a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	2220      	movs	r2, #32
 80043b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	2220      	movs	r2, #32
 80043ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	2200      	movs	r2, #0
 80043c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80043c6:	2303      	movs	r3, #3
 80043c8:	e00f      	b.n	80043ea <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	681a      	ldr	r2, [r3, #0]
 80043d0:	68bb      	ldr	r3, [r7, #8]
 80043d2:	4013      	ands	r3, r2
 80043d4:	68ba      	ldr	r2, [r7, #8]
 80043d6:	429a      	cmp	r2, r3
 80043d8:	bf0c      	ite	eq
 80043da:	2301      	moveq	r3, #1
 80043dc:	2300      	movne	r3, #0
 80043de:	b2db      	uxtb	r3, r3
 80043e0:	461a      	mov	r2, r3
 80043e2:	79fb      	ldrb	r3, [r7, #7]
 80043e4:	429a      	cmp	r2, r3
 80043e6:	d09f      	beq.n	8004328 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80043e8:	2300      	movs	r3, #0
}
 80043ea:	4618      	mov	r0, r3
 80043ec:	3740      	adds	r7, #64	; 0x40
 80043ee:	46bd      	mov	sp, r7
 80043f0:	bd80      	pop	{r7, pc}
	...

080043f4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80043f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80043f8:	b0c0      	sub	sp, #256	; 0x100
 80043fa:	af00      	add	r7, sp, #0
 80043fc:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004400:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	691b      	ldr	r3, [r3, #16]
 8004408:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800440c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004410:	68d9      	ldr	r1, [r3, #12]
 8004412:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004416:	681a      	ldr	r2, [r3, #0]
 8004418:	ea40 0301 	orr.w	r3, r0, r1
 800441c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800441e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004422:	689a      	ldr	r2, [r3, #8]
 8004424:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004428:	691b      	ldr	r3, [r3, #16]
 800442a:	431a      	orrs	r2, r3
 800442c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004430:	695b      	ldr	r3, [r3, #20]
 8004432:	431a      	orrs	r2, r3
 8004434:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004438:	69db      	ldr	r3, [r3, #28]
 800443a:	4313      	orrs	r3, r2
 800443c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004440:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	68db      	ldr	r3, [r3, #12]
 8004448:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800444c:	f021 010c 	bic.w	r1, r1, #12
 8004450:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004454:	681a      	ldr	r2, [r3, #0]
 8004456:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800445a:	430b      	orrs	r3, r1
 800445c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800445e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	695b      	ldr	r3, [r3, #20]
 8004466:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800446a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800446e:	6999      	ldr	r1, [r3, #24]
 8004470:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004474:	681a      	ldr	r2, [r3, #0]
 8004476:	ea40 0301 	orr.w	r3, r0, r1
 800447a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800447c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004480:	681a      	ldr	r2, [r3, #0]
 8004482:	4b8f      	ldr	r3, [pc, #572]	; (80046c0 <UART_SetConfig+0x2cc>)
 8004484:	429a      	cmp	r2, r3
 8004486:	d005      	beq.n	8004494 <UART_SetConfig+0xa0>
 8004488:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800448c:	681a      	ldr	r2, [r3, #0]
 800448e:	4b8d      	ldr	r3, [pc, #564]	; (80046c4 <UART_SetConfig+0x2d0>)
 8004490:	429a      	cmp	r2, r3
 8004492:	d104      	bne.n	800449e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004494:	f7fe fd46 	bl	8002f24 <HAL_RCC_GetPCLK2Freq>
 8004498:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800449c:	e003      	b.n	80044a6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800449e:	f7fe fd2d 	bl	8002efc <HAL_RCC_GetPCLK1Freq>
 80044a2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80044a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044aa:	69db      	ldr	r3, [r3, #28]
 80044ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80044b0:	f040 810c 	bne.w	80046cc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80044b4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80044b8:	2200      	movs	r2, #0
 80044ba:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80044be:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80044c2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80044c6:	4622      	mov	r2, r4
 80044c8:	462b      	mov	r3, r5
 80044ca:	1891      	adds	r1, r2, r2
 80044cc:	65b9      	str	r1, [r7, #88]	; 0x58
 80044ce:	415b      	adcs	r3, r3
 80044d0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80044d2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80044d6:	4621      	mov	r1, r4
 80044d8:	eb12 0801 	adds.w	r8, r2, r1
 80044dc:	4629      	mov	r1, r5
 80044de:	eb43 0901 	adc.w	r9, r3, r1
 80044e2:	f04f 0200 	mov.w	r2, #0
 80044e6:	f04f 0300 	mov.w	r3, #0
 80044ea:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80044ee:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80044f2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80044f6:	4690      	mov	r8, r2
 80044f8:	4699      	mov	r9, r3
 80044fa:	4623      	mov	r3, r4
 80044fc:	eb18 0303 	adds.w	r3, r8, r3
 8004500:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004504:	462b      	mov	r3, r5
 8004506:	eb49 0303 	adc.w	r3, r9, r3
 800450a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800450e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004512:	685b      	ldr	r3, [r3, #4]
 8004514:	2200      	movs	r2, #0
 8004516:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800451a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800451e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004522:	460b      	mov	r3, r1
 8004524:	18db      	adds	r3, r3, r3
 8004526:	653b      	str	r3, [r7, #80]	; 0x50
 8004528:	4613      	mov	r3, r2
 800452a:	eb42 0303 	adc.w	r3, r2, r3
 800452e:	657b      	str	r3, [r7, #84]	; 0x54
 8004530:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004534:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004538:	f7fc fb90 	bl	8000c5c <__aeabi_uldivmod>
 800453c:	4602      	mov	r2, r0
 800453e:	460b      	mov	r3, r1
 8004540:	4b61      	ldr	r3, [pc, #388]	; (80046c8 <UART_SetConfig+0x2d4>)
 8004542:	fba3 2302 	umull	r2, r3, r3, r2
 8004546:	095b      	lsrs	r3, r3, #5
 8004548:	011c      	lsls	r4, r3, #4
 800454a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800454e:	2200      	movs	r2, #0
 8004550:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004554:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004558:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800455c:	4642      	mov	r2, r8
 800455e:	464b      	mov	r3, r9
 8004560:	1891      	adds	r1, r2, r2
 8004562:	64b9      	str	r1, [r7, #72]	; 0x48
 8004564:	415b      	adcs	r3, r3
 8004566:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004568:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800456c:	4641      	mov	r1, r8
 800456e:	eb12 0a01 	adds.w	sl, r2, r1
 8004572:	4649      	mov	r1, r9
 8004574:	eb43 0b01 	adc.w	fp, r3, r1
 8004578:	f04f 0200 	mov.w	r2, #0
 800457c:	f04f 0300 	mov.w	r3, #0
 8004580:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004584:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004588:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800458c:	4692      	mov	sl, r2
 800458e:	469b      	mov	fp, r3
 8004590:	4643      	mov	r3, r8
 8004592:	eb1a 0303 	adds.w	r3, sl, r3
 8004596:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800459a:	464b      	mov	r3, r9
 800459c:	eb4b 0303 	adc.w	r3, fp, r3
 80045a0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80045a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045a8:	685b      	ldr	r3, [r3, #4]
 80045aa:	2200      	movs	r2, #0
 80045ac:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80045b0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80045b4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80045b8:	460b      	mov	r3, r1
 80045ba:	18db      	adds	r3, r3, r3
 80045bc:	643b      	str	r3, [r7, #64]	; 0x40
 80045be:	4613      	mov	r3, r2
 80045c0:	eb42 0303 	adc.w	r3, r2, r3
 80045c4:	647b      	str	r3, [r7, #68]	; 0x44
 80045c6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80045ca:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80045ce:	f7fc fb45 	bl	8000c5c <__aeabi_uldivmod>
 80045d2:	4602      	mov	r2, r0
 80045d4:	460b      	mov	r3, r1
 80045d6:	4611      	mov	r1, r2
 80045d8:	4b3b      	ldr	r3, [pc, #236]	; (80046c8 <UART_SetConfig+0x2d4>)
 80045da:	fba3 2301 	umull	r2, r3, r3, r1
 80045de:	095b      	lsrs	r3, r3, #5
 80045e0:	2264      	movs	r2, #100	; 0x64
 80045e2:	fb02 f303 	mul.w	r3, r2, r3
 80045e6:	1acb      	subs	r3, r1, r3
 80045e8:	00db      	lsls	r3, r3, #3
 80045ea:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80045ee:	4b36      	ldr	r3, [pc, #216]	; (80046c8 <UART_SetConfig+0x2d4>)
 80045f0:	fba3 2302 	umull	r2, r3, r3, r2
 80045f4:	095b      	lsrs	r3, r3, #5
 80045f6:	005b      	lsls	r3, r3, #1
 80045f8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80045fc:	441c      	add	r4, r3
 80045fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004602:	2200      	movs	r2, #0
 8004604:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004608:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800460c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004610:	4642      	mov	r2, r8
 8004612:	464b      	mov	r3, r9
 8004614:	1891      	adds	r1, r2, r2
 8004616:	63b9      	str	r1, [r7, #56]	; 0x38
 8004618:	415b      	adcs	r3, r3
 800461a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800461c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004620:	4641      	mov	r1, r8
 8004622:	1851      	adds	r1, r2, r1
 8004624:	6339      	str	r1, [r7, #48]	; 0x30
 8004626:	4649      	mov	r1, r9
 8004628:	414b      	adcs	r3, r1
 800462a:	637b      	str	r3, [r7, #52]	; 0x34
 800462c:	f04f 0200 	mov.w	r2, #0
 8004630:	f04f 0300 	mov.w	r3, #0
 8004634:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004638:	4659      	mov	r1, fp
 800463a:	00cb      	lsls	r3, r1, #3
 800463c:	4651      	mov	r1, sl
 800463e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004642:	4651      	mov	r1, sl
 8004644:	00ca      	lsls	r2, r1, #3
 8004646:	4610      	mov	r0, r2
 8004648:	4619      	mov	r1, r3
 800464a:	4603      	mov	r3, r0
 800464c:	4642      	mov	r2, r8
 800464e:	189b      	adds	r3, r3, r2
 8004650:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004654:	464b      	mov	r3, r9
 8004656:	460a      	mov	r2, r1
 8004658:	eb42 0303 	adc.w	r3, r2, r3
 800465c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004660:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004664:	685b      	ldr	r3, [r3, #4]
 8004666:	2200      	movs	r2, #0
 8004668:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800466c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004670:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004674:	460b      	mov	r3, r1
 8004676:	18db      	adds	r3, r3, r3
 8004678:	62bb      	str	r3, [r7, #40]	; 0x28
 800467a:	4613      	mov	r3, r2
 800467c:	eb42 0303 	adc.w	r3, r2, r3
 8004680:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004682:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004686:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800468a:	f7fc fae7 	bl	8000c5c <__aeabi_uldivmod>
 800468e:	4602      	mov	r2, r0
 8004690:	460b      	mov	r3, r1
 8004692:	4b0d      	ldr	r3, [pc, #52]	; (80046c8 <UART_SetConfig+0x2d4>)
 8004694:	fba3 1302 	umull	r1, r3, r3, r2
 8004698:	095b      	lsrs	r3, r3, #5
 800469a:	2164      	movs	r1, #100	; 0x64
 800469c:	fb01 f303 	mul.w	r3, r1, r3
 80046a0:	1ad3      	subs	r3, r2, r3
 80046a2:	00db      	lsls	r3, r3, #3
 80046a4:	3332      	adds	r3, #50	; 0x32
 80046a6:	4a08      	ldr	r2, [pc, #32]	; (80046c8 <UART_SetConfig+0x2d4>)
 80046a8:	fba2 2303 	umull	r2, r3, r2, r3
 80046ac:	095b      	lsrs	r3, r3, #5
 80046ae:	f003 0207 	and.w	r2, r3, #7
 80046b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	4422      	add	r2, r4
 80046ba:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80046bc:	e105      	b.n	80048ca <UART_SetConfig+0x4d6>
 80046be:	bf00      	nop
 80046c0:	40011000 	.word	0x40011000
 80046c4:	40011400 	.word	0x40011400
 80046c8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80046cc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80046d0:	2200      	movs	r2, #0
 80046d2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80046d6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80046da:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80046de:	4642      	mov	r2, r8
 80046e0:	464b      	mov	r3, r9
 80046e2:	1891      	adds	r1, r2, r2
 80046e4:	6239      	str	r1, [r7, #32]
 80046e6:	415b      	adcs	r3, r3
 80046e8:	627b      	str	r3, [r7, #36]	; 0x24
 80046ea:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80046ee:	4641      	mov	r1, r8
 80046f0:	1854      	adds	r4, r2, r1
 80046f2:	4649      	mov	r1, r9
 80046f4:	eb43 0501 	adc.w	r5, r3, r1
 80046f8:	f04f 0200 	mov.w	r2, #0
 80046fc:	f04f 0300 	mov.w	r3, #0
 8004700:	00eb      	lsls	r3, r5, #3
 8004702:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004706:	00e2      	lsls	r2, r4, #3
 8004708:	4614      	mov	r4, r2
 800470a:	461d      	mov	r5, r3
 800470c:	4643      	mov	r3, r8
 800470e:	18e3      	adds	r3, r4, r3
 8004710:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004714:	464b      	mov	r3, r9
 8004716:	eb45 0303 	adc.w	r3, r5, r3
 800471a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800471e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004722:	685b      	ldr	r3, [r3, #4]
 8004724:	2200      	movs	r2, #0
 8004726:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800472a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800472e:	f04f 0200 	mov.w	r2, #0
 8004732:	f04f 0300 	mov.w	r3, #0
 8004736:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800473a:	4629      	mov	r1, r5
 800473c:	008b      	lsls	r3, r1, #2
 800473e:	4621      	mov	r1, r4
 8004740:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004744:	4621      	mov	r1, r4
 8004746:	008a      	lsls	r2, r1, #2
 8004748:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800474c:	f7fc fa86 	bl	8000c5c <__aeabi_uldivmod>
 8004750:	4602      	mov	r2, r0
 8004752:	460b      	mov	r3, r1
 8004754:	4b60      	ldr	r3, [pc, #384]	; (80048d8 <UART_SetConfig+0x4e4>)
 8004756:	fba3 2302 	umull	r2, r3, r3, r2
 800475a:	095b      	lsrs	r3, r3, #5
 800475c:	011c      	lsls	r4, r3, #4
 800475e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004762:	2200      	movs	r2, #0
 8004764:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004768:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800476c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004770:	4642      	mov	r2, r8
 8004772:	464b      	mov	r3, r9
 8004774:	1891      	adds	r1, r2, r2
 8004776:	61b9      	str	r1, [r7, #24]
 8004778:	415b      	adcs	r3, r3
 800477a:	61fb      	str	r3, [r7, #28]
 800477c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004780:	4641      	mov	r1, r8
 8004782:	1851      	adds	r1, r2, r1
 8004784:	6139      	str	r1, [r7, #16]
 8004786:	4649      	mov	r1, r9
 8004788:	414b      	adcs	r3, r1
 800478a:	617b      	str	r3, [r7, #20]
 800478c:	f04f 0200 	mov.w	r2, #0
 8004790:	f04f 0300 	mov.w	r3, #0
 8004794:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004798:	4659      	mov	r1, fp
 800479a:	00cb      	lsls	r3, r1, #3
 800479c:	4651      	mov	r1, sl
 800479e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80047a2:	4651      	mov	r1, sl
 80047a4:	00ca      	lsls	r2, r1, #3
 80047a6:	4610      	mov	r0, r2
 80047a8:	4619      	mov	r1, r3
 80047aa:	4603      	mov	r3, r0
 80047ac:	4642      	mov	r2, r8
 80047ae:	189b      	adds	r3, r3, r2
 80047b0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80047b4:	464b      	mov	r3, r9
 80047b6:	460a      	mov	r2, r1
 80047b8:	eb42 0303 	adc.w	r3, r2, r3
 80047bc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80047c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047c4:	685b      	ldr	r3, [r3, #4]
 80047c6:	2200      	movs	r2, #0
 80047c8:	67bb      	str	r3, [r7, #120]	; 0x78
 80047ca:	67fa      	str	r2, [r7, #124]	; 0x7c
 80047cc:	f04f 0200 	mov.w	r2, #0
 80047d0:	f04f 0300 	mov.w	r3, #0
 80047d4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80047d8:	4649      	mov	r1, r9
 80047da:	008b      	lsls	r3, r1, #2
 80047dc:	4641      	mov	r1, r8
 80047de:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80047e2:	4641      	mov	r1, r8
 80047e4:	008a      	lsls	r2, r1, #2
 80047e6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80047ea:	f7fc fa37 	bl	8000c5c <__aeabi_uldivmod>
 80047ee:	4602      	mov	r2, r0
 80047f0:	460b      	mov	r3, r1
 80047f2:	4b39      	ldr	r3, [pc, #228]	; (80048d8 <UART_SetConfig+0x4e4>)
 80047f4:	fba3 1302 	umull	r1, r3, r3, r2
 80047f8:	095b      	lsrs	r3, r3, #5
 80047fa:	2164      	movs	r1, #100	; 0x64
 80047fc:	fb01 f303 	mul.w	r3, r1, r3
 8004800:	1ad3      	subs	r3, r2, r3
 8004802:	011b      	lsls	r3, r3, #4
 8004804:	3332      	adds	r3, #50	; 0x32
 8004806:	4a34      	ldr	r2, [pc, #208]	; (80048d8 <UART_SetConfig+0x4e4>)
 8004808:	fba2 2303 	umull	r2, r3, r2, r3
 800480c:	095b      	lsrs	r3, r3, #5
 800480e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004812:	441c      	add	r4, r3
 8004814:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004818:	2200      	movs	r2, #0
 800481a:	673b      	str	r3, [r7, #112]	; 0x70
 800481c:	677a      	str	r2, [r7, #116]	; 0x74
 800481e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004822:	4642      	mov	r2, r8
 8004824:	464b      	mov	r3, r9
 8004826:	1891      	adds	r1, r2, r2
 8004828:	60b9      	str	r1, [r7, #8]
 800482a:	415b      	adcs	r3, r3
 800482c:	60fb      	str	r3, [r7, #12]
 800482e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004832:	4641      	mov	r1, r8
 8004834:	1851      	adds	r1, r2, r1
 8004836:	6039      	str	r1, [r7, #0]
 8004838:	4649      	mov	r1, r9
 800483a:	414b      	adcs	r3, r1
 800483c:	607b      	str	r3, [r7, #4]
 800483e:	f04f 0200 	mov.w	r2, #0
 8004842:	f04f 0300 	mov.w	r3, #0
 8004846:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800484a:	4659      	mov	r1, fp
 800484c:	00cb      	lsls	r3, r1, #3
 800484e:	4651      	mov	r1, sl
 8004850:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004854:	4651      	mov	r1, sl
 8004856:	00ca      	lsls	r2, r1, #3
 8004858:	4610      	mov	r0, r2
 800485a:	4619      	mov	r1, r3
 800485c:	4603      	mov	r3, r0
 800485e:	4642      	mov	r2, r8
 8004860:	189b      	adds	r3, r3, r2
 8004862:	66bb      	str	r3, [r7, #104]	; 0x68
 8004864:	464b      	mov	r3, r9
 8004866:	460a      	mov	r2, r1
 8004868:	eb42 0303 	adc.w	r3, r2, r3
 800486c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800486e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004872:	685b      	ldr	r3, [r3, #4]
 8004874:	2200      	movs	r2, #0
 8004876:	663b      	str	r3, [r7, #96]	; 0x60
 8004878:	667a      	str	r2, [r7, #100]	; 0x64
 800487a:	f04f 0200 	mov.w	r2, #0
 800487e:	f04f 0300 	mov.w	r3, #0
 8004882:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004886:	4649      	mov	r1, r9
 8004888:	008b      	lsls	r3, r1, #2
 800488a:	4641      	mov	r1, r8
 800488c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004890:	4641      	mov	r1, r8
 8004892:	008a      	lsls	r2, r1, #2
 8004894:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004898:	f7fc f9e0 	bl	8000c5c <__aeabi_uldivmod>
 800489c:	4602      	mov	r2, r0
 800489e:	460b      	mov	r3, r1
 80048a0:	4b0d      	ldr	r3, [pc, #52]	; (80048d8 <UART_SetConfig+0x4e4>)
 80048a2:	fba3 1302 	umull	r1, r3, r3, r2
 80048a6:	095b      	lsrs	r3, r3, #5
 80048a8:	2164      	movs	r1, #100	; 0x64
 80048aa:	fb01 f303 	mul.w	r3, r1, r3
 80048ae:	1ad3      	subs	r3, r2, r3
 80048b0:	011b      	lsls	r3, r3, #4
 80048b2:	3332      	adds	r3, #50	; 0x32
 80048b4:	4a08      	ldr	r2, [pc, #32]	; (80048d8 <UART_SetConfig+0x4e4>)
 80048b6:	fba2 2303 	umull	r2, r3, r2, r3
 80048ba:	095b      	lsrs	r3, r3, #5
 80048bc:	f003 020f 	and.w	r2, r3, #15
 80048c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	4422      	add	r2, r4
 80048c8:	609a      	str	r2, [r3, #8]
}
 80048ca:	bf00      	nop
 80048cc:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80048d0:	46bd      	mov	sp, r7
 80048d2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80048d6:	bf00      	nop
 80048d8:	51eb851f 	.word	0x51eb851f

080048dc <__errno>:
 80048dc:	4b01      	ldr	r3, [pc, #4]	; (80048e4 <__errno+0x8>)
 80048de:	6818      	ldr	r0, [r3, #0]
 80048e0:	4770      	bx	lr
 80048e2:	bf00      	nop
 80048e4:	2000000c 	.word	0x2000000c

080048e8 <__libc_init_array>:
 80048e8:	b570      	push	{r4, r5, r6, lr}
 80048ea:	4d0d      	ldr	r5, [pc, #52]	; (8004920 <__libc_init_array+0x38>)
 80048ec:	4c0d      	ldr	r4, [pc, #52]	; (8004924 <__libc_init_array+0x3c>)
 80048ee:	1b64      	subs	r4, r4, r5
 80048f0:	10a4      	asrs	r4, r4, #2
 80048f2:	2600      	movs	r6, #0
 80048f4:	42a6      	cmp	r6, r4
 80048f6:	d109      	bne.n	800490c <__libc_init_array+0x24>
 80048f8:	4d0b      	ldr	r5, [pc, #44]	; (8004928 <__libc_init_array+0x40>)
 80048fa:	4c0c      	ldr	r4, [pc, #48]	; (800492c <__libc_init_array+0x44>)
 80048fc:	f001 fcda 	bl	80062b4 <_init>
 8004900:	1b64      	subs	r4, r4, r5
 8004902:	10a4      	asrs	r4, r4, #2
 8004904:	2600      	movs	r6, #0
 8004906:	42a6      	cmp	r6, r4
 8004908:	d105      	bne.n	8004916 <__libc_init_array+0x2e>
 800490a:	bd70      	pop	{r4, r5, r6, pc}
 800490c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004910:	4798      	blx	r3
 8004912:	3601      	adds	r6, #1
 8004914:	e7ee      	b.n	80048f4 <__libc_init_array+0xc>
 8004916:	f855 3b04 	ldr.w	r3, [r5], #4
 800491a:	4798      	blx	r3
 800491c:	3601      	adds	r6, #1
 800491e:	e7f2      	b.n	8004906 <__libc_init_array+0x1e>
 8004920:	08006518 	.word	0x08006518
 8004924:	08006518 	.word	0x08006518
 8004928:	08006518 	.word	0x08006518
 800492c:	0800651c 	.word	0x0800651c

08004930 <memset>:
 8004930:	4402      	add	r2, r0
 8004932:	4603      	mov	r3, r0
 8004934:	4293      	cmp	r3, r2
 8004936:	d100      	bne.n	800493a <memset+0xa>
 8004938:	4770      	bx	lr
 800493a:	f803 1b01 	strb.w	r1, [r3], #1
 800493e:	e7f9      	b.n	8004934 <memset+0x4>

08004940 <siprintf>:
 8004940:	b40e      	push	{r1, r2, r3}
 8004942:	b500      	push	{lr}
 8004944:	b09c      	sub	sp, #112	; 0x70
 8004946:	ab1d      	add	r3, sp, #116	; 0x74
 8004948:	9002      	str	r0, [sp, #8]
 800494a:	9006      	str	r0, [sp, #24]
 800494c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004950:	4809      	ldr	r0, [pc, #36]	; (8004978 <siprintf+0x38>)
 8004952:	9107      	str	r1, [sp, #28]
 8004954:	9104      	str	r1, [sp, #16]
 8004956:	4909      	ldr	r1, [pc, #36]	; (800497c <siprintf+0x3c>)
 8004958:	f853 2b04 	ldr.w	r2, [r3], #4
 800495c:	9105      	str	r1, [sp, #20]
 800495e:	6800      	ldr	r0, [r0, #0]
 8004960:	9301      	str	r3, [sp, #4]
 8004962:	a902      	add	r1, sp, #8
 8004964:	f000 f868 	bl	8004a38 <_svfiprintf_r>
 8004968:	9b02      	ldr	r3, [sp, #8]
 800496a:	2200      	movs	r2, #0
 800496c:	701a      	strb	r2, [r3, #0]
 800496e:	b01c      	add	sp, #112	; 0x70
 8004970:	f85d eb04 	ldr.w	lr, [sp], #4
 8004974:	b003      	add	sp, #12
 8004976:	4770      	bx	lr
 8004978:	2000000c 	.word	0x2000000c
 800497c:	ffff0208 	.word	0xffff0208

08004980 <__ssputs_r>:
 8004980:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004984:	688e      	ldr	r6, [r1, #8]
 8004986:	429e      	cmp	r6, r3
 8004988:	4682      	mov	sl, r0
 800498a:	460c      	mov	r4, r1
 800498c:	4690      	mov	r8, r2
 800498e:	461f      	mov	r7, r3
 8004990:	d838      	bhi.n	8004a04 <__ssputs_r+0x84>
 8004992:	898a      	ldrh	r2, [r1, #12]
 8004994:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004998:	d032      	beq.n	8004a00 <__ssputs_r+0x80>
 800499a:	6825      	ldr	r5, [r4, #0]
 800499c:	6909      	ldr	r1, [r1, #16]
 800499e:	eba5 0901 	sub.w	r9, r5, r1
 80049a2:	6965      	ldr	r5, [r4, #20]
 80049a4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80049a8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80049ac:	3301      	adds	r3, #1
 80049ae:	444b      	add	r3, r9
 80049b0:	106d      	asrs	r5, r5, #1
 80049b2:	429d      	cmp	r5, r3
 80049b4:	bf38      	it	cc
 80049b6:	461d      	movcc	r5, r3
 80049b8:	0553      	lsls	r3, r2, #21
 80049ba:	d531      	bpl.n	8004a20 <__ssputs_r+0xa0>
 80049bc:	4629      	mov	r1, r5
 80049be:	f000 fb63 	bl	8005088 <_malloc_r>
 80049c2:	4606      	mov	r6, r0
 80049c4:	b950      	cbnz	r0, 80049dc <__ssputs_r+0x5c>
 80049c6:	230c      	movs	r3, #12
 80049c8:	f8ca 3000 	str.w	r3, [sl]
 80049cc:	89a3      	ldrh	r3, [r4, #12]
 80049ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80049d2:	81a3      	strh	r3, [r4, #12]
 80049d4:	f04f 30ff 	mov.w	r0, #4294967295
 80049d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80049dc:	6921      	ldr	r1, [r4, #16]
 80049de:	464a      	mov	r2, r9
 80049e0:	f000 fabe 	bl	8004f60 <memcpy>
 80049e4:	89a3      	ldrh	r3, [r4, #12]
 80049e6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80049ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80049ee:	81a3      	strh	r3, [r4, #12]
 80049f0:	6126      	str	r6, [r4, #16]
 80049f2:	6165      	str	r5, [r4, #20]
 80049f4:	444e      	add	r6, r9
 80049f6:	eba5 0509 	sub.w	r5, r5, r9
 80049fa:	6026      	str	r6, [r4, #0]
 80049fc:	60a5      	str	r5, [r4, #8]
 80049fe:	463e      	mov	r6, r7
 8004a00:	42be      	cmp	r6, r7
 8004a02:	d900      	bls.n	8004a06 <__ssputs_r+0x86>
 8004a04:	463e      	mov	r6, r7
 8004a06:	6820      	ldr	r0, [r4, #0]
 8004a08:	4632      	mov	r2, r6
 8004a0a:	4641      	mov	r1, r8
 8004a0c:	f000 fab6 	bl	8004f7c <memmove>
 8004a10:	68a3      	ldr	r3, [r4, #8]
 8004a12:	1b9b      	subs	r3, r3, r6
 8004a14:	60a3      	str	r3, [r4, #8]
 8004a16:	6823      	ldr	r3, [r4, #0]
 8004a18:	4433      	add	r3, r6
 8004a1a:	6023      	str	r3, [r4, #0]
 8004a1c:	2000      	movs	r0, #0
 8004a1e:	e7db      	b.n	80049d8 <__ssputs_r+0x58>
 8004a20:	462a      	mov	r2, r5
 8004a22:	f000 fba5 	bl	8005170 <_realloc_r>
 8004a26:	4606      	mov	r6, r0
 8004a28:	2800      	cmp	r0, #0
 8004a2a:	d1e1      	bne.n	80049f0 <__ssputs_r+0x70>
 8004a2c:	6921      	ldr	r1, [r4, #16]
 8004a2e:	4650      	mov	r0, sl
 8004a30:	f000 fabe 	bl	8004fb0 <_free_r>
 8004a34:	e7c7      	b.n	80049c6 <__ssputs_r+0x46>
	...

08004a38 <_svfiprintf_r>:
 8004a38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a3c:	4698      	mov	r8, r3
 8004a3e:	898b      	ldrh	r3, [r1, #12]
 8004a40:	061b      	lsls	r3, r3, #24
 8004a42:	b09d      	sub	sp, #116	; 0x74
 8004a44:	4607      	mov	r7, r0
 8004a46:	460d      	mov	r5, r1
 8004a48:	4614      	mov	r4, r2
 8004a4a:	d50e      	bpl.n	8004a6a <_svfiprintf_r+0x32>
 8004a4c:	690b      	ldr	r3, [r1, #16]
 8004a4e:	b963      	cbnz	r3, 8004a6a <_svfiprintf_r+0x32>
 8004a50:	2140      	movs	r1, #64	; 0x40
 8004a52:	f000 fb19 	bl	8005088 <_malloc_r>
 8004a56:	6028      	str	r0, [r5, #0]
 8004a58:	6128      	str	r0, [r5, #16]
 8004a5a:	b920      	cbnz	r0, 8004a66 <_svfiprintf_r+0x2e>
 8004a5c:	230c      	movs	r3, #12
 8004a5e:	603b      	str	r3, [r7, #0]
 8004a60:	f04f 30ff 	mov.w	r0, #4294967295
 8004a64:	e0d1      	b.n	8004c0a <_svfiprintf_r+0x1d2>
 8004a66:	2340      	movs	r3, #64	; 0x40
 8004a68:	616b      	str	r3, [r5, #20]
 8004a6a:	2300      	movs	r3, #0
 8004a6c:	9309      	str	r3, [sp, #36]	; 0x24
 8004a6e:	2320      	movs	r3, #32
 8004a70:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004a74:	f8cd 800c 	str.w	r8, [sp, #12]
 8004a78:	2330      	movs	r3, #48	; 0x30
 8004a7a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8004c24 <_svfiprintf_r+0x1ec>
 8004a7e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004a82:	f04f 0901 	mov.w	r9, #1
 8004a86:	4623      	mov	r3, r4
 8004a88:	469a      	mov	sl, r3
 8004a8a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004a8e:	b10a      	cbz	r2, 8004a94 <_svfiprintf_r+0x5c>
 8004a90:	2a25      	cmp	r2, #37	; 0x25
 8004a92:	d1f9      	bne.n	8004a88 <_svfiprintf_r+0x50>
 8004a94:	ebba 0b04 	subs.w	fp, sl, r4
 8004a98:	d00b      	beq.n	8004ab2 <_svfiprintf_r+0x7a>
 8004a9a:	465b      	mov	r3, fp
 8004a9c:	4622      	mov	r2, r4
 8004a9e:	4629      	mov	r1, r5
 8004aa0:	4638      	mov	r0, r7
 8004aa2:	f7ff ff6d 	bl	8004980 <__ssputs_r>
 8004aa6:	3001      	adds	r0, #1
 8004aa8:	f000 80aa 	beq.w	8004c00 <_svfiprintf_r+0x1c8>
 8004aac:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004aae:	445a      	add	r2, fp
 8004ab0:	9209      	str	r2, [sp, #36]	; 0x24
 8004ab2:	f89a 3000 	ldrb.w	r3, [sl]
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	f000 80a2 	beq.w	8004c00 <_svfiprintf_r+0x1c8>
 8004abc:	2300      	movs	r3, #0
 8004abe:	f04f 32ff 	mov.w	r2, #4294967295
 8004ac2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004ac6:	f10a 0a01 	add.w	sl, sl, #1
 8004aca:	9304      	str	r3, [sp, #16]
 8004acc:	9307      	str	r3, [sp, #28]
 8004ace:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004ad2:	931a      	str	r3, [sp, #104]	; 0x68
 8004ad4:	4654      	mov	r4, sl
 8004ad6:	2205      	movs	r2, #5
 8004ad8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004adc:	4851      	ldr	r0, [pc, #324]	; (8004c24 <_svfiprintf_r+0x1ec>)
 8004ade:	f7fb fb7f 	bl	80001e0 <memchr>
 8004ae2:	9a04      	ldr	r2, [sp, #16]
 8004ae4:	b9d8      	cbnz	r0, 8004b1e <_svfiprintf_r+0xe6>
 8004ae6:	06d0      	lsls	r0, r2, #27
 8004ae8:	bf44      	itt	mi
 8004aea:	2320      	movmi	r3, #32
 8004aec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004af0:	0711      	lsls	r1, r2, #28
 8004af2:	bf44      	itt	mi
 8004af4:	232b      	movmi	r3, #43	; 0x2b
 8004af6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004afa:	f89a 3000 	ldrb.w	r3, [sl]
 8004afe:	2b2a      	cmp	r3, #42	; 0x2a
 8004b00:	d015      	beq.n	8004b2e <_svfiprintf_r+0xf6>
 8004b02:	9a07      	ldr	r2, [sp, #28]
 8004b04:	4654      	mov	r4, sl
 8004b06:	2000      	movs	r0, #0
 8004b08:	f04f 0c0a 	mov.w	ip, #10
 8004b0c:	4621      	mov	r1, r4
 8004b0e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004b12:	3b30      	subs	r3, #48	; 0x30
 8004b14:	2b09      	cmp	r3, #9
 8004b16:	d94e      	bls.n	8004bb6 <_svfiprintf_r+0x17e>
 8004b18:	b1b0      	cbz	r0, 8004b48 <_svfiprintf_r+0x110>
 8004b1a:	9207      	str	r2, [sp, #28]
 8004b1c:	e014      	b.n	8004b48 <_svfiprintf_r+0x110>
 8004b1e:	eba0 0308 	sub.w	r3, r0, r8
 8004b22:	fa09 f303 	lsl.w	r3, r9, r3
 8004b26:	4313      	orrs	r3, r2
 8004b28:	9304      	str	r3, [sp, #16]
 8004b2a:	46a2      	mov	sl, r4
 8004b2c:	e7d2      	b.n	8004ad4 <_svfiprintf_r+0x9c>
 8004b2e:	9b03      	ldr	r3, [sp, #12]
 8004b30:	1d19      	adds	r1, r3, #4
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	9103      	str	r1, [sp, #12]
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	bfbb      	ittet	lt
 8004b3a:	425b      	neglt	r3, r3
 8004b3c:	f042 0202 	orrlt.w	r2, r2, #2
 8004b40:	9307      	strge	r3, [sp, #28]
 8004b42:	9307      	strlt	r3, [sp, #28]
 8004b44:	bfb8      	it	lt
 8004b46:	9204      	strlt	r2, [sp, #16]
 8004b48:	7823      	ldrb	r3, [r4, #0]
 8004b4a:	2b2e      	cmp	r3, #46	; 0x2e
 8004b4c:	d10c      	bne.n	8004b68 <_svfiprintf_r+0x130>
 8004b4e:	7863      	ldrb	r3, [r4, #1]
 8004b50:	2b2a      	cmp	r3, #42	; 0x2a
 8004b52:	d135      	bne.n	8004bc0 <_svfiprintf_r+0x188>
 8004b54:	9b03      	ldr	r3, [sp, #12]
 8004b56:	1d1a      	adds	r2, r3, #4
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	9203      	str	r2, [sp, #12]
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	bfb8      	it	lt
 8004b60:	f04f 33ff 	movlt.w	r3, #4294967295
 8004b64:	3402      	adds	r4, #2
 8004b66:	9305      	str	r3, [sp, #20]
 8004b68:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004c34 <_svfiprintf_r+0x1fc>
 8004b6c:	7821      	ldrb	r1, [r4, #0]
 8004b6e:	2203      	movs	r2, #3
 8004b70:	4650      	mov	r0, sl
 8004b72:	f7fb fb35 	bl	80001e0 <memchr>
 8004b76:	b140      	cbz	r0, 8004b8a <_svfiprintf_r+0x152>
 8004b78:	2340      	movs	r3, #64	; 0x40
 8004b7a:	eba0 000a 	sub.w	r0, r0, sl
 8004b7e:	fa03 f000 	lsl.w	r0, r3, r0
 8004b82:	9b04      	ldr	r3, [sp, #16]
 8004b84:	4303      	orrs	r3, r0
 8004b86:	3401      	adds	r4, #1
 8004b88:	9304      	str	r3, [sp, #16]
 8004b8a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004b8e:	4826      	ldr	r0, [pc, #152]	; (8004c28 <_svfiprintf_r+0x1f0>)
 8004b90:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004b94:	2206      	movs	r2, #6
 8004b96:	f7fb fb23 	bl	80001e0 <memchr>
 8004b9a:	2800      	cmp	r0, #0
 8004b9c:	d038      	beq.n	8004c10 <_svfiprintf_r+0x1d8>
 8004b9e:	4b23      	ldr	r3, [pc, #140]	; (8004c2c <_svfiprintf_r+0x1f4>)
 8004ba0:	bb1b      	cbnz	r3, 8004bea <_svfiprintf_r+0x1b2>
 8004ba2:	9b03      	ldr	r3, [sp, #12]
 8004ba4:	3307      	adds	r3, #7
 8004ba6:	f023 0307 	bic.w	r3, r3, #7
 8004baa:	3308      	adds	r3, #8
 8004bac:	9303      	str	r3, [sp, #12]
 8004bae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004bb0:	4433      	add	r3, r6
 8004bb2:	9309      	str	r3, [sp, #36]	; 0x24
 8004bb4:	e767      	b.n	8004a86 <_svfiprintf_r+0x4e>
 8004bb6:	fb0c 3202 	mla	r2, ip, r2, r3
 8004bba:	460c      	mov	r4, r1
 8004bbc:	2001      	movs	r0, #1
 8004bbe:	e7a5      	b.n	8004b0c <_svfiprintf_r+0xd4>
 8004bc0:	2300      	movs	r3, #0
 8004bc2:	3401      	adds	r4, #1
 8004bc4:	9305      	str	r3, [sp, #20]
 8004bc6:	4619      	mov	r1, r3
 8004bc8:	f04f 0c0a 	mov.w	ip, #10
 8004bcc:	4620      	mov	r0, r4
 8004bce:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004bd2:	3a30      	subs	r2, #48	; 0x30
 8004bd4:	2a09      	cmp	r2, #9
 8004bd6:	d903      	bls.n	8004be0 <_svfiprintf_r+0x1a8>
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d0c5      	beq.n	8004b68 <_svfiprintf_r+0x130>
 8004bdc:	9105      	str	r1, [sp, #20]
 8004bde:	e7c3      	b.n	8004b68 <_svfiprintf_r+0x130>
 8004be0:	fb0c 2101 	mla	r1, ip, r1, r2
 8004be4:	4604      	mov	r4, r0
 8004be6:	2301      	movs	r3, #1
 8004be8:	e7f0      	b.n	8004bcc <_svfiprintf_r+0x194>
 8004bea:	ab03      	add	r3, sp, #12
 8004bec:	9300      	str	r3, [sp, #0]
 8004bee:	462a      	mov	r2, r5
 8004bf0:	4b0f      	ldr	r3, [pc, #60]	; (8004c30 <_svfiprintf_r+0x1f8>)
 8004bf2:	a904      	add	r1, sp, #16
 8004bf4:	4638      	mov	r0, r7
 8004bf6:	f3af 8000 	nop.w
 8004bfa:	1c42      	adds	r2, r0, #1
 8004bfc:	4606      	mov	r6, r0
 8004bfe:	d1d6      	bne.n	8004bae <_svfiprintf_r+0x176>
 8004c00:	89ab      	ldrh	r3, [r5, #12]
 8004c02:	065b      	lsls	r3, r3, #25
 8004c04:	f53f af2c 	bmi.w	8004a60 <_svfiprintf_r+0x28>
 8004c08:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004c0a:	b01d      	add	sp, #116	; 0x74
 8004c0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c10:	ab03      	add	r3, sp, #12
 8004c12:	9300      	str	r3, [sp, #0]
 8004c14:	462a      	mov	r2, r5
 8004c16:	4b06      	ldr	r3, [pc, #24]	; (8004c30 <_svfiprintf_r+0x1f8>)
 8004c18:	a904      	add	r1, sp, #16
 8004c1a:	4638      	mov	r0, r7
 8004c1c:	f000 f87a 	bl	8004d14 <_printf_i>
 8004c20:	e7eb      	b.n	8004bfa <_svfiprintf_r+0x1c2>
 8004c22:	bf00      	nop
 8004c24:	08006300 	.word	0x08006300
 8004c28:	0800630a 	.word	0x0800630a
 8004c2c:	00000000 	.word	0x00000000
 8004c30:	08004981 	.word	0x08004981
 8004c34:	08006306 	.word	0x08006306

08004c38 <_printf_common>:
 8004c38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004c3c:	4616      	mov	r6, r2
 8004c3e:	4699      	mov	r9, r3
 8004c40:	688a      	ldr	r2, [r1, #8]
 8004c42:	690b      	ldr	r3, [r1, #16]
 8004c44:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004c48:	4293      	cmp	r3, r2
 8004c4a:	bfb8      	it	lt
 8004c4c:	4613      	movlt	r3, r2
 8004c4e:	6033      	str	r3, [r6, #0]
 8004c50:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004c54:	4607      	mov	r7, r0
 8004c56:	460c      	mov	r4, r1
 8004c58:	b10a      	cbz	r2, 8004c5e <_printf_common+0x26>
 8004c5a:	3301      	adds	r3, #1
 8004c5c:	6033      	str	r3, [r6, #0]
 8004c5e:	6823      	ldr	r3, [r4, #0]
 8004c60:	0699      	lsls	r1, r3, #26
 8004c62:	bf42      	ittt	mi
 8004c64:	6833      	ldrmi	r3, [r6, #0]
 8004c66:	3302      	addmi	r3, #2
 8004c68:	6033      	strmi	r3, [r6, #0]
 8004c6a:	6825      	ldr	r5, [r4, #0]
 8004c6c:	f015 0506 	ands.w	r5, r5, #6
 8004c70:	d106      	bne.n	8004c80 <_printf_common+0x48>
 8004c72:	f104 0a19 	add.w	sl, r4, #25
 8004c76:	68e3      	ldr	r3, [r4, #12]
 8004c78:	6832      	ldr	r2, [r6, #0]
 8004c7a:	1a9b      	subs	r3, r3, r2
 8004c7c:	42ab      	cmp	r3, r5
 8004c7e:	dc26      	bgt.n	8004cce <_printf_common+0x96>
 8004c80:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004c84:	1e13      	subs	r3, r2, #0
 8004c86:	6822      	ldr	r2, [r4, #0]
 8004c88:	bf18      	it	ne
 8004c8a:	2301      	movne	r3, #1
 8004c8c:	0692      	lsls	r2, r2, #26
 8004c8e:	d42b      	bmi.n	8004ce8 <_printf_common+0xb0>
 8004c90:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004c94:	4649      	mov	r1, r9
 8004c96:	4638      	mov	r0, r7
 8004c98:	47c0      	blx	r8
 8004c9a:	3001      	adds	r0, #1
 8004c9c:	d01e      	beq.n	8004cdc <_printf_common+0xa4>
 8004c9e:	6823      	ldr	r3, [r4, #0]
 8004ca0:	68e5      	ldr	r5, [r4, #12]
 8004ca2:	6832      	ldr	r2, [r6, #0]
 8004ca4:	f003 0306 	and.w	r3, r3, #6
 8004ca8:	2b04      	cmp	r3, #4
 8004caa:	bf08      	it	eq
 8004cac:	1aad      	subeq	r5, r5, r2
 8004cae:	68a3      	ldr	r3, [r4, #8]
 8004cb0:	6922      	ldr	r2, [r4, #16]
 8004cb2:	bf0c      	ite	eq
 8004cb4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004cb8:	2500      	movne	r5, #0
 8004cba:	4293      	cmp	r3, r2
 8004cbc:	bfc4      	itt	gt
 8004cbe:	1a9b      	subgt	r3, r3, r2
 8004cc0:	18ed      	addgt	r5, r5, r3
 8004cc2:	2600      	movs	r6, #0
 8004cc4:	341a      	adds	r4, #26
 8004cc6:	42b5      	cmp	r5, r6
 8004cc8:	d11a      	bne.n	8004d00 <_printf_common+0xc8>
 8004cca:	2000      	movs	r0, #0
 8004ccc:	e008      	b.n	8004ce0 <_printf_common+0xa8>
 8004cce:	2301      	movs	r3, #1
 8004cd0:	4652      	mov	r2, sl
 8004cd2:	4649      	mov	r1, r9
 8004cd4:	4638      	mov	r0, r7
 8004cd6:	47c0      	blx	r8
 8004cd8:	3001      	adds	r0, #1
 8004cda:	d103      	bne.n	8004ce4 <_printf_common+0xac>
 8004cdc:	f04f 30ff 	mov.w	r0, #4294967295
 8004ce0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ce4:	3501      	adds	r5, #1
 8004ce6:	e7c6      	b.n	8004c76 <_printf_common+0x3e>
 8004ce8:	18e1      	adds	r1, r4, r3
 8004cea:	1c5a      	adds	r2, r3, #1
 8004cec:	2030      	movs	r0, #48	; 0x30
 8004cee:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004cf2:	4422      	add	r2, r4
 8004cf4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004cf8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004cfc:	3302      	adds	r3, #2
 8004cfe:	e7c7      	b.n	8004c90 <_printf_common+0x58>
 8004d00:	2301      	movs	r3, #1
 8004d02:	4622      	mov	r2, r4
 8004d04:	4649      	mov	r1, r9
 8004d06:	4638      	mov	r0, r7
 8004d08:	47c0      	blx	r8
 8004d0a:	3001      	adds	r0, #1
 8004d0c:	d0e6      	beq.n	8004cdc <_printf_common+0xa4>
 8004d0e:	3601      	adds	r6, #1
 8004d10:	e7d9      	b.n	8004cc6 <_printf_common+0x8e>
	...

08004d14 <_printf_i>:
 8004d14:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004d18:	7e0f      	ldrb	r7, [r1, #24]
 8004d1a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004d1c:	2f78      	cmp	r7, #120	; 0x78
 8004d1e:	4691      	mov	r9, r2
 8004d20:	4680      	mov	r8, r0
 8004d22:	460c      	mov	r4, r1
 8004d24:	469a      	mov	sl, r3
 8004d26:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004d2a:	d807      	bhi.n	8004d3c <_printf_i+0x28>
 8004d2c:	2f62      	cmp	r7, #98	; 0x62
 8004d2e:	d80a      	bhi.n	8004d46 <_printf_i+0x32>
 8004d30:	2f00      	cmp	r7, #0
 8004d32:	f000 80d8 	beq.w	8004ee6 <_printf_i+0x1d2>
 8004d36:	2f58      	cmp	r7, #88	; 0x58
 8004d38:	f000 80a3 	beq.w	8004e82 <_printf_i+0x16e>
 8004d3c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004d40:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004d44:	e03a      	b.n	8004dbc <_printf_i+0xa8>
 8004d46:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004d4a:	2b15      	cmp	r3, #21
 8004d4c:	d8f6      	bhi.n	8004d3c <_printf_i+0x28>
 8004d4e:	a101      	add	r1, pc, #4	; (adr r1, 8004d54 <_printf_i+0x40>)
 8004d50:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004d54:	08004dad 	.word	0x08004dad
 8004d58:	08004dc1 	.word	0x08004dc1
 8004d5c:	08004d3d 	.word	0x08004d3d
 8004d60:	08004d3d 	.word	0x08004d3d
 8004d64:	08004d3d 	.word	0x08004d3d
 8004d68:	08004d3d 	.word	0x08004d3d
 8004d6c:	08004dc1 	.word	0x08004dc1
 8004d70:	08004d3d 	.word	0x08004d3d
 8004d74:	08004d3d 	.word	0x08004d3d
 8004d78:	08004d3d 	.word	0x08004d3d
 8004d7c:	08004d3d 	.word	0x08004d3d
 8004d80:	08004ecd 	.word	0x08004ecd
 8004d84:	08004df1 	.word	0x08004df1
 8004d88:	08004eaf 	.word	0x08004eaf
 8004d8c:	08004d3d 	.word	0x08004d3d
 8004d90:	08004d3d 	.word	0x08004d3d
 8004d94:	08004eef 	.word	0x08004eef
 8004d98:	08004d3d 	.word	0x08004d3d
 8004d9c:	08004df1 	.word	0x08004df1
 8004da0:	08004d3d 	.word	0x08004d3d
 8004da4:	08004d3d 	.word	0x08004d3d
 8004da8:	08004eb7 	.word	0x08004eb7
 8004dac:	682b      	ldr	r3, [r5, #0]
 8004dae:	1d1a      	adds	r2, r3, #4
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	602a      	str	r2, [r5, #0]
 8004db4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004db8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004dbc:	2301      	movs	r3, #1
 8004dbe:	e0a3      	b.n	8004f08 <_printf_i+0x1f4>
 8004dc0:	6820      	ldr	r0, [r4, #0]
 8004dc2:	6829      	ldr	r1, [r5, #0]
 8004dc4:	0606      	lsls	r6, r0, #24
 8004dc6:	f101 0304 	add.w	r3, r1, #4
 8004dca:	d50a      	bpl.n	8004de2 <_printf_i+0xce>
 8004dcc:	680e      	ldr	r6, [r1, #0]
 8004dce:	602b      	str	r3, [r5, #0]
 8004dd0:	2e00      	cmp	r6, #0
 8004dd2:	da03      	bge.n	8004ddc <_printf_i+0xc8>
 8004dd4:	232d      	movs	r3, #45	; 0x2d
 8004dd6:	4276      	negs	r6, r6
 8004dd8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004ddc:	485e      	ldr	r0, [pc, #376]	; (8004f58 <_printf_i+0x244>)
 8004dde:	230a      	movs	r3, #10
 8004de0:	e019      	b.n	8004e16 <_printf_i+0x102>
 8004de2:	680e      	ldr	r6, [r1, #0]
 8004de4:	602b      	str	r3, [r5, #0]
 8004de6:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004dea:	bf18      	it	ne
 8004dec:	b236      	sxthne	r6, r6
 8004dee:	e7ef      	b.n	8004dd0 <_printf_i+0xbc>
 8004df0:	682b      	ldr	r3, [r5, #0]
 8004df2:	6820      	ldr	r0, [r4, #0]
 8004df4:	1d19      	adds	r1, r3, #4
 8004df6:	6029      	str	r1, [r5, #0]
 8004df8:	0601      	lsls	r1, r0, #24
 8004dfa:	d501      	bpl.n	8004e00 <_printf_i+0xec>
 8004dfc:	681e      	ldr	r6, [r3, #0]
 8004dfe:	e002      	b.n	8004e06 <_printf_i+0xf2>
 8004e00:	0646      	lsls	r6, r0, #25
 8004e02:	d5fb      	bpl.n	8004dfc <_printf_i+0xe8>
 8004e04:	881e      	ldrh	r6, [r3, #0]
 8004e06:	4854      	ldr	r0, [pc, #336]	; (8004f58 <_printf_i+0x244>)
 8004e08:	2f6f      	cmp	r7, #111	; 0x6f
 8004e0a:	bf0c      	ite	eq
 8004e0c:	2308      	moveq	r3, #8
 8004e0e:	230a      	movne	r3, #10
 8004e10:	2100      	movs	r1, #0
 8004e12:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004e16:	6865      	ldr	r5, [r4, #4]
 8004e18:	60a5      	str	r5, [r4, #8]
 8004e1a:	2d00      	cmp	r5, #0
 8004e1c:	bfa2      	ittt	ge
 8004e1e:	6821      	ldrge	r1, [r4, #0]
 8004e20:	f021 0104 	bicge.w	r1, r1, #4
 8004e24:	6021      	strge	r1, [r4, #0]
 8004e26:	b90e      	cbnz	r6, 8004e2c <_printf_i+0x118>
 8004e28:	2d00      	cmp	r5, #0
 8004e2a:	d04d      	beq.n	8004ec8 <_printf_i+0x1b4>
 8004e2c:	4615      	mov	r5, r2
 8004e2e:	fbb6 f1f3 	udiv	r1, r6, r3
 8004e32:	fb03 6711 	mls	r7, r3, r1, r6
 8004e36:	5dc7      	ldrb	r7, [r0, r7]
 8004e38:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004e3c:	4637      	mov	r7, r6
 8004e3e:	42bb      	cmp	r3, r7
 8004e40:	460e      	mov	r6, r1
 8004e42:	d9f4      	bls.n	8004e2e <_printf_i+0x11a>
 8004e44:	2b08      	cmp	r3, #8
 8004e46:	d10b      	bne.n	8004e60 <_printf_i+0x14c>
 8004e48:	6823      	ldr	r3, [r4, #0]
 8004e4a:	07de      	lsls	r6, r3, #31
 8004e4c:	d508      	bpl.n	8004e60 <_printf_i+0x14c>
 8004e4e:	6923      	ldr	r3, [r4, #16]
 8004e50:	6861      	ldr	r1, [r4, #4]
 8004e52:	4299      	cmp	r1, r3
 8004e54:	bfde      	ittt	le
 8004e56:	2330      	movle	r3, #48	; 0x30
 8004e58:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004e5c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004e60:	1b52      	subs	r2, r2, r5
 8004e62:	6122      	str	r2, [r4, #16]
 8004e64:	f8cd a000 	str.w	sl, [sp]
 8004e68:	464b      	mov	r3, r9
 8004e6a:	aa03      	add	r2, sp, #12
 8004e6c:	4621      	mov	r1, r4
 8004e6e:	4640      	mov	r0, r8
 8004e70:	f7ff fee2 	bl	8004c38 <_printf_common>
 8004e74:	3001      	adds	r0, #1
 8004e76:	d14c      	bne.n	8004f12 <_printf_i+0x1fe>
 8004e78:	f04f 30ff 	mov.w	r0, #4294967295
 8004e7c:	b004      	add	sp, #16
 8004e7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e82:	4835      	ldr	r0, [pc, #212]	; (8004f58 <_printf_i+0x244>)
 8004e84:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004e88:	6829      	ldr	r1, [r5, #0]
 8004e8a:	6823      	ldr	r3, [r4, #0]
 8004e8c:	f851 6b04 	ldr.w	r6, [r1], #4
 8004e90:	6029      	str	r1, [r5, #0]
 8004e92:	061d      	lsls	r5, r3, #24
 8004e94:	d514      	bpl.n	8004ec0 <_printf_i+0x1ac>
 8004e96:	07df      	lsls	r7, r3, #31
 8004e98:	bf44      	itt	mi
 8004e9a:	f043 0320 	orrmi.w	r3, r3, #32
 8004e9e:	6023      	strmi	r3, [r4, #0]
 8004ea0:	b91e      	cbnz	r6, 8004eaa <_printf_i+0x196>
 8004ea2:	6823      	ldr	r3, [r4, #0]
 8004ea4:	f023 0320 	bic.w	r3, r3, #32
 8004ea8:	6023      	str	r3, [r4, #0]
 8004eaa:	2310      	movs	r3, #16
 8004eac:	e7b0      	b.n	8004e10 <_printf_i+0xfc>
 8004eae:	6823      	ldr	r3, [r4, #0]
 8004eb0:	f043 0320 	orr.w	r3, r3, #32
 8004eb4:	6023      	str	r3, [r4, #0]
 8004eb6:	2378      	movs	r3, #120	; 0x78
 8004eb8:	4828      	ldr	r0, [pc, #160]	; (8004f5c <_printf_i+0x248>)
 8004eba:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004ebe:	e7e3      	b.n	8004e88 <_printf_i+0x174>
 8004ec0:	0659      	lsls	r1, r3, #25
 8004ec2:	bf48      	it	mi
 8004ec4:	b2b6      	uxthmi	r6, r6
 8004ec6:	e7e6      	b.n	8004e96 <_printf_i+0x182>
 8004ec8:	4615      	mov	r5, r2
 8004eca:	e7bb      	b.n	8004e44 <_printf_i+0x130>
 8004ecc:	682b      	ldr	r3, [r5, #0]
 8004ece:	6826      	ldr	r6, [r4, #0]
 8004ed0:	6961      	ldr	r1, [r4, #20]
 8004ed2:	1d18      	adds	r0, r3, #4
 8004ed4:	6028      	str	r0, [r5, #0]
 8004ed6:	0635      	lsls	r5, r6, #24
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	d501      	bpl.n	8004ee0 <_printf_i+0x1cc>
 8004edc:	6019      	str	r1, [r3, #0]
 8004ede:	e002      	b.n	8004ee6 <_printf_i+0x1d2>
 8004ee0:	0670      	lsls	r0, r6, #25
 8004ee2:	d5fb      	bpl.n	8004edc <_printf_i+0x1c8>
 8004ee4:	8019      	strh	r1, [r3, #0]
 8004ee6:	2300      	movs	r3, #0
 8004ee8:	6123      	str	r3, [r4, #16]
 8004eea:	4615      	mov	r5, r2
 8004eec:	e7ba      	b.n	8004e64 <_printf_i+0x150>
 8004eee:	682b      	ldr	r3, [r5, #0]
 8004ef0:	1d1a      	adds	r2, r3, #4
 8004ef2:	602a      	str	r2, [r5, #0]
 8004ef4:	681d      	ldr	r5, [r3, #0]
 8004ef6:	6862      	ldr	r2, [r4, #4]
 8004ef8:	2100      	movs	r1, #0
 8004efa:	4628      	mov	r0, r5
 8004efc:	f7fb f970 	bl	80001e0 <memchr>
 8004f00:	b108      	cbz	r0, 8004f06 <_printf_i+0x1f2>
 8004f02:	1b40      	subs	r0, r0, r5
 8004f04:	6060      	str	r0, [r4, #4]
 8004f06:	6863      	ldr	r3, [r4, #4]
 8004f08:	6123      	str	r3, [r4, #16]
 8004f0a:	2300      	movs	r3, #0
 8004f0c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004f10:	e7a8      	b.n	8004e64 <_printf_i+0x150>
 8004f12:	6923      	ldr	r3, [r4, #16]
 8004f14:	462a      	mov	r2, r5
 8004f16:	4649      	mov	r1, r9
 8004f18:	4640      	mov	r0, r8
 8004f1a:	47d0      	blx	sl
 8004f1c:	3001      	adds	r0, #1
 8004f1e:	d0ab      	beq.n	8004e78 <_printf_i+0x164>
 8004f20:	6823      	ldr	r3, [r4, #0]
 8004f22:	079b      	lsls	r3, r3, #30
 8004f24:	d413      	bmi.n	8004f4e <_printf_i+0x23a>
 8004f26:	68e0      	ldr	r0, [r4, #12]
 8004f28:	9b03      	ldr	r3, [sp, #12]
 8004f2a:	4298      	cmp	r0, r3
 8004f2c:	bfb8      	it	lt
 8004f2e:	4618      	movlt	r0, r3
 8004f30:	e7a4      	b.n	8004e7c <_printf_i+0x168>
 8004f32:	2301      	movs	r3, #1
 8004f34:	4632      	mov	r2, r6
 8004f36:	4649      	mov	r1, r9
 8004f38:	4640      	mov	r0, r8
 8004f3a:	47d0      	blx	sl
 8004f3c:	3001      	adds	r0, #1
 8004f3e:	d09b      	beq.n	8004e78 <_printf_i+0x164>
 8004f40:	3501      	adds	r5, #1
 8004f42:	68e3      	ldr	r3, [r4, #12]
 8004f44:	9903      	ldr	r1, [sp, #12]
 8004f46:	1a5b      	subs	r3, r3, r1
 8004f48:	42ab      	cmp	r3, r5
 8004f4a:	dcf2      	bgt.n	8004f32 <_printf_i+0x21e>
 8004f4c:	e7eb      	b.n	8004f26 <_printf_i+0x212>
 8004f4e:	2500      	movs	r5, #0
 8004f50:	f104 0619 	add.w	r6, r4, #25
 8004f54:	e7f5      	b.n	8004f42 <_printf_i+0x22e>
 8004f56:	bf00      	nop
 8004f58:	08006311 	.word	0x08006311
 8004f5c:	08006322 	.word	0x08006322

08004f60 <memcpy>:
 8004f60:	440a      	add	r2, r1
 8004f62:	4291      	cmp	r1, r2
 8004f64:	f100 33ff 	add.w	r3, r0, #4294967295
 8004f68:	d100      	bne.n	8004f6c <memcpy+0xc>
 8004f6a:	4770      	bx	lr
 8004f6c:	b510      	push	{r4, lr}
 8004f6e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004f72:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004f76:	4291      	cmp	r1, r2
 8004f78:	d1f9      	bne.n	8004f6e <memcpy+0xe>
 8004f7a:	bd10      	pop	{r4, pc}

08004f7c <memmove>:
 8004f7c:	4288      	cmp	r0, r1
 8004f7e:	b510      	push	{r4, lr}
 8004f80:	eb01 0402 	add.w	r4, r1, r2
 8004f84:	d902      	bls.n	8004f8c <memmove+0x10>
 8004f86:	4284      	cmp	r4, r0
 8004f88:	4623      	mov	r3, r4
 8004f8a:	d807      	bhi.n	8004f9c <memmove+0x20>
 8004f8c:	1e43      	subs	r3, r0, #1
 8004f8e:	42a1      	cmp	r1, r4
 8004f90:	d008      	beq.n	8004fa4 <memmove+0x28>
 8004f92:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004f96:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004f9a:	e7f8      	b.n	8004f8e <memmove+0x12>
 8004f9c:	4402      	add	r2, r0
 8004f9e:	4601      	mov	r1, r0
 8004fa0:	428a      	cmp	r2, r1
 8004fa2:	d100      	bne.n	8004fa6 <memmove+0x2a>
 8004fa4:	bd10      	pop	{r4, pc}
 8004fa6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004faa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004fae:	e7f7      	b.n	8004fa0 <memmove+0x24>

08004fb0 <_free_r>:
 8004fb0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004fb2:	2900      	cmp	r1, #0
 8004fb4:	d044      	beq.n	8005040 <_free_r+0x90>
 8004fb6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004fba:	9001      	str	r0, [sp, #4]
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	f1a1 0404 	sub.w	r4, r1, #4
 8004fc2:	bfb8      	it	lt
 8004fc4:	18e4      	addlt	r4, r4, r3
 8004fc6:	f000 f913 	bl	80051f0 <__malloc_lock>
 8004fca:	4a1e      	ldr	r2, [pc, #120]	; (8005044 <_free_r+0x94>)
 8004fcc:	9801      	ldr	r0, [sp, #4]
 8004fce:	6813      	ldr	r3, [r2, #0]
 8004fd0:	b933      	cbnz	r3, 8004fe0 <_free_r+0x30>
 8004fd2:	6063      	str	r3, [r4, #4]
 8004fd4:	6014      	str	r4, [r2, #0]
 8004fd6:	b003      	add	sp, #12
 8004fd8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004fdc:	f000 b90e 	b.w	80051fc <__malloc_unlock>
 8004fe0:	42a3      	cmp	r3, r4
 8004fe2:	d908      	bls.n	8004ff6 <_free_r+0x46>
 8004fe4:	6825      	ldr	r5, [r4, #0]
 8004fe6:	1961      	adds	r1, r4, r5
 8004fe8:	428b      	cmp	r3, r1
 8004fea:	bf01      	itttt	eq
 8004fec:	6819      	ldreq	r1, [r3, #0]
 8004fee:	685b      	ldreq	r3, [r3, #4]
 8004ff0:	1949      	addeq	r1, r1, r5
 8004ff2:	6021      	streq	r1, [r4, #0]
 8004ff4:	e7ed      	b.n	8004fd2 <_free_r+0x22>
 8004ff6:	461a      	mov	r2, r3
 8004ff8:	685b      	ldr	r3, [r3, #4]
 8004ffa:	b10b      	cbz	r3, 8005000 <_free_r+0x50>
 8004ffc:	42a3      	cmp	r3, r4
 8004ffe:	d9fa      	bls.n	8004ff6 <_free_r+0x46>
 8005000:	6811      	ldr	r1, [r2, #0]
 8005002:	1855      	adds	r5, r2, r1
 8005004:	42a5      	cmp	r5, r4
 8005006:	d10b      	bne.n	8005020 <_free_r+0x70>
 8005008:	6824      	ldr	r4, [r4, #0]
 800500a:	4421      	add	r1, r4
 800500c:	1854      	adds	r4, r2, r1
 800500e:	42a3      	cmp	r3, r4
 8005010:	6011      	str	r1, [r2, #0]
 8005012:	d1e0      	bne.n	8004fd6 <_free_r+0x26>
 8005014:	681c      	ldr	r4, [r3, #0]
 8005016:	685b      	ldr	r3, [r3, #4]
 8005018:	6053      	str	r3, [r2, #4]
 800501a:	4421      	add	r1, r4
 800501c:	6011      	str	r1, [r2, #0]
 800501e:	e7da      	b.n	8004fd6 <_free_r+0x26>
 8005020:	d902      	bls.n	8005028 <_free_r+0x78>
 8005022:	230c      	movs	r3, #12
 8005024:	6003      	str	r3, [r0, #0]
 8005026:	e7d6      	b.n	8004fd6 <_free_r+0x26>
 8005028:	6825      	ldr	r5, [r4, #0]
 800502a:	1961      	adds	r1, r4, r5
 800502c:	428b      	cmp	r3, r1
 800502e:	bf04      	itt	eq
 8005030:	6819      	ldreq	r1, [r3, #0]
 8005032:	685b      	ldreq	r3, [r3, #4]
 8005034:	6063      	str	r3, [r4, #4]
 8005036:	bf04      	itt	eq
 8005038:	1949      	addeq	r1, r1, r5
 800503a:	6021      	streq	r1, [r4, #0]
 800503c:	6054      	str	r4, [r2, #4]
 800503e:	e7ca      	b.n	8004fd6 <_free_r+0x26>
 8005040:	b003      	add	sp, #12
 8005042:	bd30      	pop	{r4, r5, pc}
 8005044:	20000200 	.word	0x20000200

08005048 <sbrk_aligned>:
 8005048:	b570      	push	{r4, r5, r6, lr}
 800504a:	4e0e      	ldr	r6, [pc, #56]	; (8005084 <sbrk_aligned+0x3c>)
 800504c:	460c      	mov	r4, r1
 800504e:	6831      	ldr	r1, [r6, #0]
 8005050:	4605      	mov	r5, r0
 8005052:	b911      	cbnz	r1, 800505a <sbrk_aligned+0x12>
 8005054:	f000 f8bc 	bl	80051d0 <_sbrk_r>
 8005058:	6030      	str	r0, [r6, #0]
 800505a:	4621      	mov	r1, r4
 800505c:	4628      	mov	r0, r5
 800505e:	f000 f8b7 	bl	80051d0 <_sbrk_r>
 8005062:	1c43      	adds	r3, r0, #1
 8005064:	d00a      	beq.n	800507c <sbrk_aligned+0x34>
 8005066:	1cc4      	adds	r4, r0, #3
 8005068:	f024 0403 	bic.w	r4, r4, #3
 800506c:	42a0      	cmp	r0, r4
 800506e:	d007      	beq.n	8005080 <sbrk_aligned+0x38>
 8005070:	1a21      	subs	r1, r4, r0
 8005072:	4628      	mov	r0, r5
 8005074:	f000 f8ac 	bl	80051d0 <_sbrk_r>
 8005078:	3001      	adds	r0, #1
 800507a:	d101      	bne.n	8005080 <sbrk_aligned+0x38>
 800507c:	f04f 34ff 	mov.w	r4, #4294967295
 8005080:	4620      	mov	r0, r4
 8005082:	bd70      	pop	{r4, r5, r6, pc}
 8005084:	20000204 	.word	0x20000204

08005088 <_malloc_r>:
 8005088:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800508c:	1ccd      	adds	r5, r1, #3
 800508e:	f025 0503 	bic.w	r5, r5, #3
 8005092:	3508      	adds	r5, #8
 8005094:	2d0c      	cmp	r5, #12
 8005096:	bf38      	it	cc
 8005098:	250c      	movcc	r5, #12
 800509a:	2d00      	cmp	r5, #0
 800509c:	4607      	mov	r7, r0
 800509e:	db01      	blt.n	80050a4 <_malloc_r+0x1c>
 80050a0:	42a9      	cmp	r1, r5
 80050a2:	d905      	bls.n	80050b0 <_malloc_r+0x28>
 80050a4:	230c      	movs	r3, #12
 80050a6:	603b      	str	r3, [r7, #0]
 80050a8:	2600      	movs	r6, #0
 80050aa:	4630      	mov	r0, r6
 80050ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80050b0:	4e2e      	ldr	r6, [pc, #184]	; (800516c <_malloc_r+0xe4>)
 80050b2:	f000 f89d 	bl	80051f0 <__malloc_lock>
 80050b6:	6833      	ldr	r3, [r6, #0]
 80050b8:	461c      	mov	r4, r3
 80050ba:	bb34      	cbnz	r4, 800510a <_malloc_r+0x82>
 80050bc:	4629      	mov	r1, r5
 80050be:	4638      	mov	r0, r7
 80050c0:	f7ff ffc2 	bl	8005048 <sbrk_aligned>
 80050c4:	1c43      	adds	r3, r0, #1
 80050c6:	4604      	mov	r4, r0
 80050c8:	d14d      	bne.n	8005166 <_malloc_r+0xde>
 80050ca:	6834      	ldr	r4, [r6, #0]
 80050cc:	4626      	mov	r6, r4
 80050ce:	2e00      	cmp	r6, #0
 80050d0:	d140      	bne.n	8005154 <_malloc_r+0xcc>
 80050d2:	6823      	ldr	r3, [r4, #0]
 80050d4:	4631      	mov	r1, r6
 80050d6:	4638      	mov	r0, r7
 80050d8:	eb04 0803 	add.w	r8, r4, r3
 80050dc:	f000 f878 	bl	80051d0 <_sbrk_r>
 80050e0:	4580      	cmp	r8, r0
 80050e2:	d13a      	bne.n	800515a <_malloc_r+0xd2>
 80050e4:	6821      	ldr	r1, [r4, #0]
 80050e6:	3503      	adds	r5, #3
 80050e8:	1a6d      	subs	r5, r5, r1
 80050ea:	f025 0503 	bic.w	r5, r5, #3
 80050ee:	3508      	adds	r5, #8
 80050f0:	2d0c      	cmp	r5, #12
 80050f2:	bf38      	it	cc
 80050f4:	250c      	movcc	r5, #12
 80050f6:	4629      	mov	r1, r5
 80050f8:	4638      	mov	r0, r7
 80050fa:	f7ff ffa5 	bl	8005048 <sbrk_aligned>
 80050fe:	3001      	adds	r0, #1
 8005100:	d02b      	beq.n	800515a <_malloc_r+0xd2>
 8005102:	6823      	ldr	r3, [r4, #0]
 8005104:	442b      	add	r3, r5
 8005106:	6023      	str	r3, [r4, #0]
 8005108:	e00e      	b.n	8005128 <_malloc_r+0xa0>
 800510a:	6822      	ldr	r2, [r4, #0]
 800510c:	1b52      	subs	r2, r2, r5
 800510e:	d41e      	bmi.n	800514e <_malloc_r+0xc6>
 8005110:	2a0b      	cmp	r2, #11
 8005112:	d916      	bls.n	8005142 <_malloc_r+0xba>
 8005114:	1961      	adds	r1, r4, r5
 8005116:	42a3      	cmp	r3, r4
 8005118:	6025      	str	r5, [r4, #0]
 800511a:	bf18      	it	ne
 800511c:	6059      	strne	r1, [r3, #4]
 800511e:	6863      	ldr	r3, [r4, #4]
 8005120:	bf08      	it	eq
 8005122:	6031      	streq	r1, [r6, #0]
 8005124:	5162      	str	r2, [r4, r5]
 8005126:	604b      	str	r3, [r1, #4]
 8005128:	4638      	mov	r0, r7
 800512a:	f104 060b 	add.w	r6, r4, #11
 800512e:	f000 f865 	bl	80051fc <__malloc_unlock>
 8005132:	f026 0607 	bic.w	r6, r6, #7
 8005136:	1d23      	adds	r3, r4, #4
 8005138:	1af2      	subs	r2, r6, r3
 800513a:	d0b6      	beq.n	80050aa <_malloc_r+0x22>
 800513c:	1b9b      	subs	r3, r3, r6
 800513e:	50a3      	str	r3, [r4, r2]
 8005140:	e7b3      	b.n	80050aa <_malloc_r+0x22>
 8005142:	6862      	ldr	r2, [r4, #4]
 8005144:	42a3      	cmp	r3, r4
 8005146:	bf0c      	ite	eq
 8005148:	6032      	streq	r2, [r6, #0]
 800514a:	605a      	strne	r2, [r3, #4]
 800514c:	e7ec      	b.n	8005128 <_malloc_r+0xa0>
 800514e:	4623      	mov	r3, r4
 8005150:	6864      	ldr	r4, [r4, #4]
 8005152:	e7b2      	b.n	80050ba <_malloc_r+0x32>
 8005154:	4634      	mov	r4, r6
 8005156:	6876      	ldr	r6, [r6, #4]
 8005158:	e7b9      	b.n	80050ce <_malloc_r+0x46>
 800515a:	230c      	movs	r3, #12
 800515c:	603b      	str	r3, [r7, #0]
 800515e:	4638      	mov	r0, r7
 8005160:	f000 f84c 	bl	80051fc <__malloc_unlock>
 8005164:	e7a1      	b.n	80050aa <_malloc_r+0x22>
 8005166:	6025      	str	r5, [r4, #0]
 8005168:	e7de      	b.n	8005128 <_malloc_r+0xa0>
 800516a:	bf00      	nop
 800516c:	20000200 	.word	0x20000200

08005170 <_realloc_r>:
 8005170:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005174:	4680      	mov	r8, r0
 8005176:	4614      	mov	r4, r2
 8005178:	460e      	mov	r6, r1
 800517a:	b921      	cbnz	r1, 8005186 <_realloc_r+0x16>
 800517c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005180:	4611      	mov	r1, r2
 8005182:	f7ff bf81 	b.w	8005088 <_malloc_r>
 8005186:	b92a      	cbnz	r2, 8005194 <_realloc_r+0x24>
 8005188:	f7ff ff12 	bl	8004fb0 <_free_r>
 800518c:	4625      	mov	r5, r4
 800518e:	4628      	mov	r0, r5
 8005190:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005194:	f000 f838 	bl	8005208 <_malloc_usable_size_r>
 8005198:	4284      	cmp	r4, r0
 800519a:	4607      	mov	r7, r0
 800519c:	d802      	bhi.n	80051a4 <_realloc_r+0x34>
 800519e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80051a2:	d812      	bhi.n	80051ca <_realloc_r+0x5a>
 80051a4:	4621      	mov	r1, r4
 80051a6:	4640      	mov	r0, r8
 80051a8:	f7ff ff6e 	bl	8005088 <_malloc_r>
 80051ac:	4605      	mov	r5, r0
 80051ae:	2800      	cmp	r0, #0
 80051b0:	d0ed      	beq.n	800518e <_realloc_r+0x1e>
 80051b2:	42bc      	cmp	r4, r7
 80051b4:	4622      	mov	r2, r4
 80051b6:	4631      	mov	r1, r6
 80051b8:	bf28      	it	cs
 80051ba:	463a      	movcs	r2, r7
 80051bc:	f7ff fed0 	bl	8004f60 <memcpy>
 80051c0:	4631      	mov	r1, r6
 80051c2:	4640      	mov	r0, r8
 80051c4:	f7ff fef4 	bl	8004fb0 <_free_r>
 80051c8:	e7e1      	b.n	800518e <_realloc_r+0x1e>
 80051ca:	4635      	mov	r5, r6
 80051cc:	e7df      	b.n	800518e <_realloc_r+0x1e>
	...

080051d0 <_sbrk_r>:
 80051d0:	b538      	push	{r3, r4, r5, lr}
 80051d2:	4d06      	ldr	r5, [pc, #24]	; (80051ec <_sbrk_r+0x1c>)
 80051d4:	2300      	movs	r3, #0
 80051d6:	4604      	mov	r4, r0
 80051d8:	4608      	mov	r0, r1
 80051da:	602b      	str	r3, [r5, #0]
 80051dc:	f7fc fb7c 	bl	80018d8 <_sbrk>
 80051e0:	1c43      	adds	r3, r0, #1
 80051e2:	d102      	bne.n	80051ea <_sbrk_r+0x1a>
 80051e4:	682b      	ldr	r3, [r5, #0]
 80051e6:	b103      	cbz	r3, 80051ea <_sbrk_r+0x1a>
 80051e8:	6023      	str	r3, [r4, #0]
 80051ea:	bd38      	pop	{r3, r4, r5, pc}
 80051ec:	20000208 	.word	0x20000208

080051f0 <__malloc_lock>:
 80051f0:	4801      	ldr	r0, [pc, #4]	; (80051f8 <__malloc_lock+0x8>)
 80051f2:	f000 b811 	b.w	8005218 <__retarget_lock_acquire_recursive>
 80051f6:	bf00      	nop
 80051f8:	2000020c 	.word	0x2000020c

080051fc <__malloc_unlock>:
 80051fc:	4801      	ldr	r0, [pc, #4]	; (8005204 <__malloc_unlock+0x8>)
 80051fe:	f000 b80c 	b.w	800521a <__retarget_lock_release_recursive>
 8005202:	bf00      	nop
 8005204:	2000020c 	.word	0x2000020c

08005208 <_malloc_usable_size_r>:
 8005208:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800520c:	1f18      	subs	r0, r3, #4
 800520e:	2b00      	cmp	r3, #0
 8005210:	bfbc      	itt	lt
 8005212:	580b      	ldrlt	r3, [r1, r0]
 8005214:	18c0      	addlt	r0, r0, r3
 8005216:	4770      	bx	lr

08005218 <__retarget_lock_acquire_recursive>:
 8005218:	4770      	bx	lr

0800521a <__retarget_lock_release_recursive>:
 800521a:	4770      	bx	lr
 800521c:	0000      	movs	r0, r0
	...

08005220 <sin>:
 8005220:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005222:	ec53 2b10 	vmov	r2, r3, d0
 8005226:	4828      	ldr	r0, [pc, #160]	; (80052c8 <sin+0xa8>)
 8005228:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800522c:	4281      	cmp	r1, r0
 800522e:	dc07      	bgt.n	8005240 <sin+0x20>
 8005230:	ed9f 1b23 	vldr	d1, [pc, #140]	; 80052c0 <sin+0xa0>
 8005234:	2000      	movs	r0, #0
 8005236:	b005      	add	sp, #20
 8005238:	f85d eb04 	ldr.w	lr, [sp], #4
 800523c:	f000 be6c 	b.w	8005f18 <__kernel_sin>
 8005240:	4822      	ldr	r0, [pc, #136]	; (80052cc <sin+0xac>)
 8005242:	4281      	cmp	r1, r0
 8005244:	dd09      	ble.n	800525a <sin+0x3a>
 8005246:	ee10 0a10 	vmov	r0, s0
 800524a:	4619      	mov	r1, r3
 800524c:	f7fb f81c 	bl	8000288 <__aeabi_dsub>
 8005250:	ec41 0b10 	vmov	d0, r0, r1
 8005254:	b005      	add	sp, #20
 8005256:	f85d fb04 	ldr.w	pc, [sp], #4
 800525a:	4668      	mov	r0, sp
 800525c:	f000 f838 	bl	80052d0 <__ieee754_rem_pio2>
 8005260:	f000 0003 	and.w	r0, r0, #3
 8005264:	2801      	cmp	r0, #1
 8005266:	d00c      	beq.n	8005282 <sin+0x62>
 8005268:	2802      	cmp	r0, #2
 800526a:	d011      	beq.n	8005290 <sin+0x70>
 800526c:	b9f0      	cbnz	r0, 80052ac <sin+0x8c>
 800526e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8005272:	ed9d 0b00 	vldr	d0, [sp]
 8005276:	2001      	movs	r0, #1
 8005278:	f000 fe4e 	bl	8005f18 <__kernel_sin>
 800527c:	ec51 0b10 	vmov	r0, r1, d0
 8005280:	e7e6      	b.n	8005250 <sin+0x30>
 8005282:	ed9d 1b02 	vldr	d1, [sp, #8]
 8005286:	ed9d 0b00 	vldr	d0, [sp]
 800528a:	f000 fa2d 	bl	80056e8 <__kernel_cos>
 800528e:	e7f5      	b.n	800527c <sin+0x5c>
 8005290:	ed9d 1b02 	vldr	d1, [sp, #8]
 8005294:	ed9d 0b00 	vldr	d0, [sp]
 8005298:	2001      	movs	r0, #1
 800529a:	f000 fe3d 	bl	8005f18 <__kernel_sin>
 800529e:	ec53 2b10 	vmov	r2, r3, d0
 80052a2:	ee10 0a10 	vmov	r0, s0
 80052a6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80052aa:	e7d1      	b.n	8005250 <sin+0x30>
 80052ac:	ed9d 1b02 	vldr	d1, [sp, #8]
 80052b0:	ed9d 0b00 	vldr	d0, [sp]
 80052b4:	f000 fa18 	bl	80056e8 <__kernel_cos>
 80052b8:	e7f1      	b.n	800529e <sin+0x7e>
 80052ba:	bf00      	nop
 80052bc:	f3af 8000 	nop.w
	...
 80052c8:	3fe921fb 	.word	0x3fe921fb
 80052cc:	7fefffff 	.word	0x7fefffff

080052d0 <__ieee754_rem_pio2>:
 80052d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80052d4:	ed2d 8b02 	vpush	{d8}
 80052d8:	ec55 4b10 	vmov	r4, r5, d0
 80052dc:	4bca      	ldr	r3, [pc, #808]	; (8005608 <__ieee754_rem_pio2+0x338>)
 80052de:	b08b      	sub	sp, #44	; 0x2c
 80052e0:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 80052e4:	4598      	cmp	r8, r3
 80052e6:	4682      	mov	sl, r0
 80052e8:	9502      	str	r5, [sp, #8]
 80052ea:	dc08      	bgt.n	80052fe <__ieee754_rem_pio2+0x2e>
 80052ec:	2200      	movs	r2, #0
 80052ee:	2300      	movs	r3, #0
 80052f0:	ed80 0b00 	vstr	d0, [r0]
 80052f4:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80052f8:	f04f 0b00 	mov.w	fp, #0
 80052fc:	e028      	b.n	8005350 <__ieee754_rem_pio2+0x80>
 80052fe:	4bc3      	ldr	r3, [pc, #780]	; (800560c <__ieee754_rem_pio2+0x33c>)
 8005300:	4598      	cmp	r8, r3
 8005302:	dc78      	bgt.n	80053f6 <__ieee754_rem_pio2+0x126>
 8005304:	9b02      	ldr	r3, [sp, #8]
 8005306:	4ec2      	ldr	r6, [pc, #776]	; (8005610 <__ieee754_rem_pio2+0x340>)
 8005308:	2b00      	cmp	r3, #0
 800530a:	ee10 0a10 	vmov	r0, s0
 800530e:	a3b0      	add	r3, pc, #704	; (adr r3, 80055d0 <__ieee754_rem_pio2+0x300>)
 8005310:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005314:	4629      	mov	r1, r5
 8005316:	dd39      	ble.n	800538c <__ieee754_rem_pio2+0xbc>
 8005318:	f7fa ffb6 	bl	8000288 <__aeabi_dsub>
 800531c:	45b0      	cmp	r8, r6
 800531e:	4604      	mov	r4, r0
 8005320:	460d      	mov	r5, r1
 8005322:	d01b      	beq.n	800535c <__ieee754_rem_pio2+0x8c>
 8005324:	a3ac      	add	r3, pc, #688	; (adr r3, 80055d8 <__ieee754_rem_pio2+0x308>)
 8005326:	e9d3 2300 	ldrd	r2, r3, [r3]
 800532a:	f7fa ffad 	bl	8000288 <__aeabi_dsub>
 800532e:	4602      	mov	r2, r0
 8005330:	460b      	mov	r3, r1
 8005332:	e9ca 2300 	strd	r2, r3, [sl]
 8005336:	4620      	mov	r0, r4
 8005338:	4629      	mov	r1, r5
 800533a:	f7fa ffa5 	bl	8000288 <__aeabi_dsub>
 800533e:	a3a6      	add	r3, pc, #664	; (adr r3, 80055d8 <__ieee754_rem_pio2+0x308>)
 8005340:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005344:	f7fa ffa0 	bl	8000288 <__aeabi_dsub>
 8005348:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800534c:	f04f 0b01 	mov.w	fp, #1
 8005350:	4658      	mov	r0, fp
 8005352:	b00b      	add	sp, #44	; 0x2c
 8005354:	ecbd 8b02 	vpop	{d8}
 8005358:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800535c:	a3a0      	add	r3, pc, #640	; (adr r3, 80055e0 <__ieee754_rem_pio2+0x310>)
 800535e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005362:	f7fa ff91 	bl	8000288 <__aeabi_dsub>
 8005366:	a3a0      	add	r3, pc, #640	; (adr r3, 80055e8 <__ieee754_rem_pio2+0x318>)
 8005368:	e9d3 2300 	ldrd	r2, r3, [r3]
 800536c:	4604      	mov	r4, r0
 800536e:	460d      	mov	r5, r1
 8005370:	f7fa ff8a 	bl	8000288 <__aeabi_dsub>
 8005374:	4602      	mov	r2, r0
 8005376:	460b      	mov	r3, r1
 8005378:	e9ca 2300 	strd	r2, r3, [sl]
 800537c:	4620      	mov	r0, r4
 800537e:	4629      	mov	r1, r5
 8005380:	f7fa ff82 	bl	8000288 <__aeabi_dsub>
 8005384:	a398      	add	r3, pc, #608	; (adr r3, 80055e8 <__ieee754_rem_pio2+0x318>)
 8005386:	e9d3 2300 	ldrd	r2, r3, [r3]
 800538a:	e7db      	b.n	8005344 <__ieee754_rem_pio2+0x74>
 800538c:	f7fa ff7e 	bl	800028c <__adddf3>
 8005390:	45b0      	cmp	r8, r6
 8005392:	4604      	mov	r4, r0
 8005394:	460d      	mov	r5, r1
 8005396:	d016      	beq.n	80053c6 <__ieee754_rem_pio2+0xf6>
 8005398:	a38f      	add	r3, pc, #572	; (adr r3, 80055d8 <__ieee754_rem_pio2+0x308>)
 800539a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800539e:	f7fa ff75 	bl	800028c <__adddf3>
 80053a2:	4602      	mov	r2, r0
 80053a4:	460b      	mov	r3, r1
 80053a6:	e9ca 2300 	strd	r2, r3, [sl]
 80053aa:	4620      	mov	r0, r4
 80053ac:	4629      	mov	r1, r5
 80053ae:	f7fa ff6b 	bl	8000288 <__aeabi_dsub>
 80053b2:	a389      	add	r3, pc, #548	; (adr r3, 80055d8 <__ieee754_rem_pio2+0x308>)
 80053b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053b8:	f7fa ff68 	bl	800028c <__adddf3>
 80053bc:	f04f 3bff 	mov.w	fp, #4294967295
 80053c0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80053c4:	e7c4      	b.n	8005350 <__ieee754_rem_pio2+0x80>
 80053c6:	a386      	add	r3, pc, #536	; (adr r3, 80055e0 <__ieee754_rem_pio2+0x310>)
 80053c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053cc:	f7fa ff5e 	bl	800028c <__adddf3>
 80053d0:	a385      	add	r3, pc, #532	; (adr r3, 80055e8 <__ieee754_rem_pio2+0x318>)
 80053d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053d6:	4604      	mov	r4, r0
 80053d8:	460d      	mov	r5, r1
 80053da:	f7fa ff57 	bl	800028c <__adddf3>
 80053de:	4602      	mov	r2, r0
 80053e0:	460b      	mov	r3, r1
 80053e2:	e9ca 2300 	strd	r2, r3, [sl]
 80053e6:	4620      	mov	r0, r4
 80053e8:	4629      	mov	r1, r5
 80053ea:	f7fa ff4d 	bl	8000288 <__aeabi_dsub>
 80053ee:	a37e      	add	r3, pc, #504	; (adr r3, 80055e8 <__ieee754_rem_pio2+0x318>)
 80053f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053f4:	e7e0      	b.n	80053b8 <__ieee754_rem_pio2+0xe8>
 80053f6:	4b87      	ldr	r3, [pc, #540]	; (8005614 <__ieee754_rem_pio2+0x344>)
 80053f8:	4598      	cmp	r8, r3
 80053fa:	f300 80d9 	bgt.w	80055b0 <__ieee754_rem_pio2+0x2e0>
 80053fe:	f000 fe49 	bl	8006094 <fabs>
 8005402:	ec55 4b10 	vmov	r4, r5, d0
 8005406:	ee10 0a10 	vmov	r0, s0
 800540a:	a379      	add	r3, pc, #484	; (adr r3, 80055f0 <__ieee754_rem_pio2+0x320>)
 800540c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005410:	4629      	mov	r1, r5
 8005412:	f7fb f8f1 	bl	80005f8 <__aeabi_dmul>
 8005416:	4b80      	ldr	r3, [pc, #512]	; (8005618 <__ieee754_rem_pio2+0x348>)
 8005418:	2200      	movs	r2, #0
 800541a:	f7fa ff37 	bl	800028c <__adddf3>
 800541e:	f7fb fb85 	bl	8000b2c <__aeabi_d2iz>
 8005422:	4683      	mov	fp, r0
 8005424:	f7fb f87e 	bl	8000524 <__aeabi_i2d>
 8005428:	4602      	mov	r2, r0
 800542a:	460b      	mov	r3, r1
 800542c:	ec43 2b18 	vmov	d8, r2, r3
 8005430:	a367      	add	r3, pc, #412	; (adr r3, 80055d0 <__ieee754_rem_pio2+0x300>)
 8005432:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005436:	f7fb f8df 	bl	80005f8 <__aeabi_dmul>
 800543a:	4602      	mov	r2, r0
 800543c:	460b      	mov	r3, r1
 800543e:	4620      	mov	r0, r4
 8005440:	4629      	mov	r1, r5
 8005442:	f7fa ff21 	bl	8000288 <__aeabi_dsub>
 8005446:	a364      	add	r3, pc, #400	; (adr r3, 80055d8 <__ieee754_rem_pio2+0x308>)
 8005448:	e9d3 2300 	ldrd	r2, r3, [r3]
 800544c:	4606      	mov	r6, r0
 800544e:	460f      	mov	r7, r1
 8005450:	ec51 0b18 	vmov	r0, r1, d8
 8005454:	f7fb f8d0 	bl	80005f8 <__aeabi_dmul>
 8005458:	f1bb 0f1f 	cmp.w	fp, #31
 800545c:	4604      	mov	r4, r0
 800545e:	460d      	mov	r5, r1
 8005460:	dc0d      	bgt.n	800547e <__ieee754_rem_pio2+0x1ae>
 8005462:	4b6e      	ldr	r3, [pc, #440]	; (800561c <__ieee754_rem_pio2+0x34c>)
 8005464:	f10b 32ff 	add.w	r2, fp, #4294967295
 8005468:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800546c:	4543      	cmp	r3, r8
 800546e:	d006      	beq.n	800547e <__ieee754_rem_pio2+0x1ae>
 8005470:	4622      	mov	r2, r4
 8005472:	462b      	mov	r3, r5
 8005474:	4630      	mov	r0, r6
 8005476:	4639      	mov	r1, r7
 8005478:	f7fa ff06 	bl	8000288 <__aeabi_dsub>
 800547c:	e00f      	b.n	800549e <__ieee754_rem_pio2+0x1ce>
 800547e:	462b      	mov	r3, r5
 8005480:	4622      	mov	r2, r4
 8005482:	4630      	mov	r0, r6
 8005484:	4639      	mov	r1, r7
 8005486:	f7fa feff 	bl	8000288 <__aeabi_dsub>
 800548a:	ea4f 5328 	mov.w	r3, r8, asr #20
 800548e:	9303      	str	r3, [sp, #12]
 8005490:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8005494:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 8005498:	f1b8 0f10 	cmp.w	r8, #16
 800549c:	dc02      	bgt.n	80054a4 <__ieee754_rem_pio2+0x1d4>
 800549e:	e9ca 0100 	strd	r0, r1, [sl]
 80054a2:	e039      	b.n	8005518 <__ieee754_rem_pio2+0x248>
 80054a4:	a34e      	add	r3, pc, #312	; (adr r3, 80055e0 <__ieee754_rem_pio2+0x310>)
 80054a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054aa:	ec51 0b18 	vmov	r0, r1, d8
 80054ae:	f7fb f8a3 	bl	80005f8 <__aeabi_dmul>
 80054b2:	4604      	mov	r4, r0
 80054b4:	460d      	mov	r5, r1
 80054b6:	4602      	mov	r2, r0
 80054b8:	460b      	mov	r3, r1
 80054ba:	4630      	mov	r0, r6
 80054bc:	4639      	mov	r1, r7
 80054be:	f7fa fee3 	bl	8000288 <__aeabi_dsub>
 80054c2:	4602      	mov	r2, r0
 80054c4:	460b      	mov	r3, r1
 80054c6:	4680      	mov	r8, r0
 80054c8:	4689      	mov	r9, r1
 80054ca:	4630      	mov	r0, r6
 80054cc:	4639      	mov	r1, r7
 80054ce:	f7fa fedb 	bl	8000288 <__aeabi_dsub>
 80054d2:	4622      	mov	r2, r4
 80054d4:	462b      	mov	r3, r5
 80054d6:	f7fa fed7 	bl	8000288 <__aeabi_dsub>
 80054da:	a343      	add	r3, pc, #268	; (adr r3, 80055e8 <__ieee754_rem_pio2+0x318>)
 80054dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054e0:	4604      	mov	r4, r0
 80054e2:	460d      	mov	r5, r1
 80054e4:	ec51 0b18 	vmov	r0, r1, d8
 80054e8:	f7fb f886 	bl	80005f8 <__aeabi_dmul>
 80054ec:	4622      	mov	r2, r4
 80054ee:	462b      	mov	r3, r5
 80054f0:	f7fa feca 	bl	8000288 <__aeabi_dsub>
 80054f4:	4602      	mov	r2, r0
 80054f6:	460b      	mov	r3, r1
 80054f8:	4604      	mov	r4, r0
 80054fa:	460d      	mov	r5, r1
 80054fc:	4640      	mov	r0, r8
 80054fe:	4649      	mov	r1, r9
 8005500:	f7fa fec2 	bl	8000288 <__aeabi_dsub>
 8005504:	9a03      	ldr	r2, [sp, #12]
 8005506:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800550a:	1ad3      	subs	r3, r2, r3
 800550c:	2b31      	cmp	r3, #49	; 0x31
 800550e:	dc24      	bgt.n	800555a <__ieee754_rem_pio2+0x28a>
 8005510:	e9ca 0100 	strd	r0, r1, [sl]
 8005514:	4646      	mov	r6, r8
 8005516:	464f      	mov	r7, r9
 8005518:	e9da 8900 	ldrd	r8, r9, [sl]
 800551c:	4630      	mov	r0, r6
 800551e:	4642      	mov	r2, r8
 8005520:	464b      	mov	r3, r9
 8005522:	4639      	mov	r1, r7
 8005524:	f7fa feb0 	bl	8000288 <__aeabi_dsub>
 8005528:	462b      	mov	r3, r5
 800552a:	4622      	mov	r2, r4
 800552c:	f7fa feac 	bl	8000288 <__aeabi_dsub>
 8005530:	9b02      	ldr	r3, [sp, #8]
 8005532:	2b00      	cmp	r3, #0
 8005534:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8005538:	f6bf af0a 	bge.w	8005350 <__ieee754_rem_pio2+0x80>
 800553c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8005540:	f8ca 3004 	str.w	r3, [sl, #4]
 8005544:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005548:	f8ca 8000 	str.w	r8, [sl]
 800554c:	f8ca 0008 	str.w	r0, [sl, #8]
 8005550:	f8ca 300c 	str.w	r3, [sl, #12]
 8005554:	f1cb 0b00 	rsb	fp, fp, #0
 8005558:	e6fa      	b.n	8005350 <__ieee754_rem_pio2+0x80>
 800555a:	a327      	add	r3, pc, #156	; (adr r3, 80055f8 <__ieee754_rem_pio2+0x328>)
 800555c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005560:	ec51 0b18 	vmov	r0, r1, d8
 8005564:	f7fb f848 	bl	80005f8 <__aeabi_dmul>
 8005568:	4604      	mov	r4, r0
 800556a:	460d      	mov	r5, r1
 800556c:	4602      	mov	r2, r0
 800556e:	460b      	mov	r3, r1
 8005570:	4640      	mov	r0, r8
 8005572:	4649      	mov	r1, r9
 8005574:	f7fa fe88 	bl	8000288 <__aeabi_dsub>
 8005578:	4602      	mov	r2, r0
 800557a:	460b      	mov	r3, r1
 800557c:	4606      	mov	r6, r0
 800557e:	460f      	mov	r7, r1
 8005580:	4640      	mov	r0, r8
 8005582:	4649      	mov	r1, r9
 8005584:	f7fa fe80 	bl	8000288 <__aeabi_dsub>
 8005588:	4622      	mov	r2, r4
 800558a:	462b      	mov	r3, r5
 800558c:	f7fa fe7c 	bl	8000288 <__aeabi_dsub>
 8005590:	a31b      	add	r3, pc, #108	; (adr r3, 8005600 <__ieee754_rem_pio2+0x330>)
 8005592:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005596:	4604      	mov	r4, r0
 8005598:	460d      	mov	r5, r1
 800559a:	ec51 0b18 	vmov	r0, r1, d8
 800559e:	f7fb f82b 	bl	80005f8 <__aeabi_dmul>
 80055a2:	4622      	mov	r2, r4
 80055a4:	462b      	mov	r3, r5
 80055a6:	f7fa fe6f 	bl	8000288 <__aeabi_dsub>
 80055aa:	4604      	mov	r4, r0
 80055ac:	460d      	mov	r5, r1
 80055ae:	e75f      	b.n	8005470 <__ieee754_rem_pio2+0x1a0>
 80055b0:	4b1b      	ldr	r3, [pc, #108]	; (8005620 <__ieee754_rem_pio2+0x350>)
 80055b2:	4598      	cmp	r8, r3
 80055b4:	dd36      	ble.n	8005624 <__ieee754_rem_pio2+0x354>
 80055b6:	ee10 2a10 	vmov	r2, s0
 80055ba:	462b      	mov	r3, r5
 80055bc:	4620      	mov	r0, r4
 80055be:	4629      	mov	r1, r5
 80055c0:	f7fa fe62 	bl	8000288 <__aeabi_dsub>
 80055c4:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80055c8:	e9ca 0100 	strd	r0, r1, [sl]
 80055cc:	e694      	b.n	80052f8 <__ieee754_rem_pio2+0x28>
 80055ce:	bf00      	nop
 80055d0:	54400000 	.word	0x54400000
 80055d4:	3ff921fb 	.word	0x3ff921fb
 80055d8:	1a626331 	.word	0x1a626331
 80055dc:	3dd0b461 	.word	0x3dd0b461
 80055e0:	1a600000 	.word	0x1a600000
 80055e4:	3dd0b461 	.word	0x3dd0b461
 80055e8:	2e037073 	.word	0x2e037073
 80055ec:	3ba3198a 	.word	0x3ba3198a
 80055f0:	6dc9c883 	.word	0x6dc9c883
 80055f4:	3fe45f30 	.word	0x3fe45f30
 80055f8:	2e000000 	.word	0x2e000000
 80055fc:	3ba3198a 	.word	0x3ba3198a
 8005600:	252049c1 	.word	0x252049c1
 8005604:	397b839a 	.word	0x397b839a
 8005608:	3fe921fb 	.word	0x3fe921fb
 800560c:	4002d97b 	.word	0x4002d97b
 8005610:	3ff921fb 	.word	0x3ff921fb
 8005614:	413921fb 	.word	0x413921fb
 8005618:	3fe00000 	.word	0x3fe00000
 800561c:	08006334 	.word	0x08006334
 8005620:	7fefffff 	.word	0x7fefffff
 8005624:	ea4f 5428 	mov.w	r4, r8, asr #20
 8005628:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 800562c:	ee10 0a10 	vmov	r0, s0
 8005630:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 8005634:	ee10 6a10 	vmov	r6, s0
 8005638:	460f      	mov	r7, r1
 800563a:	f7fb fa77 	bl	8000b2c <__aeabi_d2iz>
 800563e:	f7fa ff71 	bl	8000524 <__aeabi_i2d>
 8005642:	4602      	mov	r2, r0
 8005644:	460b      	mov	r3, r1
 8005646:	4630      	mov	r0, r6
 8005648:	4639      	mov	r1, r7
 800564a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800564e:	f7fa fe1b 	bl	8000288 <__aeabi_dsub>
 8005652:	4b23      	ldr	r3, [pc, #140]	; (80056e0 <__ieee754_rem_pio2+0x410>)
 8005654:	2200      	movs	r2, #0
 8005656:	f7fa ffcf 	bl	80005f8 <__aeabi_dmul>
 800565a:	460f      	mov	r7, r1
 800565c:	4606      	mov	r6, r0
 800565e:	f7fb fa65 	bl	8000b2c <__aeabi_d2iz>
 8005662:	f7fa ff5f 	bl	8000524 <__aeabi_i2d>
 8005666:	4602      	mov	r2, r0
 8005668:	460b      	mov	r3, r1
 800566a:	4630      	mov	r0, r6
 800566c:	4639      	mov	r1, r7
 800566e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8005672:	f7fa fe09 	bl	8000288 <__aeabi_dsub>
 8005676:	4b1a      	ldr	r3, [pc, #104]	; (80056e0 <__ieee754_rem_pio2+0x410>)
 8005678:	2200      	movs	r2, #0
 800567a:	f7fa ffbd 	bl	80005f8 <__aeabi_dmul>
 800567e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8005682:	ad04      	add	r5, sp, #16
 8005684:	f04f 0803 	mov.w	r8, #3
 8005688:	46a9      	mov	r9, r5
 800568a:	2600      	movs	r6, #0
 800568c:	2700      	movs	r7, #0
 800568e:	4632      	mov	r2, r6
 8005690:	463b      	mov	r3, r7
 8005692:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 8005696:	46c3      	mov	fp, r8
 8005698:	3d08      	subs	r5, #8
 800569a:	f108 38ff 	add.w	r8, r8, #4294967295
 800569e:	f7fb fa13 	bl	8000ac8 <__aeabi_dcmpeq>
 80056a2:	2800      	cmp	r0, #0
 80056a4:	d1f3      	bne.n	800568e <__ieee754_rem_pio2+0x3be>
 80056a6:	4b0f      	ldr	r3, [pc, #60]	; (80056e4 <__ieee754_rem_pio2+0x414>)
 80056a8:	9301      	str	r3, [sp, #4]
 80056aa:	2302      	movs	r3, #2
 80056ac:	9300      	str	r3, [sp, #0]
 80056ae:	4622      	mov	r2, r4
 80056b0:	465b      	mov	r3, fp
 80056b2:	4651      	mov	r1, sl
 80056b4:	4648      	mov	r0, r9
 80056b6:	f000 f8df 	bl	8005878 <__kernel_rem_pio2>
 80056ba:	9b02      	ldr	r3, [sp, #8]
 80056bc:	2b00      	cmp	r3, #0
 80056be:	4683      	mov	fp, r0
 80056c0:	f6bf ae46 	bge.w	8005350 <__ieee754_rem_pio2+0x80>
 80056c4:	e9da 2100 	ldrd	r2, r1, [sl]
 80056c8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80056cc:	e9ca 2300 	strd	r2, r3, [sl]
 80056d0:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 80056d4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80056d8:	e9ca 2302 	strd	r2, r3, [sl, #8]
 80056dc:	e73a      	b.n	8005554 <__ieee754_rem_pio2+0x284>
 80056de:	bf00      	nop
 80056e0:	41700000 	.word	0x41700000
 80056e4:	080063b4 	.word	0x080063b4

080056e8 <__kernel_cos>:
 80056e8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80056ec:	ec57 6b10 	vmov	r6, r7, d0
 80056f0:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 80056f4:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 80056f8:	ed8d 1b00 	vstr	d1, [sp]
 80056fc:	da07      	bge.n	800570e <__kernel_cos+0x26>
 80056fe:	ee10 0a10 	vmov	r0, s0
 8005702:	4639      	mov	r1, r7
 8005704:	f7fb fa12 	bl	8000b2c <__aeabi_d2iz>
 8005708:	2800      	cmp	r0, #0
 800570a:	f000 8088 	beq.w	800581e <__kernel_cos+0x136>
 800570e:	4632      	mov	r2, r6
 8005710:	463b      	mov	r3, r7
 8005712:	4630      	mov	r0, r6
 8005714:	4639      	mov	r1, r7
 8005716:	f7fa ff6f 	bl	80005f8 <__aeabi_dmul>
 800571a:	4b51      	ldr	r3, [pc, #324]	; (8005860 <__kernel_cos+0x178>)
 800571c:	2200      	movs	r2, #0
 800571e:	4604      	mov	r4, r0
 8005720:	460d      	mov	r5, r1
 8005722:	f7fa ff69 	bl	80005f8 <__aeabi_dmul>
 8005726:	a340      	add	r3, pc, #256	; (adr r3, 8005828 <__kernel_cos+0x140>)
 8005728:	e9d3 2300 	ldrd	r2, r3, [r3]
 800572c:	4682      	mov	sl, r0
 800572e:	468b      	mov	fp, r1
 8005730:	4620      	mov	r0, r4
 8005732:	4629      	mov	r1, r5
 8005734:	f7fa ff60 	bl	80005f8 <__aeabi_dmul>
 8005738:	a33d      	add	r3, pc, #244	; (adr r3, 8005830 <__kernel_cos+0x148>)
 800573a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800573e:	f7fa fda5 	bl	800028c <__adddf3>
 8005742:	4622      	mov	r2, r4
 8005744:	462b      	mov	r3, r5
 8005746:	f7fa ff57 	bl	80005f8 <__aeabi_dmul>
 800574a:	a33b      	add	r3, pc, #236	; (adr r3, 8005838 <__kernel_cos+0x150>)
 800574c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005750:	f7fa fd9a 	bl	8000288 <__aeabi_dsub>
 8005754:	4622      	mov	r2, r4
 8005756:	462b      	mov	r3, r5
 8005758:	f7fa ff4e 	bl	80005f8 <__aeabi_dmul>
 800575c:	a338      	add	r3, pc, #224	; (adr r3, 8005840 <__kernel_cos+0x158>)
 800575e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005762:	f7fa fd93 	bl	800028c <__adddf3>
 8005766:	4622      	mov	r2, r4
 8005768:	462b      	mov	r3, r5
 800576a:	f7fa ff45 	bl	80005f8 <__aeabi_dmul>
 800576e:	a336      	add	r3, pc, #216	; (adr r3, 8005848 <__kernel_cos+0x160>)
 8005770:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005774:	f7fa fd88 	bl	8000288 <__aeabi_dsub>
 8005778:	4622      	mov	r2, r4
 800577a:	462b      	mov	r3, r5
 800577c:	f7fa ff3c 	bl	80005f8 <__aeabi_dmul>
 8005780:	a333      	add	r3, pc, #204	; (adr r3, 8005850 <__kernel_cos+0x168>)
 8005782:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005786:	f7fa fd81 	bl	800028c <__adddf3>
 800578a:	4622      	mov	r2, r4
 800578c:	462b      	mov	r3, r5
 800578e:	f7fa ff33 	bl	80005f8 <__aeabi_dmul>
 8005792:	4622      	mov	r2, r4
 8005794:	462b      	mov	r3, r5
 8005796:	f7fa ff2f 	bl	80005f8 <__aeabi_dmul>
 800579a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800579e:	4604      	mov	r4, r0
 80057a0:	460d      	mov	r5, r1
 80057a2:	4630      	mov	r0, r6
 80057a4:	4639      	mov	r1, r7
 80057a6:	f7fa ff27 	bl	80005f8 <__aeabi_dmul>
 80057aa:	460b      	mov	r3, r1
 80057ac:	4602      	mov	r2, r0
 80057ae:	4629      	mov	r1, r5
 80057b0:	4620      	mov	r0, r4
 80057b2:	f7fa fd69 	bl	8000288 <__aeabi_dsub>
 80057b6:	4b2b      	ldr	r3, [pc, #172]	; (8005864 <__kernel_cos+0x17c>)
 80057b8:	4598      	cmp	r8, r3
 80057ba:	4606      	mov	r6, r0
 80057bc:	460f      	mov	r7, r1
 80057be:	dc10      	bgt.n	80057e2 <__kernel_cos+0xfa>
 80057c0:	4602      	mov	r2, r0
 80057c2:	460b      	mov	r3, r1
 80057c4:	4650      	mov	r0, sl
 80057c6:	4659      	mov	r1, fp
 80057c8:	f7fa fd5e 	bl	8000288 <__aeabi_dsub>
 80057cc:	460b      	mov	r3, r1
 80057ce:	4926      	ldr	r1, [pc, #152]	; (8005868 <__kernel_cos+0x180>)
 80057d0:	4602      	mov	r2, r0
 80057d2:	2000      	movs	r0, #0
 80057d4:	f7fa fd58 	bl	8000288 <__aeabi_dsub>
 80057d8:	ec41 0b10 	vmov	d0, r0, r1
 80057dc:	b003      	add	sp, #12
 80057de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80057e2:	4b22      	ldr	r3, [pc, #136]	; (800586c <__kernel_cos+0x184>)
 80057e4:	4920      	ldr	r1, [pc, #128]	; (8005868 <__kernel_cos+0x180>)
 80057e6:	4598      	cmp	r8, r3
 80057e8:	bfcc      	ite	gt
 80057ea:	4d21      	ldrgt	r5, [pc, #132]	; (8005870 <__kernel_cos+0x188>)
 80057ec:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 80057f0:	2400      	movs	r4, #0
 80057f2:	4622      	mov	r2, r4
 80057f4:	462b      	mov	r3, r5
 80057f6:	2000      	movs	r0, #0
 80057f8:	f7fa fd46 	bl	8000288 <__aeabi_dsub>
 80057fc:	4622      	mov	r2, r4
 80057fe:	4680      	mov	r8, r0
 8005800:	4689      	mov	r9, r1
 8005802:	462b      	mov	r3, r5
 8005804:	4650      	mov	r0, sl
 8005806:	4659      	mov	r1, fp
 8005808:	f7fa fd3e 	bl	8000288 <__aeabi_dsub>
 800580c:	4632      	mov	r2, r6
 800580e:	463b      	mov	r3, r7
 8005810:	f7fa fd3a 	bl	8000288 <__aeabi_dsub>
 8005814:	4602      	mov	r2, r0
 8005816:	460b      	mov	r3, r1
 8005818:	4640      	mov	r0, r8
 800581a:	4649      	mov	r1, r9
 800581c:	e7da      	b.n	80057d4 <__kernel_cos+0xec>
 800581e:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8005858 <__kernel_cos+0x170>
 8005822:	e7db      	b.n	80057dc <__kernel_cos+0xf4>
 8005824:	f3af 8000 	nop.w
 8005828:	be8838d4 	.word	0xbe8838d4
 800582c:	bda8fae9 	.word	0xbda8fae9
 8005830:	bdb4b1c4 	.word	0xbdb4b1c4
 8005834:	3e21ee9e 	.word	0x3e21ee9e
 8005838:	809c52ad 	.word	0x809c52ad
 800583c:	3e927e4f 	.word	0x3e927e4f
 8005840:	19cb1590 	.word	0x19cb1590
 8005844:	3efa01a0 	.word	0x3efa01a0
 8005848:	16c15177 	.word	0x16c15177
 800584c:	3f56c16c 	.word	0x3f56c16c
 8005850:	5555554c 	.word	0x5555554c
 8005854:	3fa55555 	.word	0x3fa55555
 8005858:	00000000 	.word	0x00000000
 800585c:	3ff00000 	.word	0x3ff00000
 8005860:	3fe00000 	.word	0x3fe00000
 8005864:	3fd33332 	.word	0x3fd33332
 8005868:	3ff00000 	.word	0x3ff00000
 800586c:	3fe90000 	.word	0x3fe90000
 8005870:	3fd20000 	.word	0x3fd20000
 8005874:	00000000 	.word	0x00000000

08005878 <__kernel_rem_pio2>:
 8005878:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800587c:	ed2d 8b02 	vpush	{d8}
 8005880:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 8005884:	f112 0f14 	cmn.w	r2, #20
 8005888:	9308      	str	r3, [sp, #32]
 800588a:	9101      	str	r1, [sp, #4]
 800588c:	4bc4      	ldr	r3, [pc, #784]	; (8005ba0 <__kernel_rem_pio2+0x328>)
 800588e:	99a6      	ldr	r1, [sp, #664]	; 0x298
 8005890:	900b      	str	r0, [sp, #44]	; 0x2c
 8005892:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8005896:	9302      	str	r3, [sp, #8]
 8005898:	9b08      	ldr	r3, [sp, #32]
 800589a:	f103 33ff 	add.w	r3, r3, #4294967295
 800589e:	bfa8      	it	ge
 80058a0:	1ed4      	subge	r4, r2, #3
 80058a2:	9306      	str	r3, [sp, #24]
 80058a4:	bfb2      	itee	lt
 80058a6:	2400      	movlt	r4, #0
 80058a8:	2318      	movge	r3, #24
 80058aa:	fb94 f4f3 	sdivge	r4, r4, r3
 80058ae:	f06f 0317 	mvn.w	r3, #23
 80058b2:	fb04 3303 	mla	r3, r4, r3, r3
 80058b6:	eb03 0a02 	add.w	sl, r3, r2
 80058ba:	9b02      	ldr	r3, [sp, #8]
 80058bc:	9a06      	ldr	r2, [sp, #24]
 80058be:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 8005b90 <__kernel_rem_pio2+0x318>
 80058c2:	eb03 0802 	add.w	r8, r3, r2
 80058c6:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 80058c8:	1aa7      	subs	r7, r4, r2
 80058ca:	ae22      	add	r6, sp, #136	; 0x88
 80058cc:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 80058d0:	2500      	movs	r5, #0
 80058d2:	4545      	cmp	r5, r8
 80058d4:	dd13      	ble.n	80058fe <__kernel_rem_pio2+0x86>
 80058d6:	9b08      	ldr	r3, [sp, #32]
 80058d8:	ed9f 8bad 	vldr	d8, [pc, #692]	; 8005b90 <__kernel_rem_pio2+0x318>
 80058dc:	aa22      	add	r2, sp, #136	; 0x88
 80058de:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 80058e2:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 80058e6:	f04f 0800 	mov.w	r8, #0
 80058ea:	9b02      	ldr	r3, [sp, #8]
 80058ec:	4598      	cmp	r8, r3
 80058ee:	dc2f      	bgt.n	8005950 <__kernel_rem_pio2+0xd8>
 80058f0:	ed8d 8b04 	vstr	d8, [sp, #16]
 80058f4:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 80058f8:	462f      	mov	r7, r5
 80058fa:	2600      	movs	r6, #0
 80058fc:	e01b      	b.n	8005936 <__kernel_rem_pio2+0xbe>
 80058fe:	42ef      	cmn	r7, r5
 8005900:	d407      	bmi.n	8005912 <__kernel_rem_pio2+0x9a>
 8005902:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8005906:	f7fa fe0d 	bl	8000524 <__aeabi_i2d>
 800590a:	e8e6 0102 	strd	r0, r1, [r6], #8
 800590e:	3501      	adds	r5, #1
 8005910:	e7df      	b.n	80058d2 <__kernel_rem_pio2+0x5a>
 8005912:	ec51 0b18 	vmov	r0, r1, d8
 8005916:	e7f8      	b.n	800590a <__kernel_rem_pio2+0x92>
 8005918:	e9d7 2300 	ldrd	r2, r3, [r7]
 800591c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8005920:	f7fa fe6a 	bl	80005f8 <__aeabi_dmul>
 8005924:	4602      	mov	r2, r0
 8005926:	460b      	mov	r3, r1
 8005928:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800592c:	f7fa fcae 	bl	800028c <__adddf3>
 8005930:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005934:	3601      	adds	r6, #1
 8005936:	9b06      	ldr	r3, [sp, #24]
 8005938:	429e      	cmp	r6, r3
 800593a:	f1a7 0708 	sub.w	r7, r7, #8
 800593e:	ddeb      	ble.n	8005918 <__kernel_rem_pio2+0xa0>
 8005940:	ed9d 7b04 	vldr	d7, [sp, #16]
 8005944:	f108 0801 	add.w	r8, r8, #1
 8005948:	ecab 7b02 	vstmia	fp!, {d7}
 800594c:	3508      	adds	r5, #8
 800594e:	e7cc      	b.n	80058ea <__kernel_rem_pio2+0x72>
 8005950:	9b02      	ldr	r3, [sp, #8]
 8005952:	aa0e      	add	r2, sp, #56	; 0x38
 8005954:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8005958:	930d      	str	r3, [sp, #52]	; 0x34
 800595a:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800595c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8005960:	9c02      	ldr	r4, [sp, #8]
 8005962:	930c      	str	r3, [sp, #48]	; 0x30
 8005964:	00e3      	lsls	r3, r4, #3
 8005966:	930a      	str	r3, [sp, #40]	; 0x28
 8005968:	ab9a      	add	r3, sp, #616	; 0x268
 800596a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800596e:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 8005972:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 8005976:	ab72      	add	r3, sp, #456	; 0x1c8
 8005978:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 800597c:	46c3      	mov	fp, r8
 800597e:	46a1      	mov	r9, r4
 8005980:	f1b9 0f00 	cmp.w	r9, #0
 8005984:	f1a5 0508 	sub.w	r5, r5, #8
 8005988:	dc77      	bgt.n	8005a7a <__kernel_rem_pio2+0x202>
 800598a:	ec47 6b10 	vmov	d0, r6, r7
 800598e:	4650      	mov	r0, sl
 8005990:	f000 fc0a 	bl	80061a8 <scalbn>
 8005994:	ec57 6b10 	vmov	r6, r7, d0
 8005998:	2200      	movs	r2, #0
 800599a:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800599e:	ee10 0a10 	vmov	r0, s0
 80059a2:	4639      	mov	r1, r7
 80059a4:	f7fa fe28 	bl	80005f8 <__aeabi_dmul>
 80059a8:	ec41 0b10 	vmov	d0, r0, r1
 80059ac:	f000 fb7c 	bl	80060a8 <floor>
 80059b0:	4b7c      	ldr	r3, [pc, #496]	; (8005ba4 <__kernel_rem_pio2+0x32c>)
 80059b2:	ec51 0b10 	vmov	r0, r1, d0
 80059b6:	2200      	movs	r2, #0
 80059b8:	f7fa fe1e 	bl	80005f8 <__aeabi_dmul>
 80059bc:	4602      	mov	r2, r0
 80059be:	460b      	mov	r3, r1
 80059c0:	4630      	mov	r0, r6
 80059c2:	4639      	mov	r1, r7
 80059c4:	f7fa fc60 	bl	8000288 <__aeabi_dsub>
 80059c8:	460f      	mov	r7, r1
 80059ca:	4606      	mov	r6, r0
 80059cc:	f7fb f8ae 	bl	8000b2c <__aeabi_d2iz>
 80059d0:	9004      	str	r0, [sp, #16]
 80059d2:	f7fa fda7 	bl	8000524 <__aeabi_i2d>
 80059d6:	4602      	mov	r2, r0
 80059d8:	460b      	mov	r3, r1
 80059da:	4630      	mov	r0, r6
 80059dc:	4639      	mov	r1, r7
 80059de:	f7fa fc53 	bl	8000288 <__aeabi_dsub>
 80059e2:	f1ba 0f00 	cmp.w	sl, #0
 80059e6:	4606      	mov	r6, r0
 80059e8:	460f      	mov	r7, r1
 80059ea:	dd6d      	ble.n	8005ac8 <__kernel_rem_pio2+0x250>
 80059ec:	1e62      	subs	r2, r4, #1
 80059ee:	ab0e      	add	r3, sp, #56	; 0x38
 80059f0:	9d04      	ldr	r5, [sp, #16]
 80059f2:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80059f6:	f1ca 0118 	rsb	r1, sl, #24
 80059fa:	fa40 f301 	asr.w	r3, r0, r1
 80059fe:	441d      	add	r5, r3
 8005a00:	408b      	lsls	r3, r1
 8005a02:	1ac0      	subs	r0, r0, r3
 8005a04:	ab0e      	add	r3, sp, #56	; 0x38
 8005a06:	9504      	str	r5, [sp, #16]
 8005a08:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8005a0c:	f1ca 0317 	rsb	r3, sl, #23
 8005a10:	fa40 fb03 	asr.w	fp, r0, r3
 8005a14:	f1bb 0f00 	cmp.w	fp, #0
 8005a18:	dd65      	ble.n	8005ae6 <__kernel_rem_pio2+0x26e>
 8005a1a:	9b04      	ldr	r3, [sp, #16]
 8005a1c:	2200      	movs	r2, #0
 8005a1e:	3301      	adds	r3, #1
 8005a20:	9304      	str	r3, [sp, #16]
 8005a22:	4615      	mov	r5, r2
 8005a24:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8005a28:	4294      	cmp	r4, r2
 8005a2a:	f300 809c 	bgt.w	8005b66 <__kernel_rem_pio2+0x2ee>
 8005a2e:	f1ba 0f00 	cmp.w	sl, #0
 8005a32:	dd07      	ble.n	8005a44 <__kernel_rem_pio2+0x1cc>
 8005a34:	f1ba 0f01 	cmp.w	sl, #1
 8005a38:	f000 80c0 	beq.w	8005bbc <__kernel_rem_pio2+0x344>
 8005a3c:	f1ba 0f02 	cmp.w	sl, #2
 8005a40:	f000 80c6 	beq.w	8005bd0 <__kernel_rem_pio2+0x358>
 8005a44:	f1bb 0f02 	cmp.w	fp, #2
 8005a48:	d14d      	bne.n	8005ae6 <__kernel_rem_pio2+0x26e>
 8005a4a:	4632      	mov	r2, r6
 8005a4c:	463b      	mov	r3, r7
 8005a4e:	4956      	ldr	r1, [pc, #344]	; (8005ba8 <__kernel_rem_pio2+0x330>)
 8005a50:	2000      	movs	r0, #0
 8005a52:	f7fa fc19 	bl	8000288 <__aeabi_dsub>
 8005a56:	4606      	mov	r6, r0
 8005a58:	460f      	mov	r7, r1
 8005a5a:	2d00      	cmp	r5, #0
 8005a5c:	d043      	beq.n	8005ae6 <__kernel_rem_pio2+0x26e>
 8005a5e:	4650      	mov	r0, sl
 8005a60:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 8005b98 <__kernel_rem_pio2+0x320>
 8005a64:	f000 fba0 	bl	80061a8 <scalbn>
 8005a68:	4630      	mov	r0, r6
 8005a6a:	4639      	mov	r1, r7
 8005a6c:	ec53 2b10 	vmov	r2, r3, d0
 8005a70:	f7fa fc0a 	bl	8000288 <__aeabi_dsub>
 8005a74:	4606      	mov	r6, r0
 8005a76:	460f      	mov	r7, r1
 8005a78:	e035      	b.n	8005ae6 <__kernel_rem_pio2+0x26e>
 8005a7a:	4b4c      	ldr	r3, [pc, #304]	; (8005bac <__kernel_rem_pio2+0x334>)
 8005a7c:	2200      	movs	r2, #0
 8005a7e:	4630      	mov	r0, r6
 8005a80:	4639      	mov	r1, r7
 8005a82:	f7fa fdb9 	bl	80005f8 <__aeabi_dmul>
 8005a86:	f7fb f851 	bl	8000b2c <__aeabi_d2iz>
 8005a8a:	f7fa fd4b 	bl	8000524 <__aeabi_i2d>
 8005a8e:	4602      	mov	r2, r0
 8005a90:	460b      	mov	r3, r1
 8005a92:	ec43 2b18 	vmov	d8, r2, r3
 8005a96:	4b46      	ldr	r3, [pc, #280]	; (8005bb0 <__kernel_rem_pio2+0x338>)
 8005a98:	2200      	movs	r2, #0
 8005a9a:	f7fa fdad 	bl	80005f8 <__aeabi_dmul>
 8005a9e:	4602      	mov	r2, r0
 8005aa0:	460b      	mov	r3, r1
 8005aa2:	4630      	mov	r0, r6
 8005aa4:	4639      	mov	r1, r7
 8005aa6:	f7fa fbef 	bl	8000288 <__aeabi_dsub>
 8005aaa:	f7fb f83f 	bl	8000b2c <__aeabi_d2iz>
 8005aae:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005ab2:	f84b 0b04 	str.w	r0, [fp], #4
 8005ab6:	ec51 0b18 	vmov	r0, r1, d8
 8005aba:	f7fa fbe7 	bl	800028c <__adddf3>
 8005abe:	f109 39ff 	add.w	r9, r9, #4294967295
 8005ac2:	4606      	mov	r6, r0
 8005ac4:	460f      	mov	r7, r1
 8005ac6:	e75b      	b.n	8005980 <__kernel_rem_pio2+0x108>
 8005ac8:	d106      	bne.n	8005ad8 <__kernel_rem_pio2+0x260>
 8005aca:	1e63      	subs	r3, r4, #1
 8005acc:	aa0e      	add	r2, sp, #56	; 0x38
 8005ace:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8005ad2:	ea4f 5be0 	mov.w	fp, r0, asr #23
 8005ad6:	e79d      	b.n	8005a14 <__kernel_rem_pio2+0x19c>
 8005ad8:	4b36      	ldr	r3, [pc, #216]	; (8005bb4 <__kernel_rem_pio2+0x33c>)
 8005ada:	2200      	movs	r2, #0
 8005adc:	f7fb f812 	bl	8000b04 <__aeabi_dcmpge>
 8005ae0:	2800      	cmp	r0, #0
 8005ae2:	d13d      	bne.n	8005b60 <__kernel_rem_pio2+0x2e8>
 8005ae4:	4683      	mov	fp, r0
 8005ae6:	2200      	movs	r2, #0
 8005ae8:	2300      	movs	r3, #0
 8005aea:	4630      	mov	r0, r6
 8005aec:	4639      	mov	r1, r7
 8005aee:	f7fa ffeb 	bl	8000ac8 <__aeabi_dcmpeq>
 8005af2:	2800      	cmp	r0, #0
 8005af4:	f000 80c0 	beq.w	8005c78 <__kernel_rem_pio2+0x400>
 8005af8:	1e65      	subs	r5, r4, #1
 8005afa:	462b      	mov	r3, r5
 8005afc:	2200      	movs	r2, #0
 8005afe:	9902      	ldr	r1, [sp, #8]
 8005b00:	428b      	cmp	r3, r1
 8005b02:	da6c      	bge.n	8005bde <__kernel_rem_pio2+0x366>
 8005b04:	2a00      	cmp	r2, #0
 8005b06:	f000 8089 	beq.w	8005c1c <__kernel_rem_pio2+0x3a4>
 8005b0a:	ab0e      	add	r3, sp, #56	; 0x38
 8005b0c:	f1aa 0a18 	sub.w	sl, sl, #24
 8005b10:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	f000 80ad 	beq.w	8005c74 <__kernel_rem_pio2+0x3fc>
 8005b1a:	4650      	mov	r0, sl
 8005b1c:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 8005b98 <__kernel_rem_pio2+0x320>
 8005b20:	f000 fb42 	bl	80061a8 <scalbn>
 8005b24:	ab9a      	add	r3, sp, #616	; 0x268
 8005b26:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8005b2a:	ec57 6b10 	vmov	r6, r7, d0
 8005b2e:	00ec      	lsls	r4, r5, #3
 8005b30:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 8005b34:	46aa      	mov	sl, r5
 8005b36:	f1ba 0f00 	cmp.w	sl, #0
 8005b3a:	f280 80d6 	bge.w	8005cea <__kernel_rem_pio2+0x472>
 8005b3e:	ed9f 8b14 	vldr	d8, [pc, #80]	; 8005b90 <__kernel_rem_pio2+0x318>
 8005b42:	462e      	mov	r6, r5
 8005b44:	2e00      	cmp	r6, #0
 8005b46:	f2c0 8104 	blt.w	8005d52 <__kernel_rem_pio2+0x4da>
 8005b4a:	ab72      	add	r3, sp, #456	; 0x1c8
 8005b4c:	ed8d 8b06 	vstr	d8, [sp, #24]
 8005b50:	f8df a064 	ldr.w	sl, [pc, #100]	; 8005bb8 <__kernel_rem_pio2+0x340>
 8005b54:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 8005b58:	f04f 0800 	mov.w	r8, #0
 8005b5c:	1baf      	subs	r7, r5, r6
 8005b5e:	e0ea      	b.n	8005d36 <__kernel_rem_pio2+0x4be>
 8005b60:	f04f 0b02 	mov.w	fp, #2
 8005b64:	e759      	b.n	8005a1a <__kernel_rem_pio2+0x1a2>
 8005b66:	f8d8 3000 	ldr.w	r3, [r8]
 8005b6a:	b955      	cbnz	r5, 8005b82 <__kernel_rem_pio2+0x30a>
 8005b6c:	b123      	cbz	r3, 8005b78 <__kernel_rem_pio2+0x300>
 8005b6e:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8005b72:	f8c8 3000 	str.w	r3, [r8]
 8005b76:	2301      	movs	r3, #1
 8005b78:	3201      	adds	r2, #1
 8005b7a:	f108 0804 	add.w	r8, r8, #4
 8005b7e:	461d      	mov	r5, r3
 8005b80:	e752      	b.n	8005a28 <__kernel_rem_pio2+0x1b0>
 8005b82:	1acb      	subs	r3, r1, r3
 8005b84:	f8c8 3000 	str.w	r3, [r8]
 8005b88:	462b      	mov	r3, r5
 8005b8a:	e7f5      	b.n	8005b78 <__kernel_rem_pio2+0x300>
 8005b8c:	f3af 8000 	nop.w
	...
 8005b9c:	3ff00000 	.word	0x3ff00000
 8005ba0:	08006500 	.word	0x08006500
 8005ba4:	40200000 	.word	0x40200000
 8005ba8:	3ff00000 	.word	0x3ff00000
 8005bac:	3e700000 	.word	0x3e700000
 8005bb0:	41700000 	.word	0x41700000
 8005bb4:	3fe00000 	.word	0x3fe00000
 8005bb8:	080064c0 	.word	0x080064c0
 8005bbc:	1e62      	subs	r2, r4, #1
 8005bbe:	ab0e      	add	r3, sp, #56	; 0x38
 8005bc0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005bc4:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8005bc8:	a90e      	add	r1, sp, #56	; 0x38
 8005bca:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8005bce:	e739      	b.n	8005a44 <__kernel_rem_pio2+0x1cc>
 8005bd0:	1e62      	subs	r2, r4, #1
 8005bd2:	ab0e      	add	r3, sp, #56	; 0x38
 8005bd4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005bd8:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8005bdc:	e7f4      	b.n	8005bc8 <__kernel_rem_pio2+0x350>
 8005bde:	a90e      	add	r1, sp, #56	; 0x38
 8005be0:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8005be4:	3b01      	subs	r3, #1
 8005be6:	430a      	orrs	r2, r1
 8005be8:	e789      	b.n	8005afe <__kernel_rem_pio2+0x286>
 8005bea:	3301      	adds	r3, #1
 8005bec:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8005bf0:	2900      	cmp	r1, #0
 8005bf2:	d0fa      	beq.n	8005bea <__kernel_rem_pio2+0x372>
 8005bf4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005bf6:	f502 721a 	add.w	r2, r2, #616	; 0x268
 8005bfa:	446a      	add	r2, sp
 8005bfc:	3a98      	subs	r2, #152	; 0x98
 8005bfe:	920a      	str	r2, [sp, #40]	; 0x28
 8005c00:	9a08      	ldr	r2, [sp, #32]
 8005c02:	18e3      	adds	r3, r4, r3
 8005c04:	18a5      	adds	r5, r4, r2
 8005c06:	aa22      	add	r2, sp, #136	; 0x88
 8005c08:	f104 0801 	add.w	r8, r4, #1
 8005c0c:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 8005c10:	9304      	str	r3, [sp, #16]
 8005c12:	9b04      	ldr	r3, [sp, #16]
 8005c14:	4543      	cmp	r3, r8
 8005c16:	da04      	bge.n	8005c22 <__kernel_rem_pio2+0x3aa>
 8005c18:	461c      	mov	r4, r3
 8005c1a:	e6a3      	b.n	8005964 <__kernel_rem_pio2+0xec>
 8005c1c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005c1e:	2301      	movs	r3, #1
 8005c20:	e7e4      	b.n	8005bec <__kernel_rem_pio2+0x374>
 8005c22:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005c24:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8005c28:	f7fa fc7c 	bl	8000524 <__aeabi_i2d>
 8005c2c:	e8e5 0102 	strd	r0, r1, [r5], #8
 8005c30:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005c32:	46ab      	mov	fp, r5
 8005c34:	461c      	mov	r4, r3
 8005c36:	f04f 0900 	mov.w	r9, #0
 8005c3a:	2600      	movs	r6, #0
 8005c3c:	2700      	movs	r7, #0
 8005c3e:	9b06      	ldr	r3, [sp, #24]
 8005c40:	4599      	cmp	r9, r3
 8005c42:	dd06      	ble.n	8005c52 <__kernel_rem_pio2+0x3da>
 8005c44:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005c46:	e8e3 6702 	strd	r6, r7, [r3], #8
 8005c4a:	f108 0801 	add.w	r8, r8, #1
 8005c4e:	930a      	str	r3, [sp, #40]	; 0x28
 8005c50:	e7df      	b.n	8005c12 <__kernel_rem_pio2+0x39a>
 8005c52:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8005c56:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8005c5a:	f7fa fccd 	bl	80005f8 <__aeabi_dmul>
 8005c5e:	4602      	mov	r2, r0
 8005c60:	460b      	mov	r3, r1
 8005c62:	4630      	mov	r0, r6
 8005c64:	4639      	mov	r1, r7
 8005c66:	f7fa fb11 	bl	800028c <__adddf3>
 8005c6a:	f109 0901 	add.w	r9, r9, #1
 8005c6e:	4606      	mov	r6, r0
 8005c70:	460f      	mov	r7, r1
 8005c72:	e7e4      	b.n	8005c3e <__kernel_rem_pio2+0x3c6>
 8005c74:	3d01      	subs	r5, #1
 8005c76:	e748      	b.n	8005b0a <__kernel_rem_pio2+0x292>
 8005c78:	ec47 6b10 	vmov	d0, r6, r7
 8005c7c:	f1ca 0000 	rsb	r0, sl, #0
 8005c80:	f000 fa92 	bl	80061a8 <scalbn>
 8005c84:	ec57 6b10 	vmov	r6, r7, d0
 8005c88:	4ba0      	ldr	r3, [pc, #640]	; (8005f0c <__kernel_rem_pio2+0x694>)
 8005c8a:	ee10 0a10 	vmov	r0, s0
 8005c8e:	2200      	movs	r2, #0
 8005c90:	4639      	mov	r1, r7
 8005c92:	f7fa ff37 	bl	8000b04 <__aeabi_dcmpge>
 8005c96:	b1f8      	cbz	r0, 8005cd8 <__kernel_rem_pio2+0x460>
 8005c98:	4b9d      	ldr	r3, [pc, #628]	; (8005f10 <__kernel_rem_pio2+0x698>)
 8005c9a:	2200      	movs	r2, #0
 8005c9c:	4630      	mov	r0, r6
 8005c9e:	4639      	mov	r1, r7
 8005ca0:	f7fa fcaa 	bl	80005f8 <__aeabi_dmul>
 8005ca4:	f7fa ff42 	bl	8000b2c <__aeabi_d2iz>
 8005ca8:	4680      	mov	r8, r0
 8005caa:	f7fa fc3b 	bl	8000524 <__aeabi_i2d>
 8005cae:	4b97      	ldr	r3, [pc, #604]	; (8005f0c <__kernel_rem_pio2+0x694>)
 8005cb0:	2200      	movs	r2, #0
 8005cb2:	f7fa fca1 	bl	80005f8 <__aeabi_dmul>
 8005cb6:	460b      	mov	r3, r1
 8005cb8:	4602      	mov	r2, r0
 8005cba:	4639      	mov	r1, r7
 8005cbc:	4630      	mov	r0, r6
 8005cbe:	f7fa fae3 	bl	8000288 <__aeabi_dsub>
 8005cc2:	f7fa ff33 	bl	8000b2c <__aeabi_d2iz>
 8005cc6:	1c65      	adds	r5, r4, #1
 8005cc8:	ab0e      	add	r3, sp, #56	; 0x38
 8005cca:	f10a 0a18 	add.w	sl, sl, #24
 8005cce:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8005cd2:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8005cd6:	e720      	b.n	8005b1a <__kernel_rem_pio2+0x2a2>
 8005cd8:	4630      	mov	r0, r6
 8005cda:	4639      	mov	r1, r7
 8005cdc:	f7fa ff26 	bl	8000b2c <__aeabi_d2iz>
 8005ce0:	ab0e      	add	r3, sp, #56	; 0x38
 8005ce2:	4625      	mov	r5, r4
 8005ce4:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8005ce8:	e717      	b.n	8005b1a <__kernel_rem_pio2+0x2a2>
 8005cea:	ab0e      	add	r3, sp, #56	; 0x38
 8005cec:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 8005cf0:	f7fa fc18 	bl	8000524 <__aeabi_i2d>
 8005cf4:	4632      	mov	r2, r6
 8005cf6:	463b      	mov	r3, r7
 8005cf8:	f7fa fc7e 	bl	80005f8 <__aeabi_dmul>
 8005cfc:	4b84      	ldr	r3, [pc, #528]	; (8005f10 <__kernel_rem_pio2+0x698>)
 8005cfe:	e968 0102 	strd	r0, r1, [r8, #-8]!
 8005d02:	2200      	movs	r2, #0
 8005d04:	4630      	mov	r0, r6
 8005d06:	4639      	mov	r1, r7
 8005d08:	f7fa fc76 	bl	80005f8 <__aeabi_dmul>
 8005d0c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005d10:	4606      	mov	r6, r0
 8005d12:	460f      	mov	r7, r1
 8005d14:	e70f      	b.n	8005b36 <__kernel_rem_pio2+0x2be>
 8005d16:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 8005d1a:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 8005d1e:	f7fa fc6b 	bl	80005f8 <__aeabi_dmul>
 8005d22:	4602      	mov	r2, r0
 8005d24:	460b      	mov	r3, r1
 8005d26:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005d2a:	f7fa faaf 	bl	800028c <__adddf3>
 8005d2e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8005d32:	f108 0801 	add.w	r8, r8, #1
 8005d36:	9b02      	ldr	r3, [sp, #8]
 8005d38:	4598      	cmp	r8, r3
 8005d3a:	dc01      	bgt.n	8005d40 <__kernel_rem_pio2+0x4c8>
 8005d3c:	45b8      	cmp	r8, r7
 8005d3e:	ddea      	ble.n	8005d16 <__kernel_rem_pio2+0x49e>
 8005d40:	ed9d 7b06 	vldr	d7, [sp, #24]
 8005d44:	ab4a      	add	r3, sp, #296	; 0x128
 8005d46:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8005d4a:	ed87 7b00 	vstr	d7, [r7]
 8005d4e:	3e01      	subs	r6, #1
 8005d50:	e6f8      	b.n	8005b44 <__kernel_rem_pio2+0x2cc>
 8005d52:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8005d54:	2b02      	cmp	r3, #2
 8005d56:	dc0b      	bgt.n	8005d70 <__kernel_rem_pio2+0x4f8>
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	dc35      	bgt.n	8005dc8 <__kernel_rem_pio2+0x550>
 8005d5c:	d059      	beq.n	8005e12 <__kernel_rem_pio2+0x59a>
 8005d5e:	9b04      	ldr	r3, [sp, #16]
 8005d60:	f003 0007 	and.w	r0, r3, #7
 8005d64:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8005d68:	ecbd 8b02 	vpop	{d8}
 8005d6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d70:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8005d72:	2b03      	cmp	r3, #3
 8005d74:	d1f3      	bne.n	8005d5e <__kernel_rem_pio2+0x4e6>
 8005d76:	ab4a      	add	r3, sp, #296	; 0x128
 8005d78:	4423      	add	r3, r4
 8005d7a:	9306      	str	r3, [sp, #24]
 8005d7c:	461c      	mov	r4, r3
 8005d7e:	469a      	mov	sl, r3
 8005d80:	9502      	str	r5, [sp, #8]
 8005d82:	9b02      	ldr	r3, [sp, #8]
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	f1aa 0a08 	sub.w	sl, sl, #8
 8005d8a:	dc6b      	bgt.n	8005e64 <__kernel_rem_pio2+0x5ec>
 8005d8c:	46aa      	mov	sl, r5
 8005d8e:	f1ba 0f01 	cmp.w	sl, #1
 8005d92:	f1a4 0408 	sub.w	r4, r4, #8
 8005d96:	f300 8085 	bgt.w	8005ea4 <__kernel_rem_pio2+0x62c>
 8005d9a:	9c06      	ldr	r4, [sp, #24]
 8005d9c:	2000      	movs	r0, #0
 8005d9e:	3408      	adds	r4, #8
 8005da0:	2100      	movs	r1, #0
 8005da2:	2d01      	cmp	r5, #1
 8005da4:	f300 809d 	bgt.w	8005ee2 <__kernel_rem_pio2+0x66a>
 8005da8:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 8005dac:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 8005db0:	f1bb 0f00 	cmp.w	fp, #0
 8005db4:	f040 809b 	bne.w	8005eee <__kernel_rem_pio2+0x676>
 8005db8:	9b01      	ldr	r3, [sp, #4]
 8005dba:	e9c3 5600 	strd	r5, r6, [r3]
 8005dbe:	e9c3 7802 	strd	r7, r8, [r3, #8]
 8005dc2:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8005dc6:	e7ca      	b.n	8005d5e <__kernel_rem_pio2+0x4e6>
 8005dc8:	3408      	adds	r4, #8
 8005dca:	ab4a      	add	r3, sp, #296	; 0x128
 8005dcc:	441c      	add	r4, r3
 8005dce:	462e      	mov	r6, r5
 8005dd0:	2000      	movs	r0, #0
 8005dd2:	2100      	movs	r1, #0
 8005dd4:	2e00      	cmp	r6, #0
 8005dd6:	da36      	bge.n	8005e46 <__kernel_rem_pio2+0x5ce>
 8005dd8:	f1bb 0f00 	cmp.w	fp, #0
 8005ddc:	d039      	beq.n	8005e52 <__kernel_rem_pio2+0x5da>
 8005dde:	4602      	mov	r2, r0
 8005de0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005de4:	9c01      	ldr	r4, [sp, #4]
 8005de6:	e9c4 2300 	strd	r2, r3, [r4]
 8005dea:	4602      	mov	r2, r0
 8005dec:	460b      	mov	r3, r1
 8005dee:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 8005df2:	f7fa fa49 	bl	8000288 <__aeabi_dsub>
 8005df6:	ae4c      	add	r6, sp, #304	; 0x130
 8005df8:	2401      	movs	r4, #1
 8005dfa:	42a5      	cmp	r5, r4
 8005dfc:	da2c      	bge.n	8005e58 <__kernel_rem_pio2+0x5e0>
 8005dfe:	f1bb 0f00 	cmp.w	fp, #0
 8005e02:	d002      	beq.n	8005e0a <__kernel_rem_pio2+0x592>
 8005e04:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005e08:	4619      	mov	r1, r3
 8005e0a:	9b01      	ldr	r3, [sp, #4]
 8005e0c:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8005e10:	e7a5      	b.n	8005d5e <__kernel_rem_pio2+0x4e6>
 8005e12:	f504 731a 	add.w	r3, r4, #616	; 0x268
 8005e16:	eb0d 0403 	add.w	r4, sp, r3
 8005e1a:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8005e1e:	2000      	movs	r0, #0
 8005e20:	2100      	movs	r1, #0
 8005e22:	2d00      	cmp	r5, #0
 8005e24:	da09      	bge.n	8005e3a <__kernel_rem_pio2+0x5c2>
 8005e26:	f1bb 0f00 	cmp.w	fp, #0
 8005e2a:	d002      	beq.n	8005e32 <__kernel_rem_pio2+0x5ba>
 8005e2c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005e30:	4619      	mov	r1, r3
 8005e32:	9b01      	ldr	r3, [sp, #4]
 8005e34:	e9c3 0100 	strd	r0, r1, [r3]
 8005e38:	e791      	b.n	8005d5e <__kernel_rem_pio2+0x4e6>
 8005e3a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8005e3e:	f7fa fa25 	bl	800028c <__adddf3>
 8005e42:	3d01      	subs	r5, #1
 8005e44:	e7ed      	b.n	8005e22 <__kernel_rem_pio2+0x5aa>
 8005e46:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8005e4a:	f7fa fa1f 	bl	800028c <__adddf3>
 8005e4e:	3e01      	subs	r6, #1
 8005e50:	e7c0      	b.n	8005dd4 <__kernel_rem_pio2+0x55c>
 8005e52:	4602      	mov	r2, r0
 8005e54:	460b      	mov	r3, r1
 8005e56:	e7c5      	b.n	8005de4 <__kernel_rem_pio2+0x56c>
 8005e58:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8005e5c:	f7fa fa16 	bl	800028c <__adddf3>
 8005e60:	3401      	adds	r4, #1
 8005e62:	e7ca      	b.n	8005dfa <__kernel_rem_pio2+0x582>
 8005e64:	e9da 8900 	ldrd	r8, r9, [sl]
 8005e68:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8005e6c:	9b02      	ldr	r3, [sp, #8]
 8005e6e:	3b01      	subs	r3, #1
 8005e70:	9302      	str	r3, [sp, #8]
 8005e72:	4632      	mov	r2, r6
 8005e74:	463b      	mov	r3, r7
 8005e76:	4640      	mov	r0, r8
 8005e78:	4649      	mov	r1, r9
 8005e7a:	f7fa fa07 	bl	800028c <__adddf3>
 8005e7e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8005e82:	4602      	mov	r2, r0
 8005e84:	460b      	mov	r3, r1
 8005e86:	4640      	mov	r0, r8
 8005e88:	4649      	mov	r1, r9
 8005e8a:	f7fa f9fd 	bl	8000288 <__aeabi_dsub>
 8005e8e:	4632      	mov	r2, r6
 8005e90:	463b      	mov	r3, r7
 8005e92:	f7fa f9fb 	bl	800028c <__adddf3>
 8005e96:	ed9d 7b08 	vldr	d7, [sp, #32]
 8005e9a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8005e9e:	ed8a 7b00 	vstr	d7, [sl]
 8005ea2:	e76e      	b.n	8005d82 <__kernel_rem_pio2+0x50a>
 8005ea4:	e9d4 8900 	ldrd	r8, r9, [r4]
 8005ea8:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 8005eac:	4640      	mov	r0, r8
 8005eae:	4632      	mov	r2, r6
 8005eb0:	463b      	mov	r3, r7
 8005eb2:	4649      	mov	r1, r9
 8005eb4:	f7fa f9ea 	bl	800028c <__adddf3>
 8005eb8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005ebc:	4602      	mov	r2, r0
 8005ebe:	460b      	mov	r3, r1
 8005ec0:	4640      	mov	r0, r8
 8005ec2:	4649      	mov	r1, r9
 8005ec4:	f7fa f9e0 	bl	8000288 <__aeabi_dsub>
 8005ec8:	4632      	mov	r2, r6
 8005eca:	463b      	mov	r3, r7
 8005ecc:	f7fa f9de 	bl	800028c <__adddf3>
 8005ed0:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005ed4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8005ed8:	ed84 7b00 	vstr	d7, [r4]
 8005edc:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005ee0:	e755      	b.n	8005d8e <__kernel_rem_pio2+0x516>
 8005ee2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8005ee6:	f7fa f9d1 	bl	800028c <__adddf3>
 8005eea:	3d01      	subs	r5, #1
 8005eec:	e759      	b.n	8005da2 <__kernel_rem_pio2+0x52a>
 8005eee:	9b01      	ldr	r3, [sp, #4]
 8005ef0:	9a01      	ldr	r2, [sp, #4]
 8005ef2:	601d      	str	r5, [r3, #0]
 8005ef4:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 8005ef8:	605c      	str	r4, [r3, #4]
 8005efa:	609f      	str	r7, [r3, #8]
 8005efc:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 8005f00:	60d3      	str	r3, [r2, #12]
 8005f02:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005f06:	6110      	str	r0, [r2, #16]
 8005f08:	6153      	str	r3, [r2, #20]
 8005f0a:	e728      	b.n	8005d5e <__kernel_rem_pio2+0x4e6>
 8005f0c:	41700000 	.word	0x41700000
 8005f10:	3e700000 	.word	0x3e700000
 8005f14:	00000000 	.word	0x00000000

08005f18 <__kernel_sin>:
 8005f18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f1c:	ed2d 8b04 	vpush	{d8-d9}
 8005f20:	eeb0 8a41 	vmov.f32	s16, s2
 8005f24:	eef0 8a61 	vmov.f32	s17, s3
 8005f28:	ec55 4b10 	vmov	r4, r5, d0
 8005f2c:	b083      	sub	sp, #12
 8005f2e:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8005f32:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8005f36:	9001      	str	r0, [sp, #4]
 8005f38:	da06      	bge.n	8005f48 <__kernel_sin+0x30>
 8005f3a:	ee10 0a10 	vmov	r0, s0
 8005f3e:	4629      	mov	r1, r5
 8005f40:	f7fa fdf4 	bl	8000b2c <__aeabi_d2iz>
 8005f44:	2800      	cmp	r0, #0
 8005f46:	d051      	beq.n	8005fec <__kernel_sin+0xd4>
 8005f48:	4622      	mov	r2, r4
 8005f4a:	462b      	mov	r3, r5
 8005f4c:	4620      	mov	r0, r4
 8005f4e:	4629      	mov	r1, r5
 8005f50:	f7fa fb52 	bl	80005f8 <__aeabi_dmul>
 8005f54:	4682      	mov	sl, r0
 8005f56:	468b      	mov	fp, r1
 8005f58:	4602      	mov	r2, r0
 8005f5a:	460b      	mov	r3, r1
 8005f5c:	4620      	mov	r0, r4
 8005f5e:	4629      	mov	r1, r5
 8005f60:	f7fa fb4a 	bl	80005f8 <__aeabi_dmul>
 8005f64:	a341      	add	r3, pc, #260	; (adr r3, 800606c <__kernel_sin+0x154>)
 8005f66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f6a:	4680      	mov	r8, r0
 8005f6c:	4689      	mov	r9, r1
 8005f6e:	4650      	mov	r0, sl
 8005f70:	4659      	mov	r1, fp
 8005f72:	f7fa fb41 	bl	80005f8 <__aeabi_dmul>
 8005f76:	a33f      	add	r3, pc, #252	; (adr r3, 8006074 <__kernel_sin+0x15c>)
 8005f78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f7c:	f7fa f984 	bl	8000288 <__aeabi_dsub>
 8005f80:	4652      	mov	r2, sl
 8005f82:	465b      	mov	r3, fp
 8005f84:	f7fa fb38 	bl	80005f8 <__aeabi_dmul>
 8005f88:	a33c      	add	r3, pc, #240	; (adr r3, 800607c <__kernel_sin+0x164>)
 8005f8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f8e:	f7fa f97d 	bl	800028c <__adddf3>
 8005f92:	4652      	mov	r2, sl
 8005f94:	465b      	mov	r3, fp
 8005f96:	f7fa fb2f 	bl	80005f8 <__aeabi_dmul>
 8005f9a:	a33a      	add	r3, pc, #232	; (adr r3, 8006084 <__kernel_sin+0x16c>)
 8005f9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fa0:	f7fa f972 	bl	8000288 <__aeabi_dsub>
 8005fa4:	4652      	mov	r2, sl
 8005fa6:	465b      	mov	r3, fp
 8005fa8:	f7fa fb26 	bl	80005f8 <__aeabi_dmul>
 8005fac:	a337      	add	r3, pc, #220	; (adr r3, 800608c <__kernel_sin+0x174>)
 8005fae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fb2:	f7fa f96b 	bl	800028c <__adddf3>
 8005fb6:	9b01      	ldr	r3, [sp, #4]
 8005fb8:	4606      	mov	r6, r0
 8005fba:	460f      	mov	r7, r1
 8005fbc:	b9eb      	cbnz	r3, 8005ffa <__kernel_sin+0xe2>
 8005fbe:	4602      	mov	r2, r0
 8005fc0:	460b      	mov	r3, r1
 8005fc2:	4650      	mov	r0, sl
 8005fc4:	4659      	mov	r1, fp
 8005fc6:	f7fa fb17 	bl	80005f8 <__aeabi_dmul>
 8005fca:	a325      	add	r3, pc, #148	; (adr r3, 8006060 <__kernel_sin+0x148>)
 8005fcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fd0:	f7fa f95a 	bl	8000288 <__aeabi_dsub>
 8005fd4:	4642      	mov	r2, r8
 8005fd6:	464b      	mov	r3, r9
 8005fd8:	f7fa fb0e 	bl	80005f8 <__aeabi_dmul>
 8005fdc:	4602      	mov	r2, r0
 8005fde:	460b      	mov	r3, r1
 8005fe0:	4620      	mov	r0, r4
 8005fe2:	4629      	mov	r1, r5
 8005fe4:	f7fa f952 	bl	800028c <__adddf3>
 8005fe8:	4604      	mov	r4, r0
 8005fea:	460d      	mov	r5, r1
 8005fec:	ec45 4b10 	vmov	d0, r4, r5
 8005ff0:	b003      	add	sp, #12
 8005ff2:	ecbd 8b04 	vpop	{d8-d9}
 8005ff6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ffa:	4b1b      	ldr	r3, [pc, #108]	; (8006068 <__kernel_sin+0x150>)
 8005ffc:	ec51 0b18 	vmov	r0, r1, d8
 8006000:	2200      	movs	r2, #0
 8006002:	f7fa faf9 	bl	80005f8 <__aeabi_dmul>
 8006006:	4632      	mov	r2, r6
 8006008:	ec41 0b19 	vmov	d9, r0, r1
 800600c:	463b      	mov	r3, r7
 800600e:	4640      	mov	r0, r8
 8006010:	4649      	mov	r1, r9
 8006012:	f7fa faf1 	bl	80005f8 <__aeabi_dmul>
 8006016:	4602      	mov	r2, r0
 8006018:	460b      	mov	r3, r1
 800601a:	ec51 0b19 	vmov	r0, r1, d9
 800601e:	f7fa f933 	bl	8000288 <__aeabi_dsub>
 8006022:	4652      	mov	r2, sl
 8006024:	465b      	mov	r3, fp
 8006026:	f7fa fae7 	bl	80005f8 <__aeabi_dmul>
 800602a:	ec53 2b18 	vmov	r2, r3, d8
 800602e:	f7fa f92b 	bl	8000288 <__aeabi_dsub>
 8006032:	a30b      	add	r3, pc, #44	; (adr r3, 8006060 <__kernel_sin+0x148>)
 8006034:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006038:	4606      	mov	r6, r0
 800603a:	460f      	mov	r7, r1
 800603c:	4640      	mov	r0, r8
 800603e:	4649      	mov	r1, r9
 8006040:	f7fa fada 	bl	80005f8 <__aeabi_dmul>
 8006044:	4602      	mov	r2, r0
 8006046:	460b      	mov	r3, r1
 8006048:	4630      	mov	r0, r6
 800604a:	4639      	mov	r1, r7
 800604c:	f7fa f91e 	bl	800028c <__adddf3>
 8006050:	4602      	mov	r2, r0
 8006052:	460b      	mov	r3, r1
 8006054:	4620      	mov	r0, r4
 8006056:	4629      	mov	r1, r5
 8006058:	f7fa f916 	bl	8000288 <__aeabi_dsub>
 800605c:	e7c4      	b.n	8005fe8 <__kernel_sin+0xd0>
 800605e:	bf00      	nop
 8006060:	55555549 	.word	0x55555549
 8006064:	3fc55555 	.word	0x3fc55555
 8006068:	3fe00000 	.word	0x3fe00000
 800606c:	5acfd57c 	.word	0x5acfd57c
 8006070:	3de5d93a 	.word	0x3de5d93a
 8006074:	8a2b9ceb 	.word	0x8a2b9ceb
 8006078:	3e5ae5e6 	.word	0x3e5ae5e6
 800607c:	57b1fe7d 	.word	0x57b1fe7d
 8006080:	3ec71de3 	.word	0x3ec71de3
 8006084:	19c161d5 	.word	0x19c161d5
 8006088:	3f2a01a0 	.word	0x3f2a01a0
 800608c:	1110f8a6 	.word	0x1110f8a6
 8006090:	3f811111 	.word	0x3f811111

08006094 <fabs>:
 8006094:	ec51 0b10 	vmov	r0, r1, d0
 8006098:	ee10 2a10 	vmov	r2, s0
 800609c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80060a0:	ec43 2b10 	vmov	d0, r2, r3
 80060a4:	4770      	bx	lr
	...

080060a8 <floor>:
 80060a8:	ec51 0b10 	vmov	r0, r1, d0
 80060ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80060b0:	f3c1 570a 	ubfx	r7, r1, #20, #11
 80060b4:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 80060b8:	2e13      	cmp	r6, #19
 80060ba:	ee10 5a10 	vmov	r5, s0
 80060be:	ee10 8a10 	vmov	r8, s0
 80060c2:	460c      	mov	r4, r1
 80060c4:	dc32      	bgt.n	800612c <floor+0x84>
 80060c6:	2e00      	cmp	r6, #0
 80060c8:	da14      	bge.n	80060f4 <floor+0x4c>
 80060ca:	a333      	add	r3, pc, #204	; (adr r3, 8006198 <floor+0xf0>)
 80060cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060d0:	f7fa f8dc 	bl	800028c <__adddf3>
 80060d4:	2200      	movs	r2, #0
 80060d6:	2300      	movs	r3, #0
 80060d8:	f7fa fd1e 	bl	8000b18 <__aeabi_dcmpgt>
 80060dc:	b138      	cbz	r0, 80060ee <floor+0x46>
 80060de:	2c00      	cmp	r4, #0
 80060e0:	da57      	bge.n	8006192 <floor+0xea>
 80060e2:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 80060e6:	431d      	orrs	r5, r3
 80060e8:	d001      	beq.n	80060ee <floor+0x46>
 80060ea:	4c2d      	ldr	r4, [pc, #180]	; (80061a0 <floor+0xf8>)
 80060ec:	2500      	movs	r5, #0
 80060ee:	4621      	mov	r1, r4
 80060f0:	4628      	mov	r0, r5
 80060f2:	e025      	b.n	8006140 <floor+0x98>
 80060f4:	4f2b      	ldr	r7, [pc, #172]	; (80061a4 <floor+0xfc>)
 80060f6:	4137      	asrs	r7, r6
 80060f8:	ea01 0307 	and.w	r3, r1, r7
 80060fc:	4303      	orrs	r3, r0
 80060fe:	d01f      	beq.n	8006140 <floor+0x98>
 8006100:	a325      	add	r3, pc, #148	; (adr r3, 8006198 <floor+0xf0>)
 8006102:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006106:	f7fa f8c1 	bl	800028c <__adddf3>
 800610a:	2200      	movs	r2, #0
 800610c:	2300      	movs	r3, #0
 800610e:	f7fa fd03 	bl	8000b18 <__aeabi_dcmpgt>
 8006112:	2800      	cmp	r0, #0
 8006114:	d0eb      	beq.n	80060ee <floor+0x46>
 8006116:	2c00      	cmp	r4, #0
 8006118:	bfbe      	ittt	lt
 800611a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800611e:	fa43 f606 	asrlt.w	r6, r3, r6
 8006122:	19a4      	addlt	r4, r4, r6
 8006124:	ea24 0407 	bic.w	r4, r4, r7
 8006128:	2500      	movs	r5, #0
 800612a:	e7e0      	b.n	80060ee <floor+0x46>
 800612c:	2e33      	cmp	r6, #51	; 0x33
 800612e:	dd0b      	ble.n	8006148 <floor+0xa0>
 8006130:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8006134:	d104      	bne.n	8006140 <floor+0x98>
 8006136:	ee10 2a10 	vmov	r2, s0
 800613a:	460b      	mov	r3, r1
 800613c:	f7fa f8a6 	bl	800028c <__adddf3>
 8006140:	ec41 0b10 	vmov	d0, r0, r1
 8006144:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006148:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800614c:	f04f 33ff 	mov.w	r3, #4294967295
 8006150:	fa23 f707 	lsr.w	r7, r3, r7
 8006154:	4207      	tst	r7, r0
 8006156:	d0f3      	beq.n	8006140 <floor+0x98>
 8006158:	a30f      	add	r3, pc, #60	; (adr r3, 8006198 <floor+0xf0>)
 800615a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800615e:	f7fa f895 	bl	800028c <__adddf3>
 8006162:	2200      	movs	r2, #0
 8006164:	2300      	movs	r3, #0
 8006166:	f7fa fcd7 	bl	8000b18 <__aeabi_dcmpgt>
 800616a:	2800      	cmp	r0, #0
 800616c:	d0bf      	beq.n	80060ee <floor+0x46>
 800616e:	2c00      	cmp	r4, #0
 8006170:	da02      	bge.n	8006178 <floor+0xd0>
 8006172:	2e14      	cmp	r6, #20
 8006174:	d103      	bne.n	800617e <floor+0xd6>
 8006176:	3401      	adds	r4, #1
 8006178:	ea25 0507 	bic.w	r5, r5, r7
 800617c:	e7b7      	b.n	80060ee <floor+0x46>
 800617e:	2301      	movs	r3, #1
 8006180:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8006184:	fa03 f606 	lsl.w	r6, r3, r6
 8006188:	4435      	add	r5, r6
 800618a:	4545      	cmp	r5, r8
 800618c:	bf38      	it	cc
 800618e:	18e4      	addcc	r4, r4, r3
 8006190:	e7f2      	b.n	8006178 <floor+0xd0>
 8006192:	2500      	movs	r5, #0
 8006194:	462c      	mov	r4, r5
 8006196:	e7aa      	b.n	80060ee <floor+0x46>
 8006198:	8800759c 	.word	0x8800759c
 800619c:	7e37e43c 	.word	0x7e37e43c
 80061a0:	bff00000 	.word	0xbff00000
 80061a4:	000fffff 	.word	0x000fffff

080061a8 <scalbn>:
 80061a8:	b570      	push	{r4, r5, r6, lr}
 80061aa:	ec55 4b10 	vmov	r4, r5, d0
 80061ae:	f3c5 520a 	ubfx	r2, r5, #20, #11
 80061b2:	4606      	mov	r6, r0
 80061b4:	462b      	mov	r3, r5
 80061b6:	b99a      	cbnz	r2, 80061e0 <scalbn+0x38>
 80061b8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80061bc:	4323      	orrs	r3, r4
 80061be:	d036      	beq.n	800622e <scalbn+0x86>
 80061c0:	4b39      	ldr	r3, [pc, #228]	; (80062a8 <scalbn+0x100>)
 80061c2:	4629      	mov	r1, r5
 80061c4:	ee10 0a10 	vmov	r0, s0
 80061c8:	2200      	movs	r2, #0
 80061ca:	f7fa fa15 	bl	80005f8 <__aeabi_dmul>
 80061ce:	4b37      	ldr	r3, [pc, #220]	; (80062ac <scalbn+0x104>)
 80061d0:	429e      	cmp	r6, r3
 80061d2:	4604      	mov	r4, r0
 80061d4:	460d      	mov	r5, r1
 80061d6:	da10      	bge.n	80061fa <scalbn+0x52>
 80061d8:	a32b      	add	r3, pc, #172	; (adr r3, 8006288 <scalbn+0xe0>)
 80061da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061de:	e03a      	b.n	8006256 <scalbn+0xae>
 80061e0:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80061e4:	428a      	cmp	r2, r1
 80061e6:	d10c      	bne.n	8006202 <scalbn+0x5a>
 80061e8:	ee10 2a10 	vmov	r2, s0
 80061ec:	4620      	mov	r0, r4
 80061ee:	4629      	mov	r1, r5
 80061f0:	f7fa f84c 	bl	800028c <__adddf3>
 80061f4:	4604      	mov	r4, r0
 80061f6:	460d      	mov	r5, r1
 80061f8:	e019      	b.n	800622e <scalbn+0x86>
 80061fa:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80061fe:	460b      	mov	r3, r1
 8006200:	3a36      	subs	r2, #54	; 0x36
 8006202:	4432      	add	r2, r6
 8006204:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8006208:	428a      	cmp	r2, r1
 800620a:	dd08      	ble.n	800621e <scalbn+0x76>
 800620c:	2d00      	cmp	r5, #0
 800620e:	a120      	add	r1, pc, #128	; (adr r1, 8006290 <scalbn+0xe8>)
 8006210:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006214:	da1c      	bge.n	8006250 <scalbn+0xa8>
 8006216:	a120      	add	r1, pc, #128	; (adr r1, 8006298 <scalbn+0xf0>)
 8006218:	e9d1 0100 	ldrd	r0, r1, [r1]
 800621c:	e018      	b.n	8006250 <scalbn+0xa8>
 800621e:	2a00      	cmp	r2, #0
 8006220:	dd08      	ble.n	8006234 <scalbn+0x8c>
 8006222:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8006226:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800622a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800622e:	ec45 4b10 	vmov	d0, r4, r5
 8006232:	bd70      	pop	{r4, r5, r6, pc}
 8006234:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8006238:	da19      	bge.n	800626e <scalbn+0xc6>
 800623a:	f24c 3350 	movw	r3, #50000	; 0xc350
 800623e:	429e      	cmp	r6, r3
 8006240:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8006244:	dd0a      	ble.n	800625c <scalbn+0xb4>
 8006246:	a112      	add	r1, pc, #72	; (adr r1, 8006290 <scalbn+0xe8>)
 8006248:	e9d1 0100 	ldrd	r0, r1, [r1]
 800624c:	2b00      	cmp	r3, #0
 800624e:	d1e2      	bne.n	8006216 <scalbn+0x6e>
 8006250:	a30f      	add	r3, pc, #60	; (adr r3, 8006290 <scalbn+0xe8>)
 8006252:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006256:	f7fa f9cf 	bl	80005f8 <__aeabi_dmul>
 800625a:	e7cb      	b.n	80061f4 <scalbn+0x4c>
 800625c:	a10a      	add	r1, pc, #40	; (adr r1, 8006288 <scalbn+0xe0>)
 800625e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006262:	2b00      	cmp	r3, #0
 8006264:	d0b8      	beq.n	80061d8 <scalbn+0x30>
 8006266:	a10e      	add	r1, pc, #56	; (adr r1, 80062a0 <scalbn+0xf8>)
 8006268:	e9d1 0100 	ldrd	r0, r1, [r1]
 800626c:	e7b4      	b.n	80061d8 <scalbn+0x30>
 800626e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8006272:	3236      	adds	r2, #54	; 0x36
 8006274:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006278:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800627c:	4620      	mov	r0, r4
 800627e:	4b0c      	ldr	r3, [pc, #48]	; (80062b0 <scalbn+0x108>)
 8006280:	2200      	movs	r2, #0
 8006282:	e7e8      	b.n	8006256 <scalbn+0xae>
 8006284:	f3af 8000 	nop.w
 8006288:	c2f8f359 	.word	0xc2f8f359
 800628c:	01a56e1f 	.word	0x01a56e1f
 8006290:	8800759c 	.word	0x8800759c
 8006294:	7e37e43c 	.word	0x7e37e43c
 8006298:	8800759c 	.word	0x8800759c
 800629c:	fe37e43c 	.word	0xfe37e43c
 80062a0:	c2f8f359 	.word	0xc2f8f359
 80062a4:	81a56e1f 	.word	0x81a56e1f
 80062a8:	43500000 	.word	0x43500000
 80062ac:	ffff3cb0 	.word	0xffff3cb0
 80062b0:	3c900000 	.word	0x3c900000

080062b4 <_init>:
 80062b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062b6:	bf00      	nop
 80062b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80062ba:	bc08      	pop	{r3}
 80062bc:	469e      	mov	lr, r3
 80062be:	4770      	bx	lr

080062c0 <_fini>:
 80062c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062c2:	bf00      	nop
 80062c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80062c6:	bc08      	pop	{r3}
 80062c8:	469e      	mov	lr, r3
 80062ca:	4770      	bx	lr
