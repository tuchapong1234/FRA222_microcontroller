
Project Studio3_Trajectory.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003ab8  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08003c50  08003c50  00013c50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003c68  08003c68  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08003c68  08003c68  00013c68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003c70  08003c70  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003c70  08003c70  00013c70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003c74  08003c74  00013c74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08003c78  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001a0  20000078  08003cf0  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000218  08003cf0  00020218  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007a19  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001310  00000000  00000000  00027ac1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000628  00000000  00000000  00028dd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000005c0  00000000  00000000  00029400  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015114  00000000  00000000  000299c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008073  00000000  00000000  0003ead4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00084f05  00000000  00000000  00046b47  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000cba4c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001adc  00000000  00000000  000cba9c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000078 	.word	0x20000078
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08003c38 	.word	0x08003c38

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	2000007c 	.word	0x2000007c
 80001d4:	08003c38 	.word	0x08003c38

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpun>:
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x10>
 8000a8e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a92:	d10a      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000a94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__aeabi_dcmpun+0x20>
 8000a9e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa2:	d102      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	f04f 0001 	mov.w	r0, #1
 8000aae:	4770      	bx	lr

08000ab0 <__aeabi_d2f>:
 8000ab0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ab8:	bf24      	itt	cs
 8000aba:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000abe:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ac2:	d90d      	bls.n	8000ae0 <__aeabi_d2f+0x30>
 8000ac4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ac8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000acc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ad0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ad4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ad8:	bf08      	it	eq
 8000ada:	f020 0001 	biceq.w	r0, r0, #1
 8000ade:	4770      	bx	lr
 8000ae0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ae4:	d121      	bne.n	8000b2a <__aeabi_d2f+0x7a>
 8000ae6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000aea:	bfbc      	itt	lt
 8000aec:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000af0:	4770      	bxlt	lr
 8000af2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000af6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000afa:	f1c2 0218 	rsb	r2, r2, #24
 8000afe:	f1c2 0c20 	rsb	ip, r2, #32
 8000b02:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b06:	fa20 f002 	lsr.w	r0, r0, r2
 8000b0a:	bf18      	it	ne
 8000b0c:	f040 0001 	orrne.w	r0, r0, #1
 8000b10:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b14:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b18:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b1c:	ea40 000c 	orr.w	r0, r0, ip
 8000b20:	fa23 f302 	lsr.w	r3, r3, r2
 8000b24:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b28:	e7cc      	b.n	8000ac4 <__aeabi_d2f+0x14>
 8000b2a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b2e:	d107      	bne.n	8000b40 <__aeabi_d2f+0x90>
 8000b30:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b34:	bf1e      	ittt	ne
 8000b36:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b3a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b3e:	4770      	bxne	lr
 8000b40:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b44:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b48:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b4c:	4770      	bx	lr
 8000b4e:	bf00      	nop

08000b50 <__aeabi_uldivmod>:
 8000b50:	b953      	cbnz	r3, 8000b68 <__aeabi_uldivmod+0x18>
 8000b52:	b94a      	cbnz	r2, 8000b68 <__aeabi_uldivmod+0x18>
 8000b54:	2900      	cmp	r1, #0
 8000b56:	bf08      	it	eq
 8000b58:	2800      	cmpeq	r0, #0
 8000b5a:	bf1c      	itt	ne
 8000b5c:	f04f 31ff 	movne.w	r1, #4294967295
 8000b60:	f04f 30ff 	movne.w	r0, #4294967295
 8000b64:	f000 b974 	b.w	8000e50 <__aeabi_idiv0>
 8000b68:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b6c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b70:	f000 f806 	bl	8000b80 <__udivmoddi4>
 8000b74:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b78:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b7c:	b004      	add	sp, #16
 8000b7e:	4770      	bx	lr

08000b80 <__udivmoddi4>:
 8000b80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b84:	9d08      	ldr	r5, [sp, #32]
 8000b86:	4604      	mov	r4, r0
 8000b88:	468e      	mov	lr, r1
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d14d      	bne.n	8000c2a <__udivmoddi4+0xaa>
 8000b8e:	428a      	cmp	r2, r1
 8000b90:	4694      	mov	ip, r2
 8000b92:	d969      	bls.n	8000c68 <__udivmoddi4+0xe8>
 8000b94:	fab2 f282 	clz	r2, r2
 8000b98:	b152      	cbz	r2, 8000bb0 <__udivmoddi4+0x30>
 8000b9a:	fa01 f302 	lsl.w	r3, r1, r2
 8000b9e:	f1c2 0120 	rsb	r1, r2, #32
 8000ba2:	fa20 f101 	lsr.w	r1, r0, r1
 8000ba6:	fa0c fc02 	lsl.w	ip, ip, r2
 8000baa:	ea41 0e03 	orr.w	lr, r1, r3
 8000bae:	4094      	lsls	r4, r2
 8000bb0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000bb4:	0c21      	lsrs	r1, r4, #16
 8000bb6:	fbbe f6f8 	udiv	r6, lr, r8
 8000bba:	fa1f f78c 	uxth.w	r7, ip
 8000bbe:	fb08 e316 	mls	r3, r8, r6, lr
 8000bc2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000bc6:	fb06 f107 	mul.w	r1, r6, r7
 8000bca:	4299      	cmp	r1, r3
 8000bcc:	d90a      	bls.n	8000be4 <__udivmoddi4+0x64>
 8000bce:	eb1c 0303 	adds.w	r3, ip, r3
 8000bd2:	f106 30ff 	add.w	r0, r6, #4294967295
 8000bd6:	f080 811f 	bcs.w	8000e18 <__udivmoddi4+0x298>
 8000bda:	4299      	cmp	r1, r3
 8000bdc:	f240 811c 	bls.w	8000e18 <__udivmoddi4+0x298>
 8000be0:	3e02      	subs	r6, #2
 8000be2:	4463      	add	r3, ip
 8000be4:	1a5b      	subs	r3, r3, r1
 8000be6:	b2a4      	uxth	r4, r4
 8000be8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000bec:	fb08 3310 	mls	r3, r8, r0, r3
 8000bf0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000bf4:	fb00 f707 	mul.w	r7, r0, r7
 8000bf8:	42a7      	cmp	r7, r4
 8000bfa:	d90a      	bls.n	8000c12 <__udivmoddi4+0x92>
 8000bfc:	eb1c 0404 	adds.w	r4, ip, r4
 8000c00:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c04:	f080 810a 	bcs.w	8000e1c <__udivmoddi4+0x29c>
 8000c08:	42a7      	cmp	r7, r4
 8000c0a:	f240 8107 	bls.w	8000e1c <__udivmoddi4+0x29c>
 8000c0e:	4464      	add	r4, ip
 8000c10:	3802      	subs	r0, #2
 8000c12:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c16:	1be4      	subs	r4, r4, r7
 8000c18:	2600      	movs	r6, #0
 8000c1a:	b11d      	cbz	r5, 8000c24 <__udivmoddi4+0xa4>
 8000c1c:	40d4      	lsrs	r4, r2
 8000c1e:	2300      	movs	r3, #0
 8000c20:	e9c5 4300 	strd	r4, r3, [r5]
 8000c24:	4631      	mov	r1, r6
 8000c26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c2a:	428b      	cmp	r3, r1
 8000c2c:	d909      	bls.n	8000c42 <__udivmoddi4+0xc2>
 8000c2e:	2d00      	cmp	r5, #0
 8000c30:	f000 80ef 	beq.w	8000e12 <__udivmoddi4+0x292>
 8000c34:	2600      	movs	r6, #0
 8000c36:	e9c5 0100 	strd	r0, r1, [r5]
 8000c3a:	4630      	mov	r0, r6
 8000c3c:	4631      	mov	r1, r6
 8000c3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c42:	fab3 f683 	clz	r6, r3
 8000c46:	2e00      	cmp	r6, #0
 8000c48:	d14a      	bne.n	8000ce0 <__udivmoddi4+0x160>
 8000c4a:	428b      	cmp	r3, r1
 8000c4c:	d302      	bcc.n	8000c54 <__udivmoddi4+0xd4>
 8000c4e:	4282      	cmp	r2, r0
 8000c50:	f200 80f9 	bhi.w	8000e46 <__udivmoddi4+0x2c6>
 8000c54:	1a84      	subs	r4, r0, r2
 8000c56:	eb61 0303 	sbc.w	r3, r1, r3
 8000c5a:	2001      	movs	r0, #1
 8000c5c:	469e      	mov	lr, r3
 8000c5e:	2d00      	cmp	r5, #0
 8000c60:	d0e0      	beq.n	8000c24 <__udivmoddi4+0xa4>
 8000c62:	e9c5 4e00 	strd	r4, lr, [r5]
 8000c66:	e7dd      	b.n	8000c24 <__udivmoddi4+0xa4>
 8000c68:	b902      	cbnz	r2, 8000c6c <__udivmoddi4+0xec>
 8000c6a:	deff      	udf	#255	; 0xff
 8000c6c:	fab2 f282 	clz	r2, r2
 8000c70:	2a00      	cmp	r2, #0
 8000c72:	f040 8092 	bne.w	8000d9a <__udivmoddi4+0x21a>
 8000c76:	eba1 010c 	sub.w	r1, r1, ip
 8000c7a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c7e:	fa1f fe8c 	uxth.w	lr, ip
 8000c82:	2601      	movs	r6, #1
 8000c84:	0c20      	lsrs	r0, r4, #16
 8000c86:	fbb1 f3f7 	udiv	r3, r1, r7
 8000c8a:	fb07 1113 	mls	r1, r7, r3, r1
 8000c8e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c92:	fb0e f003 	mul.w	r0, lr, r3
 8000c96:	4288      	cmp	r0, r1
 8000c98:	d908      	bls.n	8000cac <__udivmoddi4+0x12c>
 8000c9a:	eb1c 0101 	adds.w	r1, ip, r1
 8000c9e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000ca2:	d202      	bcs.n	8000caa <__udivmoddi4+0x12a>
 8000ca4:	4288      	cmp	r0, r1
 8000ca6:	f200 80cb 	bhi.w	8000e40 <__udivmoddi4+0x2c0>
 8000caa:	4643      	mov	r3, r8
 8000cac:	1a09      	subs	r1, r1, r0
 8000cae:	b2a4      	uxth	r4, r4
 8000cb0:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cb4:	fb07 1110 	mls	r1, r7, r0, r1
 8000cb8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000cbc:	fb0e fe00 	mul.w	lr, lr, r0
 8000cc0:	45a6      	cmp	lr, r4
 8000cc2:	d908      	bls.n	8000cd6 <__udivmoddi4+0x156>
 8000cc4:	eb1c 0404 	adds.w	r4, ip, r4
 8000cc8:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ccc:	d202      	bcs.n	8000cd4 <__udivmoddi4+0x154>
 8000cce:	45a6      	cmp	lr, r4
 8000cd0:	f200 80bb 	bhi.w	8000e4a <__udivmoddi4+0x2ca>
 8000cd4:	4608      	mov	r0, r1
 8000cd6:	eba4 040e 	sub.w	r4, r4, lr
 8000cda:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000cde:	e79c      	b.n	8000c1a <__udivmoddi4+0x9a>
 8000ce0:	f1c6 0720 	rsb	r7, r6, #32
 8000ce4:	40b3      	lsls	r3, r6
 8000ce6:	fa22 fc07 	lsr.w	ip, r2, r7
 8000cea:	ea4c 0c03 	orr.w	ip, ip, r3
 8000cee:	fa20 f407 	lsr.w	r4, r0, r7
 8000cf2:	fa01 f306 	lsl.w	r3, r1, r6
 8000cf6:	431c      	orrs	r4, r3
 8000cf8:	40f9      	lsrs	r1, r7
 8000cfa:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000cfe:	fa00 f306 	lsl.w	r3, r0, r6
 8000d02:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d06:	0c20      	lsrs	r0, r4, #16
 8000d08:	fa1f fe8c 	uxth.w	lr, ip
 8000d0c:	fb09 1118 	mls	r1, r9, r8, r1
 8000d10:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d14:	fb08 f00e 	mul.w	r0, r8, lr
 8000d18:	4288      	cmp	r0, r1
 8000d1a:	fa02 f206 	lsl.w	r2, r2, r6
 8000d1e:	d90b      	bls.n	8000d38 <__udivmoddi4+0x1b8>
 8000d20:	eb1c 0101 	adds.w	r1, ip, r1
 8000d24:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d28:	f080 8088 	bcs.w	8000e3c <__udivmoddi4+0x2bc>
 8000d2c:	4288      	cmp	r0, r1
 8000d2e:	f240 8085 	bls.w	8000e3c <__udivmoddi4+0x2bc>
 8000d32:	f1a8 0802 	sub.w	r8, r8, #2
 8000d36:	4461      	add	r1, ip
 8000d38:	1a09      	subs	r1, r1, r0
 8000d3a:	b2a4      	uxth	r4, r4
 8000d3c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d40:	fb09 1110 	mls	r1, r9, r0, r1
 8000d44:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000d48:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d4c:	458e      	cmp	lr, r1
 8000d4e:	d908      	bls.n	8000d62 <__udivmoddi4+0x1e2>
 8000d50:	eb1c 0101 	adds.w	r1, ip, r1
 8000d54:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d58:	d26c      	bcs.n	8000e34 <__udivmoddi4+0x2b4>
 8000d5a:	458e      	cmp	lr, r1
 8000d5c:	d96a      	bls.n	8000e34 <__udivmoddi4+0x2b4>
 8000d5e:	3802      	subs	r0, #2
 8000d60:	4461      	add	r1, ip
 8000d62:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d66:	fba0 9402 	umull	r9, r4, r0, r2
 8000d6a:	eba1 010e 	sub.w	r1, r1, lr
 8000d6e:	42a1      	cmp	r1, r4
 8000d70:	46c8      	mov	r8, r9
 8000d72:	46a6      	mov	lr, r4
 8000d74:	d356      	bcc.n	8000e24 <__udivmoddi4+0x2a4>
 8000d76:	d053      	beq.n	8000e20 <__udivmoddi4+0x2a0>
 8000d78:	b15d      	cbz	r5, 8000d92 <__udivmoddi4+0x212>
 8000d7a:	ebb3 0208 	subs.w	r2, r3, r8
 8000d7e:	eb61 010e 	sbc.w	r1, r1, lr
 8000d82:	fa01 f707 	lsl.w	r7, r1, r7
 8000d86:	fa22 f306 	lsr.w	r3, r2, r6
 8000d8a:	40f1      	lsrs	r1, r6
 8000d8c:	431f      	orrs	r7, r3
 8000d8e:	e9c5 7100 	strd	r7, r1, [r5]
 8000d92:	2600      	movs	r6, #0
 8000d94:	4631      	mov	r1, r6
 8000d96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d9a:	f1c2 0320 	rsb	r3, r2, #32
 8000d9e:	40d8      	lsrs	r0, r3
 8000da0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000da4:	fa21 f303 	lsr.w	r3, r1, r3
 8000da8:	4091      	lsls	r1, r2
 8000daa:	4301      	orrs	r1, r0
 8000dac:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000db0:	fa1f fe8c 	uxth.w	lr, ip
 8000db4:	fbb3 f0f7 	udiv	r0, r3, r7
 8000db8:	fb07 3610 	mls	r6, r7, r0, r3
 8000dbc:	0c0b      	lsrs	r3, r1, #16
 8000dbe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000dc2:	fb00 f60e 	mul.w	r6, r0, lr
 8000dc6:	429e      	cmp	r6, r3
 8000dc8:	fa04 f402 	lsl.w	r4, r4, r2
 8000dcc:	d908      	bls.n	8000de0 <__udivmoddi4+0x260>
 8000dce:	eb1c 0303 	adds.w	r3, ip, r3
 8000dd2:	f100 38ff 	add.w	r8, r0, #4294967295
 8000dd6:	d22f      	bcs.n	8000e38 <__udivmoddi4+0x2b8>
 8000dd8:	429e      	cmp	r6, r3
 8000dda:	d92d      	bls.n	8000e38 <__udivmoddi4+0x2b8>
 8000ddc:	3802      	subs	r0, #2
 8000dde:	4463      	add	r3, ip
 8000de0:	1b9b      	subs	r3, r3, r6
 8000de2:	b289      	uxth	r1, r1
 8000de4:	fbb3 f6f7 	udiv	r6, r3, r7
 8000de8:	fb07 3316 	mls	r3, r7, r6, r3
 8000dec:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000df0:	fb06 f30e 	mul.w	r3, r6, lr
 8000df4:	428b      	cmp	r3, r1
 8000df6:	d908      	bls.n	8000e0a <__udivmoddi4+0x28a>
 8000df8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dfc:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e00:	d216      	bcs.n	8000e30 <__udivmoddi4+0x2b0>
 8000e02:	428b      	cmp	r3, r1
 8000e04:	d914      	bls.n	8000e30 <__udivmoddi4+0x2b0>
 8000e06:	3e02      	subs	r6, #2
 8000e08:	4461      	add	r1, ip
 8000e0a:	1ac9      	subs	r1, r1, r3
 8000e0c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e10:	e738      	b.n	8000c84 <__udivmoddi4+0x104>
 8000e12:	462e      	mov	r6, r5
 8000e14:	4628      	mov	r0, r5
 8000e16:	e705      	b.n	8000c24 <__udivmoddi4+0xa4>
 8000e18:	4606      	mov	r6, r0
 8000e1a:	e6e3      	b.n	8000be4 <__udivmoddi4+0x64>
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	e6f8      	b.n	8000c12 <__udivmoddi4+0x92>
 8000e20:	454b      	cmp	r3, r9
 8000e22:	d2a9      	bcs.n	8000d78 <__udivmoddi4+0x1f8>
 8000e24:	ebb9 0802 	subs.w	r8, r9, r2
 8000e28:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e2c:	3801      	subs	r0, #1
 8000e2e:	e7a3      	b.n	8000d78 <__udivmoddi4+0x1f8>
 8000e30:	4646      	mov	r6, r8
 8000e32:	e7ea      	b.n	8000e0a <__udivmoddi4+0x28a>
 8000e34:	4620      	mov	r0, r4
 8000e36:	e794      	b.n	8000d62 <__udivmoddi4+0x1e2>
 8000e38:	4640      	mov	r0, r8
 8000e3a:	e7d1      	b.n	8000de0 <__udivmoddi4+0x260>
 8000e3c:	46d0      	mov	r8, sl
 8000e3e:	e77b      	b.n	8000d38 <__udivmoddi4+0x1b8>
 8000e40:	3b02      	subs	r3, #2
 8000e42:	4461      	add	r1, ip
 8000e44:	e732      	b.n	8000cac <__udivmoddi4+0x12c>
 8000e46:	4630      	mov	r0, r6
 8000e48:	e709      	b.n	8000c5e <__udivmoddi4+0xde>
 8000e4a:	4464      	add	r4, ip
 8000e4c:	3802      	subs	r0, #2
 8000e4e:	e742      	b.n	8000cd6 <__udivmoddi4+0x156>

08000e50 <__aeabi_idiv0>:
 8000e50:	4770      	bx	lr
 8000e52:	bf00      	nop

08000e54 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	 init_cal_point();
 8000e58:	f000 f9b6 	bl	80011c8 <init_cal_point>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e5c:	f001 fb8c 	bl	8002578 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e60:	f000 f8b0 	bl	8000fc4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e64:	f000 f942 	bl	80010ec <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000e68:	f000 f916 	bl	8001098 <MX_USART2_UART_Init>
//  x_point_2.x = 20.41;
//  x_point_2.y = -49.08;
//  y_point_2.x = 59.24;
//  y_point_2.y = 18.68;
//  cal_point();
  stop_trapi.x = 0;
 8000e6c:	4b49      	ldr	r3, [pc, #292]	; (8000f94 <main+0x140>)
 8000e6e:	f04f 0200 	mov.w	r2, #0
 8000e72:	601a      	str	r2, [r3, #0]
  start_trapi.x = 100;
 8000e74:	4b48      	ldr	r3, [pc, #288]	; (8000f98 <main+0x144>)
 8000e76:	4a49      	ldr	r2, [pc, #292]	; (8000f9c <main+0x148>)
 8000e78:	601a      	str	r2, [r3, #0]

  stop_trapi.y = 0;
 8000e7a:	4b46      	ldr	r3, [pc, #280]	; (8000f94 <main+0x140>)
 8000e7c:	f04f 0200 	mov.w	r2, #0
 8000e80:	605a      	str	r2, [r3, #4]
  start_trapi.y = 0;
 8000e82:	4b45      	ldr	r3, [pc, #276]	; (8000f98 <main+0x144>)
 8000e84:	f04f 0200 	mov.w	r2, #0
 8000e88:	605a      	str	r2, [r3, #4]

  V_max_x = 900;
 8000e8a:	4b45      	ldr	r3, [pc, #276]	; (8000fa0 <main+0x14c>)
 8000e8c:	4a45      	ldr	r2, [pc, #276]	; (8000fa4 <main+0x150>)
 8000e8e:	601a      	str	r2, [r3, #0]
  A_max_x = 2200;
 8000e90:	4b45      	ldr	r3, [pc, #276]	; (8000fa8 <main+0x154>)
 8000e92:	4a46      	ldr	r2, [pc, #280]	; (8000fac <main+0x158>)
 8000e94:	601a      	str	r2, [r3, #0]
  start_time = 0;
 8000e96:	4b46      	ldr	r3, [pc, #280]	; (8000fb0 <main+0x15c>)
 8000e98:	f04f 0200 	mov.w	r2, #0
 8000e9c:	601a      	str	r2, [r3, #0]
  update_trapi(HAL_GetTick()/1000.0);
 8000e9e:	f001 fbd1 	bl	8002644 <HAL_GetTick>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	f7ff fad9 	bl	800045c <__aeabi_ui2d>
 8000eaa:	f04f 0200 	mov.w	r2, #0
 8000eae:	4b41      	ldr	r3, [pc, #260]	; (8000fb4 <main+0x160>)
 8000eb0:	f7ff fc78 	bl	80007a4 <__aeabi_ddiv>
 8000eb4:	4602      	mov	r2, r0
 8000eb6:	460b      	mov	r3, r1
 8000eb8:	4610      	mov	r0, r2
 8000eba:	4619      	mov	r1, r3
 8000ebc:	f7ff fdf8 	bl	8000ab0 <__aeabi_d2f>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	ee00 3a10 	vmov	s0, r3
 8000ec6:	f000 fa05 	bl	80012d4 <update_trapi>
  while (1)
  {
	  /* USER CODE END WHILE */

	  /* USER CODE BEGIN 3 */
	  cal_trapi(HAL_GetTick()/1000.0);
 8000eca:	f001 fbbb 	bl	8002644 <HAL_GetTick>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	f7ff fac3 	bl	800045c <__aeabi_ui2d>
 8000ed6:	f04f 0200 	mov.w	r2, #0
 8000eda:	4b36      	ldr	r3, [pc, #216]	; (8000fb4 <main+0x160>)
 8000edc:	f7ff fc62 	bl	80007a4 <__aeabi_ddiv>
 8000ee0:	4602      	mov	r2, r0
 8000ee2:	460b      	mov	r3, r1
 8000ee4:	4610      	mov	r0, r2
 8000ee6:	4619      	mov	r1, r3
 8000ee8:	f7ff fde2 	bl	8000ab0 <__aeabi_d2f>
 8000eec:	4603      	mov	r3, r0
 8000eee:	ee00 3a10 	vmov	s0, r3
 8000ef2:	f000 fd1b 	bl	800192c <cal_trapi>
	  if(Position_trapi.x == 0)
 8000ef6:	4b30      	ldr	r3, [pc, #192]	; (8000fb8 <main+0x164>)
 8000ef8:	edd3 7a00 	vldr	s15, [r3]
 8000efc:	eef5 7a40 	vcmp.f32	s15, #0.0
 8000f00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f04:	d11d      	bne.n	8000f42 <main+0xee>
	  {
		  start_trapi.x = 0;
 8000f06:	4b24      	ldr	r3, [pc, #144]	; (8000f98 <main+0x144>)
 8000f08:	f04f 0200 	mov.w	r2, #0
 8000f0c:	601a      	str	r2, [r3, #0]
		  stop_trapi.x = 700;
 8000f0e:	4b21      	ldr	r3, [pc, #132]	; (8000f94 <main+0x140>)
 8000f10:	4a2a      	ldr	r2, [pc, #168]	; (8000fbc <main+0x168>)
 8000f12:	601a      	str	r2, [r3, #0]
		  update_trapi(HAL_GetTick()/1000.0);
 8000f14:	f001 fb96 	bl	8002644 <HAL_GetTick>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	f7ff fa9e 	bl	800045c <__aeabi_ui2d>
 8000f20:	f04f 0200 	mov.w	r2, #0
 8000f24:	4b23      	ldr	r3, [pc, #140]	; (8000fb4 <main+0x160>)
 8000f26:	f7ff fc3d 	bl	80007a4 <__aeabi_ddiv>
 8000f2a:	4602      	mov	r2, r0
 8000f2c:	460b      	mov	r3, r1
 8000f2e:	4610      	mov	r0, r2
 8000f30:	4619      	mov	r1, r3
 8000f32:	f7ff fdbd 	bl	8000ab0 <__aeabi_d2f>
 8000f36:	4603      	mov	r3, r0
 8000f38:	ee00 3a10 	vmov	s0, r3
 8000f3c:	f000 f9ca 	bl	80012d4 <update_trapi>
 8000f40:	e7c3      	b.n	8000eca <main+0x76>
	  }
	  else if(Position_trapi.x == 700)
 8000f42:	4b1d      	ldr	r3, [pc, #116]	; (8000fb8 <main+0x164>)
 8000f44:	edd3 7a00 	vldr	s15, [r3]
 8000f48:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8000fc0 <main+0x16c>
 8000f4c:	eef4 7a47 	vcmp.f32	s15, s14
 8000f50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f54:	d1b9      	bne.n	8000eca <main+0x76>
	  {
		  start_trapi.x = 700;
 8000f56:	4b10      	ldr	r3, [pc, #64]	; (8000f98 <main+0x144>)
 8000f58:	4a18      	ldr	r2, [pc, #96]	; (8000fbc <main+0x168>)
 8000f5a:	601a      	str	r2, [r3, #0]
		  stop_trapi.x = 0;
 8000f5c:	4b0d      	ldr	r3, [pc, #52]	; (8000f94 <main+0x140>)
 8000f5e:	f04f 0200 	mov.w	r2, #0
 8000f62:	601a      	str	r2, [r3, #0]
		  update_trapi(HAL_GetTick()/1000.0);
 8000f64:	f001 fb6e 	bl	8002644 <HAL_GetTick>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	f7ff fa76 	bl	800045c <__aeabi_ui2d>
 8000f70:	f04f 0200 	mov.w	r2, #0
 8000f74:	4b0f      	ldr	r3, [pc, #60]	; (8000fb4 <main+0x160>)
 8000f76:	f7ff fc15 	bl	80007a4 <__aeabi_ddiv>
 8000f7a:	4602      	mov	r2, r0
 8000f7c:	460b      	mov	r3, r1
 8000f7e:	4610      	mov	r0, r2
 8000f80:	4619      	mov	r1, r3
 8000f82:	f7ff fd95 	bl	8000ab0 <__aeabi_d2f>
 8000f86:	4603      	mov	r3, r0
 8000f88:	ee00 3a10 	vmov	s0, r3
 8000f8c:	f000 f9a2 	bl	80012d4 <update_trapi>
	  cal_trapi(HAL_GetTick()/1000.0);
 8000f90:	e79b      	b.n	8000eca <main+0x76>
 8000f92:	bf00      	nop
 8000f94:	200001a8 	.word	0x200001a8
 8000f98:	200001a0 	.word	0x200001a0
 8000f9c:	42c80000 	.word	0x42c80000
 8000fa0:	200001b0 	.word	0x200001b0
 8000fa4:	44610000 	.word	0x44610000
 8000fa8:	200001b8 	.word	0x200001b8
 8000fac:	45098000 	.word	0x45098000
 8000fb0:	200001c0 	.word	0x200001c0
 8000fb4:	408f4000 	.word	0x408f4000
 8000fb8:	20000204 	.word	0x20000204
 8000fbc:	442f0000 	.word	0x442f0000
 8000fc0:	442f0000 	.word	0x442f0000

08000fc4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b094      	sub	sp, #80	; 0x50
 8000fc8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fca:	f107 0320 	add.w	r3, r7, #32
 8000fce:	2230      	movs	r2, #48	; 0x30
 8000fd0:	2100      	movs	r1, #0
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	f002 fd4a 	bl	8003a6c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fd8:	f107 030c 	add.w	r3, r7, #12
 8000fdc:	2200      	movs	r2, #0
 8000fde:	601a      	str	r2, [r3, #0]
 8000fe0:	605a      	str	r2, [r3, #4]
 8000fe2:	609a      	str	r2, [r3, #8]
 8000fe4:	60da      	str	r2, [r3, #12]
 8000fe6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fe8:	2300      	movs	r3, #0
 8000fea:	60bb      	str	r3, [r7, #8]
 8000fec:	4b28      	ldr	r3, [pc, #160]	; (8001090 <SystemClock_Config+0xcc>)
 8000fee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ff0:	4a27      	ldr	r2, [pc, #156]	; (8001090 <SystemClock_Config+0xcc>)
 8000ff2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ff6:	6413      	str	r3, [r2, #64]	; 0x40
 8000ff8:	4b25      	ldr	r3, [pc, #148]	; (8001090 <SystemClock_Config+0xcc>)
 8000ffa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ffc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001000:	60bb      	str	r3, [r7, #8]
 8001002:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001004:	2300      	movs	r3, #0
 8001006:	607b      	str	r3, [r7, #4]
 8001008:	4b22      	ldr	r3, [pc, #136]	; (8001094 <SystemClock_Config+0xd0>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	4a21      	ldr	r2, [pc, #132]	; (8001094 <SystemClock_Config+0xd0>)
 800100e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001012:	6013      	str	r3, [r2, #0]
 8001014:	4b1f      	ldr	r3, [pc, #124]	; (8001094 <SystemClock_Config+0xd0>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800101c:	607b      	str	r3, [r7, #4]
 800101e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001020:	2302      	movs	r3, #2
 8001022:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001024:	2301      	movs	r3, #1
 8001026:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001028:	2310      	movs	r3, #16
 800102a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800102c:	2302      	movs	r3, #2
 800102e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001030:	2300      	movs	r3, #0
 8001032:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001034:	2310      	movs	r3, #16
 8001036:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001038:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800103c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800103e:	2304      	movs	r3, #4
 8001040:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001042:	2304      	movs	r3, #4
 8001044:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001046:	f107 0320 	add.w	r3, r7, #32
 800104a:	4618      	mov	r0, r3
 800104c:	f001 fd8a 	bl	8002b64 <HAL_RCC_OscConfig>
 8001050:	4603      	mov	r3, r0
 8001052:	2b00      	cmp	r3, #0
 8001054:	d001      	beq.n	800105a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001056:	f001 f9b3 	bl	80023c0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800105a:	230f      	movs	r3, #15
 800105c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800105e:	2302      	movs	r3, #2
 8001060:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001062:	2300      	movs	r3, #0
 8001064:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001066:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800106a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800106c:	2300      	movs	r3, #0
 800106e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001070:	f107 030c 	add.w	r3, r7, #12
 8001074:	2102      	movs	r1, #2
 8001076:	4618      	mov	r0, r3
 8001078:	f001 ffec 	bl	8003054 <HAL_RCC_ClockConfig>
 800107c:	4603      	mov	r3, r0
 800107e:	2b00      	cmp	r3, #0
 8001080:	d001      	beq.n	8001086 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001082:	f001 f99d 	bl	80023c0 <Error_Handler>
  }
}
 8001086:	bf00      	nop
 8001088:	3750      	adds	r7, #80	; 0x50
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	40023800 	.word	0x40023800
 8001094:	40007000 	.word	0x40007000

08001098 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800109c:	4b11      	ldr	r3, [pc, #68]	; (80010e4 <MX_USART2_UART_Init+0x4c>)
 800109e:	4a12      	ldr	r2, [pc, #72]	; (80010e8 <MX_USART2_UART_Init+0x50>)
 80010a0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80010a2:	4b10      	ldr	r3, [pc, #64]	; (80010e4 <MX_USART2_UART_Init+0x4c>)
 80010a4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80010a8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80010aa:	4b0e      	ldr	r3, [pc, #56]	; (80010e4 <MX_USART2_UART_Init+0x4c>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80010b0:	4b0c      	ldr	r3, [pc, #48]	; (80010e4 <MX_USART2_UART_Init+0x4c>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80010b6:	4b0b      	ldr	r3, [pc, #44]	; (80010e4 <MX_USART2_UART_Init+0x4c>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80010bc:	4b09      	ldr	r3, [pc, #36]	; (80010e4 <MX_USART2_UART_Init+0x4c>)
 80010be:	220c      	movs	r2, #12
 80010c0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010c2:	4b08      	ldr	r3, [pc, #32]	; (80010e4 <MX_USART2_UART_Init+0x4c>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80010c8:	4b06      	ldr	r3, [pc, #24]	; (80010e4 <MX_USART2_UART_Init+0x4c>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80010ce:	4805      	ldr	r0, [pc, #20]	; (80010e4 <MX_USART2_UART_Init+0x4c>)
 80010d0:	f002 f9e0 	bl	8003494 <HAL_UART_Init>
 80010d4:	4603      	mov	r3, r0
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d001      	beq.n	80010de <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80010da:	f001 f971 	bl	80023c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80010de:	bf00      	nop
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	bf00      	nop
 80010e4:	20000094 	.word	0x20000094
 80010e8:	40004400 	.word	0x40004400

080010ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b08a      	sub	sp, #40	; 0x28
 80010f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010f2:	f107 0314 	add.w	r3, r7, #20
 80010f6:	2200      	movs	r2, #0
 80010f8:	601a      	str	r2, [r3, #0]
 80010fa:	605a      	str	r2, [r3, #4]
 80010fc:	609a      	str	r2, [r3, #8]
 80010fe:	60da      	str	r2, [r3, #12]
 8001100:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001102:	2300      	movs	r3, #0
 8001104:	613b      	str	r3, [r7, #16]
 8001106:	4b2d      	ldr	r3, [pc, #180]	; (80011bc <MX_GPIO_Init+0xd0>)
 8001108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800110a:	4a2c      	ldr	r2, [pc, #176]	; (80011bc <MX_GPIO_Init+0xd0>)
 800110c:	f043 0304 	orr.w	r3, r3, #4
 8001110:	6313      	str	r3, [r2, #48]	; 0x30
 8001112:	4b2a      	ldr	r3, [pc, #168]	; (80011bc <MX_GPIO_Init+0xd0>)
 8001114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001116:	f003 0304 	and.w	r3, r3, #4
 800111a:	613b      	str	r3, [r7, #16]
 800111c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800111e:	2300      	movs	r3, #0
 8001120:	60fb      	str	r3, [r7, #12]
 8001122:	4b26      	ldr	r3, [pc, #152]	; (80011bc <MX_GPIO_Init+0xd0>)
 8001124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001126:	4a25      	ldr	r2, [pc, #148]	; (80011bc <MX_GPIO_Init+0xd0>)
 8001128:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800112c:	6313      	str	r3, [r2, #48]	; 0x30
 800112e:	4b23      	ldr	r3, [pc, #140]	; (80011bc <MX_GPIO_Init+0xd0>)
 8001130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001132:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001136:	60fb      	str	r3, [r7, #12]
 8001138:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800113a:	2300      	movs	r3, #0
 800113c:	60bb      	str	r3, [r7, #8]
 800113e:	4b1f      	ldr	r3, [pc, #124]	; (80011bc <MX_GPIO_Init+0xd0>)
 8001140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001142:	4a1e      	ldr	r2, [pc, #120]	; (80011bc <MX_GPIO_Init+0xd0>)
 8001144:	f043 0301 	orr.w	r3, r3, #1
 8001148:	6313      	str	r3, [r2, #48]	; 0x30
 800114a:	4b1c      	ldr	r3, [pc, #112]	; (80011bc <MX_GPIO_Init+0xd0>)
 800114c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800114e:	f003 0301 	and.w	r3, r3, #1
 8001152:	60bb      	str	r3, [r7, #8]
 8001154:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001156:	2300      	movs	r3, #0
 8001158:	607b      	str	r3, [r7, #4]
 800115a:	4b18      	ldr	r3, [pc, #96]	; (80011bc <MX_GPIO_Init+0xd0>)
 800115c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800115e:	4a17      	ldr	r2, [pc, #92]	; (80011bc <MX_GPIO_Init+0xd0>)
 8001160:	f043 0302 	orr.w	r3, r3, #2
 8001164:	6313      	str	r3, [r2, #48]	; 0x30
 8001166:	4b15      	ldr	r3, [pc, #84]	; (80011bc <MX_GPIO_Init+0xd0>)
 8001168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800116a:	f003 0302 	and.w	r3, r3, #2
 800116e:	607b      	str	r3, [r7, #4]
 8001170:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001172:	2200      	movs	r2, #0
 8001174:	2120      	movs	r1, #32
 8001176:	4812      	ldr	r0, [pc, #72]	; (80011c0 <MX_GPIO_Init+0xd4>)
 8001178:	f001 fcda 	bl	8002b30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800117c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001180:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001182:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001186:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001188:	2300      	movs	r3, #0
 800118a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800118c:	f107 0314 	add.w	r3, r7, #20
 8001190:	4619      	mov	r1, r3
 8001192:	480c      	ldr	r0, [pc, #48]	; (80011c4 <MX_GPIO_Init+0xd8>)
 8001194:	f001 fb48 	bl	8002828 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001198:	2320      	movs	r3, #32
 800119a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800119c:	2301      	movs	r3, #1
 800119e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a0:	2300      	movs	r3, #0
 80011a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011a4:	2300      	movs	r3, #0
 80011a6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80011a8:	f107 0314 	add.w	r3, r7, #20
 80011ac:	4619      	mov	r1, r3
 80011ae:	4804      	ldr	r0, [pc, #16]	; (80011c0 <MX_GPIO_Init+0xd4>)
 80011b0:	f001 fb3a 	bl	8002828 <HAL_GPIO_Init>

}
 80011b4:	bf00      	nop
 80011b6:	3728      	adds	r7, #40	; 0x28
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bd80      	pop	{r7, pc}
 80011bc:	40023800 	.word	0x40023800
 80011c0:	40020000 	.word	0x40020000
 80011c4:	40020800 	.word	0x40020800

080011c8 <init_cal_point>:

/* USER CODE BEGIN 4 */

//CALPOINT_FUNCTION
void init_cal_point(){
 80011c8:	b480      	push	{r7}
 80011ca:	b083      	sub	sp, #12
 80011cc:	af00      	add	r7, sp, #0
	  theta_1 = 0;
 80011ce:	4b37      	ldr	r3, [pc, #220]	; (80012ac <init_cal_point+0xe4>)
 80011d0:	f04f 0200 	mov.w	r2, #0
 80011d4:	601a      	str	r2, [r3, #0]
	  cen_point_1.x = 0;
 80011d6:	4b36      	ldr	r3, [pc, #216]	; (80012b0 <init_cal_point+0xe8>)
 80011d8:	f04f 0200 	mov.w	r2, #0
 80011dc:	601a      	str	r2, [r3, #0]
	  cen_point_1.y = 0;
 80011de:	4b34      	ldr	r3, [pc, #208]	; (80012b0 <init_cal_point+0xe8>)
 80011e0:	f04f 0200 	mov.w	r2, #0
 80011e4:	605a      	str	r2, [r3, #4]
	  x_point_1.x = 0;
 80011e6:	4b33      	ldr	r3, [pc, #204]	; (80012b4 <init_cal_point+0xec>)
 80011e8:	f04f 0200 	mov.w	r2, #0
 80011ec:	601a      	str	r2, [r3, #0]
	  x_point_1.y = 0;
 80011ee:	4b31      	ldr	r3, [pc, #196]	; (80012b4 <init_cal_point+0xec>)
 80011f0:	f04f 0200 	mov.w	r2, #0
 80011f4:	605a      	str	r2, [r3, #4]
	  y_point_1.x = 0;
 80011f6:	4b30      	ldr	r3, [pc, #192]	; (80012b8 <init_cal_point+0xf0>)
 80011f8:	f04f 0200 	mov.w	r2, #0
 80011fc:	601a      	str	r2, [r3, #0]
	  y_point_1.y = 0;
 80011fe:	4b2e      	ldr	r3, [pc, #184]	; (80012b8 <init_cal_point+0xf0>)
 8001200:	f04f 0200 	mov.w	r2, #0
 8001204:	605a      	str	r2, [r3, #4]
	  for (int i=0 ;i<9;i++){
 8001206:	2300      	movs	r3, #0
 8001208:	607b      	str	r3, [r7, #4]
 800120a:	e011      	b.n	8001230 <init_cal_point+0x68>
		  keep_point_1[i].x=0;
 800120c:	4a2b      	ldr	r2, [pc, #172]	; (80012bc <init_cal_point+0xf4>)
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	00db      	lsls	r3, r3, #3
 8001212:	4413      	add	r3, r2
 8001214:	f04f 0200 	mov.w	r2, #0
 8001218:	601a      	str	r2, [r3, #0]
		  keep_point_1[i].y=0;
 800121a:	4a28      	ldr	r2, [pc, #160]	; (80012bc <init_cal_point+0xf4>)
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	00db      	lsls	r3, r3, #3
 8001220:	4413      	add	r3, r2
 8001222:	3304      	adds	r3, #4
 8001224:	f04f 0200 	mov.w	r2, #0
 8001228:	601a      	str	r2, [r3, #0]
	  for (int i=0 ;i<9;i++){
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	3301      	adds	r3, #1
 800122e:	607b      	str	r3, [r7, #4]
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	2b08      	cmp	r3, #8
 8001234:	ddea      	ble.n	800120c <init_cal_point+0x44>
	  }

	  theta_2 = 0;
 8001236:	4b22      	ldr	r3, [pc, #136]	; (80012c0 <init_cal_point+0xf8>)
 8001238:	f04f 0200 	mov.w	r2, #0
 800123c:	601a      	str	r2, [r3, #0]
	  cen_point_2.x = 0;
 800123e:	4b21      	ldr	r3, [pc, #132]	; (80012c4 <init_cal_point+0xfc>)
 8001240:	f04f 0200 	mov.w	r2, #0
 8001244:	601a      	str	r2, [r3, #0]
	  cen_point_2.y = 0;
 8001246:	4b1f      	ldr	r3, [pc, #124]	; (80012c4 <init_cal_point+0xfc>)
 8001248:	f04f 0200 	mov.w	r2, #0
 800124c:	605a      	str	r2, [r3, #4]
	  x_point_2.x = 0;
 800124e:	4b1e      	ldr	r3, [pc, #120]	; (80012c8 <init_cal_point+0x100>)
 8001250:	f04f 0200 	mov.w	r2, #0
 8001254:	601a      	str	r2, [r3, #0]
	  x_point_2.y = 0;
 8001256:	4b1c      	ldr	r3, [pc, #112]	; (80012c8 <init_cal_point+0x100>)
 8001258:	f04f 0200 	mov.w	r2, #0
 800125c:	605a      	str	r2, [r3, #4]
	  y_point_2.x = 0;
 800125e:	4b1b      	ldr	r3, [pc, #108]	; (80012cc <init_cal_point+0x104>)
 8001260:	f04f 0200 	mov.w	r2, #0
 8001264:	601a      	str	r2, [r3, #0]
	  y_point_2.y = 0;
 8001266:	4b19      	ldr	r3, [pc, #100]	; (80012cc <init_cal_point+0x104>)
 8001268:	f04f 0200 	mov.w	r2, #0
 800126c:	605a      	str	r2, [r3, #4]
	  for (int i = 0 ;i<9;i++){
 800126e:	2300      	movs	r3, #0
 8001270:	603b      	str	r3, [r7, #0]
 8001272:	e011      	b.n	8001298 <init_cal_point+0xd0>
	 		  keep_point_2[i].x=0;
 8001274:	4a16      	ldr	r2, [pc, #88]	; (80012d0 <init_cal_point+0x108>)
 8001276:	683b      	ldr	r3, [r7, #0]
 8001278:	00db      	lsls	r3, r3, #3
 800127a:	4413      	add	r3, r2
 800127c:	f04f 0200 	mov.w	r2, #0
 8001280:	601a      	str	r2, [r3, #0]
	 		  keep_point_2[i].y=0;
 8001282:	4a13      	ldr	r2, [pc, #76]	; (80012d0 <init_cal_point+0x108>)
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	00db      	lsls	r3, r3, #3
 8001288:	4413      	add	r3, r2
 800128a:	3304      	adds	r3, #4
 800128c:	f04f 0200 	mov.w	r2, #0
 8001290:	601a      	str	r2, [r3, #0]
	  for (int i = 0 ;i<9;i++){
 8001292:	683b      	ldr	r3, [r7, #0]
 8001294:	3301      	adds	r3, #1
 8001296:	603b      	str	r3, [r7, #0]
 8001298:	683b      	ldr	r3, [r7, #0]
 800129a:	2b08      	cmp	r3, #8
 800129c:	ddea      	ble.n	8001274 <init_cal_point+0xac>
	 	  }
}
 800129e:	bf00      	nop
 80012a0:	bf00      	nop
 80012a2:	370c      	adds	r7, #12
 80012a4:	46bd      	mov	sp, r7
 80012a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012aa:	4770      	bx	lr
 80012ac:	200000f0 	.word	0x200000f0
 80012b0:	200000d8 	.word	0x200000d8
 80012b4:	200000e0 	.word	0x200000e0
 80012b8:	200000e8 	.word	0x200000e8
 80012bc:	200000f4 	.word	0x200000f4
 80012c0:	20000154 	.word	0x20000154
 80012c4:	2000013c 	.word	0x2000013c
 80012c8:	20000144 	.word	0x20000144
 80012cc:	2000014c 	.word	0x2000014c
 80012d0:	20000158 	.word	0x20000158

080012d4 <update_trapi>:
		keep_point_2[8].x = 50*cos(theta_2) - 10*sin(theta_2) + cen_point_2.x;
		keep_point_2[8].y = 50*sin(theta_2) + 10*cos(theta_2) + cen_point_2.y;
}

//function tripizoid
void update_trapi(float time_now){
 80012d4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80012d8:	b082      	sub	sp, #8
 80012da:	af00      	add	r7, sp, #0
 80012dc:	ed87 0a01 	vstr	s0, [r7, #4]
	delta_x = stop_trapi.x - start_trapi.x;
 80012e0:	4bbe      	ldr	r3, [pc, #760]	; (80015dc <update_trapi+0x308>)
 80012e2:	ed93 7a00 	vldr	s14, [r3]
 80012e6:	4bbe      	ldr	r3, [pc, #760]	; (80015e0 <update_trapi+0x30c>)
 80012e8:	edd3 7a00 	vldr	s15, [r3]
 80012ec:	ee77 7a67 	vsub.f32	s15, s14, s15
 80012f0:	4bbc      	ldr	r3, [pc, #752]	; (80015e4 <update_trapi+0x310>)
 80012f2:	edc3 7a00 	vstr	s15, [r3]
	delta_y = stop_trapi.y - start_trapi.y;
 80012f6:	4bb9      	ldr	r3, [pc, #740]	; (80015dc <update_trapi+0x308>)
 80012f8:	ed93 7a01 	vldr	s14, [r3, #4]
 80012fc:	4bb8      	ldr	r3, [pc, #736]	; (80015e0 <update_trapi+0x30c>)
 80012fe:	edd3 7a01 	vldr	s15, [r3, #4]
 8001302:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001306:	4bb8      	ldr	r3, [pc, #736]	; (80015e8 <update_trapi+0x314>)
 8001308:	edc3 7a00 	vstr	s15, [r3]
	if (delta_x<0){
 800130c:	4bb5      	ldr	r3, [pc, #724]	; (80015e4 <update_trapi+0x310>)
 800130e:	edd3 7a00 	vldr	s15, [r3]
 8001312:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001316:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800131a:	d50b      	bpl.n	8001334 <update_trapi+0x60>
		side_x = -1;
 800131c:	4bb3      	ldr	r3, [pc, #716]	; (80015ec <update_trapi+0x318>)
 800131e:	4ab4      	ldr	r2, [pc, #720]	; (80015f0 <update_trapi+0x31c>)
 8001320:	601a      	str	r2, [r3, #0]
		delta_x = delta_x*(-1);
 8001322:	4bb0      	ldr	r3, [pc, #704]	; (80015e4 <update_trapi+0x310>)
 8001324:	edd3 7a00 	vldr	s15, [r3]
 8001328:	eef1 7a67 	vneg.f32	s15, s15
 800132c:	4bad      	ldr	r3, [pc, #692]	; (80015e4 <update_trapi+0x310>)
 800132e:	edc3 7a00 	vstr	s15, [r3]
 8001332:	e003      	b.n	800133c <update_trapi+0x68>
	}
	else {side_x=1;}
 8001334:	4bad      	ldr	r3, [pc, #692]	; (80015ec <update_trapi+0x318>)
 8001336:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800133a:	601a      	str	r2, [r3, #0]
	if (delta_y<0){
 800133c:	4baa      	ldr	r3, [pc, #680]	; (80015e8 <update_trapi+0x314>)
 800133e:	edd3 7a00 	vldr	s15, [r3]
 8001342:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001346:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800134a:	d50b      	bpl.n	8001364 <update_trapi+0x90>
		side_y = -1;
 800134c:	4ba9      	ldr	r3, [pc, #676]	; (80015f4 <update_trapi+0x320>)
 800134e:	4aa8      	ldr	r2, [pc, #672]	; (80015f0 <update_trapi+0x31c>)
 8001350:	601a      	str	r2, [r3, #0]
		delta_y = delta_y*(-1);
 8001352:	4ba5      	ldr	r3, [pc, #660]	; (80015e8 <update_trapi+0x314>)
 8001354:	edd3 7a00 	vldr	s15, [r3]
 8001358:	eef1 7a67 	vneg.f32	s15, s15
 800135c:	4ba2      	ldr	r3, [pc, #648]	; (80015e8 <update_trapi+0x314>)
 800135e:	edc3 7a00 	vstr	s15, [r3]
 8001362:	e003      	b.n	800136c <update_trapi+0x98>
	}
	else {side_y=1;}
 8001364:	4ba3      	ldr	r3, [pc, #652]	; (80015f4 <update_trapi+0x320>)
 8001366:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800136a:	601a      	str	r2, [r3, #0]
	t_c_x = sqrt(delta_x/A_max_x);
 800136c:	4b9d      	ldr	r3, [pc, #628]	; (80015e4 <update_trapi+0x310>)
 800136e:	ed93 7a00 	vldr	s14, [r3]
 8001372:	4ba1      	ldr	r3, [pc, #644]	; (80015f8 <update_trapi+0x324>)
 8001374:	edd3 7a00 	vldr	s15, [r3]
 8001378:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800137c:	ee16 0a90 	vmov	r0, s13
 8001380:	f7ff f88e 	bl	80004a0 <__aeabi_f2d>
 8001384:	4602      	mov	r2, r0
 8001386:	460b      	mov	r3, r1
 8001388:	ec43 2b10 	vmov	d0, r2, r3
 800138c:	f002 fb76 	bl	8003a7c <sqrt>
 8001390:	ec53 2b10 	vmov	r2, r3, d0
 8001394:	4610      	mov	r0, r2
 8001396:	4619      	mov	r1, r3
 8001398:	f7ff fb8a 	bl	8000ab0 <__aeabi_d2f>
 800139c:	4603      	mov	r3, r0
 800139e:	4a97      	ldr	r2, [pc, #604]	; (80015fc <update_trapi+0x328>)
 80013a0:	6013      	str	r3, [r2, #0]
	t_c_y = sqrt(delta_y/A_max_y);
 80013a2:	4b91      	ldr	r3, [pc, #580]	; (80015e8 <update_trapi+0x314>)
 80013a4:	ed93 7a00 	vldr	s14, [r3]
 80013a8:	4b95      	ldr	r3, [pc, #596]	; (8001600 <update_trapi+0x32c>)
 80013aa:	edd3 7a00 	vldr	s15, [r3]
 80013ae:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80013b2:	ee16 0a90 	vmov	r0, s13
 80013b6:	f7ff f873 	bl	80004a0 <__aeabi_f2d>
 80013ba:	4602      	mov	r2, r0
 80013bc:	460b      	mov	r3, r1
 80013be:	ec43 2b10 	vmov	d0, r2, r3
 80013c2:	f002 fb5b 	bl	8003a7c <sqrt>
 80013c6:	ec53 2b10 	vmov	r2, r3, d0
 80013ca:	4610      	mov	r0, r2
 80013cc:	4619      	mov	r1, r3
 80013ce:	f7ff fb6f 	bl	8000ab0 <__aeabi_d2f>
 80013d2:	4603      	mov	r3, r0
 80013d4:	4a8b      	ldr	r2, [pc, #556]	; (8001604 <update_trapi+0x330>)
 80013d6:	6013      	str	r3, [r2, #0]

    // x case
	if (delta_x==0){
 80013d8:	4b82      	ldr	r3, [pc, #520]	; (80015e4 <update_trapi+0x310>)
 80013da:	edd3 7a00 	vldr	s15, [r3]
 80013de:	eef5 7a40 	vcmp.f32	s15, #0.0
 80013e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013e6:	d103      	bne.n	80013f0 <update_trapi+0x11c>
		x_case = 0;
 80013e8:	4b87      	ldr	r3, [pc, #540]	; (8001608 <update_trapi+0x334>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	601a      	str	r2, [r3, #0]
 80013ee:	e177      	b.n	80016e0 <update_trapi+0x40c>
	}
	else if ((A_max_x*t_c_x)>=(V_max_x)){
 80013f0:	4b81      	ldr	r3, [pc, #516]	; (80015f8 <update_trapi+0x324>)
 80013f2:	ed93 7a00 	vldr	s14, [r3]
 80013f6:	4b81      	ldr	r3, [pc, #516]	; (80015fc <update_trapi+0x328>)
 80013f8:	edd3 7a00 	vldr	s15, [r3]
 80013fc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001400:	4b82      	ldr	r3, [pc, #520]	; (800160c <update_trapi+0x338>)
 8001402:	edd3 7a00 	vldr	s15, [r3]
 8001406:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800140a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800140e:	f2c0 810b 	blt.w	8001628 <update_trapi+0x354>
		x_case = 2;
 8001412:	4b7d      	ldr	r3, [pc, #500]	; (8001608 <update_trapi+0x334>)
 8001414:	2202      	movs	r2, #2
 8001416:	601a      	str	r2, [r3, #0]
		tb_x_1 = (V_max_x/A_max_x);
 8001418:	4b7c      	ldr	r3, [pc, #496]	; (800160c <update_trapi+0x338>)
 800141a:	edd3 6a00 	vldr	s13, [r3]
 800141e:	4b76      	ldr	r3, [pc, #472]	; (80015f8 <update_trapi+0x324>)
 8001420:	ed93 7a00 	vldr	s14, [r3]
 8001424:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001428:	4b79      	ldr	r3, [pc, #484]	; (8001610 <update_trapi+0x33c>)
 800142a:	edc3 7a00 	vstr	s15, [r3]
		position_1_x = start_trapi.x+ 0.5*(A_max_x)*tb_x_1*tb_x_1*side_x;
 800142e:	4b6c      	ldr	r3, [pc, #432]	; (80015e0 <update_trapi+0x30c>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	4618      	mov	r0, r3
 8001434:	f7ff f834 	bl	80004a0 <__aeabi_f2d>
 8001438:	4604      	mov	r4, r0
 800143a:	460d      	mov	r5, r1
 800143c:	4b6e      	ldr	r3, [pc, #440]	; (80015f8 <update_trapi+0x324>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	4618      	mov	r0, r3
 8001442:	f7ff f82d 	bl	80004a0 <__aeabi_f2d>
 8001446:	f04f 0200 	mov.w	r2, #0
 800144a:	4b72      	ldr	r3, [pc, #456]	; (8001614 <update_trapi+0x340>)
 800144c:	f7ff f880 	bl	8000550 <__aeabi_dmul>
 8001450:	4602      	mov	r2, r0
 8001452:	460b      	mov	r3, r1
 8001454:	4690      	mov	r8, r2
 8001456:	4699      	mov	r9, r3
 8001458:	4b6d      	ldr	r3, [pc, #436]	; (8001610 <update_trapi+0x33c>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	4618      	mov	r0, r3
 800145e:	f7ff f81f 	bl	80004a0 <__aeabi_f2d>
 8001462:	4602      	mov	r2, r0
 8001464:	460b      	mov	r3, r1
 8001466:	4640      	mov	r0, r8
 8001468:	4649      	mov	r1, r9
 800146a:	f7ff f871 	bl	8000550 <__aeabi_dmul>
 800146e:	4602      	mov	r2, r0
 8001470:	460b      	mov	r3, r1
 8001472:	4690      	mov	r8, r2
 8001474:	4699      	mov	r9, r3
 8001476:	4b66      	ldr	r3, [pc, #408]	; (8001610 <update_trapi+0x33c>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	4618      	mov	r0, r3
 800147c:	f7ff f810 	bl	80004a0 <__aeabi_f2d>
 8001480:	4602      	mov	r2, r0
 8001482:	460b      	mov	r3, r1
 8001484:	4640      	mov	r0, r8
 8001486:	4649      	mov	r1, r9
 8001488:	f7ff f862 	bl	8000550 <__aeabi_dmul>
 800148c:	4602      	mov	r2, r0
 800148e:	460b      	mov	r3, r1
 8001490:	4690      	mov	r8, r2
 8001492:	4699      	mov	r9, r3
 8001494:	4b55      	ldr	r3, [pc, #340]	; (80015ec <update_trapi+0x318>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	4618      	mov	r0, r3
 800149a:	f7ff f801 	bl	80004a0 <__aeabi_f2d>
 800149e:	4602      	mov	r2, r0
 80014a0:	460b      	mov	r3, r1
 80014a2:	4640      	mov	r0, r8
 80014a4:	4649      	mov	r1, r9
 80014a6:	f7ff f853 	bl	8000550 <__aeabi_dmul>
 80014aa:	4602      	mov	r2, r0
 80014ac:	460b      	mov	r3, r1
 80014ae:	4620      	mov	r0, r4
 80014b0:	4629      	mov	r1, r5
 80014b2:	f7fe fe97 	bl	80001e4 <__adddf3>
 80014b6:	4602      	mov	r2, r0
 80014b8:	460b      	mov	r3, r1
 80014ba:	4610      	mov	r0, r2
 80014bc:	4619      	mov	r1, r3
 80014be:	f7ff faf7 	bl	8000ab0 <__aeabi_d2f>
 80014c2:	4603      	mov	r3, r0
 80014c4:	4a54      	ldr	r2, [pc, #336]	; (8001618 <update_trapi+0x344>)
 80014c6:	6013      	str	r3, [r2, #0]
		tb_x_2 = (((delta_x)-2*(0.5*A_max_x*tb_x_1*tb_x_1))/V_max_x) + tb_x_1;
 80014c8:	4b46      	ldr	r3, [pc, #280]	; (80015e4 <update_trapi+0x310>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	4618      	mov	r0, r3
 80014ce:	f7fe ffe7 	bl	80004a0 <__aeabi_f2d>
 80014d2:	4604      	mov	r4, r0
 80014d4:	460d      	mov	r5, r1
 80014d6:	4b48      	ldr	r3, [pc, #288]	; (80015f8 <update_trapi+0x324>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	4618      	mov	r0, r3
 80014dc:	f7fe ffe0 	bl	80004a0 <__aeabi_f2d>
 80014e0:	f04f 0200 	mov.w	r2, #0
 80014e4:	4b4b      	ldr	r3, [pc, #300]	; (8001614 <update_trapi+0x340>)
 80014e6:	f7ff f833 	bl	8000550 <__aeabi_dmul>
 80014ea:	4602      	mov	r2, r0
 80014ec:	460b      	mov	r3, r1
 80014ee:	4690      	mov	r8, r2
 80014f0:	4699      	mov	r9, r3
 80014f2:	4b47      	ldr	r3, [pc, #284]	; (8001610 <update_trapi+0x33c>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	4618      	mov	r0, r3
 80014f8:	f7fe ffd2 	bl	80004a0 <__aeabi_f2d>
 80014fc:	4602      	mov	r2, r0
 80014fe:	460b      	mov	r3, r1
 8001500:	4640      	mov	r0, r8
 8001502:	4649      	mov	r1, r9
 8001504:	f7ff f824 	bl	8000550 <__aeabi_dmul>
 8001508:	4602      	mov	r2, r0
 800150a:	460b      	mov	r3, r1
 800150c:	4690      	mov	r8, r2
 800150e:	4699      	mov	r9, r3
 8001510:	4b3f      	ldr	r3, [pc, #252]	; (8001610 <update_trapi+0x33c>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	4618      	mov	r0, r3
 8001516:	f7fe ffc3 	bl	80004a0 <__aeabi_f2d>
 800151a:	4602      	mov	r2, r0
 800151c:	460b      	mov	r3, r1
 800151e:	4640      	mov	r0, r8
 8001520:	4649      	mov	r1, r9
 8001522:	f7ff f815 	bl	8000550 <__aeabi_dmul>
 8001526:	4602      	mov	r2, r0
 8001528:	460b      	mov	r3, r1
 800152a:	4610      	mov	r0, r2
 800152c:	4619      	mov	r1, r3
 800152e:	4602      	mov	r2, r0
 8001530:	460b      	mov	r3, r1
 8001532:	f7fe fe57 	bl	80001e4 <__adddf3>
 8001536:	4602      	mov	r2, r0
 8001538:	460b      	mov	r3, r1
 800153a:	4620      	mov	r0, r4
 800153c:	4629      	mov	r1, r5
 800153e:	f7fe fe4f 	bl	80001e0 <__aeabi_dsub>
 8001542:	4602      	mov	r2, r0
 8001544:	460b      	mov	r3, r1
 8001546:	4614      	mov	r4, r2
 8001548:	461d      	mov	r5, r3
 800154a:	4b30      	ldr	r3, [pc, #192]	; (800160c <update_trapi+0x338>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	4618      	mov	r0, r3
 8001550:	f7fe ffa6 	bl	80004a0 <__aeabi_f2d>
 8001554:	4602      	mov	r2, r0
 8001556:	460b      	mov	r3, r1
 8001558:	4620      	mov	r0, r4
 800155a:	4629      	mov	r1, r5
 800155c:	f7ff f922 	bl	80007a4 <__aeabi_ddiv>
 8001560:	4602      	mov	r2, r0
 8001562:	460b      	mov	r3, r1
 8001564:	4614      	mov	r4, r2
 8001566:	461d      	mov	r5, r3
 8001568:	4b29      	ldr	r3, [pc, #164]	; (8001610 <update_trapi+0x33c>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	4618      	mov	r0, r3
 800156e:	f7fe ff97 	bl	80004a0 <__aeabi_f2d>
 8001572:	4602      	mov	r2, r0
 8001574:	460b      	mov	r3, r1
 8001576:	4620      	mov	r0, r4
 8001578:	4629      	mov	r1, r5
 800157a:	f7fe fe33 	bl	80001e4 <__adddf3>
 800157e:	4602      	mov	r2, r0
 8001580:	460b      	mov	r3, r1
 8001582:	4610      	mov	r0, r2
 8001584:	4619      	mov	r1, r3
 8001586:	f7ff fa93 	bl	8000ab0 <__aeabi_d2f>
 800158a:	4603      	mov	r3, r0
 800158c:	4a23      	ldr	r2, [pc, #140]	; (800161c <update_trapi+0x348>)
 800158e:	6013      	str	r3, [r2, #0]
		position_2_x = position_1_x + V_max_x*(tb_x_2-tb_x_1)*side_x;
 8001590:	4b22      	ldr	r3, [pc, #136]	; (800161c <update_trapi+0x348>)
 8001592:	ed93 7a00 	vldr	s14, [r3]
 8001596:	4b1e      	ldr	r3, [pc, #120]	; (8001610 <update_trapi+0x33c>)
 8001598:	edd3 7a00 	vldr	s15, [r3]
 800159c:	ee37 7a67 	vsub.f32	s14, s14, s15
 80015a0:	4b1a      	ldr	r3, [pc, #104]	; (800160c <update_trapi+0x338>)
 80015a2:	edd3 7a00 	vldr	s15, [r3]
 80015a6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80015aa:	4b10      	ldr	r3, [pc, #64]	; (80015ec <update_trapi+0x318>)
 80015ac:	edd3 7a00 	vldr	s15, [r3]
 80015b0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80015b4:	4b18      	ldr	r3, [pc, #96]	; (8001618 <update_trapi+0x344>)
 80015b6:	edd3 7a00 	vldr	s15, [r3]
 80015ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015be:	4b18      	ldr	r3, [pc, #96]	; (8001620 <update_trapi+0x34c>)
 80015c0:	edc3 7a00 	vstr	s15, [r3]
		tb_x_3 = tb_x_2 + tb_x_1;
 80015c4:	4b15      	ldr	r3, [pc, #84]	; (800161c <update_trapi+0x348>)
 80015c6:	ed93 7a00 	vldr	s14, [r3]
 80015ca:	4b11      	ldr	r3, [pc, #68]	; (8001610 <update_trapi+0x33c>)
 80015cc:	edd3 7a00 	vldr	s15, [r3]
 80015d0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015d4:	4b13      	ldr	r3, [pc, #76]	; (8001624 <update_trapi+0x350>)
 80015d6:	edc3 7a00 	vstr	s15, [r3]
 80015da:	e081      	b.n	80016e0 <update_trapi+0x40c>
 80015dc:	200001a8 	.word	0x200001a8
 80015e0:	200001a0 	.word	0x200001a0
 80015e4:	200001c4 	.word	0x200001c4
 80015e8:	200001c8 	.word	0x200001c8
 80015ec:	20000000 	.word	0x20000000
 80015f0:	bf800000 	.word	0xbf800000
 80015f4:	20000004 	.word	0x20000004
 80015f8:	200001b8 	.word	0x200001b8
 80015fc:	200001cc 	.word	0x200001cc
 8001600:	200001bc 	.word	0x200001bc
 8001604:	200001d0 	.word	0x200001d0
 8001608:	200001d4 	.word	0x200001d4
 800160c:	200001b0 	.word	0x200001b0
 8001610:	200001ec 	.word	0x200001ec
 8001614:	3fe00000 	.word	0x3fe00000
 8001618:	200001dc 	.word	0x200001dc
 800161c:	200001f0 	.word	0x200001f0
 8001620:	200001e0 	.word	0x200001e0
 8001624:	200001f4 	.word	0x200001f4
	}
	else {
		x_case = 1;
 8001628:	4bac      	ldr	r3, [pc, #688]	; (80018dc <update_trapi+0x608>)
 800162a:	2201      	movs	r2, #1
 800162c:	601a      	str	r2, [r3, #0]
		tb_x_1 = t_c_x;
 800162e:	4bac      	ldr	r3, [pc, #688]	; (80018e0 <update_trapi+0x60c>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	4aac      	ldr	r2, [pc, #688]	; (80018e4 <update_trapi+0x610>)
 8001634:	6013      	str	r3, [r2, #0]
		position_1_x = start_trapi.x + 0.5*(A_max_x)*tb_x_1*tb_x_1*side_x;
 8001636:	4bac      	ldr	r3, [pc, #688]	; (80018e8 <update_trapi+0x614>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	4618      	mov	r0, r3
 800163c:	f7fe ff30 	bl	80004a0 <__aeabi_f2d>
 8001640:	4604      	mov	r4, r0
 8001642:	460d      	mov	r5, r1
 8001644:	4ba9      	ldr	r3, [pc, #676]	; (80018ec <update_trapi+0x618>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	4618      	mov	r0, r3
 800164a:	f7fe ff29 	bl	80004a0 <__aeabi_f2d>
 800164e:	f04f 0200 	mov.w	r2, #0
 8001652:	4ba7      	ldr	r3, [pc, #668]	; (80018f0 <update_trapi+0x61c>)
 8001654:	f7fe ff7c 	bl	8000550 <__aeabi_dmul>
 8001658:	4602      	mov	r2, r0
 800165a:	460b      	mov	r3, r1
 800165c:	4690      	mov	r8, r2
 800165e:	4699      	mov	r9, r3
 8001660:	4ba0      	ldr	r3, [pc, #640]	; (80018e4 <update_trapi+0x610>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	4618      	mov	r0, r3
 8001666:	f7fe ff1b 	bl	80004a0 <__aeabi_f2d>
 800166a:	4602      	mov	r2, r0
 800166c:	460b      	mov	r3, r1
 800166e:	4640      	mov	r0, r8
 8001670:	4649      	mov	r1, r9
 8001672:	f7fe ff6d 	bl	8000550 <__aeabi_dmul>
 8001676:	4602      	mov	r2, r0
 8001678:	460b      	mov	r3, r1
 800167a:	4690      	mov	r8, r2
 800167c:	4699      	mov	r9, r3
 800167e:	4b99      	ldr	r3, [pc, #612]	; (80018e4 <update_trapi+0x610>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	4618      	mov	r0, r3
 8001684:	f7fe ff0c 	bl	80004a0 <__aeabi_f2d>
 8001688:	4602      	mov	r2, r0
 800168a:	460b      	mov	r3, r1
 800168c:	4640      	mov	r0, r8
 800168e:	4649      	mov	r1, r9
 8001690:	f7fe ff5e 	bl	8000550 <__aeabi_dmul>
 8001694:	4602      	mov	r2, r0
 8001696:	460b      	mov	r3, r1
 8001698:	4690      	mov	r8, r2
 800169a:	4699      	mov	r9, r3
 800169c:	4b95      	ldr	r3, [pc, #596]	; (80018f4 <update_trapi+0x620>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	4618      	mov	r0, r3
 80016a2:	f7fe fefd 	bl	80004a0 <__aeabi_f2d>
 80016a6:	4602      	mov	r2, r0
 80016a8:	460b      	mov	r3, r1
 80016aa:	4640      	mov	r0, r8
 80016ac:	4649      	mov	r1, r9
 80016ae:	f7fe ff4f 	bl	8000550 <__aeabi_dmul>
 80016b2:	4602      	mov	r2, r0
 80016b4:	460b      	mov	r3, r1
 80016b6:	4620      	mov	r0, r4
 80016b8:	4629      	mov	r1, r5
 80016ba:	f7fe fd93 	bl	80001e4 <__adddf3>
 80016be:	4602      	mov	r2, r0
 80016c0:	460b      	mov	r3, r1
 80016c2:	4610      	mov	r0, r2
 80016c4:	4619      	mov	r1, r3
 80016c6:	f7ff f9f3 	bl	8000ab0 <__aeabi_d2f>
 80016ca:	4603      	mov	r3, r0
 80016cc:	4a8a      	ldr	r2, [pc, #552]	; (80018f8 <update_trapi+0x624>)
 80016ce:	6013      	str	r3, [r2, #0]
		tb_x_2 = 2*t_c_x;
 80016d0:	4b83      	ldr	r3, [pc, #524]	; (80018e0 <update_trapi+0x60c>)
 80016d2:	edd3 7a00 	vldr	s15, [r3]
 80016d6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80016da:	4b88      	ldr	r3, [pc, #544]	; (80018fc <update_trapi+0x628>)
 80016dc:	edc3 7a00 	vstr	s15, [r3]
	}

	// y case
		if (delta_y==0){
 80016e0:	4b87      	ldr	r3, [pc, #540]	; (8001900 <update_trapi+0x62c>)
 80016e2:	edd3 7a00 	vldr	s15, [r3]
 80016e6:	eef5 7a40 	vcmp.f32	s15, #0.0
 80016ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016ee:	d103      	bne.n	80016f8 <update_trapi+0x424>
			y_case = 0;
 80016f0:	4b84      	ldr	r3, [pc, #528]	; (8001904 <update_trapi+0x630>)
 80016f2:	2200      	movs	r2, #0
 80016f4:	601a      	str	r2, [r3, #0]
 80016f6:	e0e9      	b.n	80018cc <update_trapi+0x5f8>
		}
		else if ((A_max_y*t_c_y)>=(V_max_y)){
 80016f8:	4b83      	ldr	r3, [pc, #524]	; (8001908 <update_trapi+0x634>)
 80016fa:	ed93 7a00 	vldr	s14, [r3]
 80016fe:	4b83      	ldr	r3, [pc, #524]	; (800190c <update_trapi+0x638>)
 8001700:	edd3 7a00 	vldr	s15, [r3]
 8001704:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001708:	4b81      	ldr	r3, [pc, #516]	; (8001910 <update_trapi+0x63c>)
 800170a:	edd3 7a00 	vldr	s15, [r3]
 800170e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001712:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001716:	db7d      	blt.n	8001814 <update_trapi+0x540>
			y_case = 2;
 8001718:	4b7a      	ldr	r3, [pc, #488]	; (8001904 <update_trapi+0x630>)
 800171a:	2202      	movs	r2, #2
 800171c:	601a      	str	r2, [r3, #0]
			tb_y_1 = (V_max_y/A_max_y);
 800171e:	4b7c      	ldr	r3, [pc, #496]	; (8001910 <update_trapi+0x63c>)
 8001720:	edd3 6a00 	vldr	s13, [r3]
 8001724:	4b78      	ldr	r3, [pc, #480]	; (8001908 <update_trapi+0x634>)
 8001726:	ed93 7a00 	vldr	s14, [r3]
 800172a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800172e:	4b79      	ldr	r3, [pc, #484]	; (8001914 <update_trapi+0x640>)
 8001730:	edc3 7a00 	vstr	s15, [r3]
			tb_y_2 = (((delta_y)-2*(0.5*A_max_y*tb_y_1*tb_y_1))/V_max_y) + tb_y_1;
 8001734:	4b72      	ldr	r3, [pc, #456]	; (8001900 <update_trapi+0x62c>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	4618      	mov	r0, r3
 800173a:	f7fe feb1 	bl	80004a0 <__aeabi_f2d>
 800173e:	4604      	mov	r4, r0
 8001740:	460d      	mov	r5, r1
 8001742:	4b71      	ldr	r3, [pc, #452]	; (8001908 <update_trapi+0x634>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	4618      	mov	r0, r3
 8001748:	f7fe feaa 	bl	80004a0 <__aeabi_f2d>
 800174c:	f04f 0200 	mov.w	r2, #0
 8001750:	4b67      	ldr	r3, [pc, #412]	; (80018f0 <update_trapi+0x61c>)
 8001752:	f7fe fefd 	bl	8000550 <__aeabi_dmul>
 8001756:	4602      	mov	r2, r0
 8001758:	460b      	mov	r3, r1
 800175a:	4690      	mov	r8, r2
 800175c:	4699      	mov	r9, r3
 800175e:	4b6d      	ldr	r3, [pc, #436]	; (8001914 <update_trapi+0x640>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	4618      	mov	r0, r3
 8001764:	f7fe fe9c 	bl	80004a0 <__aeabi_f2d>
 8001768:	4602      	mov	r2, r0
 800176a:	460b      	mov	r3, r1
 800176c:	4640      	mov	r0, r8
 800176e:	4649      	mov	r1, r9
 8001770:	f7fe feee 	bl	8000550 <__aeabi_dmul>
 8001774:	4602      	mov	r2, r0
 8001776:	460b      	mov	r3, r1
 8001778:	4690      	mov	r8, r2
 800177a:	4699      	mov	r9, r3
 800177c:	4b65      	ldr	r3, [pc, #404]	; (8001914 <update_trapi+0x640>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	4618      	mov	r0, r3
 8001782:	f7fe fe8d 	bl	80004a0 <__aeabi_f2d>
 8001786:	4602      	mov	r2, r0
 8001788:	460b      	mov	r3, r1
 800178a:	4640      	mov	r0, r8
 800178c:	4649      	mov	r1, r9
 800178e:	f7fe fedf 	bl	8000550 <__aeabi_dmul>
 8001792:	4602      	mov	r2, r0
 8001794:	460b      	mov	r3, r1
 8001796:	4610      	mov	r0, r2
 8001798:	4619      	mov	r1, r3
 800179a:	4602      	mov	r2, r0
 800179c:	460b      	mov	r3, r1
 800179e:	f7fe fd21 	bl	80001e4 <__adddf3>
 80017a2:	4602      	mov	r2, r0
 80017a4:	460b      	mov	r3, r1
 80017a6:	4620      	mov	r0, r4
 80017a8:	4629      	mov	r1, r5
 80017aa:	f7fe fd19 	bl	80001e0 <__aeabi_dsub>
 80017ae:	4602      	mov	r2, r0
 80017b0:	460b      	mov	r3, r1
 80017b2:	4614      	mov	r4, r2
 80017b4:	461d      	mov	r5, r3
 80017b6:	4b56      	ldr	r3, [pc, #344]	; (8001910 <update_trapi+0x63c>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	4618      	mov	r0, r3
 80017bc:	f7fe fe70 	bl	80004a0 <__aeabi_f2d>
 80017c0:	4602      	mov	r2, r0
 80017c2:	460b      	mov	r3, r1
 80017c4:	4620      	mov	r0, r4
 80017c6:	4629      	mov	r1, r5
 80017c8:	f7fe ffec 	bl	80007a4 <__aeabi_ddiv>
 80017cc:	4602      	mov	r2, r0
 80017ce:	460b      	mov	r3, r1
 80017d0:	4614      	mov	r4, r2
 80017d2:	461d      	mov	r5, r3
 80017d4:	4b4f      	ldr	r3, [pc, #316]	; (8001914 <update_trapi+0x640>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	4618      	mov	r0, r3
 80017da:	f7fe fe61 	bl	80004a0 <__aeabi_f2d>
 80017de:	4602      	mov	r2, r0
 80017e0:	460b      	mov	r3, r1
 80017e2:	4620      	mov	r0, r4
 80017e4:	4629      	mov	r1, r5
 80017e6:	f7fe fcfd 	bl	80001e4 <__adddf3>
 80017ea:	4602      	mov	r2, r0
 80017ec:	460b      	mov	r3, r1
 80017ee:	4610      	mov	r0, r2
 80017f0:	4619      	mov	r1, r3
 80017f2:	f7ff f95d 	bl	8000ab0 <__aeabi_d2f>
 80017f6:	4603      	mov	r3, r0
 80017f8:	4a47      	ldr	r2, [pc, #284]	; (8001918 <update_trapi+0x644>)
 80017fa:	6013      	str	r3, [r2, #0]
			tb_y_3 = tb_y_2 + tb_y_1;
 80017fc:	4b46      	ldr	r3, [pc, #280]	; (8001918 <update_trapi+0x644>)
 80017fe:	ed93 7a00 	vldr	s14, [r3]
 8001802:	4b44      	ldr	r3, [pc, #272]	; (8001914 <update_trapi+0x640>)
 8001804:	edd3 7a00 	vldr	s15, [r3]
 8001808:	ee77 7a27 	vadd.f32	s15, s14, s15
 800180c:	4b43      	ldr	r3, [pc, #268]	; (800191c <update_trapi+0x648>)
 800180e:	edc3 7a00 	vstr	s15, [r3]
 8001812:	e05b      	b.n	80018cc <update_trapi+0x5f8>
		}
		else {
			y_case = 1;
 8001814:	4b3b      	ldr	r3, [pc, #236]	; (8001904 <update_trapi+0x630>)
 8001816:	2201      	movs	r2, #1
 8001818:	601a      	str	r2, [r3, #0]
			tb_y_1 = t_c_y;
 800181a:	4b3c      	ldr	r3, [pc, #240]	; (800190c <update_trapi+0x638>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	4a3d      	ldr	r2, [pc, #244]	; (8001914 <update_trapi+0x640>)
 8001820:	6013      	str	r3, [r2, #0]
			position_1_y = start_trapi.y + 0.5*(A_max_y)*tb_y_1*tb_y_1*side_y;
 8001822:	4b31      	ldr	r3, [pc, #196]	; (80018e8 <update_trapi+0x614>)
 8001824:	685b      	ldr	r3, [r3, #4]
 8001826:	4618      	mov	r0, r3
 8001828:	f7fe fe3a 	bl	80004a0 <__aeabi_f2d>
 800182c:	4604      	mov	r4, r0
 800182e:	460d      	mov	r5, r1
 8001830:	4b35      	ldr	r3, [pc, #212]	; (8001908 <update_trapi+0x634>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	4618      	mov	r0, r3
 8001836:	f7fe fe33 	bl	80004a0 <__aeabi_f2d>
 800183a:	f04f 0200 	mov.w	r2, #0
 800183e:	4b2c      	ldr	r3, [pc, #176]	; (80018f0 <update_trapi+0x61c>)
 8001840:	f7fe fe86 	bl	8000550 <__aeabi_dmul>
 8001844:	4602      	mov	r2, r0
 8001846:	460b      	mov	r3, r1
 8001848:	4690      	mov	r8, r2
 800184a:	4699      	mov	r9, r3
 800184c:	4b31      	ldr	r3, [pc, #196]	; (8001914 <update_trapi+0x640>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	4618      	mov	r0, r3
 8001852:	f7fe fe25 	bl	80004a0 <__aeabi_f2d>
 8001856:	4602      	mov	r2, r0
 8001858:	460b      	mov	r3, r1
 800185a:	4640      	mov	r0, r8
 800185c:	4649      	mov	r1, r9
 800185e:	f7fe fe77 	bl	8000550 <__aeabi_dmul>
 8001862:	4602      	mov	r2, r0
 8001864:	460b      	mov	r3, r1
 8001866:	4690      	mov	r8, r2
 8001868:	4699      	mov	r9, r3
 800186a:	4b2a      	ldr	r3, [pc, #168]	; (8001914 <update_trapi+0x640>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	4618      	mov	r0, r3
 8001870:	f7fe fe16 	bl	80004a0 <__aeabi_f2d>
 8001874:	4602      	mov	r2, r0
 8001876:	460b      	mov	r3, r1
 8001878:	4640      	mov	r0, r8
 800187a:	4649      	mov	r1, r9
 800187c:	f7fe fe68 	bl	8000550 <__aeabi_dmul>
 8001880:	4602      	mov	r2, r0
 8001882:	460b      	mov	r3, r1
 8001884:	4690      	mov	r8, r2
 8001886:	4699      	mov	r9, r3
 8001888:	4b25      	ldr	r3, [pc, #148]	; (8001920 <update_trapi+0x64c>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	4618      	mov	r0, r3
 800188e:	f7fe fe07 	bl	80004a0 <__aeabi_f2d>
 8001892:	4602      	mov	r2, r0
 8001894:	460b      	mov	r3, r1
 8001896:	4640      	mov	r0, r8
 8001898:	4649      	mov	r1, r9
 800189a:	f7fe fe59 	bl	8000550 <__aeabi_dmul>
 800189e:	4602      	mov	r2, r0
 80018a0:	460b      	mov	r3, r1
 80018a2:	4620      	mov	r0, r4
 80018a4:	4629      	mov	r1, r5
 80018a6:	f7fe fc9d 	bl	80001e4 <__adddf3>
 80018aa:	4602      	mov	r2, r0
 80018ac:	460b      	mov	r3, r1
 80018ae:	4610      	mov	r0, r2
 80018b0:	4619      	mov	r1, r3
 80018b2:	f7ff f8fd 	bl	8000ab0 <__aeabi_d2f>
 80018b6:	4603      	mov	r3, r0
 80018b8:	4a1a      	ldr	r2, [pc, #104]	; (8001924 <update_trapi+0x650>)
 80018ba:	6013      	str	r3, [r2, #0]
			tb_y_2 = 2*t_c_y;
 80018bc:	4b13      	ldr	r3, [pc, #76]	; (800190c <update_trapi+0x638>)
 80018be:	edd3 7a00 	vldr	s15, [r3]
 80018c2:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80018c6:	4b14      	ldr	r3, [pc, #80]	; (8001918 <update_trapi+0x644>)
 80018c8:	edc3 7a00 	vstr	s15, [r3]
		}
		start_time = time_now;
 80018cc:	4a16      	ldr	r2, [pc, #88]	; (8001928 <update_trapi+0x654>)
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	6013      	str	r3, [r2, #0]
}
 80018d2:	bf00      	nop
 80018d4:	3708      	adds	r7, #8
 80018d6:	46bd      	mov	sp, r7
 80018d8:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80018dc:	200001d4 	.word	0x200001d4
 80018e0:	200001cc 	.word	0x200001cc
 80018e4:	200001ec 	.word	0x200001ec
 80018e8:	200001a0 	.word	0x200001a0
 80018ec:	200001b8 	.word	0x200001b8
 80018f0:	3fe00000 	.word	0x3fe00000
 80018f4:	20000000 	.word	0x20000000
 80018f8:	200001dc 	.word	0x200001dc
 80018fc:	200001f0 	.word	0x200001f0
 8001900:	200001c8 	.word	0x200001c8
 8001904:	200001d8 	.word	0x200001d8
 8001908:	200001bc 	.word	0x200001bc
 800190c:	200001d0 	.word	0x200001d0
 8001910:	200001b4 	.word	0x200001b4
 8001914:	200001f8 	.word	0x200001f8
 8001918:	200001fc 	.word	0x200001fc
 800191c:	20000200 	.word	0x20000200
 8001920:	20000004 	.word	0x20000004
 8001924:	200001e4 	.word	0x200001e4
 8001928:	200001c0 	.word	0x200001c0

0800192c <cal_trapi>:



void cal_trapi(float time_now){
 800192c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001930:	b084      	sub	sp, #16
 8001932:	af00      	add	r7, sp, #0
 8001934:	ed87 0a01 	vstr	s0, [r7, #4]
	float trapi_time = time_now - start_time;
 8001938:	4b99      	ldr	r3, [pc, #612]	; (8001ba0 <cal_trapi+0x274>)
 800193a:	edd3 7a00 	vldr	s15, [r3]
 800193e:	ed97 7a01 	vldr	s14, [r7, #4]
 8001942:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001946:	edc7 7a03 	vstr	s15, [r7, #12]
	if (trapi_time < 0){trapi_time=0;}
 800194a:	edd7 7a03 	vldr	s15, [r7, #12]
 800194e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001952:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001956:	d502      	bpl.n	800195e <cal_trapi+0x32>
 8001958:	f04f 0300 	mov.w	r3, #0
 800195c:	60fb      	str	r3, [r7, #12]
	//x generator
	if (x_case == 0){
 800195e:	4b91      	ldr	r3, [pc, #580]	; (8001ba4 <cal_trapi+0x278>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	2b00      	cmp	r3, #0
 8001964:	d108      	bne.n	8001978 <cal_trapi+0x4c>
		Position_trapi.x = start_trapi.x;
 8001966:	4b90      	ldr	r3, [pc, #576]	; (8001ba8 <cal_trapi+0x27c>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	4a90      	ldr	r2, [pc, #576]	; (8001bac <cal_trapi+0x280>)
 800196c:	6013      	str	r3, [r2, #0]
		v_x_trapi = 0;
 800196e:	4b90      	ldr	r3, [pc, #576]	; (8001bb0 <cal_trapi+0x284>)
 8001970:	f04f 0200 	mov.w	r2, #0
 8001974:	601a      	str	r2, [r3, #0]
 8001976:	e26b      	b.n	8001e50 <cal_trapi+0x524>
	}
	else if (x_case == 1){
 8001978:	4b8a      	ldr	r3, [pc, #552]	; (8001ba4 <cal_trapi+0x278>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	2b01      	cmp	r3, #1
 800197e:	f040 8127 	bne.w	8001bd0 <cal_trapi+0x2a4>
		if ((0<=trapi_time)&&(trapi_time<=tb_x_1)){
 8001982:	edd7 7a03 	vldr	s15, [r7, #12]
 8001986:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800198a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800198e:	db62      	blt.n	8001a56 <cal_trapi+0x12a>
 8001990:	4b88      	ldr	r3, [pc, #544]	; (8001bb4 <cal_trapi+0x288>)
 8001992:	edd3 7a00 	vldr	s15, [r3]
 8001996:	ed97 7a03 	vldr	s14, [r7, #12]
 800199a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800199e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019a2:	d858      	bhi.n	8001a56 <cal_trapi+0x12a>
					Position_trapi.x =start_trapi.x+ 0.5*(A_max_x)*trapi_time*trapi_time*side_x;
 80019a4:	4b80      	ldr	r3, [pc, #512]	; (8001ba8 <cal_trapi+0x27c>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	4618      	mov	r0, r3
 80019aa:	f7fe fd79 	bl	80004a0 <__aeabi_f2d>
 80019ae:	4604      	mov	r4, r0
 80019b0:	460d      	mov	r5, r1
 80019b2:	4b81      	ldr	r3, [pc, #516]	; (8001bb8 <cal_trapi+0x28c>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	4618      	mov	r0, r3
 80019b8:	f7fe fd72 	bl	80004a0 <__aeabi_f2d>
 80019bc:	f04f 0200 	mov.w	r2, #0
 80019c0:	4b7e      	ldr	r3, [pc, #504]	; (8001bbc <cal_trapi+0x290>)
 80019c2:	f7fe fdc5 	bl	8000550 <__aeabi_dmul>
 80019c6:	4602      	mov	r2, r0
 80019c8:	460b      	mov	r3, r1
 80019ca:	4690      	mov	r8, r2
 80019cc:	4699      	mov	r9, r3
 80019ce:	68f8      	ldr	r0, [r7, #12]
 80019d0:	f7fe fd66 	bl	80004a0 <__aeabi_f2d>
 80019d4:	4602      	mov	r2, r0
 80019d6:	460b      	mov	r3, r1
 80019d8:	4640      	mov	r0, r8
 80019da:	4649      	mov	r1, r9
 80019dc:	f7fe fdb8 	bl	8000550 <__aeabi_dmul>
 80019e0:	4602      	mov	r2, r0
 80019e2:	460b      	mov	r3, r1
 80019e4:	4690      	mov	r8, r2
 80019e6:	4699      	mov	r9, r3
 80019e8:	68f8      	ldr	r0, [r7, #12]
 80019ea:	f7fe fd59 	bl	80004a0 <__aeabi_f2d>
 80019ee:	4602      	mov	r2, r0
 80019f0:	460b      	mov	r3, r1
 80019f2:	4640      	mov	r0, r8
 80019f4:	4649      	mov	r1, r9
 80019f6:	f7fe fdab 	bl	8000550 <__aeabi_dmul>
 80019fa:	4602      	mov	r2, r0
 80019fc:	460b      	mov	r3, r1
 80019fe:	4690      	mov	r8, r2
 8001a00:	4699      	mov	r9, r3
 8001a02:	4b6f      	ldr	r3, [pc, #444]	; (8001bc0 <cal_trapi+0x294>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	4618      	mov	r0, r3
 8001a08:	f7fe fd4a 	bl	80004a0 <__aeabi_f2d>
 8001a0c:	4602      	mov	r2, r0
 8001a0e:	460b      	mov	r3, r1
 8001a10:	4640      	mov	r0, r8
 8001a12:	4649      	mov	r1, r9
 8001a14:	f7fe fd9c 	bl	8000550 <__aeabi_dmul>
 8001a18:	4602      	mov	r2, r0
 8001a1a:	460b      	mov	r3, r1
 8001a1c:	4620      	mov	r0, r4
 8001a1e:	4629      	mov	r1, r5
 8001a20:	f7fe fbe0 	bl	80001e4 <__adddf3>
 8001a24:	4602      	mov	r2, r0
 8001a26:	460b      	mov	r3, r1
 8001a28:	4610      	mov	r0, r2
 8001a2a:	4619      	mov	r1, r3
 8001a2c:	f7ff f840 	bl	8000ab0 <__aeabi_d2f>
 8001a30:	4603      	mov	r3, r0
 8001a32:	4a5e      	ldr	r2, [pc, #376]	; (8001bac <cal_trapi+0x280>)
 8001a34:	6013      	str	r3, [r2, #0]
					v_x_trapi = A_max_x*trapi_time*side_x;
 8001a36:	4b60      	ldr	r3, [pc, #384]	; (8001bb8 <cal_trapi+0x28c>)
 8001a38:	ed93 7a00 	vldr	s14, [r3]
 8001a3c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001a40:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a44:	4b5e      	ldr	r3, [pc, #376]	; (8001bc0 <cal_trapi+0x294>)
 8001a46:	edd3 7a00 	vldr	s15, [r3]
 8001a4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a4e:	4b58      	ldr	r3, [pc, #352]	; (8001bb0 <cal_trapi+0x284>)
 8001a50:	edc3 7a00 	vstr	s15, [r3]
 8001a54:	e1fc      	b.n	8001e50 <cal_trapi+0x524>
				}
		else if ((tb_x_1<=trapi_time)&&(trapi_time<=tb_x_2)){
 8001a56:	4b57      	ldr	r3, [pc, #348]	; (8001bb4 <cal_trapi+0x288>)
 8001a58:	edd3 7a00 	vldr	s15, [r3]
 8001a5c:	ed97 7a03 	vldr	s14, [r7, #12]
 8001a60:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001a64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a68:	f2c0 8086 	blt.w	8001b78 <cal_trapi+0x24c>
 8001a6c:	4b55      	ldr	r3, [pc, #340]	; (8001bc4 <cal_trapi+0x298>)
 8001a6e:	edd3 7a00 	vldr	s15, [r3]
 8001a72:	ed97 7a03 	vldr	s14, [r7, #12]
 8001a76:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001a7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a7e:	d87b      	bhi.n	8001b78 <cal_trapi+0x24c>
					Position_trapi.x = position_1_x +side_x*(A_max_x*tb_x_1*(trapi_time-tb_x_1))-0.5*side_x*(A_max_x*(trapi_time-tb_x_1)*(trapi_time-tb_x_1));
 8001a80:	4b4d      	ldr	r3, [pc, #308]	; (8001bb8 <cal_trapi+0x28c>)
 8001a82:	ed93 7a00 	vldr	s14, [r3]
 8001a86:	4b4b      	ldr	r3, [pc, #300]	; (8001bb4 <cal_trapi+0x288>)
 8001a88:	edd3 7a00 	vldr	s15, [r3]
 8001a8c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a90:	4b48      	ldr	r3, [pc, #288]	; (8001bb4 <cal_trapi+0x288>)
 8001a92:	edd3 7a00 	vldr	s15, [r3]
 8001a96:	edd7 6a03 	vldr	s13, [r7, #12]
 8001a9a:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001a9e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001aa2:	4b47      	ldr	r3, [pc, #284]	; (8001bc0 <cal_trapi+0x294>)
 8001aa4:	edd3 7a00 	vldr	s15, [r3]
 8001aa8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001aac:	4b46      	ldr	r3, [pc, #280]	; (8001bc8 <cal_trapi+0x29c>)
 8001aae:	edd3 7a00 	vldr	s15, [r3]
 8001ab2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ab6:	ee17 0a90 	vmov	r0, s15
 8001aba:	f7fe fcf1 	bl	80004a0 <__aeabi_f2d>
 8001abe:	4604      	mov	r4, r0
 8001ac0:	460d      	mov	r5, r1
 8001ac2:	4b3f      	ldr	r3, [pc, #252]	; (8001bc0 <cal_trapi+0x294>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	f7fe fcea 	bl	80004a0 <__aeabi_f2d>
 8001acc:	f04f 0200 	mov.w	r2, #0
 8001ad0:	4b3a      	ldr	r3, [pc, #232]	; (8001bbc <cal_trapi+0x290>)
 8001ad2:	f7fe fd3d 	bl	8000550 <__aeabi_dmul>
 8001ad6:	4602      	mov	r2, r0
 8001ad8:	460b      	mov	r3, r1
 8001ada:	4690      	mov	r8, r2
 8001adc:	4699      	mov	r9, r3
 8001ade:	4b35      	ldr	r3, [pc, #212]	; (8001bb4 <cal_trapi+0x288>)
 8001ae0:	edd3 7a00 	vldr	s15, [r3]
 8001ae4:	ed97 7a03 	vldr	s14, [r7, #12]
 8001ae8:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001aec:	4b32      	ldr	r3, [pc, #200]	; (8001bb8 <cal_trapi+0x28c>)
 8001aee:	edd3 7a00 	vldr	s15, [r3]
 8001af2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001af6:	4b2f      	ldr	r3, [pc, #188]	; (8001bb4 <cal_trapi+0x288>)
 8001af8:	edd3 7a00 	vldr	s15, [r3]
 8001afc:	edd7 6a03 	vldr	s13, [r7, #12]
 8001b00:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001b04:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b08:	ee17 0a90 	vmov	r0, s15
 8001b0c:	f7fe fcc8 	bl	80004a0 <__aeabi_f2d>
 8001b10:	4602      	mov	r2, r0
 8001b12:	460b      	mov	r3, r1
 8001b14:	4640      	mov	r0, r8
 8001b16:	4649      	mov	r1, r9
 8001b18:	f7fe fd1a 	bl	8000550 <__aeabi_dmul>
 8001b1c:	4602      	mov	r2, r0
 8001b1e:	460b      	mov	r3, r1
 8001b20:	4620      	mov	r0, r4
 8001b22:	4629      	mov	r1, r5
 8001b24:	f7fe fb5c 	bl	80001e0 <__aeabi_dsub>
 8001b28:	4602      	mov	r2, r0
 8001b2a:	460b      	mov	r3, r1
 8001b2c:	4610      	mov	r0, r2
 8001b2e:	4619      	mov	r1, r3
 8001b30:	f7fe ffbe 	bl	8000ab0 <__aeabi_d2f>
 8001b34:	4603      	mov	r3, r0
 8001b36:	4a1d      	ldr	r2, [pc, #116]	; (8001bac <cal_trapi+0x280>)
 8001b38:	6013      	str	r3, [r2, #0]
					v_x_trapi =((A_max_x*tb_x_1)-((trapi_time-tb_x_1)*A_max_x))*side_x;
 8001b3a:	4b1f      	ldr	r3, [pc, #124]	; (8001bb8 <cal_trapi+0x28c>)
 8001b3c:	ed93 7a00 	vldr	s14, [r3]
 8001b40:	4b1c      	ldr	r3, [pc, #112]	; (8001bb4 <cal_trapi+0x288>)
 8001b42:	edd3 7a00 	vldr	s15, [r3]
 8001b46:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b4a:	4b1a      	ldr	r3, [pc, #104]	; (8001bb4 <cal_trapi+0x288>)
 8001b4c:	edd3 7a00 	vldr	s15, [r3]
 8001b50:	edd7 6a03 	vldr	s13, [r7, #12]
 8001b54:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001b58:	4b17      	ldr	r3, [pc, #92]	; (8001bb8 <cal_trapi+0x28c>)
 8001b5a:	edd3 7a00 	vldr	s15, [r3]
 8001b5e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b62:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001b66:	4b16      	ldr	r3, [pc, #88]	; (8001bc0 <cal_trapi+0x294>)
 8001b68:	edd3 7a00 	vldr	s15, [r3]
 8001b6c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b70:	4b0f      	ldr	r3, [pc, #60]	; (8001bb0 <cal_trapi+0x284>)
 8001b72:	edc3 7a00 	vstr	s15, [r3]
 8001b76:	e16b      	b.n	8001e50 <cal_trapi+0x524>
				}
		else if (trapi_time>tb_x_2){
 8001b78:	4b12      	ldr	r3, [pc, #72]	; (8001bc4 <cal_trapi+0x298>)
 8001b7a:	edd3 7a00 	vldr	s15, [r3]
 8001b7e:	ed97 7a03 	vldr	s14, [r7, #12]
 8001b82:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001b86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b8a:	f340 8161 	ble.w	8001e50 <cal_trapi+0x524>
					Position_trapi.x =stop_trapi.x;
 8001b8e:	4b0f      	ldr	r3, [pc, #60]	; (8001bcc <cal_trapi+0x2a0>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	4a06      	ldr	r2, [pc, #24]	; (8001bac <cal_trapi+0x280>)
 8001b94:	6013      	str	r3, [r2, #0]
					v_x_trapi =0;
 8001b96:	4b06      	ldr	r3, [pc, #24]	; (8001bb0 <cal_trapi+0x284>)
 8001b98:	f04f 0200 	mov.w	r2, #0
 8001b9c:	601a      	str	r2, [r3, #0]
 8001b9e:	e157      	b.n	8001e50 <cal_trapi+0x524>
 8001ba0:	200001c0 	.word	0x200001c0
 8001ba4:	200001d4 	.word	0x200001d4
 8001ba8:	200001a0 	.word	0x200001a0
 8001bac:	20000204 	.word	0x20000204
 8001bb0:	2000020c 	.word	0x2000020c
 8001bb4:	200001ec 	.word	0x200001ec
 8001bb8:	200001b8 	.word	0x200001b8
 8001bbc:	3fe00000 	.word	0x3fe00000
 8001bc0:	20000000 	.word	0x20000000
 8001bc4:	200001f0 	.word	0x200001f0
 8001bc8:	200001dc 	.word	0x200001dc
 8001bcc:	200001a8 	.word	0x200001a8
				}
	}
	else if (x_case == 2){
 8001bd0:	4ba6      	ldr	r3, [pc, #664]	; (8001e6c <cal_trapi+0x540>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	2b02      	cmp	r3, #2
 8001bd6:	f040 813b 	bne.w	8001e50 <cal_trapi+0x524>
			if ((0<=trapi_time)&&(trapi_time<=tb_x_1)){
 8001bda:	edd7 7a03 	vldr	s15, [r7, #12]
 8001bde:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001be2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001be6:	db62      	blt.n	8001cae <cal_trapi+0x382>
 8001be8:	4ba1      	ldr	r3, [pc, #644]	; (8001e70 <cal_trapi+0x544>)
 8001bea:	edd3 7a00 	vldr	s15, [r3]
 8001bee:	ed97 7a03 	vldr	s14, [r7, #12]
 8001bf2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001bf6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bfa:	d858      	bhi.n	8001cae <cal_trapi+0x382>
								Position_trapi.x =start_trapi.x+ 0.5*(A_max_x)*trapi_time*trapi_time*side_x;
 8001bfc:	4b9d      	ldr	r3, [pc, #628]	; (8001e74 <cal_trapi+0x548>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	4618      	mov	r0, r3
 8001c02:	f7fe fc4d 	bl	80004a0 <__aeabi_f2d>
 8001c06:	4604      	mov	r4, r0
 8001c08:	460d      	mov	r5, r1
 8001c0a:	4b9b      	ldr	r3, [pc, #620]	; (8001e78 <cal_trapi+0x54c>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	4618      	mov	r0, r3
 8001c10:	f7fe fc46 	bl	80004a0 <__aeabi_f2d>
 8001c14:	f04f 0200 	mov.w	r2, #0
 8001c18:	4b98      	ldr	r3, [pc, #608]	; (8001e7c <cal_trapi+0x550>)
 8001c1a:	f7fe fc99 	bl	8000550 <__aeabi_dmul>
 8001c1e:	4602      	mov	r2, r0
 8001c20:	460b      	mov	r3, r1
 8001c22:	4690      	mov	r8, r2
 8001c24:	4699      	mov	r9, r3
 8001c26:	68f8      	ldr	r0, [r7, #12]
 8001c28:	f7fe fc3a 	bl	80004a0 <__aeabi_f2d>
 8001c2c:	4602      	mov	r2, r0
 8001c2e:	460b      	mov	r3, r1
 8001c30:	4640      	mov	r0, r8
 8001c32:	4649      	mov	r1, r9
 8001c34:	f7fe fc8c 	bl	8000550 <__aeabi_dmul>
 8001c38:	4602      	mov	r2, r0
 8001c3a:	460b      	mov	r3, r1
 8001c3c:	4690      	mov	r8, r2
 8001c3e:	4699      	mov	r9, r3
 8001c40:	68f8      	ldr	r0, [r7, #12]
 8001c42:	f7fe fc2d 	bl	80004a0 <__aeabi_f2d>
 8001c46:	4602      	mov	r2, r0
 8001c48:	460b      	mov	r3, r1
 8001c4a:	4640      	mov	r0, r8
 8001c4c:	4649      	mov	r1, r9
 8001c4e:	f7fe fc7f 	bl	8000550 <__aeabi_dmul>
 8001c52:	4602      	mov	r2, r0
 8001c54:	460b      	mov	r3, r1
 8001c56:	4690      	mov	r8, r2
 8001c58:	4699      	mov	r9, r3
 8001c5a:	4b89      	ldr	r3, [pc, #548]	; (8001e80 <cal_trapi+0x554>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	4618      	mov	r0, r3
 8001c60:	f7fe fc1e 	bl	80004a0 <__aeabi_f2d>
 8001c64:	4602      	mov	r2, r0
 8001c66:	460b      	mov	r3, r1
 8001c68:	4640      	mov	r0, r8
 8001c6a:	4649      	mov	r1, r9
 8001c6c:	f7fe fc70 	bl	8000550 <__aeabi_dmul>
 8001c70:	4602      	mov	r2, r0
 8001c72:	460b      	mov	r3, r1
 8001c74:	4620      	mov	r0, r4
 8001c76:	4629      	mov	r1, r5
 8001c78:	f7fe fab4 	bl	80001e4 <__adddf3>
 8001c7c:	4602      	mov	r2, r0
 8001c7e:	460b      	mov	r3, r1
 8001c80:	4610      	mov	r0, r2
 8001c82:	4619      	mov	r1, r3
 8001c84:	f7fe ff14 	bl	8000ab0 <__aeabi_d2f>
 8001c88:	4603      	mov	r3, r0
 8001c8a:	4a7e      	ldr	r2, [pc, #504]	; (8001e84 <cal_trapi+0x558>)
 8001c8c:	6013      	str	r3, [r2, #0]
								v_x_trapi = A_max_x*trapi_time*side_x;
 8001c8e:	4b7a      	ldr	r3, [pc, #488]	; (8001e78 <cal_trapi+0x54c>)
 8001c90:	ed93 7a00 	vldr	s14, [r3]
 8001c94:	edd7 7a03 	vldr	s15, [r7, #12]
 8001c98:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001c9c:	4b78      	ldr	r3, [pc, #480]	; (8001e80 <cal_trapi+0x554>)
 8001c9e:	edd3 7a00 	vldr	s15, [r3]
 8001ca2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ca6:	4b78      	ldr	r3, [pc, #480]	; (8001e88 <cal_trapi+0x55c>)
 8001ca8:	edc3 7a00 	vstr	s15, [r3]
 8001cac:	e0d0      	b.n	8001e50 <cal_trapi+0x524>
				}
			else if ((tb_x_1<=trapi_time)&&(trapi_time<=tb_x_2)){
 8001cae:	4b70      	ldr	r3, [pc, #448]	; (8001e70 <cal_trapi+0x544>)
 8001cb0:	edd3 7a00 	vldr	s15, [r3]
 8001cb4:	ed97 7a03 	vldr	s14, [r7, #12]
 8001cb8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001cbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cc0:	db2e      	blt.n	8001d20 <cal_trapi+0x3f4>
 8001cc2:	4b72      	ldr	r3, [pc, #456]	; (8001e8c <cal_trapi+0x560>)
 8001cc4:	edd3 7a00 	vldr	s15, [r3]
 8001cc8:	ed97 7a03 	vldr	s14, [r7, #12]
 8001ccc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001cd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cd4:	d824      	bhi.n	8001d20 <cal_trapi+0x3f4>
								Position_trapi.x = position_1_x + V_max_x*(trapi_time-tb_x_1)*side_x;
 8001cd6:	4b66      	ldr	r3, [pc, #408]	; (8001e70 <cal_trapi+0x544>)
 8001cd8:	edd3 7a00 	vldr	s15, [r3]
 8001cdc:	ed97 7a03 	vldr	s14, [r7, #12]
 8001ce0:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001ce4:	4b6a      	ldr	r3, [pc, #424]	; (8001e90 <cal_trapi+0x564>)
 8001ce6:	edd3 7a00 	vldr	s15, [r3]
 8001cea:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001cee:	4b64      	ldr	r3, [pc, #400]	; (8001e80 <cal_trapi+0x554>)
 8001cf0:	edd3 7a00 	vldr	s15, [r3]
 8001cf4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001cf8:	4b66      	ldr	r3, [pc, #408]	; (8001e94 <cal_trapi+0x568>)
 8001cfa:	edd3 7a00 	vldr	s15, [r3]
 8001cfe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d02:	4b60      	ldr	r3, [pc, #384]	; (8001e84 <cal_trapi+0x558>)
 8001d04:	edc3 7a00 	vstr	s15, [r3]
								v_x_trapi = V_max_x*side_x;
 8001d08:	4b61      	ldr	r3, [pc, #388]	; (8001e90 <cal_trapi+0x564>)
 8001d0a:	ed93 7a00 	vldr	s14, [r3]
 8001d0e:	4b5c      	ldr	r3, [pc, #368]	; (8001e80 <cal_trapi+0x554>)
 8001d10:	edd3 7a00 	vldr	s15, [r3]
 8001d14:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d18:	4b5b      	ldr	r3, [pc, #364]	; (8001e88 <cal_trapi+0x55c>)
 8001d1a:	edc3 7a00 	vstr	s15, [r3]
 8001d1e:	e097      	b.n	8001e50 <cal_trapi+0x524>
				}
			else if ((tb_x_2<=trapi_time)&&(trapi_time<=tb_x_3)){
 8001d20:	4b5a      	ldr	r3, [pc, #360]	; (8001e8c <cal_trapi+0x560>)
 8001d22:	edd3 7a00 	vldr	s15, [r3]
 8001d26:	ed97 7a03 	vldr	s14, [r7, #12]
 8001d2a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001d2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d32:	db7b      	blt.n	8001e2c <cal_trapi+0x500>
 8001d34:	4b58      	ldr	r3, [pc, #352]	; (8001e98 <cal_trapi+0x56c>)
 8001d36:	edd3 7a00 	vldr	s15, [r3]
 8001d3a:	ed97 7a03 	vldr	s14, [r7, #12]
 8001d3e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001d42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d46:	d871      	bhi.n	8001e2c <cal_trapi+0x500>
								Position_trapi.x = position_2_x + V_max_x*(trapi_time-tb_x_2)*side_x - 0.5*side_x*(A_max_x*(trapi_time-tb_x_2)*(trapi_time-tb_x_2));
 8001d48:	4b50      	ldr	r3, [pc, #320]	; (8001e8c <cal_trapi+0x560>)
 8001d4a:	edd3 7a00 	vldr	s15, [r3]
 8001d4e:	ed97 7a03 	vldr	s14, [r7, #12]
 8001d52:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001d56:	4b4e      	ldr	r3, [pc, #312]	; (8001e90 <cal_trapi+0x564>)
 8001d58:	edd3 7a00 	vldr	s15, [r3]
 8001d5c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001d60:	4b47      	ldr	r3, [pc, #284]	; (8001e80 <cal_trapi+0x554>)
 8001d62:	edd3 7a00 	vldr	s15, [r3]
 8001d66:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001d6a:	4b4c      	ldr	r3, [pc, #304]	; (8001e9c <cal_trapi+0x570>)
 8001d6c:	edd3 7a00 	vldr	s15, [r3]
 8001d70:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d74:	ee17 0a90 	vmov	r0, s15
 8001d78:	f7fe fb92 	bl	80004a0 <__aeabi_f2d>
 8001d7c:	4604      	mov	r4, r0
 8001d7e:	460d      	mov	r5, r1
 8001d80:	4b3f      	ldr	r3, [pc, #252]	; (8001e80 <cal_trapi+0x554>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	4618      	mov	r0, r3
 8001d86:	f7fe fb8b 	bl	80004a0 <__aeabi_f2d>
 8001d8a:	f04f 0200 	mov.w	r2, #0
 8001d8e:	4b3b      	ldr	r3, [pc, #236]	; (8001e7c <cal_trapi+0x550>)
 8001d90:	f7fe fbde 	bl	8000550 <__aeabi_dmul>
 8001d94:	4602      	mov	r2, r0
 8001d96:	460b      	mov	r3, r1
 8001d98:	4690      	mov	r8, r2
 8001d9a:	4699      	mov	r9, r3
 8001d9c:	4b3b      	ldr	r3, [pc, #236]	; (8001e8c <cal_trapi+0x560>)
 8001d9e:	edd3 7a00 	vldr	s15, [r3]
 8001da2:	ed97 7a03 	vldr	s14, [r7, #12]
 8001da6:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001daa:	4b33      	ldr	r3, [pc, #204]	; (8001e78 <cal_trapi+0x54c>)
 8001dac:	edd3 7a00 	vldr	s15, [r3]
 8001db0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001db4:	4b35      	ldr	r3, [pc, #212]	; (8001e8c <cal_trapi+0x560>)
 8001db6:	edd3 7a00 	vldr	s15, [r3]
 8001dba:	edd7 6a03 	vldr	s13, [r7, #12]
 8001dbe:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001dc2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001dc6:	ee17 0a90 	vmov	r0, s15
 8001dca:	f7fe fb69 	bl	80004a0 <__aeabi_f2d>
 8001dce:	4602      	mov	r2, r0
 8001dd0:	460b      	mov	r3, r1
 8001dd2:	4640      	mov	r0, r8
 8001dd4:	4649      	mov	r1, r9
 8001dd6:	f7fe fbbb 	bl	8000550 <__aeabi_dmul>
 8001dda:	4602      	mov	r2, r0
 8001ddc:	460b      	mov	r3, r1
 8001dde:	4620      	mov	r0, r4
 8001de0:	4629      	mov	r1, r5
 8001de2:	f7fe f9fd 	bl	80001e0 <__aeabi_dsub>
 8001de6:	4602      	mov	r2, r0
 8001de8:	460b      	mov	r3, r1
 8001dea:	4610      	mov	r0, r2
 8001dec:	4619      	mov	r1, r3
 8001dee:	f7fe fe5f 	bl	8000ab0 <__aeabi_d2f>
 8001df2:	4603      	mov	r3, r0
 8001df4:	4a23      	ldr	r2, [pc, #140]	; (8001e84 <cal_trapi+0x558>)
 8001df6:	6013      	str	r3, [r2, #0]
								v_x_trapi = (V_max_x-((trapi_time-tb_x_2)*A_max_x))*side_x;
 8001df8:	4b25      	ldr	r3, [pc, #148]	; (8001e90 <cal_trapi+0x564>)
 8001dfa:	ed93 7a00 	vldr	s14, [r3]
 8001dfe:	4b23      	ldr	r3, [pc, #140]	; (8001e8c <cal_trapi+0x560>)
 8001e00:	edd3 7a00 	vldr	s15, [r3]
 8001e04:	edd7 6a03 	vldr	s13, [r7, #12]
 8001e08:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001e0c:	4b1a      	ldr	r3, [pc, #104]	; (8001e78 <cal_trapi+0x54c>)
 8001e0e:	edd3 7a00 	vldr	s15, [r3]
 8001e12:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e16:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001e1a:	4b19      	ldr	r3, [pc, #100]	; (8001e80 <cal_trapi+0x554>)
 8001e1c:	edd3 7a00 	vldr	s15, [r3]
 8001e20:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e24:	4b18      	ldr	r3, [pc, #96]	; (8001e88 <cal_trapi+0x55c>)
 8001e26:	edc3 7a00 	vstr	s15, [r3]
 8001e2a:	e011      	b.n	8001e50 <cal_trapi+0x524>
				}
			else if (trapi_time>tb_x_3){
 8001e2c:	4b1a      	ldr	r3, [pc, #104]	; (8001e98 <cal_trapi+0x56c>)
 8001e2e:	edd3 7a00 	vldr	s15, [r3]
 8001e32:	ed97 7a03 	vldr	s14, [r7, #12]
 8001e36:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001e3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e3e:	dd07      	ble.n	8001e50 <cal_trapi+0x524>
								Position_trapi.x =stop_trapi.x;
 8001e40:	4b17      	ldr	r3, [pc, #92]	; (8001ea0 <cal_trapi+0x574>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	4a0f      	ldr	r2, [pc, #60]	; (8001e84 <cal_trapi+0x558>)
 8001e46:	6013      	str	r3, [r2, #0]
								v_x_trapi =0;
 8001e48:	4b0f      	ldr	r3, [pc, #60]	; (8001e88 <cal_trapi+0x55c>)
 8001e4a:	f04f 0200 	mov.w	r2, #0
 8001e4e:	601a      	str	r2, [r3, #0]
				}
			}

	//y generator
	if (y_case == 0){
 8001e50:	4b14      	ldr	r3, [pc, #80]	; (8001ea4 <cal_trapi+0x578>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d129      	bne.n	8001eac <cal_trapi+0x580>
			Position_trapi.y = start_trapi.y;
 8001e58:	4b06      	ldr	r3, [pc, #24]	; (8001e74 <cal_trapi+0x548>)
 8001e5a:	685b      	ldr	r3, [r3, #4]
 8001e5c:	4a09      	ldr	r2, [pc, #36]	; (8001e84 <cal_trapi+0x558>)
 8001e5e:	6053      	str	r3, [r2, #4]
			v_y_trapi = 0;
 8001e60:	4b11      	ldr	r3, [pc, #68]	; (8001ea8 <cal_trapi+0x57c>)
 8001e62:	f04f 0200 	mov.w	r2, #0
 8001e66:	601a      	str	r2, [r3, #0]
			else if (trapi_time>tb_y_3){
								Position_trapi.y =stop_trapi.y;
								v_y_trapi =0;
				}
			}
}
 8001e68:	e28d      	b.n	8002386 <cal_trapi+0xa5a>
 8001e6a:	bf00      	nop
 8001e6c:	200001d4 	.word	0x200001d4
 8001e70:	200001ec 	.word	0x200001ec
 8001e74:	200001a0 	.word	0x200001a0
 8001e78:	200001b8 	.word	0x200001b8
 8001e7c:	3fe00000 	.word	0x3fe00000
 8001e80:	20000000 	.word	0x20000000
 8001e84:	20000204 	.word	0x20000204
 8001e88:	2000020c 	.word	0x2000020c
 8001e8c:	200001f0 	.word	0x200001f0
 8001e90:	200001b0 	.word	0x200001b0
 8001e94:	200001dc 	.word	0x200001dc
 8001e98:	200001f4 	.word	0x200001f4
 8001e9c:	200001e0 	.word	0x200001e0
 8001ea0:	200001a8 	.word	0x200001a8
 8001ea4:	200001d8 	.word	0x200001d8
 8001ea8:	20000210 	.word	0x20000210
	else if (y_case == 1){
 8001eac:	4bc1      	ldr	r3, [pc, #772]	; (80021b4 <cal_trapi+0x888>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	2b01      	cmp	r3, #1
 8001eb2:	f040 810f 	bne.w	80020d4 <cal_trapi+0x7a8>
			if ((0<=trapi_time)&&(trapi_time<=tb_y_1)){
 8001eb6:	edd7 7a03 	vldr	s15, [r7, #12]
 8001eba:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001ebe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ec2:	db62      	blt.n	8001f8a <cal_trapi+0x65e>
 8001ec4:	4bbc      	ldr	r3, [pc, #752]	; (80021b8 <cal_trapi+0x88c>)
 8001ec6:	edd3 7a00 	vldr	s15, [r3]
 8001eca:	ed97 7a03 	vldr	s14, [r7, #12]
 8001ece:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001ed2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ed6:	d858      	bhi.n	8001f8a <cal_trapi+0x65e>
						Position_trapi.y =start_trapi.y+ 0.5*(A_max_y)*trapi_time*trapi_time*side_y;
 8001ed8:	4bb8      	ldr	r3, [pc, #736]	; (80021bc <cal_trapi+0x890>)
 8001eda:	685b      	ldr	r3, [r3, #4]
 8001edc:	4618      	mov	r0, r3
 8001ede:	f7fe fadf 	bl	80004a0 <__aeabi_f2d>
 8001ee2:	4604      	mov	r4, r0
 8001ee4:	460d      	mov	r5, r1
 8001ee6:	4bb6      	ldr	r3, [pc, #728]	; (80021c0 <cal_trapi+0x894>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	4618      	mov	r0, r3
 8001eec:	f7fe fad8 	bl	80004a0 <__aeabi_f2d>
 8001ef0:	f04f 0200 	mov.w	r2, #0
 8001ef4:	4bb3      	ldr	r3, [pc, #716]	; (80021c4 <cal_trapi+0x898>)
 8001ef6:	f7fe fb2b 	bl	8000550 <__aeabi_dmul>
 8001efa:	4602      	mov	r2, r0
 8001efc:	460b      	mov	r3, r1
 8001efe:	4690      	mov	r8, r2
 8001f00:	4699      	mov	r9, r3
 8001f02:	68f8      	ldr	r0, [r7, #12]
 8001f04:	f7fe facc 	bl	80004a0 <__aeabi_f2d>
 8001f08:	4602      	mov	r2, r0
 8001f0a:	460b      	mov	r3, r1
 8001f0c:	4640      	mov	r0, r8
 8001f0e:	4649      	mov	r1, r9
 8001f10:	f7fe fb1e 	bl	8000550 <__aeabi_dmul>
 8001f14:	4602      	mov	r2, r0
 8001f16:	460b      	mov	r3, r1
 8001f18:	4690      	mov	r8, r2
 8001f1a:	4699      	mov	r9, r3
 8001f1c:	68f8      	ldr	r0, [r7, #12]
 8001f1e:	f7fe fabf 	bl	80004a0 <__aeabi_f2d>
 8001f22:	4602      	mov	r2, r0
 8001f24:	460b      	mov	r3, r1
 8001f26:	4640      	mov	r0, r8
 8001f28:	4649      	mov	r1, r9
 8001f2a:	f7fe fb11 	bl	8000550 <__aeabi_dmul>
 8001f2e:	4602      	mov	r2, r0
 8001f30:	460b      	mov	r3, r1
 8001f32:	4690      	mov	r8, r2
 8001f34:	4699      	mov	r9, r3
 8001f36:	4ba4      	ldr	r3, [pc, #656]	; (80021c8 <cal_trapi+0x89c>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	f7fe fab0 	bl	80004a0 <__aeabi_f2d>
 8001f40:	4602      	mov	r2, r0
 8001f42:	460b      	mov	r3, r1
 8001f44:	4640      	mov	r0, r8
 8001f46:	4649      	mov	r1, r9
 8001f48:	f7fe fb02 	bl	8000550 <__aeabi_dmul>
 8001f4c:	4602      	mov	r2, r0
 8001f4e:	460b      	mov	r3, r1
 8001f50:	4620      	mov	r0, r4
 8001f52:	4629      	mov	r1, r5
 8001f54:	f7fe f946 	bl	80001e4 <__adddf3>
 8001f58:	4602      	mov	r2, r0
 8001f5a:	460b      	mov	r3, r1
 8001f5c:	4610      	mov	r0, r2
 8001f5e:	4619      	mov	r1, r3
 8001f60:	f7fe fda6 	bl	8000ab0 <__aeabi_d2f>
 8001f64:	4603      	mov	r3, r0
 8001f66:	4a99      	ldr	r2, [pc, #612]	; (80021cc <cal_trapi+0x8a0>)
 8001f68:	6053      	str	r3, [r2, #4]
						v_y_trapi = A_max_y*trapi_time*side_y;
 8001f6a:	4b95      	ldr	r3, [pc, #596]	; (80021c0 <cal_trapi+0x894>)
 8001f6c:	ed93 7a00 	vldr	s14, [r3]
 8001f70:	edd7 7a03 	vldr	s15, [r7, #12]
 8001f74:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001f78:	4b93      	ldr	r3, [pc, #588]	; (80021c8 <cal_trapi+0x89c>)
 8001f7a:	edd3 7a00 	vldr	s15, [r3]
 8001f7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f82:	4b93      	ldr	r3, [pc, #588]	; (80021d0 <cal_trapi+0x8a4>)
 8001f84:	edc3 7a00 	vstr	s15, [r3]
 8001f88:	e1fd      	b.n	8002386 <cal_trapi+0xa5a>
			else if ((tb_y_1<=trapi_time)&&(trapi_time<=tb_y_2)){
 8001f8a:	4b8b      	ldr	r3, [pc, #556]	; (80021b8 <cal_trapi+0x88c>)
 8001f8c:	edd3 7a00 	vldr	s15, [r3]
 8001f90:	ed97 7a03 	vldr	s14, [r7, #12]
 8001f94:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001f98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f9c:	f2c0 8086 	blt.w	80020ac <cal_trapi+0x780>
 8001fa0:	4b8c      	ldr	r3, [pc, #560]	; (80021d4 <cal_trapi+0x8a8>)
 8001fa2:	edd3 7a00 	vldr	s15, [r3]
 8001fa6:	ed97 7a03 	vldr	s14, [r7, #12]
 8001faa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001fae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fb2:	d87b      	bhi.n	80020ac <cal_trapi+0x780>
						Position_trapi.y = position_1_y + side_y*(A_max_y*tb_y_1*(trapi_time-tb_y_1))-0.5*side_y*(A_max_y*(trapi_time-tb_y_1)*(trapi_time-tb_y_1));
 8001fb4:	4b82      	ldr	r3, [pc, #520]	; (80021c0 <cal_trapi+0x894>)
 8001fb6:	ed93 7a00 	vldr	s14, [r3]
 8001fba:	4b7f      	ldr	r3, [pc, #508]	; (80021b8 <cal_trapi+0x88c>)
 8001fbc:	edd3 7a00 	vldr	s15, [r3]
 8001fc0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001fc4:	4b7c      	ldr	r3, [pc, #496]	; (80021b8 <cal_trapi+0x88c>)
 8001fc6:	edd3 7a00 	vldr	s15, [r3]
 8001fca:	edd7 6a03 	vldr	s13, [r7, #12]
 8001fce:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001fd2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001fd6:	4b7c      	ldr	r3, [pc, #496]	; (80021c8 <cal_trapi+0x89c>)
 8001fd8:	edd3 7a00 	vldr	s15, [r3]
 8001fdc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001fe0:	4b7d      	ldr	r3, [pc, #500]	; (80021d8 <cal_trapi+0x8ac>)
 8001fe2:	edd3 7a00 	vldr	s15, [r3]
 8001fe6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001fea:	ee17 0a90 	vmov	r0, s15
 8001fee:	f7fe fa57 	bl	80004a0 <__aeabi_f2d>
 8001ff2:	4604      	mov	r4, r0
 8001ff4:	460d      	mov	r5, r1
 8001ff6:	4b74      	ldr	r3, [pc, #464]	; (80021c8 <cal_trapi+0x89c>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	f7fe fa50 	bl	80004a0 <__aeabi_f2d>
 8002000:	f04f 0200 	mov.w	r2, #0
 8002004:	4b6f      	ldr	r3, [pc, #444]	; (80021c4 <cal_trapi+0x898>)
 8002006:	f7fe faa3 	bl	8000550 <__aeabi_dmul>
 800200a:	4602      	mov	r2, r0
 800200c:	460b      	mov	r3, r1
 800200e:	4690      	mov	r8, r2
 8002010:	4699      	mov	r9, r3
 8002012:	4b69      	ldr	r3, [pc, #420]	; (80021b8 <cal_trapi+0x88c>)
 8002014:	edd3 7a00 	vldr	s15, [r3]
 8002018:	ed97 7a03 	vldr	s14, [r7, #12]
 800201c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002020:	4b67      	ldr	r3, [pc, #412]	; (80021c0 <cal_trapi+0x894>)
 8002022:	edd3 7a00 	vldr	s15, [r3]
 8002026:	ee27 7a27 	vmul.f32	s14, s14, s15
 800202a:	4b63      	ldr	r3, [pc, #396]	; (80021b8 <cal_trapi+0x88c>)
 800202c:	edd3 7a00 	vldr	s15, [r3]
 8002030:	edd7 6a03 	vldr	s13, [r7, #12]
 8002034:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002038:	ee67 7a27 	vmul.f32	s15, s14, s15
 800203c:	ee17 0a90 	vmov	r0, s15
 8002040:	f7fe fa2e 	bl	80004a0 <__aeabi_f2d>
 8002044:	4602      	mov	r2, r0
 8002046:	460b      	mov	r3, r1
 8002048:	4640      	mov	r0, r8
 800204a:	4649      	mov	r1, r9
 800204c:	f7fe fa80 	bl	8000550 <__aeabi_dmul>
 8002050:	4602      	mov	r2, r0
 8002052:	460b      	mov	r3, r1
 8002054:	4620      	mov	r0, r4
 8002056:	4629      	mov	r1, r5
 8002058:	f7fe f8c2 	bl	80001e0 <__aeabi_dsub>
 800205c:	4602      	mov	r2, r0
 800205e:	460b      	mov	r3, r1
 8002060:	4610      	mov	r0, r2
 8002062:	4619      	mov	r1, r3
 8002064:	f7fe fd24 	bl	8000ab0 <__aeabi_d2f>
 8002068:	4603      	mov	r3, r0
 800206a:	4a58      	ldr	r2, [pc, #352]	; (80021cc <cal_trapi+0x8a0>)
 800206c:	6053      	str	r3, [r2, #4]
						v_y_trapi =((A_max_y*tb_y_1)-((trapi_time-tb_y_1)*A_max_y))*side_y;
 800206e:	4b54      	ldr	r3, [pc, #336]	; (80021c0 <cal_trapi+0x894>)
 8002070:	ed93 7a00 	vldr	s14, [r3]
 8002074:	4b50      	ldr	r3, [pc, #320]	; (80021b8 <cal_trapi+0x88c>)
 8002076:	edd3 7a00 	vldr	s15, [r3]
 800207a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800207e:	4b4e      	ldr	r3, [pc, #312]	; (80021b8 <cal_trapi+0x88c>)
 8002080:	edd3 7a00 	vldr	s15, [r3]
 8002084:	edd7 6a03 	vldr	s13, [r7, #12]
 8002088:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800208c:	4b4c      	ldr	r3, [pc, #304]	; (80021c0 <cal_trapi+0x894>)
 800208e:	edd3 7a00 	vldr	s15, [r3]
 8002092:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002096:	ee37 7a67 	vsub.f32	s14, s14, s15
 800209a:	4b4b      	ldr	r3, [pc, #300]	; (80021c8 <cal_trapi+0x89c>)
 800209c:	edd3 7a00 	vldr	s15, [r3]
 80020a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020a4:	4b4a      	ldr	r3, [pc, #296]	; (80021d0 <cal_trapi+0x8a4>)
 80020a6:	edc3 7a00 	vstr	s15, [r3]
 80020aa:	e16c      	b.n	8002386 <cal_trapi+0xa5a>
			else if (trapi_time>tb_y_2){
 80020ac:	4b49      	ldr	r3, [pc, #292]	; (80021d4 <cal_trapi+0x8a8>)
 80020ae:	edd3 7a00 	vldr	s15, [r3]
 80020b2:	ed97 7a03 	vldr	s14, [r7, #12]
 80020b6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80020ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020be:	dc00      	bgt.n	80020c2 <cal_trapi+0x796>
}
 80020c0:	e161      	b.n	8002386 <cal_trapi+0xa5a>
						Position_trapi.y =stop_trapi.y;
 80020c2:	4b46      	ldr	r3, [pc, #280]	; (80021dc <cal_trapi+0x8b0>)
 80020c4:	685b      	ldr	r3, [r3, #4]
 80020c6:	4a41      	ldr	r2, [pc, #260]	; (80021cc <cal_trapi+0x8a0>)
 80020c8:	6053      	str	r3, [r2, #4]
						v_y_trapi =0;
 80020ca:	4b41      	ldr	r3, [pc, #260]	; (80021d0 <cal_trapi+0x8a4>)
 80020cc:	f04f 0200 	mov.w	r2, #0
 80020d0:	601a      	str	r2, [r3, #0]
}
 80020d2:	e158      	b.n	8002386 <cal_trapi+0xa5a>
	else if (y_case == 2){
 80020d4:	4b37      	ldr	r3, [pc, #220]	; (80021b4 <cal_trapi+0x888>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	2b02      	cmp	r3, #2
 80020da:	f040 8154 	bne.w	8002386 <cal_trapi+0xa5a>
			if ((0<=trapi_time)&&(trapi_time<=tb_y_1)){
 80020de:	edd7 7a03 	vldr	s15, [r7, #12]
 80020e2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80020e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020ea:	db79      	blt.n	80021e0 <cal_trapi+0x8b4>
 80020ec:	4b32      	ldr	r3, [pc, #200]	; (80021b8 <cal_trapi+0x88c>)
 80020ee:	edd3 7a00 	vldr	s15, [r3]
 80020f2:	ed97 7a03 	vldr	s14, [r7, #12]
 80020f6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80020fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020fe:	d86f      	bhi.n	80021e0 <cal_trapi+0x8b4>
								Position_trapi.y =start_trapi.y+ 0.5*(A_max_y)*trapi_time*trapi_time*side_y;
 8002100:	4b2e      	ldr	r3, [pc, #184]	; (80021bc <cal_trapi+0x890>)
 8002102:	685b      	ldr	r3, [r3, #4]
 8002104:	4618      	mov	r0, r3
 8002106:	f7fe f9cb 	bl	80004a0 <__aeabi_f2d>
 800210a:	4604      	mov	r4, r0
 800210c:	460d      	mov	r5, r1
 800210e:	4b2c      	ldr	r3, [pc, #176]	; (80021c0 <cal_trapi+0x894>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	4618      	mov	r0, r3
 8002114:	f7fe f9c4 	bl	80004a0 <__aeabi_f2d>
 8002118:	f04f 0200 	mov.w	r2, #0
 800211c:	4b29      	ldr	r3, [pc, #164]	; (80021c4 <cal_trapi+0x898>)
 800211e:	f7fe fa17 	bl	8000550 <__aeabi_dmul>
 8002122:	4602      	mov	r2, r0
 8002124:	460b      	mov	r3, r1
 8002126:	4690      	mov	r8, r2
 8002128:	4699      	mov	r9, r3
 800212a:	68f8      	ldr	r0, [r7, #12]
 800212c:	f7fe f9b8 	bl	80004a0 <__aeabi_f2d>
 8002130:	4602      	mov	r2, r0
 8002132:	460b      	mov	r3, r1
 8002134:	4640      	mov	r0, r8
 8002136:	4649      	mov	r1, r9
 8002138:	f7fe fa0a 	bl	8000550 <__aeabi_dmul>
 800213c:	4602      	mov	r2, r0
 800213e:	460b      	mov	r3, r1
 8002140:	4690      	mov	r8, r2
 8002142:	4699      	mov	r9, r3
 8002144:	68f8      	ldr	r0, [r7, #12]
 8002146:	f7fe f9ab 	bl	80004a0 <__aeabi_f2d>
 800214a:	4602      	mov	r2, r0
 800214c:	460b      	mov	r3, r1
 800214e:	4640      	mov	r0, r8
 8002150:	4649      	mov	r1, r9
 8002152:	f7fe f9fd 	bl	8000550 <__aeabi_dmul>
 8002156:	4602      	mov	r2, r0
 8002158:	460b      	mov	r3, r1
 800215a:	4690      	mov	r8, r2
 800215c:	4699      	mov	r9, r3
 800215e:	4b1a      	ldr	r3, [pc, #104]	; (80021c8 <cal_trapi+0x89c>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	4618      	mov	r0, r3
 8002164:	f7fe f99c 	bl	80004a0 <__aeabi_f2d>
 8002168:	4602      	mov	r2, r0
 800216a:	460b      	mov	r3, r1
 800216c:	4640      	mov	r0, r8
 800216e:	4649      	mov	r1, r9
 8002170:	f7fe f9ee 	bl	8000550 <__aeabi_dmul>
 8002174:	4602      	mov	r2, r0
 8002176:	460b      	mov	r3, r1
 8002178:	4620      	mov	r0, r4
 800217a:	4629      	mov	r1, r5
 800217c:	f7fe f832 	bl	80001e4 <__adddf3>
 8002180:	4602      	mov	r2, r0
 8002182:	460b      	mov	r3, r1
 8002184:	4610      	mov	r0, r2
 8002186:	4619      	mov	r1, r3
 8002188:	f7fe fc92 	bl	8000ab0 <__aeabi_d2f>
 800218c:	4603      	mov	r3, r0
 800218e:	4a0f      	ldr	r2, [pc, #60]	; (80021cc <cal_trapi+0x8a0>)
 8002190:	6053      	str	r3, [r2, #4]
								v_y_trapi = A_max_y*trapi_time*side_y;
 8002192:	4b0b      	ldr	r3, [pc, #44]	; (80021c0 <cal_trapi+0x894>)
 8002194:	ed93 7a00 	vldr	s14, [r3]
 8002198:	edd7 7a03 	vldr	s15, [r7, #12]
 800219c:	ee27 7a27 	vmul.f32	s14, s14, s15
 80021a0:	4b09      	ldr	r3, [pc, #36]	; (80021c8 <cal_trapi+0x89c>)
 80021a2:	edd3 7a00 	vldr	s15, [r3]
 80021a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80021aa:	4b09      	ldr	r3, [pc, #36]	; (80021d0 <cal_trapi+0x8a4>)
 80021ac:	edc3 7a00 	vstr	s15, [r3]
 80021b0:	e0e9      	b.n	8002386 <cal_trapi+0xa5a>
 80021b2:	bf00      	nop
 80021b4:	200001d8 	.word	0x200001d8
 80021b8:	200001f8 	.word	0x200001f8
 80021bc:	200001a0 	.word	0x200001a0
 80021c0:	200001bc 	.word	0x200001bc
 80021c4:	3fe00000 	.word	0x3fe00000
 80021c8:	20000004 	.word	0x20000004
 80021cc:	20000204 	.word	0x20000204
 80021d0:	20000210 	.word	0x20000210
 80021d4:	200001fc 	.word	0x200001fc
 80021d8:	200001e4 	.word	0x200001e4
 80021dc:	200001a8 	.word	0x200001a8
			else if ((tb_y_1<=trapi_time)&&(trapi_time<=tb_y_2)){
 80021e0:	4b6b      	ldr	r3, [pc, #428]	; (8002390 <cal_trapi+0xa64>)
 80021e2:	edd3 7a00 	vldr	s15, [r3]
 80021e6:	ed97 7a03 	vldr	s14, [r7, #12]
 80021ea:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80021ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021f2:	db2e      	blt.n	8002252 <cal_trapi+0x926>
 80021f4:	4b67      	ldr	r3, [pc, #412]	; (8002394 <cal_trapi+0xa68>)
 80021f6:	edd3 7a00 	vldr	s15, [r3]
 80021fa:	ed97 7a03 	vldr	s14, [r7, #12]
 80021fe:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002202:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002206:	d824      	bhi.n	8002252 <cal_trapi+0x926>
								Position_trapi.y = position_1_y + V_max_y*(trapi_time-tb_y_1)*side_y;
 8002208:	4b61      	ldr	r3, [pc, #388]	; (8002390 <cal_trapi+0xa64>)
 800220a:	edd3 7a00 	vldr	s15, [r3]
 800220e:	ed97 7a03 	vldr	s14, [r7, #12]
 8002212:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002216:	4b60      	ldr	r3, [pc, #384]	; (8002398 <cal_trapi+0xa6c>)
 8002218:	edd3 7a00 	vldr	s15, [r3]
 800221c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002220:	4b5e      	ldr	r3, [pc, #376]	; (800239c <cal_trapi+0xa70>)
 8002222:	edd3 7a00 	vldr	s15, [r3]
 8002226:	ee27 7a27 	vmul.f32	s14, s14, s15
 800222a:	4b5d      	ldr	r3, [pc, #372]	; (80023a0 <cal_trapi+0xa74>)
 800222c:	edd3 7a00 	vldr	s15, [r3]
 8002230:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002234:	4b5b      	ldr	r3, [pc, #364]	; (80023a4 <cal_trapi+0xa78>)
 8002236:	edc3 7a01 	vstr	s15, [r3, #4]
								v_y_trapi = V_max_y*side_y;
 800223a:	4b57      	ldr	r3, [pc, #348]	; (8002398 <cal_trapi+0xa6c>)
 800223c:	ed93 7a00 	vldr	s14, [r3]
 8002240:	4b56      	ldr	r3, [pc, #344]	; (800239c <cal_trapi+0xa70>)
 8002242:	edd3 7a00 	vldr	s15, [r3]
 8002246:	ee67 7a27 	vmul.f32	s15, s14, s15
 800224a:	4b57      	ldr	r3, [pc, #348]	; (80023a8 <cal_trapi+0xa7c>)
 800224c:	edc3 7a00 	vstr	s15, [r3]
 8002250:	e099      	b.n	8002386 <cal_trapi+0xa5a>
			else if ((tb_y_2<=trapi_time)&&(trapi_time<=tb_y_3)){
 8002252:	4b50      	ldr	r3, [pc, #320]	; (8002394 <cal_trapi+0xa68>)
 8002254:	edd3 7a00 	vldr	s15, [r3]
 8002258:	ed97 7a03 	vldr	s14, [r7, #12]
 800225c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002260:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002264:	db7b      	blt.n	800235e <cal_trapi+0xa32>
 8002266:	4b51      	ldr	r3, [pc, #324]	; (80023ac <cal_trapi+0xa80>)
 8002268:	edd3 7a00 	vldr	s15, [r3]
 800226c:	ed97 7a03 	vldr	s14, [r7, #12]
 8002270:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002274:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002278:	d871      	bhi.n	800235e <cal_trapi+0xa32>
								Position_trapi.y = position_2_y + V_max_y*(trapi_time-tb_y_2)*side_y - 0.5*side_y*(A_max_y*(trapi_time-tb_y_2)*(trapi_time-tb_y_2));
 800227a:	4b46      	ldr	r3, [pc, #280]	; (8002394 <cal_trapi+0xa68>)
 800227c:	edd3 7a00 	vldr	s15, [r3]
 8002280:	ed97 7a03 	vldr	s14, [r7, #12]
 8002284:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002288:	4b43      	ldr	r3, [pc, #268]	; (8002398 <cal_trapi+0xa6c>)
 800228a:	edd3 7a00 	vldr	s15, [r3]
 800228e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002292:	4b42      	ldr	r3, [pc, #264]	; (800239c <cal_trapi+0xa70>)
 8002294:	edd3 7a00 	vldr	s15, [r3]
 8002298:	ee27 7a27 	vmul.f32	s14, s14, s15
 800229c:	4b44      	ldr	r3, [pc, #272]	; (80023b0 <cal_trapi+0xa84>)
 800229e:	edd3 7a00 	vldr	s15, [r3]
 80022a2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80022a6:	ee17 0a90 	vmov	r0, s15
 80022aa:	f7fe f8f9 	bl	80004a0 <__aeabi_f2d>
 80022ae:	4604      	mov	r4, r0
 80022b0:	460d      	mov	r5, r1
 80022b2:	4b3a      	ldr	r3, [pc, #232]	; (800239c <cal_trapi+0xa70>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	4618      	mov	r0, r3
 80022b8:	f7fe f8f2 	bl	80004a0 <__aeabi_f2d>
 80022bc:	f04f 0200 	mov.w	r2, #0
 80022c0:	4b3c      	ldr	r3, [pc, #240]	; (80023b4 <cal_trapi+0xa88>)
 80022c2:	f7fe f945 	bl	8000550 <__aeabi_dmul>
 80022c6:	4602      	mov	r2, r0
 80022c8:	460b      	mov	r3, r1
 80022ca:	4690      	mov	r8, r2
 80022cc:	4699      	mov	r9, r3
 80022ce:	4b31      	ldr	r3, [pc, #196]	; (8002394 <cal_trapi+0xa68>)
 80022d0:	edd3 7a00 	vldr	s15, [r3]
 80022d4:	ed97 7a03 	vldr	s14, [r7, #12]
 80022d8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80022dc:	4b36      	ldr	r3, [pc, #216]	; (80023b8 <cal_trapi+0xa8c>)
 80022de:	edd3 7a00 	vldr	s15, [r3]
 80022e2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80022e6:	4b2b      	ldr	r3, [pc, #172]	; (8002394 <cal_trapi+0xa68>)
 80022e8:	edd3 7a00 	vldr	s15, [r3]
 80022ec:	edd7 6a03 	vldr	s13, [r7, #12]
 80022f0:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80022f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80022f8:	ee17 0a90 	vmov	r0, s15
 80022fc:	f7fe f8d0 	bl	80004a0 <__aeabi_f2d>
 8002300:	4602      	mov	r2, r0
 8002302:	460b      	mov	r3, r1
 8002304:	4640      	mov	r0, r8
 8002306:	4649      	mov	r1, r9
 8002308:	f7fe f922 	bl	8000550 <__aeabi_dmul>
 800230c:	4602      	mov	r2, r0
 800230e:	460b      	mov	r3, r1
 8002310:	4620      	mov	r0, r4
 8002312:	4629      	mov	r1, r5
 8002314:	f7fd ff64 	bl	80001e0 <__aeabi_dsub>
 8002318:	4602      	mov	r2, r0
 800231a:	460b      	mov	r3, r1
 800231c:	4610      	mov	r0, r2
 800231e:	4619      	mov	r1, r3
 8002320:	f7fe fbc6 	bl	8000ab0 <__aeabi_d2f>
 8002324:	4603      	mov	r3, r0
 8002326:	4a1f      	ldr	r2, [pc, #124]	; (80023a4 <cal_trapi+0xa78>)
 8002328:	6053      	str	r3, [r2, #4]
								v_y_trapi = (V_max_y - ((trapi_time-tb_y_2)*A_max_y))*side_y;
 800232a:	4b1b      	ldr	r3, [pc, #108]	; (8002398 <cal_trapi+0xa6c>)
 800232c:	ed93 7a00 	vldr	s14, [r3]
 8002330:	4b18      	ldr	r3, [pc, #96]	; (8002394 <cal_trapi+0xa68>)
 8002332:	edd3 7a00 	vldr	s15, [r3]
 8002336:	edd7 6a03 	vldr	s13, [r7, #12]
 800233a:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800233e:	4b1e      	ldr	r3, [pc, #120]	; (80023b8 <cal_trapi+0xa8c>)
 8002340:	edd3 7a00 	vldr	s15, [r3]
 8002344:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002348:	ee37 7a67 	vsub.f32	s14, s14, s15
 800234c:	4b13      	ldr	r3, [pc, #76]	; (800239c <cal_trapi+0xa70>)
 800234e:	edd3 7a00 	vldr	s15, [r3]
 8002352:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002356:	4b14      	ldr	r3, [pc, #80]	; (80023a8 <cal_trapi+0xa7c>)
 8002358:	edc3 7a00 	vstr	s15, [r3]
 800235c:	e013      	b.n	8002386 <cal_trapi+0xa5a>
			else if (trapi_time>tb_y_3){
 800235e:	4b13      	ldr	r3, [pc, #76]	; (80023ac <cal_trapi+0xa80>)
 8002360:	edd3 7a00 	vldr	s15, [r3]
 8002364:	ed97 7a03 	vldr	s14, [r7, #12]
 8002368:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800236c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002370:	dc00      	bgt.n	8002374 <cal_trapi+0xa48>
}
 8002372:	e008      	b.n	8002386 <cal_trapi+0xa5a>
								Position_trapi.y =stop_trapi.y;
 8002374:	4b11      	ldr	r3, [pc, #68]	; (80023bc <cal_trapi+0xa90>)
 8002376:	685b      	ldr	r3, [r3, #4]
 8002378:	4a0a      	ldr	r2, [pc, #40]	; (80023a4 <cal_trapi+0xa78>)
 800237a:	6053      	str	r3, [r2, #4]
								v_y_trapi =0;
 800237c:	4b0a      	ldr	r3, [pc, #40]	; (80023a8 <cal_trapi+0xa7c>)
 800237e:	f04f 0200 	mov.w	r2, #0
 8002382:	601a      	str	r2, [r3, #0]
}
 8002384:	e7ff      	b.n	8002386 <cal_trapi+0xa5a>
 8002386:	bf00      	nop
 8002388:	3710      	adds	r7, #16
 800238a:	46bd      	mov	sp, r7
 800238c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002390:	200001f8 	.word	0x200001f8
 8002394:	200001fc 	.word	0x200001fc
 8002398:	200001b4 	.word	0x200001b4
 800239c:	20000004 	.word	0x20000004
 80023a0:	200001e4 	.word	0x200001e4
 80023a4:	20000204 	.word	0x20000204
 80023a8:	20000210 	.word	0x20000210
 80023ac:	20000200 	.word	0x20000200
 80023b0:	200001e8 	.word	0x200001e8
 80023b4:	3fe00000 	.word	0x3fe00000
 80023b8:	200001bc 	.word	0x200001bc
 80023bc:	200001a8 	.word	0x200001a8

080023c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80023c0:	b480      	push	{r7}
 80023c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80023c4:	b672      	cpsid	i
}
 80023c6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80023c8:	e7fe      	b.n	80023c8 <Error_Handler+0x8>
	...

080023cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b082      	sub	sp, #8
 80023d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023d2:	2300      	movs	r3, #0
 80023d4:	607b      	str	r3, [r7, #4]
 80023d6:	4b10      	ldr	r3, [pc, #64]	; (8002418 <HAL_MspInit+0x4c>)
 80023d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023da:	4a0f      	ldr	r2, [pc, #60]	; (8002418 <HAL_MspInit+0x4c>)
 80023dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80023e0:	6453      	str	r3, [r2, #68]	; 0x44
 80023e2:	4b0d      	ldr	r3, [pc, #52]	; (8002418 <HAL_MspInit+0x4c>)
 80023e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80023ea:	607b      	str	r3, [r7, #4]
 80023ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80023ee:	2300      	movs	r3, #0
 80023f0:	603b      	str	r3, [r7, #0]
 80023f2:	4b09      	ldr	r3, [pc, #36]	; (8002418 <HAL_MspInit+0x4c>)
 80023f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023f6:	4a08      	ldr	r2, [pc, #32]	; (8002418 <HAL_MspInit+0x4c>)
 80023f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023fc:	6413      	str	r3, [r2, #64]	; 0x40
 80023fe:	4b06      	ldr	r3, [pc, #24]	; (8002418 <HAL_MspInit+0x4c>)
 8002400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002402:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002406:	603b      	str	r3, [r7, #0]
 8002408:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800240a:	2007      	movs	r0, #7
 800240c:	f000 f9d8 	bl	80027c0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002410:	bf00      	nop
 8002412:	3708      	adds	r7, #8
 8002414:	46bd      	mov	sp, r7
 8002416:	bd80      	pop	{r7, pc}
 8002418:	40023800 	.word	0x40023800

0800241c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b08a      	sub	sp, #40	; 0x28
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002424:	f107 0314 	add.w	r3, r7, #20
 8002428:	2200      	movs	r2, #0
 800242a:	601a      	str	r2, [r3, #0]
 800242c:	605a      	str	r2, [r3, #4]
 800242e:	609a      	str	r2, [r3, #8]
 8002430:	60da      	str	r2, [r3, #12]
 8002432:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	4a19      	ldr	r2, [pc, #100]	; (80024a0 <HAL_UART_MspInit+0x84>)
 800243a:	4293      	cmp	r3, r2
 800243c:	d12b      	bne.n	8002496 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800243e:	2300      	movs	r3, #0
 8002440:	613b      	str	r3, [r7, #16]
 8002442:	4b18      	ldr	r3, [pc, #96]	; (80024a4 <HAL_UART_MspInit+0x88>)
 8002444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002446:	4a17      	ldr	r2, [pc, #92]	; (80024a4 <HAL_UART_MspInit+0x88>)
 8002448:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800244c:	6413      	str	r3, [r2, #64]	; 0x40
 800244e:	4b15      	ldr	r3, [pc, #84]	; (80024a4 <HAL_UART_MspInit+0x88>)
 8002450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002452:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002456:	613b      	str	r3, [r7, #16]
 8002458:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800245a:	2300      	movs	r3, #0
 800245c:	60fb      	str	r3, [r7, #12]
 800245e:	4b11      	ldr	r3, [pc, #68]	; (80024a4 <HAL_UART_MspInit+0x88>)
 8002460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002462:	4a10      	ldr	r2, [pc, #64]	; (80024a4 <HAL_UART_MspInit+0x88>)
 8002464:	f043 0301 	orr.w	r3, r3, #1
 8002468:	6313      	str	r3, [r2, #48]	; 0x30
 800246a:	4b0e      	ldr	r3, [pc, #56]	; (80024a4 <HAL_UART_MspInit+0x88>)
 800246c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800246e:	f003 0301 	and.w	r3, r3, #1
 8002472:	60fb      	str	r3, [r7, #12]
 8002474:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002476:	230c      	movs	r3, #12
 8002478:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800247a:	2302      	movs	r3, #2
 800247c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800247e:	2300      	movs	r3, #0
 8002480:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002482:	2303      	movs	r3, #3
 8002484:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002486:	2307      	movs	r3, #7
 8002488:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800248a:	f107 0314 	add.w	r3, r7, #20
 800248e:	4619      	mov	r1, r3
 8002490:	4805      	ldr	r0, [pc, #20]	; (80024a8 <HAL_UART_MspInit+0x8c>)
 8002492:	f000 f9c9 	bl	8002828 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002496:	bf00      	nop
 8002498:	3728      	adds	r7, #40	; 0x28
 800249a:	46bd      	mov	sp, r7
 800249c:	bd80      	pop	{r7, pc}
 800249e:	bf00      	nop
 80024a0:	40004400 	.word	0x40004400
 80024a4:	40023800 	.word	0x40023800
 80024a8:	40020000 	.word	0x40020000

080024ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80024ac:	b480      	push	{r7}
 80024ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80024b0:	e7fe      	b.n	80024b0 <NMI_Handler+0x4>

080024b2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80024b2:	b480      	push	{r7}
 80024b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80024b6:	e7fe      	b.n	80024b6 <HardFault_Handler+0x4>

080024b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80024b8:	b480      	push	{r7}
 80024ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80024bc:	e7fe      	b.n	80024bc <MemManage_Handler+0x4>

080024be <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80024be:	b480      	push	{r7}
 80024c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80024c2:	e7fe      	b.n	80024c2 <BusFault_Handler+0x4>

080024c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80024c4:	b480      	push	{r7}
 80024c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80024c8:	e7fe      	b.n	80024c8 <UsageFault_Handler+0x4>

080024ca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80024ca:	b480      	push	{r7}
 80024cc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80024ce:	bf00      	nop
 80024d0:	46bd      	mov	sp, r7
 80024d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d6:	4770      	bx	lr

080024d8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80024d8:	b480      	push	{r7}
 80024da:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80024dc:	bf00      	nop
 80024de:	46bd      	mov	sp, r7
 80024e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e4:	4770      	bx	lr

080024e6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80024e6:	b480      	push	{r7}
 80024e8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80024ea:	bf00      	nop
 80024ec:	46bd      	mov	sp, r7
 80024ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f2:	4770      	bx	lr

080024f4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80024f8:	f000 f890 	bl	800261c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80024fc:	bf00      	nop
 80024fe:	bd80      	pop	{r7, pc}

08002500 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002500:	b480      	push	{r7}
 8002502:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002504:	4b06      	ldr	r3, [pc, #24]	; (8002520 <SystemInit+0x20>)
 8002506:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800250a:	4a05      	ldr	r2, [pc, #20]	; (8002520 <SystemInit+0x20>)
 800250c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002510:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002514:	bf00      	nop
 8002516:	46bd      	mov	sp, r7
 8002518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251c:	4770      	bx	lr
 800251e:	bf00      	nop
 8002520:	e000ed00 	.word	0xe000ed00

08002524 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002524:	f8df d034 	ldr.w	sp, [pc, #52]	; 800255c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002528:	480d      	ldr	r0, [pc, #52]	; (8002560 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800252a:	490e      	ldr	r1, [pc, #56]	; (8002564 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800252c:	4a0e      	ldr	r2, [pc, #56]	; (8002568 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800252e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002530:	e002      	b.n	8002538 <LoopCopyDataInit>

08002532 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002532:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002534:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002536:	3304      	adds	r3, #4

08002538 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002538:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800253a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800253c:	d3f9      	bcc.n	8002532 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800253e:	4a0b      	ldr	r2, [pc, #44]	; (800256c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002540:	4c0b      	ldr	r4, [pc, #44]	; (8002570 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002542:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002544:	e001      	b.n	800254a <LoopFillZerobss>

08002546 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002546:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002548:	3204      	adds	r2, #4

0800254a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800254a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800254c:	d3fb      	bcc.n	8002546 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800254e:	f7ff ffd7 	bl	8002500 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002552:	f001 fa67 	bl	8003a24 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002556:	f7fe fc7d 	bl	8000e54 <main>
  bx  lr    
 800255a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800255c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002560:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002564:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8002568:	08003c78 	.word	0x08003c78
  ldr r2, =_sbss
 800256c:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8002570:	20000218 	.word	0x20000218

08002574 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002574:	e7fe      	b.n	8002574 <ADC_IRQHandler>
	...

08002578 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800257c:	4b0e      	ldr	r3, [pc, #56]	; (80025b8 <HAL_Init+0x40>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	4a0d      	ldr	r2, [pc, #52]	; (80025b8 <HAL_Init+0x40>)
 8002582:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002586:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002588:	4b0b      	ldr	r3, [pc, #44]	; (80025b8 <HAL_Init+0x40>)
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	4a0a      	ldr	r2, [pc, #40]	; (80025b8 <HAL_Init+0x40>)
 800258e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002592:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002594:	4b08      	ldr	r3, [pc, #32]	; (80025b8 <HAL_Init+0x40>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	4a07      	ldr	r2, [pc, #28]	; (80025b8 <HAL_Init+0x40>)
 800259a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800259e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80025a0:	2003      	movs	r0, #3
 80025a2:	f000 f90d 	bl	80027c0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80025a6:	2000      	movs	r0, #0
 80025a8:	f000 f808 	bl	80025bc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80025ac:	f7ff ff0e 	bl	80023cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80025b0:	2300      	movs	r3, #0
}
 80025b2:	4618      	mov	r0, r3
 80025b4:	bd80      	pop	{r7, pc}
 80025b6:	bf00      	nop
 80025b8:	40023c00 	.word	0x40023c00

080025bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b082      	sub	sp, #8
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80025c4:	4b12      	ldr	r3, [pc, #72]	; (8002610 <HAL_InitTick+0x54>)
 80025c6:	681a      	ldr	r2, [r3, #0]
 80025c8:	4b12      	ldr	r3, [pc, #72]	; (8002614 <HAL_InitTick+0x58>)
 80025ca:	781b      	ldrb	r3, [r3, #0]
 80025cc:	4619      	mov	r1, r3
 80025ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80025d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80025d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80025da:	4618      	mov	r0, r3
 80025dc:	f000 f917 	bl	800280e <HAL_SYSTICK_Config>
 80025e0:	4603      	mov	r3, r0
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d001      	beq.n	80025ea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80025e6:	2301      	movs	r3, #1
 80025e8:	e00e      	b.n	8002608 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	2b0f      	cmp	r3, #15
 80025ee:	d80a      	bhi.n	8002606 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80025f0:	2200      	movs	r2, #0
 80025f2:	6879      	ldr	r1, [r7, #4]
 80025f4:	f04f 30ff 	mov.w	r0, #4294967295
 80025f8:	f000 f8ed 	bl	80027d6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80025fc:	4a06      	ldr	r2, [pc, #24]	; (8002618 <HAL_InitTick+0x5c>)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002602:	2300      	movs	r3, #0
 8002604:	e000      	b.n	8002608 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002606:	2301      	movs	r3, #1
}
 8002608:	4618      	mov	r0, r3
 800260a:	3708      	adds	r7, #8
 800260c:	46bd      	mov	sp, r7
 800260e:	bd80      	pop	{r7, pc}
 8002610:	20000008 	.word	0x20000008
 8002614:	20000010 	.word	0x20000010
 8002618:	2000000c 	.word	0x2000000c

0800261c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800261c:	b480      	push	{r7}
 800261e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002620:	4b06      	ldr	r3, [pc, #24]	; (800263c <HAL_IncTick+0x20>)
 8002622:	781b      	ldrb	r3, [r3, #0]
 8002624:	461a      	mov	r2, r3
 8002626:	4b06      	ldr	r3, [pc, #24]	; (8002640 <HAL_IncTick+0x24>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	4413      	add	r3, r2
 800262c:	4a04      	ldr	r2, [pc, #16]	; (8002640 <HAL_IncTick+0x24>)
 800262e:	6013      	str	r3, [r2, #0]
}
 8002630:	bf00      	nop
 8002632:	46bd      	mov	sp, r7
 8002634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002638:	4770      	bx	lr
 800263a:	bf00      	nop
 800263c:	20000010 	.word	0x20000010
 8002640:	20000214 	.word	0x20000214

08002644 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002644:	b480      	push	{r7}
 8002646:	af00      	add	r7, sp, #0
  return uwTick;
 8002648:	4b03      	ldr	r3, [pc, #12]	; (8002658 <HAL_GetTick+0x14>)
 800264a:	681b      	ldr	r3, [r3, #0]
}
 800264c:	4618      	mov	r0, r3
 800264e:	46bd      	mov	sp, r7
 8002650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002654:	4770      	bx	lr
 8002656:	bf00      	nop
 8002658:	20000214 	.word	0x20000214

0800265c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800265c:	b480      	push	{r7}
 800265e:	b085      	sub	sp, #20
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	f003 0307 	and.w	r3, r3, #7
 800266a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800266c:	4b0c      	ldr	r3, [pc, #48]	; (80026a0 <__NVIC_SetPriorityGrouping+0x44>)
 800266e:	68db      	ldr	r3, [r3, #12]
 8002670:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002672:	68ba      	ldr	r2, [r7, #8]
 8002674:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002678:	4013      	ands	r3, r2
 800267a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002680:	68bb      	ldr	r3, [r7, #8]
 8002682:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002684:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002688:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800268c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800268e:	4a04      	ldr	r2, [pc, #16]	; (80026a0 <__NVIC_SetPriorityGrouping+0x44>)
 8002690:	68bb      	ldr	r3, [r7, #8]
 8002692:	60d3      	str	r3, [r2, #12]
}
 8002694:	bf00      	nop
 8002696:	3714      	adds	r7, #20
 8002698:	46bd      	mov	sp, r7
 800269a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269e:	4770      	bx	lr
 80026a0:	e000ed00 	.word	0xe000ed00

080026a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80026a4:	b480      	push	{r7}
 80026a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80026a8:	4b04      	ldr	r3, [pc, #16]	; (80026bc <__NVIC_GetPriorityGrouping+0x18>)
 80026aa:	68db      	ldr	r3, [r3, #12]
 80026ac:	0a1b      	lsrs	r3, r3, #8
 80026ae:	f003 0307 	and.w	r3, r3, #7
}
 80026b2:	4618      	mov	r0, r3
 80026b4:	46bd      	mov	sp, r7
 80026b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ba:	4770      	bx	lr
 80026bc:	e000ed00 	.word	0xe000ed00

080026c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80026c0:	b480      	push	{r7}
 80026c2:	b083      	sub	sp, #12
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	4603      	mov	r3, r0
 80026c8:	6039      	str	r1, [r7, #0]
 80026ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	db0a      	blt.n	80026ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	b2da      	uxtb	r2, r3
 80026d8:	490c      	ldr	r1, [pc, #48]	; (800270c <__NVIC_SetPriority+0x4c>)
 80026da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026de:	0112      	lsls	r2, r2, #4
 80026e0:	b2d2      	uxtb	r2, r2
 80026e2:	440b      	add	r3, r1
 80026e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80026e8:	e00a      	b.n	8002700 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	b2da      	uxtb	r2, r3
 80026ee:	4908      	ldr	r1, [pc, #32]	; (8002710 <__NVIC_SetPriority+0x50>)
 80026f0:	79fb      	ldrb	r3, [r7, #7]
 80026f2:	f003 030f 	and.w	r3, r3, #15
 80026f6:	3b04      	subs	r3, #4
 80026f8:	0112      	lsls	r2, r2, #4
 80026fa:	b2d2      	uxtb	r2, r2
 80026fc:	440b      	add	r3, r1
 80026fe:	761a      	strb	r2, [r3, #24]
}
 8002700:	bf00      	nop
 8002702:	370c      	adds	r7, #12
 8002704:	46bd      	mov	sp, r7
 8002706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270a:	4770      	bx	lr
 800270c:	e000e100 	.word	0xe000e100
 8002710:	e000ed00 	.word	0xe000ed00

08002714 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002714:	b480      	push	{r7}
 8002716:	b089      	sub	sp, #36	; 0x24
 8002718:	af00      	add	r7, sp, #0
 800271a:	60f8      	str	r0, [r7, #12]
 800271c:	60b9      	str	r1, [r7, #8]
 800271e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	f003 0307 	and.w	r3, r3, #7
 8002726:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002728:	69fb      	ldr	r3, [r7, #28]
 800272a:	f1c3 0307 	rsb	r3, r3, #7
 800272e:	2b04      	cmp	r3, #4
 8002730:	bf28      	it	cs
 8002732:	2304      	movcs	r3, #4
 8002734:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002736:	69fb      	ldr	r3, [r7, #28]
 8002738:	3304      	adds	r3, #4
 800273a:	2b06      	cmp	r3, #6
 800273c:	d902      	bls.n	8002744 <NVIC_EncodePriority+0x30>
 800273e:	69fb      	ldr	r3, [r7, #28]
 8002740:	3b03      	subs	r3, #3
 8002742:	e000      	b.n	8002746 <NVIC_EncodePriority+0x32>
 8002744:	2300      	movs	r3, #0
 8002746:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002748:	f04f 32ff 	mov.w	r2, #4294967295
 800274c:	69bb      	ldr	r3, [r7, #24]
 800274e:	fa02 f303 	lsl.w	r3, r2, r3
 8002752:	43da      	mvns	r2, r3
 8002754:	68bb      	ldr	r3, [r7, #8]
 8002756:	401a      	ands	r2, r3
 8002758:	697b      	ldr	r3, [r7, #20]
 800275a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800275c:	f04f 31ff 	mov.w	r1, #4294967295
 8002760:	697b      	ldr	r3, [r7, #20]
 8002762:	fa01 f303 	lsl.w	r3, r1, r3
 8002766:	43d9      	mvns	r1, r3
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800276c:	4313      	orrs	r3, r2
         );
}
 800276e:	4618      	mov	r0, r3
 8002770:	3724      	adds	r7, #36	; 0x24
 8002772:	46bd      	mov	sp, r7
 8002774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002778:	4770      	bx	lr
	...

0800277c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	b082      	sub	sp, #8
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	3b01      	subs	r3, #1
 8002788:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800278c:	d301      	bcc.n	8002792 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800278e:	2301      	movs	r3, #1
 8002790:	e00f      	b.n	80027b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002792:	4a0a      	ldr	r2, [pc, #40]	; (80027bc <SysTick_Config+0x40>)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	3b01      	subs	r3, #1
 8002798:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800279a:	210f      	movs	r1, #15
 800279c:	f04f 30ff 	mov.w	r0, #4294967295
 80027a0:	f7ff ff8e 	bl	80026c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80027a4:	4b05      	ldr	r3, [pc, #20]	; (80027bc <SysTick_Config+0x40>)
 80027a6:	2200      	movs	r2, #0
 80027a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80027aa:	4b04      	ldr	r3, [pc, #16]	; (80027bc <SysTick_Config+0x40>)
 80027ac:	2207      	movs	r2, #7
 80027ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80027b0:	2300      	movs	r3, #0
}
 80027b2:	4618      	mov	r0, r3
 80027b4:	3708      	adds	r7, #8
 80027b6:	46bd      	mov	sp, r7
 80027b8:	bd80      	pop	{r7, pc}
 80027ba:	bf00      	nop
 80027bc:	e000e010 	.word	0xe000e010

080027c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b082      	sub	sp, #8
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80027c8:	6878      	ldr	r0, [r7, #4]
 80027ca:	f7ff ff47 	bl	800265c <__NVIC_SetPriorityGrouping>
}
 80027ce:	bf00      	nop
 80027d0:	3708      	adds	r7, #8
 80027d2:	46bd      	mov	sp, r7
 80027d4:	bd80      	pop	{r7, pc}

080027d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80027d6:	b580      	push	{r7, lr}
 80027d8:	b086      	sub	sp, #24
 80027da:	af00      	add	r7, sp, #0
 80027dc:	4603      	mov	r3, r0
 80027de:	60b9      	str	r1, [r7, #8]
 80027e0:	607a      	str	r2, [r7, #4]
 80027e2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80027e4:	2300      	movs	r3, #0
 80027e6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80027e8:	f7ff ff5c 	bl	80026a4 <__NVIC_GetPriorityGrouping>
 80027ec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80027ee:	687a      	ldr	r2, [r7, #4]
 80027f0:	68b9      	ldr	r1, [r7, #8]
 80027f2:	6978      	ldr	r0, [r7, #20]
 80027f4:	f7ff ff8e 	bl	8002714 <NVIC_EncodePriority>
 80027f8:	4602      	mov	r2, r0
 80027fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027fe:	4611      	mov	r1, r2
 8002800:	4618      	mov	r0, r3
 8002802:	f7ff ff5d 	bl	80026c0 <__NVIC_SetPriority>
}
 8002806:	bf00      	nop
 8002808:	3718      	adds	r7, #24
 800280a:	46bd      	mov	sp, r7
 800280c:	bd80      	pop	{r7, pc}

0800280e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800280e:	b580      	push	{r7, lr}
 8002810:	b082      	sub	sp, #8
 8002812:	af00      	add	r7, sp, #0
 8002814:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002816:	6878      	ldr	r0, [r7, #4]
 8002818:	f7ff ffb0 	bl	800277c <SysTick_Config>
 800281c:	4603      	mov	r3, r0
}
 800281e:	4618      	mov	r0, r3
 8002820:	3708      	adds	r7, #8
 8002822:	46bd      	mov	sp, r7
 8002824:	bd80      	pop	{r7, pc}
	...

08002828 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002828:	b480      	push	{r7}
 800282a:	b089      	sub	sp, #36	; 0x24
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
 8002830:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002832:	2300      	movs	r3, #0
 8002834:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002836:	2300      	movs	r3, #0
 8002838:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800283a:	2300      	movs	r3, #0
 800283c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800283e:	2300      	movs	r3, #0
 8002840:	61fb      	str	r3, [r7, #28]
 8002842:	e159      	b.n	8002af8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002844:	2201      	movs	r2, #1
 8002846:	69fb      	ldr	r3, [r7, #28]
 8002848:	fa02 f303 	lsl.w	r3, r2, r3
 800284c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	697a      	ldr	r2, [r7, #20]
 8002854:	4013      	ands	r3, r2
 8002856:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002858:	693a      	ldr	r2, [r7, #16]
 800285a:	697b      	ldr	r3, [r7, #20]
 800285c:	429a      	cmp	r2, r3
 800285e:	f040 8148 	bne.w	8002af2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	685b      	ldr	r3, [r3, #4]
 8002866:	f003 0303 	and.w	r3, r3, #3
 800286a:	2b01      	cmp	r3, #1
 800286c:	d005      	beq.n	800287a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	685b      	ldr	r3, [r3, #4]
 8002872:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002876:	2b02      	cmp	r3, #2
 8002878:	d130      	bne.n	80028dc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	689b      	ldr	r3, [r3, #8]
 800287e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002880:	69fb      	ldr	r3, [r7, #28]
 8002882:	005b      	lsls	r3, r3, #1
 8002884:	2203      	movs	r2, #3
 8002886:	fa02 f303 	lsl.w	r3, r2, r3
 800288a:	43db      	mvns	r3, r3
 800288c:	69ba      	ldr	r2, [r7, #24]
 800288e:	4013      	ands	r3, r2
 8002890:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	68da      	ldr	r2, [r3, #12]
 8002896:	69fb      	ldr	r3, [r7, #28]
 8002898:	005b      	lsls	r3, r3, #1
 800289a:	fa02 f303 	lsl.w	r3, r2, r3
 800289e:	69ba      	ldr	r2, [r7, #24]
 80028a0:	4313      	orrs	r3, r2
 80028a2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	69ba      	ldr	r2, [r7, #24]
 80028a8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	685b      	ldr	r3, [r3, #4]
 80028ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80028b0:	2201      	movs	r2, #1
 80028b2:	69fb      	ldr	r3, [r7, #28]
 80028b4:	fa02 f303 	lsl.w	r3, r2, r3
 80028b8:	43db      	mvns	r3, r3
 80028ba:	69ba      	ldr	r2, [r7, #24]
 80028bc:	4013      	ands	r3, r2
 80028be:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	685b      	ldr	r3, [r3, #4]
 80028c4:	091b      	lsrs	r3, r3, #4
 80028c6:	f003 0201 	and.w	r2, r3, #1
 80028ca:	69fb      	ldr	r3, [r7, #28]
 80028cc:	fa02 f303 	lsl.w	r3, r2, r3
 80028d0:	69ba      	ldr	r2, [r7, #24]
 80028d2:	4313      	orrs	r3, r2
 80028d4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	69ba      	ldr	r2, [r7, #24]
 80028da:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	685b      	ldr	r3, [r3, #4]
 80028e0:	f003 0303 	and.w	r3, r3, #3
 80028e4:	2b03      	cmp	r3, #3
 80028e6:	d017      	beq.n	8002918 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	68db      	ldr	r3, [r3, #12]
 80028ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80028ee:	69fb      	ldr	r3, [r7, #28]
 80028f0:	005b      	lsls	r3, r3, #1
 80028f2:	2203      	movs	r2, #3
 80028f4:	fa02 f303 	lsl.w	r3, r2, r3
 80028f8:	43db      	mvns	r3, r3
 80028fa:	69ba      	ldr	r2, [r7, #24]
 80028fc:	4013      	ands	r3, r2
 80028fe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	689a      	ldr	r2, [r3, #8]
 8002904:	69fb      	ldr	r3, [r7, #28]
 8002906:	005b      	lsls	r3, r3, #1
 8002908:	fa02 f303 	lsl.w	r3, r2, r3
 800290c:	69ba      	ldr	r2, [r7, #24]
 800290e:	4313      	orrs	r3, r2
 8002910:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	69ba      	ldr	r2, [r7, #24]
 8002916:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	685b      	ldr	r3, [r3, #4]
 800291c:	f003 0303 	and.w	r3, r3, #3
 8002920:	2b02      	cmp	r3, #2
 8002922:	d123      	bne.n	800296c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002924:	69fb      	ldr	r3, [r7, #28]
 8002926:	08da      	lsrs	r2, r3, #3
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	3208      	adds	r2, #8
 800292c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002930:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002932:	69fb      	ldr	r3, [r7, #28]
 8002934:	f003 0307 	and.w	r3, r3, #7
 8002938:	009b      	lsls	r3, r3, #2
 800293a:	220f      	movs	r2, #15
 800293c:	fa02 f303 	lsl.w	r3, r2, r3
 8002940:	43db      	mvns	r3, r3
 8002942:	69ba      	ldr	r2, [r7, #24]
 8002944:	4013      	ands	r3, r2
 8002946:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	691a      	ldr	r2, [r3, #16]
 800294c:	69fb      	ldr	r3, [r7, #28]
 800294e:	f003 0307 	and.w	r3, r3, #7
 8002952:	009b      	lsls	r3, r3, #2
 8002954:	fa02 f303 	lsl.w	r3, r2, r3
 8002958:	69ba      	ldr	r2, [r7, #24]
 800295a:	4313      	orrs	r3, r2
 800295c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800295e:	69fb      	ldr	r3, [r7, #28]
 8002960:	08da      	lsrs	r2, r3, #3
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	3208      	adds	r2, #8
 8002966:	69b9      	ldr	r1, [r7, #24]
 8002968:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002972:	69fb      	ldr	r3, [r7, #28]
 8002974:	005b      	lsls	r3, r3, #1
 8002976:	2203      	movs	r2, #3
 8002978:	fa02 f303 	lsl.w	r3, r2, r3
 800297c:	43db      	mvns	r3, r3
 800297e:	69ba      	ldr	r2, [r7, #24]
 8002980:	4013      	ands	r3, r2
 8002982:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	685b      	ldr	r3, [r3, #4]
 8002988:	f003 0203 	and.w	r2, r3, #3
 800298c:	69fb      	ldr	r3, [r7, #28]
 800298e:	005b      	lsls	r3, r3, #1
 8002990:	fa02 f303 	lsl.w	r3, r2, r3
 8002994:	69ba      	ldr	r2, [r7, #24]
 8002996:	4313      	orrs	r3, r2
 8002998:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	69ba      	ldr	r2, [r7, #24]
 800299e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	685b      	ldr	r3, [r3, #4]
 80029a4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	f000 80a2 	beq.w	8002af2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029ae:	2300      	movs	r3, #0
 80029b0:	60fb      	str	r3, [r7, #12]
 80029b2:	4b57      	ldr	r3, [pc, #348]	; (8002b10 <HAL_GPIO_Init+0x2e8>)
 80029b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029b6:	4a56      	ldr	r2, [pc, #344]	; (8002b10 <HAL_GPIO_Init+0x2e8>)
 80029b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80029bc:	6453      	str	r3, [r2, #68]	; 0x44
 80029be:	4b54      	ldr	r3, [pc, #336]	; (8002b10 <HAL_GPIO_Init+0x2e8>)
 80029c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029c6:	60fb      	str	r3, [r7, #12]
 80029c8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80029ca:	4a52      	ldr	r2, [pc, #328]	; (8002b14 <HAL_GPIO_Init+0x2ec>)
 80029cc:	69fb      	ldr	r3, [r7, #28]
 80029ce:	089b      	lsrs	r3, r3, #2
 80029d0:	3302      	adds	r3, #2
 80029d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80029d8:	69fb      	ldr	r3, [r7, #28]
 80029da:	f003 0303 	and.w	r3, r3, #3
 80029de:	009b      	lsls	r3, r3, #2
 80029e0:	220f      	movs	r2, #15
 80029e2:	fa02 f303 	lsl.w	r3, r2, r3
 80029e6:	43db      	mvns	r3, r3
 80029e8:	69ba      	ldr	r2, [r7, #24]
 80029ea:	4013      	ands	r3, r2
 80029ec:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	4a49      	ldr	r2, [pc, #292]	; (8002b18 <HAL_GPIO_Init+0x2f0>)
 80029f2:	4293      	cmp	r3, r2
 80029f4:	d019      	beq.n	8002a2a <HAL_GPIO_Init+0x202>
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	4a48      	ldr	r2, [pc, #288]	; (8002b1c <HAL_GPIO_Init+0x2f4>)
 80029fa:	4293      	cmp	r3, r2
 80029fc:	d013      	beq.n	8002a26 <HAL_GPIO_Init+0x1fe>
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	4a47      	ldr	r2, [pc, #284]	; (8002b20 <HAL_GPIO_Init+0x2f8>)
 8002a02:	4293      	cmp	r3, r2
 8002a04:	d00d      	beq.n	8002a22 <HAL_GPIO_Init+0x1fa>
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	4a46      	ldr	r2, [pc, #280]	; (8002b24 <HAL_GPIO_Init+0x2fc>)
 8002a0a:	4293      	cmp	r3, r2
 8002a0c:	d007      	beq.n	8002a1e <HAL_GPIO_Init+0x1f6>
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	4a45      	ldr	r2, [pc, #276]	; (8002b28 <HAL_GPIO_Init+0x300>)
 8002a12:	4293      	cmp	r3, r2
 8002a14:	d101      	bne.n	8002a1a <HAL_GPIO_Init+0x1f2>
 8002a16:	2304      	movs	r3, #4
 8002a18:	e008      	b.n	8002a2c <HAL_GPIO_Init+0x204>
 8002a1a:	2307      	movs	r3, #7
 8002a1c:	e006      	b.n	8002a2c <HAL_GPIO_Init+0x204>
 8002a1e:	2303      	movs	r3, #3
 8002a20:	e004      	b.n	8002a2c <HAL_GPIO_Init+0x204>
 8002a22:	2302      	movs	r3, #2
 8002a24:	e002      	b.n	8002a2c <HAL_GPIO_Init+0x204>
 8002a26:	2301      	movs	r3, #1
 8002a28:	e000      	b.n	8002a2c <HAL_GPIO_Init+0x204>
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	69fa      	ldr	r2, [r7, #28]
 8002a2e:	f002 0203 	and.w	r2, r2, #3
 8002a32:	0092      	lsls	r2, r2, #2
 8002a34:	4093      	lsls	r3, r2
 8002a36:	69ba      	ldr	r2, [r7, #24]
 8002a38:	4313      	orrs	r3, r2
 8002a3a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002a3c:	4935      	ldr	r1, [pc, #212]	; (8002b14 <HAL_GPIO_Init+0x2ec>)
 8002a3e:	69fb      	ldr	r3, [r7, #28]
 8002a40:	089b      	lsrs	r3, r3, #2
 8002a42:	3302      	adds	r3, #2
 8002a44:	69ba      	ldr	r2, [r7, #24]
 8002a46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002a4a:	4b38      	ldr	r3, [pc, #224]	; (8002b2c <HAL_GPIO_Init+0x304>)
 8002a4c:	689b      	ldr	r3, [r3, #8]
 8002a4e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a50:	693b      	ldr	r3, [r7, #16]
 8002a52:	43db      	mvns	r3, r3
 8002a54:	69ba      	ldr	r2, [r7, #24]
 8002a56:	4013      	ands	r3, r2
 8002a58:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002a5a:	683b      	ldr	r3, [r7, #0]
 8002a5c:	685b      	ldr	r3, [r3, #4]
 8002a5e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d003      	beq.n	8002a6e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002a66:	69ba      	ldr	r2, [r7, #24]
 8002a68:	693b      	ldr	r3, [r7, #16]
 8002a6a:	4313      	orrs	r3, r2
 8002a6c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002a6e:	4a2f      	ldr	r2, [pc, #188]	; (8002b2c <HAL_GPIO_Init+0x304>)
 8002a70:	69bb      	ldr	r3, [r7, #24]
 8002a72:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002a74:	4b2d      	ldr	r3, [pc, #180]	; (8002b2c <HAL_GPIO_Init+0x304>)
 8002a76:	68db      	ldr	r3, [r3, #12]
 8002a78:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a7a:	693b      	ldr	r3, [r7, #16]
 8002a7c:	43db      	mvns	r3, r3
 8002a7e:	69ba      	ldr	r2, [r7, #24]
 8002a80:	4013      	ands	r3, r2
 8002a82:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	685b      	ldr	r3, [r3, #4]
 8002a88:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d003      	beq.n	8002a98 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002a90:	69ba      	ldr	r2, [r7, #24]
 8002a92:	693b      	ldr	r3, [r7, #16]
 8002a94:	4313      	orrs	r3, r2
 8002a96:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002a98:	4a24      	ldr	r2, [pc, #144]	; (8002b2c <HAL_GPIO_Init+0x304>)
 8002a9a:	69bb      	ldr	r3, [r7, #24]
 8002a9c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002a9e:	4b23      	ldr	r3, [pc, #140]	; (8002b2c <HAL_GPIO_Init+0x304>)
 8002aa0:	685b      	ldr	r3, [r3, #4]
 8002aa2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002aa4:	693b      	ldr	r3, [r7, #16]
 8002aa6:	43db      	mvns	r3, r3
 8002aa8:	69ba      	ldr	r2, [r7, #24]
 8002aaa:	4013      	ands	r3, r2
 8002aac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	685b      	ldr	r3, [r3, #4]
 8002ab2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d003      	beq.n	8002ac2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002aba:	69ba      	ldr	r2, [r7, #24]
 8002abc:	693b      	ldr	r3, [r7, #16]
 8002abe:	4313      	orrs	r3, r2
 8002ac0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002ac2:	4a1a      	ldr	r2, [pc, #104]	; (8002b2c <HAL_GPIO_Init+0x304>)
 8002ac4:	69bb      	ldr	r3, [r7, #24]
 8002ac6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002ac8:	4b18      	ldr	r3, [pc, #96]	; (8002b2c <HAL_GPIO_Init+0x304>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ace:	693b      	ldr	r3, [r7, #16]
 8002ad0:	43db      	mvns	r3, r3
 8002ad2:	69ba      	ldr	r2, [r7, #24]
 8002ad4:	4013      	ands	r3, r2
 8002ad6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	685b      	ldr	r3, [r3, #4]
 8002adc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d003      	beq.n	8002aec <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002ae4:	69ba      	ldr	r2, [r7, #24]
 8002ae6:	693b      	ldr	r3, [r7, #16]
 8002ae8:	4313      	orrs	r3, r2
 8002aea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002aec:	4a0f      	ldr	r2, [pc, #60]	; (8002b2c <HAL_GPIO_Init+0x304>)
 8002aee:	69bb      	ldr	r3, [r7, #24]
 8002af0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002af2:	69fb      	ldr	r3, [r7, #28]
 8002af4:	3301      	adds	r3, #1
 8002af6:	61fb      	str	r3, [r7, #28]
 8002af8:	69fb      	ldr	r3, [r7, #28]
 8002afa:	2b0f      	cmp	r3, #15
 8002afc:	f67f aea2 	bls.w	8002844 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002b00:	bf00      	nop
 8002b02:	bf00      	nop
 8002b04:	3724      	adds	r7, #36	; 0x24
 8002b06:	46bd      	mov	sp, r7
 8002b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0c:	4770      	bx	lr
 8002b0e:	bf00      	nop
 8002b10:	40023800 	.word	0x40023800
 8002b14:	40013800 	.word	0x40013800
 8002b18:	40020000 	.word	0x40020000
 8002b1c:	40020400 	.word	0x40020400
 8002b20:	40020800 	.word	0x40020800
 8002b24:	40020c00 	.word	0x40020c00
 8002b28:	40021000 	.word	0x40021000
 8002b2c:	40013c00 	.word	0x40013c00

08002b30 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b30:	b480      	push	{r7}
 8002b32:	b083      	sub	sp, #12
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
 8002b38:	460b      	mov	r3, r1
 8002b3a:	807b      	strh	r3, [r7, #2]
 8002b3c:	4613      	mov	r3, r2
 8002b3e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002b40:	787b      	ldrb	r3, [r7, #1]
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d003      	beq.n	8002b4e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002b46:	887a      	ldrh	r2, [r7, #2]
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002b4c:	e003      	b.n	8002b56 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002b4e:	887b      	ldrh	r3, [r7, #2]
 8002b50:	041a      	lsls	r2, r3, #16
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	619a      	str	r2, [r3, #24]
}
 8002b56:	bf00      	nop
 8002b58:	370c      	adds	r7, #12
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b60:	4770      	bx	lr
	...

08002b64 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b086      	sub	sp, #24
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d101      	bne.n	8002b76 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002b72:	2301      	movs	r3, #1
 8002b74:	e267      	b.n	8003046 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f003 0301 	and.w	r3, r3, #1
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d075      	beq.n	8002c6e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002b82:	4b88      	ldr	r3, [pc, #544]	; (8002da4 <HAL_RCC_OscConfig+0x240>)
 8002b84:	689b      	ldr	r3, [r3, #8]
 8002b86:	f003 030c 	and.w	r3, r3, #12
 8002b8a:	2b04      	cmp	r3, #4
 8002b8c:	d00c      	beq.n	8002ba8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b8e:	4b85      	ldr	r3, [pc, #532]	; (8002da4 <HAL_RCC_OscConfig+0x240>)
 8002b90:	689b      	ldr	r3, [r3, #8]
 8002b92:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002b96:	2b08      	cmp	r3, #8
 8002b98:	d112      	bne.n	8002bc0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b9a:	4b82      	ldr	r3, [pc, #520]	; (8002da4 <HAL_RCC_OscConfig+0x240>)
 8002b9c:	685b      	ldr	r3, [r3, #4]
 8002b9e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ba2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002ba6:	d10b      	bne.n	8002bc0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ba8:	4b7e      	ldr	r3, [pc, #504]	; (8002da4 <HAL_RCC_OscConfig+0x240>)
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d05b      	beq.n	8002c6c <HAL_RCC_OscConfig+0x108>
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	685b      	ldr	r3, [r3, #4]
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d157      	bne.n	8002c6c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002bbc:	2301      	movs	r3, #1
 8002bbe:	e242      	b.n	8003046 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	685b      	ldr	r3, [r3, #4]
 8002bc4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002bc8:	d106      	bne.n	8002bd8 <HAL_RCC_OscConfig+0x74>
 8002bca:	4b76      	ldr	r3, [pc, #472]	; (8002da4 <HAL_RCC_OscConfig+0x240>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	4a75      	ldr	r2, [pc, #468]	; (8002da4 <HAL_RCC_OscConfig+0x240>)
 8002bd0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bd4:	6013      	str	r3, [r2, #0]
 8002bd6:	e01d      	b.n	8002c14 <HAL_RCC_OscConfig+0xb0>
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	685b      	ldr	r3, [r3, #4]
 8002bdc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002be0:	d10c      	bne.n	8002bfc <HAL_RCC_OscConfig+0x98>
 8002be2:	4b70      	ldr	r3, [pc, #448]	; (8002da4 <HAL_RCC_OscConfig+0x240>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	4a6f      	ldr	r2, [pc, #444]	; (8002da4 <HAL_RCC_OscConfig+0x240>)
 8002be8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002bec:	6013      	str	r3, [r2, #0]
 8002bee:	4b6d      	ldr	r3, [pc, #436]	; (8002da4 <HAL_RCC_OscConfig+0x240>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	4a6c      	ldr	r2, [pc, #432]	; (8002da4 <HAL_RCC_OscConfig+0x240>)
 8002bf4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bf8:	6013      	str	r3, [r2, #0]
 8002bfa:	e00b      	b.n	8002c14 <HAL_RCC_OscConfig+0xb0>
 8002bfc:	4b69      	ldr	r3, [pc, #420]	; (8002da4 <HAL_RCC_OscConfig+0x240>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	4a68      	ldr	r2, [pc, #416]	; (8002da4 <HAL_RCC_OscConfig+0x240>)
 8002c02:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c06:	6013      	str	r3, [r2, #0]
 8002c08:	4b66      	ldr	r3, [pc, #408]	; (8002da4 <HAL_RCC_OscConfig+0x240>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	4a65      	ldr	r2, [pc, #404]	; (8002da4 <HAL_RCC_OscConfig+0x240>)
 8002c0e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c12:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	685b      	ldr	r3, [r3, #4]
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d013      	beq.n	8002c44 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c1c:	f7ff fd12 	bl	8002644 <HAL_GetTick>
 8002c20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c22:	e008      	b.n	8002c36 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c24:	f7ff fd0e 	bl	8002644 <HAL_GetTick>
 8002c28:	4602      	mov	r2, r0
 8002c2a:	693b      	ldr	r3, [r7, #16]
 8002c2c:	1ad3      	subs	r3, r2, r3
 8002c2e:	2b64      	cmp	r3, #100	; 0x64
 8002c30:	d901      	bls.n	8002c36 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002c32:	2303      	movs	r3, #3
 8002c34:	e207      	b.n	8003046 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c36:	4b5b      	ldr	r3, [pc, #364]	; (8002da4 <HAL_RCC_OscConfig+0x240>)
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d0f0      	beq.n	8002c24 <HAL_RCC_OscConfig+0xc0>
 8002c42:	e014      	b.n	8002c6e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c44:	f7ff fcfe 	bl	8002644 <HAL_GetTick>
 8002c48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c4a:	e008      	b.n	8002c5e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c4c:	f7ff fcfa 	bl	8002644 <HAL_GetTick>
 8002c50:	4602      	mov	r2, r0
 8002c52:	693b      	ldr	r3, [r7, #16]
 8002c54:	1ad3      	subs	r3, r2, r3
 8002c56:	2b64      	cmp	r3, #100	; 0x64
 8002c58:	d901      	bls.n	8002c5e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002c5a:	2303      	movs	r3, #3
 8002c5c:	e1f3      	b.n	8003046 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c5e:	4b51      	ldr	r3, [pc, #324]	; (8002da4 <HAL_RCC_OscConfig+0x240>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d1f0      	bne.n	8002c4c <HAL_RCC_OscConfig+0xe8>
 8002c6a:	e000      	b.n	8002c6e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c6c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f003 0302 	and.w	r3, r3, #2
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d063      	beq.n	8002d42 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002c7a:	4b4a      	ldr	r3, [pc, #296]	; (8002da4 <HAL_RCC_OscConfig+0x240>)
 8002c7c:	689b      	ldr	r3, [r3, #8]
 8002c7e:	f003 030c 	and.w	r3, r3, #12
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d00b      	beq.n	8002c9e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c86:	4b47      	ldr	r3, [pc, #284]	; (8002da4 <HAL_RCC_OscConfig+0x240>)
 8002c88:	689b      	ldr	r3, [r3, #8]
 8002c8a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002c8e:	2b08      	cmp	r3, #8
 8002c90:	d11c      	bne.n	8002ccc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c92:	4b44      	ldr	r3, [pc, #272]	; (8002da4 <HAL_RCC_OscConfig+0x240>)
 8002c94:	685b      	ldr	r3, [r3, #4]
 8002c96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d116      	bne.n	8002ccc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c9e:	4b41      	ldr	r3, [pc, #260]	; (8002da4 <HAL_RCC_OscConfig+0x240>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f003 0302 	and.w	r3, r3, #2
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d005      	beq.n	8002cb6 <HAL_RCC_OscConfig+0x152>
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	68db      	ldr	r3, [r3, #12]
 8002cae:	2b01      	cmp	r3, #1
 8002cb0:	d001      	beq.n	8002cb6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002cb2:	2301      	movs	r3, #1
 8002cb4:	e1c7      	b.n	8003046 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cb6:	4b3b      	ldr	r3, [pc, #236]	; (8002da4 <HAL_RCC_OscConfig+0x240>)
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	691b      	ldr	r3, [r3, #16]
 8002cc2:	00db      	lsls	r3, r3, #3
 8002cc4:	4937      	ldr	r1, [pc, #220]	; (8002da4 <HAL_RCC_OscConfig+0x240>)
 8002cc6:	4313      	orrs	r3, r2
 8002cc8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002cca:	e03a      	b.n	8002d42 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	68db      	ldr	r3, [r3, #12]
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d020      	beq.n	8002d16 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002cd4:	4b34      	ldr	r3, [pc, #208]	; (8002da8 <HAL_RCC_OscConfig+0x244>)
 8002cd6:	2201      	movs	r2, #1
 8002cd8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cda:	f7ff fcb3 	bl	8002644 <HAL_GetTick>
 8002cde:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ce0:	e008      	b.n	8002cf4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ce2:	f7ff fcaf 	bl	8002644 <HAL_GetTick>
 8002ce6:	4602      	mov	r2, r0
 8002ce8:	693b      	ldr	r3, [r7, #16]
 8002cea:	1ad3      	subs	r3, r2, r3
 8002cec:	2b02      	cmp	r3, #2
 8002cee:	d901      	bls.n	8002cf4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002cf0:	2303      	movs	r3, #3
 8002cf2:	e1a8      	b.n	8003046 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cf4:	4b2b      	ldr	r3, [pc, #172]	; (8002da4 <HAL_RCC_OscConfig+0x240>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f003 0302 	and.w	r3, r3, #2
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d0f0      	beq.n	8002ce2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d00:	4b28      	ldr	r3, [pc, #160]	; (8002da4 <HAL_RCC_OscConfig+0x240>)
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	691b      	ldr	r3, [r3, #16]
 8002d0c:	00db      	lsls	r3, r3, #3
 8002d0e:	4925      	ldr	r1, [pc, #148]	; (8002da4 <HAL_RCC_OscConfig+0x240>)
 8002d10:	4313      	orrs	r3, r2
 8002d12:	600b      	str	r3, [r1, #0]
 8002d14:	e015      	b.n	8002d42 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d16:	4b24      	ldr	r3, [pc, #144]	; (8002da8 <HAL_RCC_OscConfig+0x244>)
 8002d18:	2200      	movs	r2, #0
 8002d1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d1c:	f7ff fc92 	bl	8002644 <HAL_GetTick>
 8002d20:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d22:	e008      	b.n	8002d36 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d24:	f7ff fc8e 	bl	8002644 <HAL_GetTick>
 8002d28:	4602      	mov	r2, r0
 8002d2a:	693b      	ldr	r3, [r7, #16]
 8002d2c:	1ad3      	subs	r3, r2, r3
 8002d2e:	2b02      	cmp	r3, #2
 8002d30:	d901      	bls.n	8002d36 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002d32:	2303      	movs	r3, #3
 8002d34:	e187      	b.n	8003046 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d36:	4b1b      	ldr	r3, [pc, #108]	; (8002da4 <HAL_RCC_OscConfig+0x240>)
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f003 0302 	and.w	r3, r3, #2
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d1f0      	bne.n	8002d24 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f003 0308 	and.w	r3, r3, #8
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d036      	beq.n	8002dbc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	695b      	ldr	r3, [r3, #20]
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d016      	beq.n	8002d84 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d56:	4b15      	ldr	r3, [pc, #84]	; (8002dac <HAL_RCC_OscConfig+0x248>)
 8002d58:	2201      	movs	r2, #1
 8002d5a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d5c:	f7ff fc72 	bl	8002644 <HAL_GetTick>
 8002d60:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d62:	e008      	b.n	8002d76 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d64:	f7ff fc6e 	bl	8002644 <HAL_GetTick>
 8002d68:	4602      	mov	r2, r0
 8002d6a:	693b      	ldr	r3, [r7, #16]
 8002d6c:	1ad3      	subs	r3, r2, r3
 8002d6e:	2b02      	cmp	r3, #2
 8002d70:	d901      	bls.n	8002d76 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002d72:	2303      	movs	r3, #3
 8002d74:	e167      	b.n	8003046 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d76:	4b0b      	ldr	r3, [pc, #44]	; (8002da4 <HAL_RCC_OscConfig+0x240>)
 8002d78:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d7a:	f003 0302 	and.w	r3, r3, #2
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d0f0      	beq.n	8002d64 <HAL_RCC_OscConfig+0x200>
 8002d82:	e01b      	b.n	8002dbc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d84:	4b09      	ldr	r3, [pc, #36]	; (8002dac <HAL_RCC_OscConfig+0x248>)
 8002d86:	2200      	movs	r2, #0
 8002d88:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d8a:	f7ff fc5b 	bl	8002644 <HAL_GetTick>
 8002d8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d90:	e00e      	b.n	8002db0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d92:	f7ff fc57 	bl	8002644 <HAL_GetTick>
 8002d96:	4602      	mov	r2, r0
 8002d98:	693b      	ldr	r3, [r7, #16]
 8002d9a:	1ad3      	subs	r3, r2, r3
 8002d9c:	2b02      	cmp	r3, #2
 8002d9e:	d907      	bls.n	8002db0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002da0:	2303      	movs	r3, #3
 8002da2:	e150      	b.n	8003046 <HAL_RCC_OscConfig+0x4e2>
 8002da4:	40023800 	.word	0x40023800
 8002da8:	42470000 	.word	0x42470000
 8002dac:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002db0:	4b88      	ldr	r3, [pc, #544]	; (8002fd4 <HAL_RCC_OscConfig+0x470>)
 8002db2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002db4:	f003 0302 	and.w	r3, r3, #2
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d1ea      	bne.n	8002d92 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f003 0304 	and.w	r3, r3, #4
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	f000 8097 	beq.w	8002ef8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002dca:	2300      	movs	r3, #0
 8002dcc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002dce:	4b81      	ldr	r3, [pc, #516]	; (8002fd4 <HAL_RCC_OscConfig+0x470>)
 8002dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d10f      	bne.n	8002dfa <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002dda:	2300      	movs	r3, #0
 8002ddc:	60bb      	str	r3, [r7, #8]
 8002dde:	4b7d      	ldr	r3, [pc, #500]	; (8002fd4 <HAL_RCC_OscConfig+0x470>)
 8002de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002de2:	4a7c      	ldr	r2, [pc, #496]	; (8002fd4 <HAL_RCC_OscConfig+0x470>)
 8002de4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002de8:	6413      	str	r3, [r2, #64]	; 0x40
 8002dea:	4b7a      	ldr	r3, [pc, #488]	; (8002fd4 <HAL_RCC_OscConfig+0x470>)
 8002dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002df2:	60bb      	str	r3, [r7, #8]
 8002df4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002df6:	2301      	movs	r3, #1
 8002df8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002dfa:	4b77      	ldr	r3, [pc, #476]	; (8002fd8 <HAL_RCC_OscConfig+0x474>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d118      	bne.n	8002e38 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e06:	4b74      	ldr	r3, [pc, #464]	; (8002fd8 <HAL_RCC_OscConfig+0x474>)
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	4a73      	ldr	r2, [pc, #460]	; (8002fd8 <HAL_RCC_OscConfig+0x474>)
 8002e0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e10:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e12:	f7ff fc17 	bl	8002644 <HAL_GetTick>
 8002e16:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e18:	e008      	b.n	8002e2c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e1a:	f7ff fc13 	bl	8002644 <HAL_GetTick>
 8002e1e:	4602      	mov	r2, r0
 8002e20:	693b      	ldr	r3, [r7, #16]
 8002e22:	1ad3      	subs	r3, r2, r3
 8002e24:	2b02      	cmp	r3, #2
 8002e26:	d901      	bls.n	8002e2c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002e28:	2303      	movs	r3, #3
 8002e2a:	e10c      	b.n	8003046 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e2c:	4b6a      	ldr	r3, [pc, #424]	; (8002fd8 <HAL_RCC_OscConfig+0x474>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d0f0      	beq.n	8002e1a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	689b      	ldr	r3, [r3, #8]
 8002e3c:	2b01      	cmp	r3, #1
 8002e3e:	d106      	bne.n	8002e4e <HAL_RCC_OscConfig+0x2ea>
 8002e40:	4b64      	ldr	r3, [pc, #400]	; (8002fd4 <HAL_RCC_OscConfig+0x470>)
 8002e42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e44:	4a63      	ldr	r2, [pc, #396]	; (8002fd4 <HAL_RCC_OscConfig+0x470>)
 8002e46:	f043 0301 	orr.w	r3, r3, #1
 8002e4a:	6713      	str	r3, [r2, #112]	; 0x70
 8002e4c:	e01c      	b.n	8002e88 <HAL_RCC_OscConfig+0x324>
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	689b      	ldr	r3, [r3, #8]
 8002e52:	2b05      	cmp	r3, #5
 8002e54:	d10c      	bne.n	8002e70 <HAL_RCC_OscConfig+0x30c>
 8002e56:	4b5f      	ldr	r3, [pc, #380]	; (8002fd4 <HAL_RCC_OscConfig+0x470>)
 8002e58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e5a:	4a5e      	ldr	r2, [pc, #376]	; (8002fd4 <HAL_RCC_OscConfig+0x470>)
 8002e5c:	f043 0304 	orr.w	r3, r3, #4
 8002e60:	6713      	str	r3, [r2, #112]	; 0x70
 8002e62:	4b5c      	ldr	r3, [pc, #368]	; (8002fd4 <HAL_RCC_OscConfig+0x470>)
 8002e64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e66:	4a5b      	ldr	r2, [pc, #364]	; (8002fd4 <HAL_RCC_OscConfig+0x470>)
 8002e68:	f043 0301 	orr.w	r3, r3, #1
 8002e6c:	6713      	str	r3, [r2, #112]	; 0x70
 8002e6e:	e00b      	b.n	8002e88 <HAL_RCC_OscConfig+0x324>
 8002e70:	4b58      	ldr	r3, [pc, #352]	; (8002fd4 <HAL_RCC_OscConfig+0x470>)
 8002e72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e74:	4a57      	ldr	r2, [pc, #348]	; (8002fd4 <HAL_RCC_OscConfig+0x470>)
 8002e76:	f023 0301 	bic.w	r3, r3, #1
 8002e7a:	6713      	str	r3, [r2, #112]	; 0x70
 8002e7c:	4b55      	ldr	r3, [pc, #340]	; (8002fd4 <HAL_RCC_OscConfig+0x470>)
 8002e7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e80:	4a54      	ldr	r2, [pc, #336]	; (8002fd4 <HAL_RCC_OscConfig+0x470>)
 8002e82:	f023 0304 	bic.w	r3, r3, #4
 8002e86:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	689b      	ldr	r3, [r3, #8]
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d015      	beq.n	8002ebc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e90:	f7ff fbd8 	bl	8002644 <HAL_GetTick>
 8002e94:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e96:	e00a      	b.n	8002eae <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e98:	f7ff fbd4 	bl	8002644 <HAL_GetTick>
 8002e9c:	4602      	mov	r2, r0
 8002e9e:	693b      	ldr	r3, [r7, #16]
 8002ea0:	1ad3      	subs	r3, r2, r3
 8002ea2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	d901      	bls.n	8002eae <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002eaa:	2303      	movs	r3, #3
 8002eac:	e0cb      	b.n	8003046 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002eae:	4b49      	ldr	r3, [pc, #292]	; (8002fd4 <HAL_RCC_OscConfig+0x470>)
 8002eb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002eb2:	f003 0302 	and.w	r3, r3, #2
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d0ee      	beq.n	8002e98 <HAL_RCC_OscConfig+0x334>
 8002eba:	e014      	b.n	8002ee6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ebc:	f7ff fbc2 	bl	8002644 <HAL_GetTick>
 8002ec0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ec2:	e00a      	b.n	8002eda <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ec4:	f7ff fbbe 	bl	8002644 <HAL_GetTick>
 8002ec8:	4602      	mov	r2, r0
 8002eca:	693b      	ldr	r3, [r7, #16]
 8002ecc:	1ad3      	subs	r3, r2, r3
 8002ece:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ed2:	4293      	cmp	r3, r2
 8002ed4:	d901      	bls.n	8002eda <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002ed6:	2303      	movs	r3, #3
 8002ed8:	e0b5      	b.n	8003046 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002eda:	4b3e      	ldr	r3, [pc, #248]	; (8002fd4 <HAL_RCC_OscConfig+0x470>)
 8002edc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ede:	f003 0302 	and.w	r3, r3, #2
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d1ee      	bne.n	8002ec4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002ee6:	7dfb      	ldrb	r3, [r7, #23]
 8002ee8:	2b01      	cmp	r3, #1
 8002eea:	d105      	bne.n	8002ef8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002eec:	4b39      	ldr	r3, [pc, #228]	; (8002fd4 <HAL_RCC_OscConfig+0x470>)
 8002eee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ef0:	4a38      	ldr	r2, [pc, #224]	; (8002fd4 <HAL_RCC_OscConfig+0x470>)
 8002ef2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ef6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	699b      	ldr	r3, [r3, #24]
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	f000 80a1 	beq.w	8003044 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002f02:	4b34      	ldr	r3, [pc, #208]	; (8002fd4 <HAL_RCC_OscConfig+0x470>)
 8002f04:	689b      	ldr	r3, [r3, #8]
 8002f06:	f003 030c 	and.w	r3, r3, #12
 8002f0a:	2b08      	cmp	r3, #8
 8002f0c:	d05c      	beq.n	8002fc8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	699b      	ldr	r3, [r3, #24]
 8002f12:	2b02      	cmp	r3, #2
 8002f14:	d141      	bne.n	8002f9a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f16:	4b31      	ldr	r3, [pc, #196]	; (8002fdc <HAL_RCC_OscConfig+0x478>)
 8002f18:	2200      	movs	r2, #0
 8002f1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f1c:	f7ff fb92 	bl	8002644 <HAL_GetTick>
 8002f20:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f22:	e008      	b.n	8002f36 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f24:	f7ff fb8e 	bl	8002644 <HAL_GetTick>
 8002f28:	4602      	mov	r2, r0
 8002f2a:	693b      	ldr	r3, [r7, #16]
 8002f2c:	1ad3      	subs	r3, r2, r3
 8002f2e:	2b02      	cmp	r3, #2
 8002f30:	d901      	bls.n	8002f36 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002f32:	2303      	movs	r3, #3
 8002f34:	e087      	b.n	8003046 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f36:	4b27      	ldr	r3, [pc, #156]	; (8002fd4 <HAL_RCC_OscConfig+0x470>)
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d1f0      	bne.n	8002f24 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	69da      	ldr	r2, [r3, #28]
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6a1b      	ldr	r3, [r3, #32]
 8002f4a:	431a      	orrs	r2, r3
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f50:	019b      	lsls	r3, r3, #6
 8002f52:	431a      	orrs	r2, r3
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f58:	085b      	lsrs	r3, r3, #1
 8002f5a:	3b01      	subs	r3, #1
 8002f5c:	041b      	lsls	r3, r3, #16
 8002f5e:	431a      	orrs	r2, r3
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f64:	061b      	lsls	r3, r3, #24
 8002f66:	491b      	ldr	r1, [pc, #108]	; (8002fd4 <HAL_RCC_OscConfig+0x470>)
 8002f68:	4313      	orrs	r3, r2
 8002f6a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f6c:	4b1b      	ldr	r3, [pc, #108]	; (8002fdc <HAL_RCC_OscConfig+0x478>)
 8002f6e:	2201      	movs	r2, #1
 8002f70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f72:	f7ff fb67 	bl	8002644 <HAL_GetTick>
 8002f76:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f78:	e008      	b.n	8002f8c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f7a:	f7ff fb63 	bl	8002644 <HAL_GetTick>
 8002f7e:	4602      	mov	r2, r0
 8002f80:	693b      	ldr	r3, [r7, #16]
 8002f82:	1ad3      	subs	r3, r2, r3
 8002f84:	2b02      	cmp	r3, #2
 8002f86:	d901      	bls.n	8002f8c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002f88:	2303      	movs	r3, #3
 8002f8a:	e05c      	b.n	8003046 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f8c:	4b11      	ldr	r3, [pc, #68]	; (8002fd4 <HAL_RCC_OscConfig+0x470>)
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d0f0      	beq.n	8002f7a <HAL_RCC_OscConfig+0x416>
 8002f98:	e054      	b.n	8003044 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f9a:	4b10      	ldr	r3, [pc, #64]	; (8002fdc <HAL_RCC_OscConfig+0x478>)
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fa0:	f7ff fb50 	bl	8002644 <HAL_GetTick>
 8002fa4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fa6:	e008      	b.n	8002fba <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002fa8:	f7ff fb4c 	bl	8002644 <HAL_GetTick>
 8002fac:	4602      	mov	r2, r0
 8002fae:	693b      	ldr	r3, [r7, #16]
 8002fb0:	1ad3      	subs	r3, r2, r3
 8002fb2:	2b02      	cmp	r3, #2
 8002fb4:	d901      	bls.n	8002fba <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002fb6:	2303      	movs	r3, #3
 8002fb8:	e045      	b.n	8003046 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fba:	4b06      	ldr	r3, [pc, #24]	; (8002fd4 <HAL_RCC_OscConfig+0x470>)
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d1f0      	bne.n	8002fa8 <HAL_RCC_OscConfig+0x444>
 8002fc6:	e03d      	b.n	8003044 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	699b      	ldr	r3, [r3, #24]
 8002fcc:	2b01      	cmp	r3, #1
 8002fce:	d107      	bne.n	8002fe0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002fd0:	2301      	movs	r3, #1
 8002fd2:	e038      	b.n	8003046 <HAL_RCC_OscConfig+0x4e2>
 8002fd4:	40023800 	.word	0x40023800
 8002fd8:	40007000 	.word	0x40007000
 8002fdc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002fe0:	4b1b      	ldr	r3, [pc, #108]	; (8003050 <HAL_RCC_OscConfig+0x4ec>)
 8002fe2:	685b      	ldr	r3, [r3, #4]
 8002fe4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	699b      	ldr	r3, [r3, #24]
 8002fea:	2b01      	cmp	r3, #1
 8002fec:	d028      	beq.n	8003040 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ff8:	429a      	cmp	r2, r3
 8002ffa:	d121      	bne.n	8003040 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003006:	429a      	cmp	r2, r3
 8003008:	d11a      	bne.n	8003040 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800300a:	68fa      	ldr	r2, [r7, #12]
 800300c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003010:	4013      	ands	r3, r2
 8003012:	687a      	ldr	r2, [r7, #4]
 8003014:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003016:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003018:	4293      	cmp	r3, r2
 800301a:	d111      	bne.n	8003040 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003026:	085b      	lsrs	r3, r3, #1
 8003028:	3b01      	subs	r3, #1
 800302a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800302c:	429a      	cmp	r2, r3
 800302e:	d107      	bne.n	8003040 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800303a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800303c:	429a      	cmp	r2, r3
 800303e:	d001      	beq.n	8003044 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003040:	2301      	movs	r3, #1
 8003042:	e000      	b.n	8003046 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003044:	2300      	movs	r3, #0
}
 8003046:	4618      	mov	r0, r3
 8003048:	3718      	adds	r7, #24
 800304a:	46bd      	mov	sp, r7
 800304c:	bd80      	pop	{r7, pc}
 800304e:	bf00      	nop
 8003050:	40023800 	.word	0x40023800

08003054 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	b084      	sub	sp, #16
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
 800305c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	2b00      	cmp	r3, #0
 8003062:	d101      	bne.n	8003068 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003064:	2301      	movs	r3, #1
 8003066:	e0cc      	b.n	8003202 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003068:	4b68      	ldr	r3, [pc, #416]	; (800320c <HAL_RCC_ClockConfig+0x1b8>)
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f003 0307 	and.w	r3, r3, #7
 8003070:	683a      	ldr	r2, [r7, #0]
 8003072:	429a      	cmp	r2, r3
 8003074:	d90c      	bls.n	8003090 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003076:	4b65      	ldr	r3, [pc, #404]	; (800320c <HAL_RCC_ClockConfig+0x1b8>)
 8003078:	683a      	ldr	r2, [r7, #0]
 800307a:	b2d2      	uxtb	r2, r2
 800307c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800307e:	4b63      	ldr	r3, [pc, #396]	; (800320c <HAL_RCC_ClockConfig+0x1b8>)
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f003 0307 	and.w	r3, r3, #7
 8003086:	683a      	ldr	r2, [r7, #0]
 8003088:	429a      	cmp	r2, r3
 800308a:	d001      	beq.n	8003090 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800308c:	2301      	movs	r3, #1
 800308e:	e0b8      	b.n	8003202 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f003 0302 	and.w	r3, r3, #2
 8003098:	2b00      	cmp	r3, #0
 800309a:	d020      	beq.n	80030de <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f003 0304 	and.w	r3, r3, #4
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d005      	beq.n	80030b4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80030a8:	4b59      	ldr	r3, [pc, #356]	; (8003210 <HAL_RCC_ClockConfig+0x1bc>)
 80030aa:	689b      	ldr	r3, [r3, #8]
 80030ac:	4a58      	ldr	r2, [pc, #352]	; (8003210 <HAL_RCC_ClockConfig+0x1bc>)
 80030ae:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80030b2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f003 0308 	and.w	r3, r3, #8
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d005      	beq.n	80030cc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80030c0:	4b53      	ldr	r3, [pc, #332]	; (8003210 <HAL_RCC_ClockConfig+0x1bc>)
 80030c2:	689b      	ldr	r3, [r3, #8]
 80030c4:	4a52      	ldr	r2, [pc, #328]	; (8003210 <HAL_RCC_ClockConfig+0x1bc>)
 80030c6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80030ca:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80030cc:	4b50      	ldr	r3, [pc, #320]	; (8003210 <HAL_RCC_ClockConfig+0x1bc>)
 80030ce:	689b      	ldr	r3, [r3, #8]
 80030d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	689b      	ldr	r3, [r3, #8]
 80030d8:	494d      	ldr	r1, [pc, #308]	; (8003210 <HAL_RCC_ClockConfig+0x1bc>)
 80030da:	4313      	orrs	r3, r2
 80030dc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f003 0301 	and.w	r3, r3, #1
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d044      	beq.n	8003174 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	685b      	ldr	r3, [r3, #4]
 80030ee:	2b01      	cmp	r3, #1
 80030f0:	d107      	bne.n	8003102 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030f2:	4b47      	ldr	r3, [pc, #284]	; (8003210 <HAL_RCC_ClockConfig+0x1bc>)
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d119      	bne.n	8003132 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030fe:	2301      	movs	r3, #1
 8003100:	e07f      	b.n	8003202 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	685b      	ldr	r3, [r3, #4]
 8003106:	2b02      	cmp	r3, #2
 8003108:	d003      	beq.n	8003112 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800310e:	2b03      	cmp	r3, #3
 8003110:	d107      	bne.n	8003122 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003112:	4b3f      	ldr	r3, [pc, #252]	; (8003210 <HAL_RCC_ClockConfig+0x1bc>)
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800311a:	2b00      	cmp	r3, #0
 800311c:	d109      	bne.n	8003132 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800311e:	2301      	movs	r3, #1
 8003120:	e06f      	b.n	8003202 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003122:	4b3b      	ldr	r3, [pc, #236]	; (8003210 <HAL_RCC_ClockConfig+0x1bc>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f003 0302 	and.w	r3, r3, #2
 800312a:	2b00      	cmp	r3, #0
 800312c:	d101      	bne.n	8003132 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800312e:	2301      	movs	r3, #1
 8003130:	e067      	b.n	8003202 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003132:	4b37      	ldr	r3, [pc, #220]	; (8003210 <HAL_RCC_ClockConfig+0x1bc>)
 8003134:	689b      	ldr	r3, [r3, #8]
 8003136:	f023 0203 	bic.w	r2, r3, #3
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	685b      	ldr	r3, [r3, #4]
 800313e:	4934      	ldr	r1, [pc, #208]	; (8003210 <HAL_RCC_ClockConfig+0x1bc>)
 8003140:	4313      	orrs	r3, r2
 8003142:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003144:	f7ff fa7e 	bl	8002644 <HAL_GetTick>
 8003148:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800314a:	e00a      	b.n	8003162 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800314c:	f7ff fa7a 	bl	8002644 <HAL_GetTick>
 8003150:	4602      	mov	r2, r0
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	1ad3      	subs	r3, r2, r3
 8003156:	f241 3288 	movw	r2, #5000	; 0x1388
 800315a:	4293      	cmp	r3, r2
 800315c:	d901      	bls.n	8003162 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800315e:	2303      	movs	r3, #3
 8003160:	e04f      	b.n	8003202 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003162:	4b2b      	ldr	r3, [pc, #172]	; (8003210 <HAL_RCC_ClockConfig+0x1bc>)
 8003164:	689b      	ldr	r3, [r3, #8]
 8003166:	f003 020c 	and.w	r2, r3, #12
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	685b      	ldr	r3, [r3, #4]
 800316e:	009b      	lsls	r3, r3, #2
 8003170:	429a      	cmp	r2, r3
 8003172:	d1eb      	bne.n	800314c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003174:	4b25      	ldr	r3, [pc, #148]	; (800320c <HAL_RCC_ClockConfig+0x1b8>)
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f003 0307 	and.w	r3, r3, #7
 800317c:	683a      	ldr	r2, [r7, #0]
 800317e:	429a      	cmp	r2, r3
 8003180:	d20c      	bcs.n	800319c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003182:	4b22      	ldr	r3, [pc, #136]	; (800320c <HAL_RCC_ClockConfig+0x1b8>)
 8003184:	683a      	ldr	r2, [r7, #0]
 8003186:	b2d2      	uxtb	r2, r2
 8003188:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800318a:	4b20      	ldr	r3, [pc, #128]	; (800320c <HAL_RCC_ClockConfig+0x1b8>)
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f003 0307 	and.w	r3, r3, #7
 8003192:	683a      	ldr	r2, [r7, #0]
 8003194:	429a      	cmp	r2, r3
 8003196:	d001      	beq.n	800319c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003198:	2301      	movs	r3, #1
 800319a:	e032      	b.n	8003202 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f003 0304 	and.w	r3, r3, #4
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d008      	beq.n	80031ba <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80031a8:	4b19      	ldr	r3, [pc, #100]	; (8003210 <HAL_RCC_ClockConfig+0x1bc>)
 80031aa:	689b      	ldr	r3, [r3, #8]
 80031ac:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	68db      	ldr	r3, [r3, #12]
 80031b4:	4916      	ldr	r1, [pc, #88]	; (8003210 <HAL_RCC_ClockConfig+0x1bc>)
 80031b6:	4313      	orrs	r3, r2
 80031b8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f003 0308 	and.w	r3, r3, #8
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d009      	beq.n	80031da <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80031c6:	4b12      	ldr	r3, [pc, #72]	; (8003210 <HAL_RCC_ClockConfig+0x1bc>)
 80031c8:	689b      	ldr	r3, [r3, #8]
 80031ca:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	691b      	ldr	r3, [r3, #16]
 80031d2:	00db      	lsls	r3, r3, #3
 80031d4:	490e      	ldr	r1, [pc, #56]	; (8003210 <HAL_RCC_ClockConfig+0x1bc>)
 80031d6:	4313      	orrs	r3, r2
 80031d8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80031da:	f000 f821 	bl	8003220 <HAL_RCC_GetSysClockFreq>
 80031de:	4602      	mov	r2, r0
 80031e0:	4b0b      	ldr	r3, [pc, #44]	; (8003210 <HAL_RCC_ClockConfig+0x1bc>)
 80031e2:	689b      	ldr	r3, [r3, #8]
 80031e4:	091b      	lsrs	r3, r3, #4
 80031e6:	f003 030f 	and.w	r3, r3, #15
 80031ea:	490a      	ldr	r1, [pc, #40]	; (8003214 <HAL_RCC_ClockConfig+0x1c0>)
 80031ec:	5ccb      	ldrb	r3, [r1, r3]
 80031ee:	fa22 f303 	lsr.w	r3, r2, r3
 80031f2:	4a09      	ldr	r2, [pc, #36]	; (8003218 <HAL_RCC_ClockConfig+0x1c4>)
 80031f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80031f6:	4b09      	ldr	r3, [pc, #36]	; (800321c <HAL_RCC_ClockConfig+0x1c8>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	4618      	mov	r0, r3
 80031fc:	f7ff f9de 	bl	80025bc <HAL_InitTick>

  return HAL_OK;
 8003200:	2300      	movs	r3, #0
}
 8003202:	4618      	mov	r0, r3
 8003204:	3710      	adds	r7, #16
 8003206:	46bd      	mov	sp, r7
 8003208:	bd80      	pop	{r7, pc}
 800320a:	bf00      	nop
 800320c:	40023c00 	.word	0x40023c00
 8003210:	40023800 	.word	0x40023800
 8003214:	08003c50 	.word	0x08003c50
 8003218:	20000008 	.word	0x20000008
 800321c:	2000000c 	.word	0x2000000c

08003220 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003220:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003224:	b094      	sub	sp, #80	; 0x50
 8003226:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003228:	2300      	movs	r3, #0
 800322a:	647b      	str	r3, [r7, #68]	; 0x44
 800322c:	2300      	movs	r3, #0
 800322e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003230:	2300      	movs	r3, #0
 8003232:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003234:	2300      	movs	r3, #0
 8003236:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003238:	4b79      	ldr	r3, [pc, #484]	; (8003420 <HAL_RCC_GetSysClockFreq+0x200>)
 800323a:	689b      	ldr	r3, [r3, #8]
 800323c:	f003 030c 	and.w	r3, r3, #12
 8003240:	2b08      	cmp	r3, #8
 8003242:	d00d      	beq.n	8003260 <HAL_RCC_GetSysClockFreq+0x40>
 8003244:	2b08      	cmp	r3, #8
 8003246:	f200 80e1 	bhi.w	800340c <HAL_RCC_GetSysClockFreq+0x1ec>
 800324a:	2b00      	cmp	r3, #0
 800324c:	d002      	beq.n	8003254 <HAL_RCC_GetSysClockFreq+0x34>
 800324e:	2b04      	cmp	r3, #4
 8003250:	d003      	beq.n	800325a <HAL_RCC_GetSysClockFreq+0x3a>
 8003252:	e0db      	b.n	800340c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003254:	4b73      	ldr	r3, [pc, #460]	; (8003424 <HAL_RCC_GetSysClockFreq+0x204>)
 8003256:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003258:	e0db      	b.n	8003412 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800325a:	4b73      	ldr	r3, [pc, #460]	; (8003428 <HAL_RCC_GetSysClockFreq+0x208>)
 800325c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800325e:	e0d8      	b.n	8003412 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003260:	4b6f      	ldr	r3, [pc, #444]	; (8003420 <HAL_RCC_GetSysClockFreq+0x200>)
 8003262:	685b      	ldr	r3, [r3, #4]
 8003264:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003268:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800326a:	4b6d      	ldr	r3, [pc, #436]	; (8003420 <HAL_RCC_GetSysClockFreq+0x200>)
 800326c:	685b      	ldr	r3, [r3, #4]
 800326e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003272:	2b00      	cmp	r3, #0
 8003274:	d063      	beq.n	800333e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003276:	4b6a      	ldr	r3, [pc, #424]	; (8003420 <HAL_RCC_GetSysClockFreq+0x200>)
 8003278:	685b      	ldr	r3, [r3, #4]
 800327a:	099b      	lsrs	r3, r3, #6
 800327c:	2200      	movs	r2, #0
 800327e:	63bb      	str	r3, [r7, #56]	; 0x38
 8003280:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003282:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003284:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003288:	633b      	str	r3, [r7, #48]	; 0x30
 800328a:	2300      	movs	r3, #0
 800328c:	637b      	str	r3, [r7, #52]	; 0x34
 800328e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003292:	4622      	mov	r2, r4
 8003294:	462b      	mov	r3, r5
 8003296:	f04f 0000 	mov.w	r0, #0
 800329a:	f04f 0100 	mov.w	r1, #0
 800329e:	0159      	lsls	r1, r3, #5
 80032a0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80032a4:	0150      	lsls	r0, r2, #5
 80032a6:	4602      	mov	r2, r0
 80032a8:	460b      	mov	r3, r1
 80032aa:	4621      	mov	r1, r4
 80032ac:	1a51      	subs	r1, r2, r1
 80032ae:	6139      	str	r1, [r7, #16]
 80032b0:	4629      	mov	r1, r5
 80032b2:	eb63 0301 	sbc.w	r3, r3, r1
 80032b6:	617b      	str	r3, [r7, #20]
 80032b8:	f04f 0200 	mov.w	r2, #0
 80032bc:	f04f 0300 	mov.w	r3, #0
 80032c0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80032c4:	4659      	mov	r1, fp
 80032c6:	018b      	lsls	r3, r1, #6
 80032c8:	4651      	mov	r1, sl
 80032ca:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80032ce:	4651      	mov	r1, sl
 80032d0:	018a      	lsls	r2, r1, #6
 80032d2:	4651      	mov	r1, sl
 80032d4:	ebb2 0801 	subs.w	r8, r2, r1
 80032d8:	4659      	mov	r1, fp
 80032da:	eb63 0901 	sbc.w	r9, r3, r1
 80032de:	f04f 0200 	mov.w	r2, #0
 80032e2:	f04f 0300 	mov.w	r3, #0
 80032e6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80032ea:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80032ee:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80032f2:	4690      	mov	r8, r2
 80032f4:	4699      	mov	r9, r3
 80032f6:	4623      	mov	r3, r4
 80032f8:	eb18 0303 	adds.w	r3, r8, r3
 80032fc:	60bb      	str	r3, [r7, #8]
 80032fe:	462b      	mov	r3, r5
 8003300:	eb49 0303 	adc.w	r3, r9, r3
 8003304:	60fb      	str	r3, [r7, #12]
 8003306:	f04f 0200 	mov.w	r2, #0
 800330a:	f04f 0300 	mov.w	r3, #0
 800330e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003312:	4629      	mov	r1, r5
 8003314:	024b      	lsls	r3, r1, #9
 8003316:	4621      	mov	r1, r4
 8003318:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800331c:	4621      	mov	r1, r4
 800331e:	024a      	lsls	r2, r1, #9
 8003320:	4610      	mov	r0, r2
 8003322:	4619      	mov	r1, r3
 8003324:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003326:	2200      	movs	r2, #0
 8003328:	62bb      	str	r3, [r7, #40]	; 0x28
 800332a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800332c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003330:	f7fd fc0e 	bl	8000b50 <__aeabi_uldivmod>
 8003334:	4602      	mov	r2, r0
 8003336:	460b      	mov	r3, r1
 8003338:	4613      	mov	r3, r2
 800333a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800333c:	e058      	b.n	80033f0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800333e:	4b38      	ldr	r3, [pc, #224]	; (8003420 <HAL_RCC_GetSysClockFreq+0x200>)
 8003340:	685b      	ldr	r3, [r3, #4]
 8003342:	099b      	lsrs	r3, r3, #6
 8003344:	2200      	movs	r2, #0
 8003346:	4618      	mov	r0, r3
 8003348:	4611      	mov	r1, r2
 800334a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800334e:	623b      	str	r3, [r7, #32]
 8003350:	2300      	movs	r3, #0
 8003352:	627b      	str	r3, [r7, #36]	; 0x24
 8003354:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003358:	4642      	mov	r2, r8
 800335a:	464b      	mov	r3, r9
 800335c:	f04f 0000 	mov.w	r0, #0
 8003360:	f04f 0100 	mov.w	r1, #0
 8003364:	0159      	lsls	r1, r3, #5
 8003366:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800336a:	0150      	lsls	r0, r2, #5
 800336c:	4602      	mov	r2, r0
 800336e:	460b      	mov	r3, r1
 8003370:	4641      	mov	r1, r8
 8003372:	ebb2 0a01 	subs.w	sl, r2, r1
 8003376:	4649      	mov	r1, r9
 8003378:	eb63 0b01 	sbc.w	fp, r3, r1
 800337c:	f04f 0200 	mov.w	r2, #0
 8003380:	f04f 0300 	mov.w	r3, #0
 8003384:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003388:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800338c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003390:	ebb2 040a 	subs.w	r4, r2, sl
 8003394:	eb63 050b 	sbc.w	r5, r3, fp
 8003398:	f04f 0200 	mov.w	r2, #0
 800339c:	f04f 0300 	mov.w	r3, #0
 80033a0:	00eb      	lsls	r3, r5, #3
 80033a2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80033a6:	00e2      	lsls	r2, r4, #3
 80033a8:	4614      	mov	r4, r2
 80033aa:	461d      	mov	r5, r3
 80033ac:	4643      	mov	r3, r8
 80033ae:	18e3      	adds	r3, r4, r3
 80033b0:	603b      	str	r3, [r7, #0]
 80033b2:	464b      	mov	r3, r9
 80033b4:	eb45 0303 	adc.w	r3, r5, r3
 80033b8:	607b      	str	r3, [r7, #4]
 80033ba:	f04f 0200 	mov.w	r2, #0
 80033be:	f04f 0300 	mov.w	r3, #0
 80033c2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80033c6:	4629      	mov	r1, r5
 80033c8:	028b      	lsls	r3, r1, #10
 80033ca:	4621      	mov	r1, r4
 80033cc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80033d0:	4621      	mov	r1, r4
 80033d2:	028a      	lsls	r2, r1, #10
 80033d4:	4610      	mov	r0, r2
 80033d6:	4619      	mov	r1, r3
 80033d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80033da:	2200      	movs	r2, #0
 80033dc:	61bb      	str	r3, [r7, #24]
 80033de:	61fa      	str	r2, [r7, #28]
 80033e0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80033e4:	f7fd fbb4 	bl	8000b50 <__aeabi_uldivmod>
 80033e8:	4602      	mov	r2, r0
 80033ea:	460b      	mov	r3, r1
 80033ec:	4613      	mov	r3, r2
 80033ee:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80033f0:	4b0b      	ldr	r3, [pc, #44]	; (8003420 <HAL_RCC_GetSysClockFreq+0x200>)
 80033f2:	685b      	ldr	r3, [r3, #4]
 80033f4:	0c1b      	lsrs	r3, r3, #16
 80033f6:	f003 0303 	and.w	r3, r3, #3
 80033fa:	3301      	adds	r3, #1
 80033fc:	005b      	lsls	r3, r3, #1
 80033fe:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003400:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003402:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003404:	fbb2 f3f3 	udiv	r3, r2, r3
 8003408:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800340a:	e002      	b.n	8003412 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800340c:	4b05      	ldr	r3, [pc, #20]	; (8003424 <HAL_RCC_GetSysClockFreq+0x204>)
 800340e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003410:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003412:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003414:	4618      	mov	r0, r3
 8003416:	3750      	adds	r7, #80	; 0x50
 8003418:	46bd      	mov	sp, r7
 800341a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800341e:	bf00      	nop
 8003420:	40023800 	.word	0x40023800
 8003424:	00f42400 	.word	0x00f42400
 8003428:	007a1200 	.word	0x007a1200

0800342c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800342c:	b480      	push	{r7}
 800342e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003430:	4b03      	ldr	r3, [pc, #12]	; (8003440 <HAL_RCC_GetHCLKFreq+0x14>)
 8003432:	681b      	ldr	r3, [r3, #0]
}
 8003434:	4618      	mov	r0, r3
 8003436:	46bd      	mov	sp, r7
 8003438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343c:	4770      	bx	lr
 800343e:	bf00      	nop
 8003440:	20000008 	.word	0x20000008

08003444 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003444:	b580      	push	{r7, lr}
 8003446:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003448:	f7ff fff0 	bl	800342c <HAL_RCC_GetHCLKFreq>
 800344c:	4602      	mov	r2, r0
 800344e:	4b05      	ldr	r3, [pc, #20]	; (8003464 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003450:	689b      	ldr	r3, [r3, #8]
 8003452:	0a9b      	lsrs	r3, r3, #10
 8003454:	f003 0307 	and.w	r3, r3, #7
 8003458:	4903      	ldr	r1, [pc, #12]	; (8003468 <HAL_RCC_GetPCLK1Freq+0x24>)
 800345a:	5ccb      	ldrb	r3, [r1, r3]
 800345c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003460:	4618      	mov	r0, r3
 8003462:	bd80      	pop	{r7, pc}
 8003464:	40023800 	.word	0x40023800
 8003468:	08003c60 	.word	0x08003c60

0800346c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003470:	f7ff ffdc 	bl	800342c <HAL_RCC_GetHCLKFreq>
 8003474:	4602      	mov	r2, r0
 8003476:	4b05      	ldr	r3, [pc, #20]	; (800348c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003478:	689b      	ldr	r3, [r3, #8]
 800347a:	0b5b      	lsrs	r3, r3, #13
 800347c:	f003 0307 	and.w	r3, r3, #7
 8003480:	4903      	ldr	r1, [pc, #12]	; (8003490 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003482:	5ccb      	ldrb	r3, [r1, r3]
 8003484:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003488:	4618      	mov	r0, r3
 800348a:	bd80      	pop	{r7, pc}
 800348c:	40023800 	.word	0x40023800
 8003490:	08003c60 	.word	0x08003c60

08003494 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003494:	b580      	push	{r7, lr}
 8003496:	b082      	sub	sp, #8
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d101      	bne.n	80034a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80034a2:	2301      	movs	r3, #1
 80034a4:	e03f      	b.n	8003526 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034ac:	b2db      	uxtb	r3, r3
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d106      	bne.n	80034c0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	2200      	movs	r2, #0
 80034b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80034ba:	6878      	ldr	r0, [r7, #4]
 80034bc:	f7fe ffae 	bl	800241c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2224      	movs	r2, #36	; 0x24
 80034c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	68da      	ldr	r2, [r3, #12]
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80034d6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80034d8:	6878      	ldr	r0, [r7, #4]
 80034da:	f000 f829 	bl	8003530 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	691a      	ldr	r2, [r3, #16]
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80034ec:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	695a      	ldr	r2, [r3, #20]
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80034fc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	68da      	ldr	r2, [r3, #12]
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800350c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	2200      	movs	r2, #0
 8003512:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2220      	movs	r2, #32
 8003518:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2220      	movs	r2, #32
 8003520:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003524:	2300      	movs	r3, #0
}
 8003526:	4618      	mov	r0, r3
 8003528:	3708      	adds	r7, #8
 800352a:	46bd      	mov	sp, r7
 800352c:	bd80      	pop	{r7, pc}
	...

08003530 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003530:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003534:	b0c0      	sub	sp, #256	; 0x100
 8003536:	af00      	add	r7, sp, #0
 8003538:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800353c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	691b      	ldr	r3, [r3, #16]
 8003544:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003548:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800354c:	68d9      	ldr	r1, [r3, #12]
 800354e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003552:	681a      	ldr	r2, [r3, #0]
 8003554:	ea40 0301 	orr.w	r3, r0, r1
 8003558:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800355a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800355e:	689a      	ldr	r2, [r3, #8]
 8003560:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003564:	691b      	ldr	r3, [r3, #16]
 8003566:	431a      	orrs	r2, r3
 8003568:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800356c:	695b      	ldr	r3, [r3, #20]
 800356e:	431a      	orrs	r2, r3
 8003570:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003574:	69db      	ldr	r3, [r3, #28]
 8003576:	4313      	orrs	r3, r2
 8003578:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800357c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	68db      	ldr	r3, [r3, #12]
 8003584:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003588:	f021 010c 	bic.w	r1, r1, #12
 800358c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003590:	681a      	ldr	r2, [r3, #0]
 8003592:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003596:	430b      	orrs	r3, r1
 8003598:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800359a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	695b      	ldr	r3, [r3, #20]
 80035a2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80035a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035aa:	6999      	ldr	r1, [r3, #24]
 80035ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035b0:	681a      	ldr	r2, [r3, #0]
 80035b2:	ea40 0301 	orr.w	r3, r0, r1
 80035b6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80035b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035bc:	681a      	ldr	r2, [r3, #0]
 80035be:	4b8f      	ldr	r3, [pc, #572]	; (80037fc <UART_SetConfig+0x2cc>)
 80035c0:	429a      	cmp	r2, r3
 80035c2:	d005      	beq.n	80035d0 <UART_SetConfig+0xa0>
 80035c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035c8:	681a      	ldr	r2, [r3, #0]
 80035ca:	4b8d      	ldr	r3, [pc, #564]	; (8003800 <UART_SetConfig+0x2d0>)
 80035cc:	429a      	cmp	r2, r3
 80035ce:	d104      	bne.n	80035da <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80035d0:	f7ff ff4c 	bl	800346c <HAL_RCC_GetPCLK2Freq>
 80035d4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80035d8:	e003      	b.n	80035e2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80035da:	f7ff ff33 	bl	8003444 <HAL_RCC_GetPCLK1Freq>
 80035de:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80035e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035e6:	69db      	ldr	r3, [r3, #28]
 80035e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80035ec:	f040 810c 	bne.w	8003808 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80035f0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80035f4:	2200      	movs	r2, #0
 80035f6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80035fa:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80035fe:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003602:	4622      	mov	r2, r4
 8003604:	462b      	mov	r3, r5
 8003606:	1891      	adds	r1, r2, r2
 8003608:	65b9      	str	r1, [r7, #88]	; 0x58
 800360a:	415b      	adcs	r3, r3
 800360c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800360e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003612:	4621      	mov	r1, r4
 8003614:	eb12 0801 	adds.w	r8, r2, r1
 8003618:	4629      	mov	r1, r5
 800361a:	eb43 0901 	adc.w	r9, r3, r1
 800361e:	f04f 0200 	mov.w	r2, #0
 8003622:	f04f 0300 	mov.w	r3, #0
 8003626:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800362a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800362e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003632:	4690      	mov	r8, r2
 8003634:	4699      	mov	r9, r3
 8003636:	4623      	mov	r3, r4
 8003638:	eb18 0303 	adds.w	r3, r8, r3
 800363c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003640:	462b      	mov	r3, r5
 8003642:	eb49 0303 	adc.w	r3, r9, r3
 8003646:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800364a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800364e:	685b      	ldr	r3, [r3, #4]
 8003650:	2200      	movs	r2, #0
 8003652:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003656:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800365a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800365e:	460b      	mov	r3, r1
 8003660:	18db      	adds	r3, r3, r3
 8003662:	653b      	str	r3, [r7, #80]	; 0x50
 8003664:	4613      	mov	r3, r2
 8003666:	eb42 0303 	adc.w	r3, r2, r3
 800366a:	657b      	str	r3, [r7, #84]	; 0x54
 800366c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003670:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003674:	f7fd fa6c 	bl	8000b50 <__aeabi_uldivmod>
 8003678:	4602      	mov	r2, r0
 800367a:	460b      	mov	r3, r1
 800367c:	4b61      	ldr	r3, [pc, #388]	; (8003804 <UART_SetConfig+0x2d4>)
 800367e:	fba3 2302 	umull	r2, r3, r3, r2
 8003682:	095b      	lsrs	r3, r3, #5
 8003684:	011c      	lsls	r4, r3, #4
 8003686:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800368a:	2200      	movs	r2, #0
 800368c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003690:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003694:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003698:	4642      	mov	r2, r8
 800369a:	464b      	mov	r3, r9
 800369c:	1891      	adds	r1, r2, r2
 800369e:	64b9      	str	r1, [r7, #72]	; 0x48
 80036a0:	415b      	adcs	r3, r3
 80036a2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80036a4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80036a8:	4641      	mov	r1, r8
 80036aa:	eb12 0a01 	adds.w	sl, r2, r1
 80036ae:	4649      	mov	r1, r9
 80036b0:	eb43 0b01 	adc.w	fp, r3, r1
 80036b4:	f04f 0200 	mov.w	r2, #0
 80036b8:	f04f 0300 	mov.w	r3, #0
 80036bc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80036c0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80036c4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80036c8:	4692      	mov	sl, r2
 80036ca:	469b      	mov	fp, r3
 80036cc:	4643      	mov	r3, r8
 80036ce:	eb1a 0303 	adds.w	r3, sl, r3
 80036d2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80036d6:	464b      	mov	r3, r9
 80036d8:	eb4b 0303 	adc.w	r3, fp, r3
 80036dc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80036e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036e4:	685b      	ldr	r3, [r3, #4]
 80036e6:	2200      	movs	r2, #0
 80036e8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80036ec:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80036f0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80036f4:	460b      	mov	r3, r1
 80036f6:	18db      	adds	r3, r3, r3
 80036f8:	643b      	str	r3, [r7, #64]	; 0x40
 80036fa:	4613      	mov	r3, r2
 80036fc:	eb42 0303 	adc.w	r3, r2, r3
 8003700:	647b      	str	r3, [r7, #68]	; 0x44
 8003702:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003706:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800370a:	f7fd fa21 	bl	8000b50 <__aeabi_uldivmod>
 800370e:	4602      	mov	r2, r0
 8003710:	460b      	mov	r3, r1
 8003712:	4611      	mov	r1, r2
 8003714:	4b3b      	ldr	r3, [pc, #236]	; (8003804 <UART_SetConfig+0x2d4>)
 8003716:	fba3 2301 	umull	r2, r3, r3, r1
 800371a:	095b      	lsrs	r3, r3, #5
 800371c:	2264      	movs	r2, #100	; 0x64
 800371e:	fb02 f303 	mul.w	r3, r2, r3
 8003722:	1acb      	subs	r3, r1, r3
 8003724:	00db      	lsls	r3, r3, #3
 8003726:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800372a:	4b36      	ldr	r3, [pc, #216]	; (8003804 <UART_SetConfig+0x2d4>)
 800372c:	fba3 2302 	umull	r2, r3, r3, r2
 8003730:	095b      	lsrs	r3, r3, #5
 8003732:	005b      	lsls	r3, r3, #1
 8003734:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003738:	441c      	add	r4, r3
 800373a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800373e:	2200      	movs	r2, #0
 8003740:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003744:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003748:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800374c:	4642      	mov	r2, r8
 800374e:	464b      	mov	r3, r9
 8003750:	1891      	adds	r1, r2, r2
 8003752:	63b9      	str	r1, [r7, #56]	; 0x38
 8003754:	415b      	adcs	r3, r3
 8003756:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003758:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800375c:	4641      	mov	r1, r8
 800375e:	1851      	adds	r1, r2, r1
 8003760:	6339      	str	r1, [r7, #48]	; 0x30
 8003762:	4649      	mov	r1, r9
 8003764:	414b      	adcs	r3, r1
 8003766:	637b      	str	r3, [r7, #52]	; 0x34
 8003768:	f04f 0200 	mov.w	r2, #0
 800376c:	f04f 0300 	mov.w	r3, #0
 8003770:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003774:	4659      	mov	r1, fp
 8003776:	00cb      	lsls	r3, r1, #3
 8003778:	4651      	mov	r1, sl
 800377a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800377e:	4651      	mov	r1, sl
 8003780:	00ca      	lsls	r2, r1, #3
 8003782:	4610      	mov	r0, r2
 8003784:	4619      	mov	r1, r3
 8003786:	4603      	mov	r3, r0
 8003788:	4642      	mov	r2, r8
 800378a:	189b      	adds	r3, r3, r2
 800378c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003790:	464b      	mov	r3, r9
 8003792:	460a      	mov	r2, r1
 8003794:	eb42 0303 	adc.w	r3, r2, r3
 8003798:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800379c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037a0:	685b      	ldr	r3, [r3, #4]
 80037a2:	2200      	movs	r2, #0
 80037a4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80037a8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80037ac:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80037b0:	460b      	mov	r3, r1
 80037b2:	18db      	adds	r3, r3, r3
 80037b4:	62bb      	str	r3, [r7, #40]	; 0x28
 80037b6:	4613      	mov	r3, r2
 80037b8:	eb42 0303 	adc.w	r3, r2, r3
 80037bc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80037be:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80037c2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80037c6:	f7fd f9c3 	bl	8000b50 <__aeabi_uldivmod>
 80037ca:	4602      	mov	r2, r0
 80037cc:	460b      	mov	r3, r1
 80037ce:	4b0d      	ldr	r3, [pc, #52]	; (8003804 <UART_SetConfig+0x2d4>)
 80037d0:	fba3 1302 	umull	r1, r3, r3, r2
 80037d4:	095b      	lsrs	r3, r3, #5
 80037d6:	2164      	movs	r1, #100	; 0x64
 80037d8:	fb01 f303 	mul.w	r3, r1, r3
 80037dc:	1ad3      	subs	r3, r2, r3
 80037de:	00db      	lsls	r3, r3, #3
 80037e0:	3332      	adds	r3, #50	; 0x32
 80037e2:	4a08      	ldr	r2, [pc, #32]	; (8003804 <UART_SetConfig+0x2d4>)
 80037e4:	fba2 2303 	umull	r2, r3, r2, r3
 80037e8:	095b      	lsrs	r3, r3, #5
 80037ea:	f003 0207 	and.w	r2, r3, #7
 80037ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	4422      	add	r2, r4
 80037f6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80037f8:	e105      	b.n	8003a06 <UART_SetConfig+0x4d6>
 80037fa:	bf00      	nop
 80037fc:	40011000 	.word	0x40011000
 8003800:	40011400 	.word	0x40011400
 8003804:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003808:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800380c:	2200      	movs	r2, #0
 800380e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003812:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003816:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800381a:	4642      	mov	r2, r8
 800381c:	464b      	mov	r3, r9
 800381e:	1891      	adds	r1, r2, r2
 8003820:	6239      	str	r1, [r7, #32]
 8003822:	415b      	adcs	r3, r3
 8003824:	627b      	str	r3, [r7, #36]	; 0x24
 8003826:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800382a:	4641      	mov	r1, r8
 800382c:	1854      	adds	r4, r2, r1
 800382e:	4649      	mov	r1, r9
 8003830:	eb43 0501 	adc.w	r5, r3, r1
 8003834:	f04f 0200 	mov.w	r2, #0
 8003838:	f04f 0300 	mov.w	r3, #0
 800383c:	00eb      	lsls	r3, r5, #3
 800383e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003842:	00e2      	lsls	r2, r4, #3
 8003844:	4614      	mov	r4, r2
 8003846:	461d      	mov	r5, r3
 8003848:	4643      	mov	r3, r8
 800384a:	18e3      	adds	r3, r4, r3
 800384c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003850:	464b      	mov	r3, r9
 8003852:	eb45 0303 	adc.w	r3, r5, r3
 8003856:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800385a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800385e:	685b      	ldr	r3, [r3, #4]
 8003860:	2200      	movs	r2, #0
 8003862:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003866:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800386a:	f04f 0200 	mov.w	r2, #0
 800386e:	f04f 0300 	mov.w	r3, #0
 8003872:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003876:	4629      	mov	r1, r5
 8003878:	008b      	lsls	r3, r1, #2
 800387a:	4621      	mov	r1, r4
 800387c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003880:	4621      	mov	r1, r4
 8003882:	008a      	lsls	r2, r1, #2
 8003884:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003888:	f7fd f962 	bl	8000b50 <__aeabi_uldivmod>
 800388c:	4602      	mov	r2, r0
 800388e:	460b      	mov	r3, r1
 8003890:	4b60      	ldr	r3, [pc, #384]	; (8003a14 <UART_SetConfig+0x4e4>)
 8003892:	fba3 2302 	umull	r2, r3, r3, r2
 8003896:	095b      	lsrs	r3, r3, #5
 8003898:	011c      	lsls	r4, r3, #4
 800389a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800389e:	2200      	movs	r2, #0
 80038a0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80038a4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80038a8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80038ac:	4642      	mov	r2, r8
 80038ae:	464b      	mov	r3, r9
 80038b0:	1891      	adds	r1, r2, r2
 80038b2:	61b9      	str	r1, [r7, #24]
 80038b4:	415b      	adcs	r3, r3
 80038b6:	61fb      	str	r3, [r7, #28]
 80038b8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80038bc:	4641      	mov	r1, r8
 80038be:	1851      	adds	r1, r2, r1
 80038c0:	6139      	str	r1, [r7, #16]
 80038c2:	4649      	mov	r1, r9
 80038c4:	414b      	adcs	r3, r1
 80038c6:	617b      	str	r3, [r7, #20]
 80038c8:	f04f 0200 	mov.w	r2, #0
 80038cc:	f04f 0300 	mov.w	r3, #0
 80038d0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80038d4:	4659      	mov	r1, fp
 80038d6:	00cb      	lsls	r3, r1, #3
 80038d8:	4651      	mov	r1, sl
 80038da:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80038de:	4651      	mov	r1, sl
 80038e0:	00ca      	lsls	r2, r1, #3
 80038e2:	4610      	mov	r0, r2
 80038e4:	4619      	mov	r1, r3
 80038e6:	4603      	mov	r3, r0
 80038e8:	4642      	mov	r2, r8
 80038ea:	189b      	adds	r3, r3, r2
 80038ec:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80038f0:	464b      	mov	r3, r9
 80038f2:	460a      	mov	r2, r1
 80038f4:	eb42 0303 	adc.w	r3, r2, r3
 80038f8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80038fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003900:	685b      	ldr	r3, [r3, #4]
 8003902:	2200      	movs	r2, #0
 8003904:	67bb      	str	r3, [r7, #120]	; 0x78
 8003906:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003908:	f04f 0200 	mov.w	r2, #0
 800390c:	f04f 0300 	mov.w	r3, #0
 8003910:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003914:	4649      	mov	r1, r9
 8003916:	008b      	lsls	r3, r1, #2
 8003918:	4641      	mov	r1, r8
 800391a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800391e:	4641      	mov	r1, r8
 8003920:	008a      	lsls	r2, r1, #2
 8003922:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003926:	f7fd f913 	bl	8000b50 <__aeabi_uldivmod>
 800392a:	4602      	mov	r2, r0
 800392c:	460b      	mov	r3, r1
 800392e:	4b39      	ldr	r3, [pc, #228]	; (8003a14 <UART_SetConfig+0x4e4>)
 8003930:	fba3 1302 	umull	r1, r3, r3, r2
 8003934:	095b      	lsrs	r3, r3, #5
 8003936:	2164      	movs	r1, #100	; 0x64
 8003938:	fb01 f303 	mul.w	r3, r1, r3
 800393c:	1ad3      	subs	r3, r2, r3
 800393e:	011b      	lsls	r3, r3, #4
 8003940:	3332      	adds	r3, #50	; 0x32
 8003942:	4a34      	ldr	r2, [pc, #208]	; (8003a14 <UART_SetConfig+0x4e4>)
 8003944:	fba2 2303 	umull	r2, r3, r2, r3
 8003948:	095b      	lsrs	r3, r3, #5
 800394a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800394e:	441c      	add	r4, r3
 8003950:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003954:	2200      	movs	r2, #0
 8003956:	673b      	str	r3, [r7, #112]	; 0x70
 8003958:	677a      	str	r2, [r7, #116]	; 0x74
 800395a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800395e:	4642      	mov	r2, r8
 8003960:	464b      	mov	r3, r9
 8003962:	1891      	adds	r1, r2, r2
 8003964:	60b9      	str	r1, [r7, #8]
 8003966:	415b      	adcs	r3, r3
 8003968:	60fb      	str	r3, [r7, #12]
 800396a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800396e:	4641      	mov	r1, r8
 8003970:	1851      	adds	r1, r2, r1
 8003972:	6039      	str	r1, [r7, #0]
 8003974:	4649      	mov	r1, r9
 8003976:	414b      	adcs	r3, r1
 8003978:	607b      	str	r3, [r7, #4]
 800397a:	f04f 0200 	mov.w	r2, #0
 800397e:	f04f 0300 	mov.w	r3, #0
 8003982:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003986:	4659      	mov	r1, fp
 8003988:	00cb      	lsls	r3, r1, #3
 800398a:	4651      	mov	r1, sl
 800398c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003990:	4651      	mov	r1, sl
 8003992:	00ca      	lsls	r2, r1, #3
 8003994:	4610      	mov	r0, r2
 8003996:	4619      	mov	r1, r3
 8003998:	4603      	mov	r3, r0
 800399a:	4642      	mov	r2, r8
 800399c:	189b      	adds	r3, r3, r2
 800399e:	66bb      	str	r3, [r7, #104]	; 0x68
 80039a0:	464b      	mov	r3, r9
 80039a2:	460a      	mov	r2, r1
 80039a4:	eb42 0303 	adc.w	r3, r2, r3
 80039a8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80039aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039ae:	685b      	ldr	r3, [r3, #4]
 80039b0:	2200      	movs	r2, #0
 80039b2:	663b      	str	r3, [r7, #96]	; 0x60
 80039b4:	667a      	str	r2, [r7, #100]	; 0x64
 80039b6:	f04f 0200 	mov.w	r2, #0
 80039ba:	f04f 0300 	mov.w	r3, #0
 80039be:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80039c2:	4649      	mov	r1, r9
 80039c4:	008b      	lsls	r3, r1, #2
 80039c6:	4641      	mov	r1, r8
 80039c8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80039cc:	4641      	mov	r1, r8
 80039ce:	008a      	lsls	r2, r1, #2
 80039d0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80039d4:	f7fd f8bc 	bl	8000b50 <__aeabi_uldivmod>
 80039d8:	4602      	mov	r2, r0
 80039da:	460b      	mov	r3, r1
 80039dc:	4b0d      	ldr	r3, [pc, #52]	; (8003a14 <UART_SetConfig+0x4e4>)
 80039de:	fba3 1302 	umull	r1, r3, r3, r2
 80039e2:	095b      	lsrs	r3, r3, #5
 80039e4:	2164      	movs	r1, #100	; 0x64
 80039e6:	fb01 f303 	mul.w	r3, r1, r3
 80039ea:	1ad3      	subs	r3, r2, r3
 80039ec:	011b      	lsls	r3, r3, #4
 80039ee:	3332      	adds	r3, #50	; 0x32
 80039f0:	4a08      	ldr	r2, [pc, #32]	; (8003a14 <UART_SetConfig+0x4e4>)
 80039f2:	fba2 2303 	umull	r2, r3, r2, r3
 80039f6:	095b      	lsrs	r3, r3, #5
 80039f8:	f003 020f 	and.w	r2, r3, #15
 80039fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	4422      	add	r2, r4
 8003a04:	609a      	str	r2, [r3, #8]
}
 8003a06:	bf00      	nop
 8003a08:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003a12:	bf00      	nop
 8003a14:	51eb851f 	.word	0x51eb851f

08003a18 <__errno>:
 8003a18:	4b01      	ldr	r3, [pc, #4]	; (8003a20 <__errno+0x8>)
 8003a1a:	6818      	ldr	r0, [r3, #0]
 8003a1c:	4770      	bx	lr
 8003a1e:	bf00      	nop
 8003a20:	20000014 	.word	0x20000014

08003a24 <__libc_init_array>:
 8003a24:	b570      	push	{r4, r5, r6, lr}
 8003a26:	4d0d      	ldr	r5, [pc, #52]	; (8003a5c <__libc_init_array+0x38>)
 8003a28:	4c0d      	ldr	r4, [pc, #52]	; (8003a60 <__libc_init_array+0x3c>)
 8003a2a:	1b64      	subs	r4, r4, r5
 8003a2c:	10a4      	asrs	r4, r4, #2
 8003a2e:	2600      	movs	r6, #0
 8003a30:	42a6      	cmp	r6, r4
 8003a32:	d109      	bne.n	8003a48 <__libc_init_array+0x24>
 8003a34:	4d0b      	ldr	r5, [pc, #44]	; (8003a64 <__libc_init_array+0x40>)
 8003a36:	4c0c      	ldr	r4, [pc, #48]	; (8003a68 <__libc_init_array+0x44>)
 8003a38:	f000 f8fe 	bl	8003c38 <_init>
 8003a3c:	1b64      	subs	r4, r4, r5
 8003a3e:	10a4      	asrs	r4, r4, #2
 8003a40:	2600      	movs	r6, #0
 8003a42:	42a6      	cmp	r6, r4
 8003a44:	d105      	bne.n	8003a52 <__libc_init_array+0x2e>
 8003a46:	bd70      	pop	{r4, r5, r6, pc}
 8003a48:	f855 3b04 	ldr.w	r3, [r5], #4
 8003a4c:	4798      	blx	r3
 8003a4e:	3601      	adds	r6, #1
 8003a50:	e7ee      	b.n	8003a30 <__libc_init_array+0xc>
 8003a52:	f855 3b04 	ldr.w	r3, [r5], #4
 8003a56:	4798      	blx	r3
 8003a58:	3601      	adds	r6, #1
 8003a5a:	e7f2      	b.n	8003a42 <__libc_init_array+0x1e>
 8003a5c:	08003c70 	.word	0x08003c70
 8003a60:	08003c70 	.word	0x08003c70
 8003a64:	08003c70 	.word	0x08003c70
 8003a68:	08003c74 	.word	0x08003c74

08003a6c <memset>:
 8003a6c:	4402      	add	r2, r0
 8003a6e:	4603      	mov	r3, r0
 8003a70:	4293      	cmp	r3, r2
 8003a72:	d100      	bne.n	8003a76 <memset+0xa>
 8003a74:	4770      	bx	lr
 8003a76:	f803 1b01 	strb.w	r1, [r3], #1
 8003a7a:	e7f9      	b.n	8003a70 <memset+0x4>

08003a7c <sqrt>:
 8003a7c:	b538      	push	{r3, r4, r5, lr}
 8003a7e:	ed2d 8b02 	vpush	{d8}
 8003a82:	ec55 4b10 	vmov	r4, r5, d0
 8003a86:	f000 f825 	bl	8003ad4 <__ieee754_sqrt>
 8003a8a:	4622      	mov	r2, r4
 8003a8c:	462b      	mov	r3, r5
 8003a8e:	4620      	mov	r0, r4
 8003a90:	4629      	mov	r1, r5
 8003a92:	eeb0 8a40 	vmov.f32	s16, s0
 8003a96:	eef0 8a60 	vmov.f32	s17, s1
 8003a9a:	f7fc fff3 	bl	8000a84 <__aeabi_dcmpun>
 8003a9e:	b990      	cbnz	r0, 8003ac6 <sqrt+0x4a>
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	2300      	movs	r3, #0
 8003aa4:	4620      	mov	r0, r4
 8003aa6:	4629      	mov	r1, r5
 8003aa8:	f7fc ffc4 	bl	8000a34 <__aeabi_dcmplt>
 8003aac:	b158      	cbz	r0, 8003ac6 <sqrt+0x4a>
 8003aae:	f7ff ffb3 	bl	8003a18 <__errno>
 8003ab2:	2321      	movs	r3, #33	; 0x21
 8003ab4:	6003      	str	r3, [r0, #0]
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	2300      	movs	r3, #0
 8003aba:	4610      	mov	r0, r2
 8003abc:	4619      	mov	r1, r3
 8003abe:	f7fc fe71 	bl	80007a4 <__aeabi_ddiv>
 8003ac2:	ec41 0b18 	vmov	d8, r0, r1
 8003ac6:	eeb0 0a48 	vmov.f32	s0, s16
 8003aca:	eef0 0a68 	vmov.f32	s1, s17
 8003ace:	ecbd 8b02 	vpop	{d8}
 8003ad2:	bd38      	pop	{r3, r4, r5, pc}

08003ad4 <__ieee754_sqrt>:
 8003ad4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003ad8:	ec55 4b10 	vmov	r4, r5, d0
 8003adc:	4e55      	ldr	r6, [pc, #340]	; (8003c34 <__ieee754_sqrt+0x160>)
 8003ade:	43ae      	bics	r6, r5
 8003ae0:	ee10 0a10 	vmov	r0, s0
 8003ae4:	ee10 3a10 	vmov	r3, s0
 8003ae8:	462a      	mov	r2, r5
 8003aea:	4629      	mov	r1, r5
 8003aec:	d110      	bne.n	8003b10 <__ieee754_sqrt+0x3c>
 8003aee:	ee10 2a10 	vmov	r2, s0
 8003af2:	462b      	mov	r3, r5
 8003af4:	f7fc fd2c 	bl	8000550 <__aeabi_dmul>
 8003af8:	4602      	mov	r2, r0
 8003afa:	460b      	mov	r3, r1
 8003afc:	4620      	mov	r0, r4
 8003afe:	4629      	mov	r1, r5
 8003b00:	f7fc fb70 	bl	80001e4 <__adddf3>
 8003b04:	4604      	mov	r4, r0
 8003b06:	460d      	mov	r5, r1
 8003b08:	ec45 4b10 	vmov	d0, r4, r5
 8003b0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003b10:	2d00      	cmp	r5, #0
 8003b12:	dc10      	bgt.n	8003b36 <__ieee754_sqrt+0x62>
 8003b14:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8003b18:	4330      	orrs	r0, r6
 8003b1a:	d0f5      	beq.n	8003b08 <__ieee754_sqrt+0x34>
 8003b1c:	b15d      	cbz	r5, 8003b36 <__ieee754_sqrt+0x62>
 8003b1e:	ee10 2a10 	vmov	r2, s0
 8003b22:	462b      	mov	r3, r5
 8003b24:	ee10 0a10 	vmov	r0, s0
 8003b28:	f7fc fb5a 	bl	80001e0 <__aeabi_dsub>
 8003b2c:	4602      	mov	r2, r0
 8003b2e:	460b      	mov	r3, r1
 8003b30:	f7fc fe38 	bl	80007a4 <__aeabi_ddiv>
 8003b34:	e7e6      	b.n	8003b04 <__ieee754_sqrt+0x30>
 8003b36:	1512      	asrs	r2, r2, #20
 8003b38:	d074      	beq.n	8003c24 <__ieee754_sqrt+0x150>
 8003b3a:	07d4      	lsls	r4, r2, #31
 8003b3c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8003b40:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 8003b44:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8003b48:	bf5e      	ittt	pl
 8003b4a:	0fda      	lsrpl	r2, r3, #31
 8003b4c:	005b      	lslpl	r3, r3, #1
 8003b4e:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 8003b52:	2400      	movs	r4, #0
 8003b54:	0fda      	lsrs	r2, r3, #31
 8003b56:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8003b5a:	107f      	asrs	r7, r7, #1
 8003b5c:	005b      	lsls	r3, r3, #1
 8003b5e:	2516      	movs	r5, #22
 8003b60:	4620      	mov	r0, r4
 8003b62:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8003b66:	1886      	adds	r6, r0, r2
 8003b68:	428e      	cmp	r6, r1
 8003b6a:	bfde      	ittt	le
 8003b6c:	1b89      	suble	r1, r1, r6
 8003b6e:	18b0      	addle	r0, r6, r2
 8003b70:	18a4      	addle	r4, r4, r2
 8003b72:	0049      	lsls	r1, r1, #1
 8003b74:	3d01      	subs	r5, #1
 8003b76:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 8003b7a:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8003b7e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8003b82:	d1f0      	bne.n	8003b66 <__ieee754_sqrt+0x92>
 8003b84:	462a      	mov	r2, r5
 8003b86:	f04f 0e20 	mov.w	lr, #32
 8003b8a:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8003b8e:	4281      	cmp	r1, r0
 8003b90:	eb06 0c05 	add.w	ip, r6, r5
 8003b94:	dc02      	bgt.n	8003b9c <__ieee754_sqrt+0xc8>
 8003b96:	d113      	bne.n	8003bc0 <__ieee754_sqrt+0xec>
 8003b98:	459c      	cmp	ip, r3
 8003b9a:	d811      	bhi.n	8003bc0 <__ieee754_sqrt+0xec>
 8003b9c:	f1bc 0f00 	cmp.w	ip, #0
 8003ba0:	eb0c 0506 	add.w	r5, ip, r6
 8003ba4:	da43      	bge.n	8003c2e <__ieee754_sqrt+0x15a>
 8003ba6:	2d00      	cmp	r5, #0
 8003ba8:	db41      	blt.n	8003c2e <__ieee754_sqrt+0x15a>
 8003baa:	f100 0801 	add.w	r8, r0, #1
 8003bae:	1a09      	subs	r1, r1, r0
 8003bb0:	459c      	cmp	ip, r3
 8003bb2:	bf88      	it	hi
 8003bb4:	f101 31ff 	addhi.w	r1, r1, #4294967295
 8003bb8:	eba3 030c 	sub.w	r3, r3, ip
 8003bbc:	4432      	add	r2, r6
 8003bbe:	4640      	mov	r0, r8
 8003bc0:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8003bc4:	f1be 0e01 	subs.w	lr, lr, #1
 8003bc8:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 8003bcc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8003bd0:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8003bd4:	d1db      	bne.n	8003b8e <__ieee754_sqrt+0xba>
 8003bd6:	430b      	orrs	r3, r1
 8003bd8:	d006      	beq.n	8003be8 <__ieee754_sqrt+0x114>
 8003bda:	1c50      	adds	r0, r2, #1
 8003bdc:	bf13      	iteet	ne
 8003bde:	3201      	addne	r2, #1
 8003be0:	3401      	addeq	r4, #1
 8003be2:	4672      	moveq	r2, lr
 8003be4:	f022 0201 	bicne.w	r2, r2, #1
 8003be8:	1063      	asrs	r3, r4, #1
 8003bea:	0852      	lsrs	r2, r2, #1
 8003bec:	07e1      	lsls	r1, r4, #31
 8003bee:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8003bf2:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8003bf6:	bf48      	it	mi
 8003bf8:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8003bfc:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8003c00:	4614      	mov	r4, r2
 8003c02:	e781      	b.n	8003b08 <__ieee754_sqrt+0x34>
 8003c04:	0ad9      	lsrs	r1, r3, #11
 8003c06:	3815      	subs	r0, #21
 8003c08:	055b      	lsls	r3, r3, #21
 8003c0a:	2900      	cmp	r1, #0
 8003c0c:	d0fa      	beq.n	8003c04 <__ieee754_sqrt+0x130>
 8003c0e:	02cd      	lsls	r5, r1, #11
 8003c10:	d50a      	bpl.n	8003c28 <__ieee754_sqrt+0x154>
 8003c12:	f1c2 0420 	rsb	r4, r2, #32
 8003c16:	fa23 f404 	lsr.w	r4, r3, r4
 8003c1a:	1e55      	subs	r5, r2, #1
 8003c1c:	4093      	lsls	r3, r2
 8003c1e:	4321      	orrs	r1, r4
 8003c20:	1b42      	subs	r2, r0, r5
 8003c22:	e78a      	b.n	8003b3a <__ieee754_sqrt+0x66>
 8003c24:	4610      	mov	r0, r2
 8003c26:	e7f0      	b.n	8003c0a <__ieee754_sqrt+0x136>
 8003c28:	0049      	lsls	r1, r1, #1
 8003c2a:	3201      	adds	r2, #1
 8003c2c:	e7ef      	b.n	8003c0e <__ieee754_sqrt+0x13a>
 8003c2e:	4680      	mov	r8, r0
 8003c30:	e7bd      	b.n	8003bae <__ieee754_sqrt+0xda>
 8003c32:	bf00      	nop
 8003c34:	7ff00000 	.word	0x7ff00000

08003c38 <_init>:
 8003c38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c3a:	bf00      	nop
 8003c3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c3e:	bc08      	pop	{r3}
 8003c40:	469e      	mov	lr, r3
 8003c42:	4770      	bx	lr

08003c44 <_fini>:
 8003c44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c46:	bf00      	nop
 8003c48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c4a:	bc08      	pop	{r3}
 8003c4c:	469e      	mov	lr, r3
 8003c4e:	4770      	bx	lr
