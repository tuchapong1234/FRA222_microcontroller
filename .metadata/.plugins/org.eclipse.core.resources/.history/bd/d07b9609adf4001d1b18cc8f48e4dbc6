/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2023 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include "arm_math.h"
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
UART_HandleTypeDef huart2;

/* USER CODE BEGIN PV */
// Constant

// Model Matrix
float32_t A_f32[9] = {
		1, 0.01, 0.00005,
		0, 1, 0.01,
		0, 0, 1
};
arm_matrix_instance_f32 A;

float32_t B_f32[3] = {
		0,
		0,
		0
};
arm_matrix_instance_f32 B;

float32_t C_f32[3] = {
		1,
		0,
		0
};
arm_matrix_instance_f32 C;

float32_t D_f32[1] = {
		0
};
arm_matrix_instance_f32 D;

float32_t G_f32[3] = {
		0.00005,
		0.01,
		1
};
arm_matrix_instance_f32 G;

float32_t Q_f32[1] = {
		10
};
arm_matrix_instance_f32 Q;

float32_t R_f32[1] = {
		0.1
};
arm_matrix_instance_f32 R;

float32_t M_f32[1] = {
		0
};
arm_matrix_instance_f32 M;

float32_t I3_f32[9] = {
		1, 0, 0,
		0, 1, 0,
		0, 0, 1
};
arm_matrix_instance_f32 I3;

//Initia Condition
float32_t X_f32[3] = {
		0,
		0,
		0
};
arm_matrix_instance_f32 X;

float32_t U_f32[1] = {
		0
};
arm_matrix_instance_f32 U;

float32_t P_f32[9] = {
		0, 0, 0,
		0, 0, 0,
		0, 0, 0
};
arm_matrix_instance_f32 P;

//Output and storage matrix
float32_t At_f32[9];
arm_matrix_instance_f32 At;

float32_t Ct_f32[3];
arm_matrix_instance_f32 Ct;

float32_t Gt_f32[3];
arm_matrix_instance_f32 Gt;


//Prediction Parameter
float32_t X_predict_f32[3];
arm_matrix_instance_f32 X_predict;

float32_t P_predict_f32[9];
arm_matrix_instance_f32 P_predict;

float32_t AmX_f32[3];
arm_matrix_instance_f32 AmX;

float32_t BmU_f32[3];
arm_matrix_instance_f32 BmU;

float32_t AmP_f32[9];
arm_matrix_instance_f32 AmP;

float32_t AmPmAt_f32[9];
arm_matrix_instance_f32 AmPmAt;

float32_t GmQ_f32[3];
arm_matrix_instance_f32 GmQ;

float32_t GmQmGt_f32[9];
arm_matrix_instance_f32 GmQmGt;

//Update Parameter
float32_t K_f32[3];
arm_matrix_instance_f32 K;

float32_t P_predictmCt_f32[3];
arm_matrix_instance_f32 P_predictmCt;

float32_t CmP_predictmCt_f32[1];
arm_matrix_instance_f32 CmP_predictmCt;

float32_t CmP_predictmCtaR_f32[1];
arm_matrix_instance_f32 CmP_predictmCtaR;

float32_t inv_CmP_predictmCtaR_f32[1];
arm_matrix_instance_f32 inv_CmP_predictmCtaR;

float32_t CmX_predict_f32[1];
arm_matrix_instance_f32 CmX_predict;

float32_t MsCmX_predict_f32[1];
arm_matrix_instance_f32 MsCmX_predict;

float32_t KmMsCmX_predict_f32[3];
arm_matrix_instance_f32 KmMsCmX_predict;

float32_t KmC_f32[9];
arm_matrix_instance_f32 KmC;

float32_t I3sKmC_f32[9];
arm_matrix_instance_f32 I3sKmC;


/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_USART2_UART_Init(void);
/* USER CODE BEGIN PFP */
void KalmanFilter();
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_USART2_UART_Init();
  /* USER CODE BEGIN 2 */
  //init all matrix

  arm_mat_init_f32(&A, 3, 3,(float32_t*) &A_f32);
  arm_mat_init_f32(&B, 3, 1,(float32_t*) &B_f32);
  arm_mat_init_f32(&C, 1, 3,(float32_t*) &C_f32);
  arm_mat_init_f32(&D, 1, 1,(float32_t*) &D_f32);
  arm_mat_init_f32(&G, 3, 1,(float32_t*) &G_f32);

  arm_mat_init_f32(&I3, 3, 3,(float32_t*) &I3_f32);
  arm_mat_init_f32(&X, 3, 1,(float32_t*) &X_f32);
  arm_mat_init_f32(&U, 1, 1,(float32_t*) &U_f32);
  arm_mat_init_f32(&P, 3, 3,(float32_t*) &P_f32);

  arm_mat_init_f32(&At, 3, 3,(float32_t*) &At_f32);
  arm_mat_init_f32(&Ct, 3, 1,(float32_t*) &Ct_f32);
  arm_mat_init_f32(&Gt, 1, 3,(float32_t*) &Gt_f32);

  arm_mat_init_f32(&X_predict, 3, 1,(float32_t*) &X_predict_f32);
  arm_mat_init_f32(&P_predict, 3, 3,(float32_t*) &P_predict_f32);

  arm_mat_init_f32(&AmX, 3, 1,(float32_t*) &AmX_f32);
  arm_mat_init_f32(&BmU, 3, 1,(float32_t*) &BmU_f32);
  arm_mat_init_f32(&AmP, 3, 3,(float32_t*) &AmP_f32);
  arm_mat_init_f32(&AmPmAt, 3, 3,(float32_t*) &AmPmAt_f32);
  arm_mat_init_f32(&GmQ, 3, 1,(float32_t*) &GmQ_f32);
  arm_mat_init_f32(&GmQmGt, 3, 3,(float32_t*) &GmQmGt_f32);

  arm_mat_init_f32(&K, 3, 1,(float32_t*) &K_f32);
  arm_mat_init_f32(&P_predictmCt, 3, 1,(float32_t*) &P_predictmCt_f32);
  arm_mat_init_f32(&CmP_predictmCt, 1, 1,(float32_t*) &CmP_predictmCt_f32);
  arm_mat_init_f32(&CmP_predictmCtaR, 1, 1,(float32_t*) &CmP_predictmCtaR_f32);
  arm_mat_init_f32(&CmX_predict, 1, 1,(float32_t*) &CmX_predict_f32);
  arm_mat_init_f32(&MsCmX_predict, 1, 1,(float32_t*) &MsCmX_predict_f32);
  arm_mat_init_f32(&KmMsCmX_predict, 3, 1,(float32_t*) &KmMsCmX_predict_f32);
  arm_mat_init_f32(&KmC, 3, 3,(float32_t*) &KmC_f32);
  arm_mat_init_f32(&I3sKmC, 3, 3,(float32_t*) &I3sKmC_f32);

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  arm_mat_trans_f32(&A, &At); //A*X

	  arm_mat_mult_f32(&At, &A, &AtmA);

	  //wrong add
	  arm_mat_add_f32(&A, &B, &AaB);

	  arm_mat_mult_f32(&A, &X, &AmX);//A*X
	  arm_mat_mult_f32(&B, &U, &BmU); //B*U
	  arm_mat_add_f32(&AmX, &BmU, &X); //X

	  arm_mat_mult_f32(&A, &P, &AmP); //A*P
	  arm_mat_trans_f32(&A, &At); //At
	  arm_mat_mult_f32(&AmP, &At, &AmPmAt); //A*P*At
	  arm_mat_mult_f32(&G, &Q, &GmQ); //G*Q
	  arm_mat_trans_f32(&G, &Gt); //Gt
	  arm_mat_mult_f32(&GmQ, &Gt, &GmQmGt); //G*Q*Gt
	  arm_mat_add_f32(&AmPmAt, &GmQmGt, &P); //P

	  arm_mat_mult_f32(&P_predict, &Ct, &P_predictmCt); //P_predict*Ct
	  arm_mat_mult_f32(&A, &P, &AmP); //A*P
	  arm_mat_mult_f32(&C, &P_predictmCt, &CmP_predictmCt); //C*P_predict*Ct
	  arm_mat_add_f32(&CmP_predictmCt, &R, &CmP_predictmCtaR); //C*P_predict*Ct + R
	  arm_mat_inverse_f32(&CmP_predictmCtaR, &inv_CmP_predictmCtaR);
	  arm_mat_mult_f32(&P_predictmCt, &inv_CmP_predictmCtaR, &K); //K

	  arm_mat_mult_f32(&C, &X_predict, &CmX_predict); //C*X_predict
	  arm_mat_sub_f32(&M, &CmX_predict, &MsCmX_predict); // M - C*X_predict
	  arm_mat_mult_f32(&K, &MsCmX_predict, &KmMsCmX_predict); //K*(M - C*X_predict)
	  arm_mat_add_f32(&X_predict, &KmMsCmX_predict, &X);

  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = 16;
  RCC_OscInitStruct.PLL.PLLN = 336;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
  RCC_OscInitStruct.PLL.PLLQ = 4;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
  huart2.Init.BaudRate = 115200;
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
  if (HAL_UART_Init(&huart2) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);

}

/* USER CODE BEGIN 4 */
void KalmanFilter()
{
	// Prediction
	X_Predict = A
}
/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
