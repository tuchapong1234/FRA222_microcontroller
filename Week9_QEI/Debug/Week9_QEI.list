
Week9_QEI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006388  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003f4  08006528  08006528  00016528  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800691c  0800691c  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  0800691c  0800691c  0001691c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006924  08006924  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006924  08006924  00016924  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006928  08006928  00016928  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0800692c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000134  200001e0  08006b08  000201e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000314  08006b08  00020314  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d663  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c16  00000000  00000000  0002d86f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c68  00000000  00000000  0002f488  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000bc0  00000000  00000000  000300f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016d63  00000000  00000000  00030cb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d3be  00000000  00000000  00047a13  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008f44e  00000000  00000000  00054dd1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e421f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000044e0  00000000  00000000  000e4270  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e0 	.word	0x200001e0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006510 	.word	0x08006510

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e4 	.word	0x200001e4
 80001dc:	08006510 	.word	0x08006510

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_frsub>:
 8000bb8:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000bbc:	e002      	b.n	8000bc4 <__addsf3>
 8000bbe:	bf00      	nop

08000bc0 <__aeabi_fsub>:
 8000bc0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000bc4 <__addsf3>:
 8000bc4:	0042      	lsls	r2, r0, #1
 8000bc6:	bf1f      	itttt	ne
 8000bc8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000bcc:	ea92 0f03 	teqne	r2, r3
 8000bd0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000bd4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bd8:	d06a      	beq.n	8000cb0 <__addsf3+0xec>
 8000bda:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000bde:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000be2:	bfc1      	itttt	gt
 8000be4:	18d2      	addgt	r2, r2, r3
 8000be6:	4041      	eorgt	r1, r0
 8000be8:	4048      	eorgt	r0, r1
 8000bea:	4041      	eorgt	r1, r0
 8000bec:	bfb8      	it	lt
 8000bee:	425b      	neglt	r3, r3
 8000bf0:	2b19      	cmp	r3, #25
 8000bf2:	bf88      	it	hi
 8000bf4:	4770      	bxhi	lr
 8000bf6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000bfa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bfe:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000c02:	bf18      	it	ne
 8000c04:	4240      	negne	r0, r0
 8000c06:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000c0a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000c0e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000c12:	bf18      	it	ne
 8000c14:	4249      	negne	r1, r1
 8000c16:	ea92 0f03 	teq	r2, r3
 8000c1a:	d03f      	beq.n	8000c9c <__addsf3+0xd8>
 8000c1c:	f1a2 0201 	sub.w	r2, r2, #1
 8000c20:	fa41 fc03 	asr.w	ip, r1, r3
 8000c24:	eb10 000c 	adds.w	r0, r0, ip
 8000c28:	f1c3 0320 	rsb	r3, r3, #32
 8000c2c:	fa01 f103 	lsl.w	r1, r1, r3
 8000c30:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c34:	d502      	bpl.n	8000c3c <__addsf3+0x78>
 8000c36:	4249      	negs	r1, r1
 8000c38:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c3c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000c40:	d313      	bcc.n	8000c6a <__addsf3+0xa6>
 8000c42:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000c46:	d306      	bcc.n	8000c56 <__addsf3+0x92>
 8000c48:	0840      	lsrs	r0, r0, #1
 8000c4a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c4e:	f102 0201 	add.w	r2, r2, #1
 8000c52:	2afe      	cmp	r2, #254	; 0xfe
 8000c54:	d251      	bcs.n	8000cfa <__addsf3+0x136>
 8000c56:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c5a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c5e:	bf08      	it	eq
 8000c60:	f020 0001 	biceq.w	r0, r0, #1
 8000c64:	ea40 0003 	orr.w	r0, r0, r3
 8000c68:	4770      	bx	lr
 8000c6a:	0049      	lsls	r1, r1, #1
 8000c6c:	eb40 0000 	adc.w	r0, r0, r0
 8000c70:	3a01      	subs	r2, #1
 8000c72:	bf28      	it	cs
 8000c74:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c78:	d2ed      	bcs.n	8000c56 <__addsf3+0x92>
 8000c7a:	fab0 fc80 	clz	ip, r0
 8000c7e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c82:	ebb2 020c 	subs.w	r2, r2, ip
 8000c86:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c8a:	bfaa      	itet	ge
 8000c8c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c90:	4252      	neglt	r2, r2
 8000c92:	4318      	orrge	r0, r3
 8000c94:	bfbc      	itt	lt
 8000c96:	40d0      	lsrlt	r0, r2
 8000c98:	4318      	orrlt	r0, r3
 8000c9a:	4770      	bx	lr
 8000c9c:	f092 0f00 	teq	r2, #0
 8000ca0:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000ca4:	bf06      	itte	eq
 8000ca6:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000caa:	3201      	addeq	r2, #1
 8000cac:	3b01      	subne	r3, #1
 8000cae:	e7b5      	b.n	8000c1c <__addsf3+0x58>
 8000cb0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000cb4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000cb8:	bf18      	it	ne
 8000cba:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000cbe:	d021      	beq.n	8000d04 <__addsf3+0x140>
 8000cc0:	ea92 0f03 	teq	r2, r3
 8000cc4:	d004      	beq.n	8000cd0 <__addsf3+0x10c>
 8000cc6:	f092 0f00 	teq	r2, #0
 8000cca:	bf08      	it	eq
 8000ccc:	4608      	moveq	r0, r1
 8000cce:	4770      	bx	lr
 8000cd0:	ea90 0f01 	teq	r0, r1
 8000cd4:	bf1c      	itt	ne
 8000cd6:	2000      	movne	r0, #0
 8000cd8:	4770      	bxne	lr
 8000cda:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000cde:	d104      	bne.n	8000cea <__addsf3+0x126>
 8000ce0:	0040      	lsls	r0, r0, #1
 8000ce2:	bf28      	it	cs
 8000ce4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000ce8:	4770      	bx	lr
 8000cea:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000cee:	bf3c      	itt	cc
 8000cf0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000cf4:	4770      	bxcc	lr
 8000cf6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000cfa:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cfe:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d02:	4770      	bx	lr
 8000d04:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000d08:	bf16      	itet	ne
 8000d0a:	4608      	movne	r0, r1
 8000d0c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000d10:	4601      	movne	r1, r0
 8000d12:	0242      	lsls	r2, r0, #9
 8000d14:	bf06      	itte	eq
 8000d16:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000d1a:	ea90 0f01 	teqeq	r0, r1
 8000d1e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000d22:	4770      	bx	lr

08000d24 <__aeabi_ui2f>:
 8000d24:	f04f 0300 	mov.w	r3, #0
 8000d28:	e004      	b.n	8000d34 <__aeabi_i2f+0x8>
 8000d2a:	bf00      	nop

08000d2c <__aeabi_i2f>:
 8000d2c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000d30:	bf48      	it	mi
 8000d32:	4240      	negmi	r0, r0
 8000d34:	ea5f 0c00 	movs.w	ip, r0
 8000d38:	bf08      	it	eq
 8000d3a:	4770      	bxeq	lr
 8000d3c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000d40:	4601      	mov	r1, r0
 8000d42:	f04f 0000 	mov.w	r0, #0
 8000d46:	e01c      	b.n	8000d82 <__aeabi_l2f+0x2a>

08000d48 <__aeabi_ul2f>:
 8000d48:	ea50 0201 	orrs.w	r2, r0, r1
 8000d4c:	bf08      	it	eq
 8000d4e:	4770      	bxeq	lr
 8000d50:	f04f 0300 	mov.w	r3, #0
 8000d54:	e00a      	b.n	8000d6c <__aeabi_l2f+0x14>
 8000d56:	bf00      	nop

08000d58 <__aeabi_l2f>:
 8000d58:	ea50 0201 	orrs.w	r2, r0, r1
 8000d5c:	bf08      	it	eq
 8000d5e:	4770      	bxeq	lr
 8000d60:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d64:	d502      	bpl.n	8000d6c <__aeabi_l2f+0x14>
 8000d66:	4240      	negs	r0, r0
 8000d68:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d6c:	ea5f 0c01 	movs.w	ip, r1
 8000d70:	bf02      	ittt	eq
 8000d72:	4684      	moveq	ip, r0
 8000d74:	4601      	moveq	r1, r0
 8000d76:	2000      	moveq	r0, #0
 8000d78:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d7c:	bf08      	it	eq
 8000d7e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d82:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d86:	fabc f28c 	clz	r2, ip
 8000d8a:	3a08      	subs	r2, #8
 8000d8c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d90:	db10      	blt.n	8000db4 <__aeabi_l2f+0x5c>
 8000d92:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d96:	4463      	add	r3, ip
 8000d98:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d9c:	f1c2 0220 	rsb	r2, r2, #32
 8000da0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000da4:	fa20 f202 	lsr.w	r2, r0, r2
 8000da8:	eb43 0002 	adc.w	r0, r3, r2
 8000dac:	bf08      	it	eq
 8000dae:	f020 0001 	biceq.w	r0, r0, #1
 8000db2:	4770      	bx	lr
 8000db4:	f102 0220 	add.w	r2, r2, #32
 8000db8:	fa01 fc02 	lsl.w	ip, r1, r2
 8000dbc:	f1c2 0220 	rsb	r2, r2, #32
 8000dc0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000dc4:	fa21 f202 	lsr.w	r2, r1, r2
 8000dc8:	eb43 0002 	adc.w	r0, r3, r2
 8000dcc:	bf08      	it	eq
 8000dce:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000dd2:	4770      	bx	lr

08000dd4 <__aeabi_uldivmod>:
 8000dd4:	b953      	cbnz	r3, 8000dec <__aeabi_uldivmod+0x18>
 8000dd6:	b94a      	cbnz	r2, 8000dec <__aeabi_uldivmod+0x18>
 8000dd8:	2900      	cmp	r1, #0
 8000dda:	bf08      	it	eq
 8000ddc:	2800      	cmpeq	r0, #0
 8000dde:	bf1c      	itt	ne
 8000de0:	f04f 31ff 	movne.w	r1, #4294967295
 8000de4:	f04f 30ff 	movne.w	r0, #4294967295
 8000de8:	f000 b974 	b.w	80010d4 <__aeabi_idiv0>
 8000dec:	f1ad 0c08 	sub.w	ip, sp, #8
 8000df0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000df4:	f000 f806 	bl	8000e04 <__udivmoddi4>
 8000df8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000dfc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000e00:	b004      	add	sp, #16
 8000e02:	4770      	bx	lr

08000e04 <__udivmoddi4>:
 8000e04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000e08:	9d08      	ldr	r5, [sp, #32]
 8000e0a:	4604      	mov	r4, r0
 8000e0c:	468e      	mov	lr, r1
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d14d      	bne.n	8000eae <__udivmoddi4+0xaa>
 8000e12:	428a      	cmp	r2, r1
 8000e14:	4694      	mov	ip, r2
 8000e16:	d969      	bls.n	8000eec <__udivmoddi4+0xe8>
 8000e18:	fab2 f282 	clz	r2, r2
 8000e1c:	b152      	cbz	r2, 8000e34 <__udivmoddi4+0x30>
 8000e1e:	fa01 f302 	lsl.w	r3, r1, r2
 8000e22:	f1c2 0120 	rsb	r1, r2, #32
 8000e26:	fa20 f101 	lsr.w	r1, r0, r1
 8000e2a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e2e:	ea41 0e03 	orr.w	lr, r1, r3
 8000e32:	4094      	lsls	r4, r2
 8000e34:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e38:	0c21      	lsrs	r1, r4, #16
 8000e3a:	fbbe f6f8 	udiv	r6, lr, r8
 8000e3e:	fa1f f78c 	uxth.w	r7, ip
 8000e42:	fb08 e316 	mls	r3, r8, r6, lr
 8000e46:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000e4a:	fb06 f107 	mul.w	r1, r6, r7
 8000e4e:	4299      	cmp	r1, r3
 8000e50:	d90a      	bls.n	8000e68 <__udivmoddi4+0x64>
 8000e52:	eb1c 0303 	adds.w	r3, ip, r3
 8000e56:	f106 30ff 	add.w	r0, r6, #4294967295
 8000e5a:	f080 811f 	bcs.w	800109c <__udivmoddi4+0x298>
 8000e5e:	4299      	cmp	r1, r3
 8000e60:	f240 811c 	bls.w	800109c <__udivmoddi4+0x298>
 8000e64:	3e02      	subs	r6, #2
 8000e66:	4463      	add	r3, ip
 8000e68:	1a5b      	subs	r3, r3, r1
 8000e6a:	b2a4      	uxth	r4, r4
 8000e6c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e70:	fb08 3310 	mls	r3, r8, r0, r3
 8000e74:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e78:	fb00 f707 	mul.w	r7, r0, r7
 8000e7c:	42a7      	cmp	r7, r4
 8000e7e:	d90a      	bls.n	8000e96 <__udivmoddi4+0x92>
 8000e80:	eb1c 0404 	adds.w	r4, ip, r4
 8000e84:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e88:	f080 810a 	bcs.w	80010a0 <__udivmoddi4+0x29c>
 8000e8c:	42a7      	cmp	r7, r4
 8000e8e:	f240 8107 	bls.w	80010a0 <__udivmoddi4+0x29c>
 8000e92:	4464      	add	r4, ip
 8000e94:	3802      	subs	r0, #2
 8000e96:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e9a:	1be4      	subs	r4, r4, r7
 8000e9c:	2600      	movs	r6, #0
 8000e9e:	b11d      	cbz	r5, 8000ea8 <__udivmoddi4+0xa4>
 8000ea0:	40d4      	lsrs	r4, r2
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	e9c5 4300 	strd	r4, r3, [r5]
 8000ea8:	4631      	mov	r1, r6
 8000eaa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eae:	428b      	cmp	r3, r1
 8000eb0:	d909      	bls.n	8000ec6 <__udivmoddi4+0xc2>
 8000eb2:	2d00      	cmp	r5, #0
 8000eb4:	f000 80ef 	beq.w	8001096 <__udivmoddi4+0x292>
 8000eb8:	2600      	movs	r6, #0
 8000eba:	e9c5 0100 	strd	r0, r1, [r5]
 8000ebe:	4630      	mov	r0, r6
 8000ec0:	4631      	mov	r1, r6
 8000ec2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ec6:	fab3 f683 	clz	r6, r3
 8000eca:	2e00      	cmp	r6, #0
 8000ecc:	d14a      	bne.n	8000f64 <__udivmoddi4+0x160>
 8000ece:	428b      	cmp	r3, r1
 8000ed0:	d302      	bcc.n	8000ed8 <__udivmoddi4+0xd4>
 8000ed2:	4282      	cmp	r2, r0
 8000ed4:	f200 80f9 	bhi.w	80010ca <__udivmoddi4+0x2c6>
 8000ed8:	1a84      	subs	r4, r0, r2
 8000eda:	eb61 0303 	sbc.w	r3, r1, r3
 8000ede:	2001      	movs	r0, #1
 8000ee0:	469e      	mov	lr, r3
 8000ee2:	2d00      	cmp	r5, #0
 8000ee4:	d0e0      	beq.n	8000ea8 <__udivmoddi4+0xa4>
 8000ee6:	e9c5 4e00 	strd	r4, lr, [r5]
 8000eea:	e7dd      	b.n	8000ea8 <__udivmoddi4+0xa4>
 8000eec:	b902      	cbnz	r2, 8000ef0 <__udivmoddi4+0xec>
 8000eee:	deff      	udf	#255	; 0xff
 8000ef0:	fab2 f282 	clz	r2, r2
 8000ef4:	2a00      	cmp	r2, #0
 8000ef6:	f040 8092 	bne.w	800101e <__udivmoddi4+0x21a>
 8000efa:	eba1 010c 	sub.w	r1, r1, ip
 8000efe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f02:	fa1f fe8c 	uxth.w	lr, ip
 8000f06:	2601      	movs	r6, #1
 8000f08:	0c20      	lsrs	r0, r4, #16
 8000f0a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000f0e:	fb07 1113 	mls	r1, r7, r3, r1
 8000f12:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000f16:	fb0e f003 	mul.w	r0, lr, r3
 8000f1a:	4288      	cmp	r0, r1
 8000f1c:	d908      	bls.n	8000f30 <__udivmoddi4+0x12c>
 8000f1e:	eb1c 0101 	adds.w	r1, ip, r1
 8000f22:	f103 38ff 	add.w	r8, r3, #4294967295
 8000f26:	d202      	bcs.n	8000f2e <__udivmoddi4+0x12a>
 8000f28:	4288      	cmp	r0, r1
 8000f2a:	f200 80cb 	bhi.w	80010c4 <__udivmoddi4+0x2c0>
 8000f2e:	4643      	mov	r3, r8
 8000f30:	1a09      	subs	r1, r1, r0
 8000f32:	b2a4      	uxth	r4, r4
 8000f34:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f38:	fb07 1110 	mls	r1, r7, r0, r1
 8000f3c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000f40:	fb0e fe00 	mul.w	lr, lr, r0
 8000f44:	45a6      	cmp	lr, r4
 8000f46:	d908      	bls.n	8000f5a <__udivmoddi4+0x156>
 8000f48:	eb1c 0404 	adds.w	r4, ip, r4
 8000f4c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f50:	d202      	bcs.n	8000f58 <__udivmoddi4+0x154>
 8000f52:	45a6      	cmp	lr, r4
 8000f54:	f200 80bb 	bhi.w	80010ce <__udivmoddi4+0x2ca>
 8000f58:	4608      	mov	r0, r1
 8000f5a:	eba4 040e 	sub.w	r4, r4, lr
 8000f5e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000f62:	e79c      	b.n	8000e9e <__udivmoddi4+0x9a>
 8000f64:	f1c6 0720 	rsb	r7, r6, #32
 8000f68:	40b3      	lsls	r3, r6
 8000f6a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000f6e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000f72:	fa20 f407 	lsr.w	r4, r0, r7
 8000f76:	fa01 f306 	lsl.w	r3, r1, r6
 8000f7a:	431c      	orrs	r4, r3
 8000f7c:	40f9      	lsrs	r1, r7
 8000f7e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000f82:	fa00 f306 	lsl.w	r3, r0, r6
 8000f86:	fbb1 f8f9 	udiv	r8, r1, r9
 8000f8a:	0c20      	lsrs	r0, r4, #16
 8000f8c:	fa1f fe8c 	uxth.w	lr, ip
 8000f90:	fb09 1118 	mls	r1, r9, r8, r1
 8000f94:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000f98:	fb08 f00e 	mul.w	r0, r8, lr
 8000f9c:	4288      	cmp	r0, r1
 8000f9e:	fa02 f206 	lsl.w	r2, r2, r6
 8000fa2:	d90b      	bls.n	8000fbc <__udivmoddi4+0x1b8>
 8000fa4:	eb1c 0101 	adds.w	r1, ip, r1
 8000fa8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000fac:	f080 8088 	bcs.w	80010c0 <__udivmoddi4+0x2bc>
 8000fb0:	4288      	cmp	r0, r1
 8000fb2:	f240 8085 	bls.w	80010c0 <__udivmoddi4+0x2bc>
 8000fb6:	f1a8 0802 	sub.w	r8, r8, #2
 8000fba:	4461      	add	r1, ip
 8000fbc:	1a09      	subs	r1, r1, r0
 8000fbe:	b2a4      	uxth	r4, r4
 8000fc0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000fc4:	fb09 1110 	mls	r1, r9, r0, r1
 8000fc8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000fcc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000fd0:	458e      	cmp	lr, r1
 8000fd2:	d908      	bls.n	8000fe6 <__udivmoddi4+0x1e2>
 8000fd4:	eb1c 0101 	adds.w	r1, ip, r1
 8000fd8:	f100 34ff 	add.w	r4, r0, #4294967295
 8000fdc:	d26c      	bcs.n	80010b8 <__udivmoddi4+0x2b4>
 8000fde:	458e      	cmp	lr, r1
 8000fe0:	d96a      	bls.n	80010b8 <__udivmoddi4+0x2b4>
 8000fe2:	3802      	subs	r0, #2
 8000fe4:	4461      	add	r1, ip
 8000fe6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000fea:	fba0 9402 	umull	r9, r4, r0, r2
 8000fee:	eba1 010e 	sub.w	r1, r1, lr
 8000ff2:	42a1      	cmp	r1, r4
 8000ff4:	46c8      	mov	r8, r9
 8000ff6:	46a6      	mov	lr, r4
 8000ff8:	d356      	bcc.n	80010a8 <__udivmoddi4+0x2a4>
 8000ffa:	d053      	beq.n	80010a4 <__udivmoddi4+0x2a0>
 8000ffc:	b15d      	cbz	r5, 8001016 <__udivmoddi4+0x212>
 8000ffe:	ebb3 0208 	subs.w	r2, r3, r8
 8001002:	eb61 010e 	sbc.w	r1, r1, lr
 8001006:	fa01 f707 	lsl.w	r7, r1, r7
 800100a:	fa22 f306 	lsr.w	r3, r2, r6
 800100e:	40f1      	lsrs	r1, r6
 8001010:	431f      	orrs	r7, r3
 8001012:	e9c5 7100 	strd	r7, r1, [r5]
 8001016:	2600      	movs	r6, #0
 8001018:	4631      	mov	r1, r6
 800101a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800101e:	f1c2 0320 	rsb	r3, r2, #32
 8001022:	40d8      	lsrs	r0, r3
 8001024:	fa0c fc02 	lsl.w	ip, ip, r2
 8001028:	fa21 f303 	lsr.w	r3, r1, r3
 800102c:	4091      	lsls	r1, r2
 800102e:	4301      	orrs	r1, r0
 8001030:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8001034:	fa1f fe8c 	uxth.w	lr, ip
 8001038:	fbb3 f0f7 	udiv	r0, r3, r7
 800103c:	fb07 3610 	mls	r6, r7, r0, r3
 8001040:	0c0b      	lsrs	r3, r1, #16
 8001042:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8001046:	fb00 f60e 	mul.w	r6, r0, lr
 800104a:	429e      	cmp	r6, r3
 800104c:	fa04 f402 	lsl.w	r4, r4, r2
 8001050:	d908      	bls.n	8001064 <__udivmoddi4+0x260>
 8001052:	eb1c 0303 	adds.w	r3, ip, r3
 8001056:	f100 38ff 	add.w	r8, r0, #4294967295
 800105a:	d22f      	bcs.n	80010bc <__udivmoddi4+0x2b8>
 800105c:	429e      	cmp	r6, r3
 800105e:	d92d      	bls.n	80010bc <__udivmoddi4+0x2b8>
 8001060:	3802      	subs	r0, #2
 8001062:	4463      	add	r3, ip
 8001064:	1b9b      	subs	r3, r3, r6
 8001066:	b289      	uxth	r1, r1
 8001068:	fbb3 f6f7 	udiv	r6, r3, r7
 800106c:	fb07 3316 	mls	r3, r7, r6, r3
 8001070:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8001074:	fb06 f30e 	mul.w	r3, r6, lr
 8001078:	428b      	cmp	r3, r1
 800107a:	d908      	bls.n	800108e <__udivmoddi4+0x28a>
 800107c:	eb1c 0101 	adds.w	r1, ip, r1
 8001080:	f106 38ff 	add.w	r8, r6, #4294967295
 8001084:	d216      	bcs.n	80010b4 <__udivmoddi4+0x2b0>
 8001086:	428b      	cmp	r3, r1
 8001088:	d914      	bls.n	80010b4 <__udivmoddi4+0x2b0>
 800108a:	3e02      	subs	r6, #2
 800108c:	4461      	add	r1, ip
 800108e:	1ac9      	subs	r1, r1, r3
 8001090:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8001094:	e738      	b.n	8000f08 <__udivmoddi4+0x104>
 8001096:	462e      	mov	r6, r5
 8001098:	4628      	mov	r0, r5
 800109a:	e705      	b.n	8000ea8 <__udivmoddi4+0xa4>
 800109c:	4606      	mov	r6, r0
 800109e:	e6e3      	b.n	8000e68 <__udivmoddi4+0x64>
 80010a0:	4618      	mov	r0, r3
 80010a2:	e6f8      	b.n	8000e96 <__udivmoddi4+0x92>
 80010a4:	454b      	cmp	r3, r9
 80010a6:	d2a9      	bcs.n	8000ffc <__udivmoddi4+0x1f8>
 80010a8:	ebb9 0802 	subs.w	r8, r9, r2
 80010ac:	eb64 0e0c 	sbc.w	lr, r4, ip
 80010b0:	3801      	subs	r0, #1
 80010b2:	e7a3      	b.n	8000ffc <__udivmoddi4+0x1f8>
 80010b4:	4646      	mov	r6, r8
 80010b6:	e7ea      	b.n	800108e <__udivmoddi4+0x28a>
 80010b8:	4620      	mov	r0, r4
 80010ba:	e794      	b.n	8000fe6 <__udivmoddi4+0x1e2>
 80010bc:	4640      	mov	r0, r8
 80010be:	e7d1      	b.n	8001064 <__udivmoddi4+0x260>
 80010c0:	46d0      	mov	r8, sl
 80010c2:	e77b      	b.n	8000fbc <__udivmoddi4+0x1b8>
 80010c4:	3b02      	subs	r3, #2
 80010c6:	4461      	add	r1, ip
 80010c8:	e732      	b.n	8000f30 <__udivmoddi4+0x12c>
 80010ca:	4630      	mov	r0, r6
 80010cc:	e709      	b.n	8000ee2 <__udivmoddi4+0xde>
 80010ce:	4464      	add	r4, ip
 80010d0:	3802      	subs	r0, #2
 80010d2:	e742      	b.n	8000f5a <__udivmoddi4+0x156>

080010d4 <__aeabi_idiv0>:
 80010d4:	4770      	bx	lr
 80010d6:	bf00      	nop

080010d8 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80010d8:	b480      	push	{r7}
 80010da:	b083      	sub	sp, #12
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80010e0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80010e4:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 80010e8:	f003 0301 	and.w	r3, r3, #1
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d013      	beq.n	8001118 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80010f0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80010f4:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80010f8:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d00b      	beq.n	8001118 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8001100:	e000      	b.n	8001104 <ITM_SendChar+0x2c>
    {
      __NOP();
 8001102:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8001104:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	2b00      	cmp	r3, #0
 800110c:	d0f9      	beq.n	8001102 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800110e:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001112:	687a      	ldr	r2, [r7, #4]
 8001114:	b2d2      	uxtb	r2, r2
 8001116:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8001118:	687b      	ldr	r3, [r7, #4]
}
 800111a:	4618      	mov	r0, r3
 800111c:	370c      	adds	r7, #12
 800111e:	46bd      	mov	sp, r7
 8001120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001124:	4770      	bx	lr
	...

08001128 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001128:	b5b0      	push	{r4, r5, r7, lr}
 800112a:	b082      	sub	sp, #8
 800112c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800112e:	f000 fc91 	bl	8001a54 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001132:	f000 f82f 	bl	8001194 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001136:	f000 f963 	bl	8001400 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800113a:	f000 f937 	bl	80013ac <MX_USART2_UART_Init>
  MX_TIM3_Init();
 800113e:	f000 f893 	bl	8001268 <MX_TIM3_Init>
  MX_TIM5_Init();
 8001142:	f000 f8e5 	bl	8001310 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_1|TIM_CHANNEL_2);
 8001146:	2104      	movs	r1, #4
 8001148:	480f      	ldr	r0, [pc, #60]	; (8001188 <main+0x60>)
 800114a:	f001 fd8d 	bl	8002c68 <HAL_TIM_Encoder_Start>
  HAL_TIM_Base_Start(&htim5);
 800114e:	480f      	ldr	r0, [pc, #60]	; (800118c <main+0x64>)
 8001150:	f001 fc8a 	bl	8002a68 <HAL_TIM_Base_Start>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  static uint32_t timestamp =0;
	  int64_t currentTime = micros();
 8001154:	f000 fa64 	bl	8001620 <micros>
 8001158:	4602      	mov	r2, r0
 800115a:	460b      	mov	r3, r1
 800115c:	e9c7 2300 	strd	r2, r3, [r7]
	  if(currentTime>timestamp) // 10 Hz
 8001160:	4b0b      	ldr	r3, [pc, #44]	; (8001190 <main+0x68>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	2200      	movs	r2, #0
 8001166:	461c      	mov	r4, r3
 8001168:	4615      	mov	r5, r2
 800116a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800116e:	4294      	cmp	r4, r2
 8001170:	eb75 0303 	sbcs.w	r3, r5, r3
 8001174:	daee      	bge.n	8001154 <main+0x2c>
	  {
		  timestamp = currentTime + 100000;
 8001176:	683b      	ldr	r3, [r7, #0]
 8001178:	f503 33c3 	add.w	r3, r3, #99840	; 0x18600
 800117c:	33a0      	adds	r3, #160	; 0xa0
 800117e:	4a04      	ldr	r2, [pc, #16]	; (8001190 <main+0x68>)
 8001180:	6013      	str	r3, [r2, #0]
		  QEIEncoderPositionVelocity_Update();
 8001182:	f000 f9c7 	bl	8001514 <QEIEncoderPositionVelocity_Update>
  {
 8001186:	e7e5      	b.n	8001154 <main+0x2c>
 8001188:	200001fc 	.word	0x200001fc
 800118c:	20000244 	.word	0x20000244
 8001190:	200002f8 	.word	0x200002f8

08001194 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b094      	sub	sp, #80	; 0x50
 8001198:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800119a:	f107 0320 	add.w	r3, r7, #32
 800119e:	2230      	movs	r2, #48	; 0x30
 80011a0:	2100      	movs	r1, #0
 80011a2:	4618      	mov	r0, r3
 80011a4:	f002 fc94 	bl	8003ad0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011a8:	f107 030c 	add.w	r3, r7, #12
 80011ac:	2200      	movs	r2, #0
 80011ae:	601a      	str	r2, [r3, #0]
 80011b0:	605a      	str	r2, [r3, #4]
 80011b2:	609a      	str	r2, [r3, #8]
 80011b4:	60da      	str	r2, [r3, #12]
 80011b6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80011b8:	2300      	movs	r3, #0
 80011ba:	60bb      	str	r3, [r7, #8]
 80011bc:	4b28      	ldr	r3, [pc, #160]	; (8001260 <SystemClock_Config+0xcc>)
 80011be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011c0:	4a27      	ldr	r2, [pc, #156]	; (8001260 <SystemClock_Config+0xcc>)
 80011c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011c6:	6413      	str	r3, [r2, #64]	; 0x40
 80011c8:	4b25      	ldr	r3, [pc, #148]	; (8001260 <SystemClock_Config+0xcc>)
 80011ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011d0:	60bb      	str	r3, [r7, #8]
 80011d2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80011d4:	2300      	movs	r3, #0
 80011d6:	607b      	str	r3, [r7, #4]
 80011d8:	4b22      	ldr	r3, [pc, #136]	; (8001264 <SystemClock_Config+0xd0>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	4a21      	ldr	r2, [pc, #132]	; (8001264 <SystemClock_Config+0xd0>)
 80011de:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80011e2:	6013      	str	r3, [r2, #0]
 80011e4:	4b1f      	ldr	r3, [pc, #124]	; (8001264 <SystemClock_Config+0xd0>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80011ec:	607b      	str	r3, [r7, #4]
 80011ee:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80011f0:	2302      	movs	r3, #2
 80011f2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80011f4:	2301      	movs	r3, #1
 80011f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80011f8:	2310      	movs	r3, #16
 80011fa:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011fc:	2302      	movs	r3, #2
 80011fe:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001200:	2300      	movs	r3, #0
 8001202:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001204:	2310      	movs	r3, #16
 8001206:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001208:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800120c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800120e:	2304      	movs	r3, #4
 8001210:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001212:	2304      	movs	r3, #4
 8001214:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001216:	f107 0320 	add.w	r3, r7, #32
 800121a:	4618      	mov	r0, r3
 800121c:	f000 ff3c 	bl	8002098 <HAL_RCC_OscConfig>
 8001220:	4603      	mov	r3, r0
 8001222:	2b00      	cmp	r3, #0
 8001224:	d001      	beq.n	800122a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001226:	f000 fa15 	bl	8001654 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800122a:	230f      	movs	r3, #15
 800122c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800122e:	2302      	movs	r3, #2
 8001230:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001232:	2300      	movs	r3, #0
 8001234:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001236:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800123a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800123c:	2300      	movs	r3, #0
 800123e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001240:	f107 030c 	add.w	r3, r7, #12
 8001244:	2102      	movs	r1, #2
 8001246:	4618      	mov	r0, r3
 8001248:	f001 f99e 	bl	8002588 <HAL_RCC_ClockConfig>
 800124c:	4603      	mov	r3, r0
 800124e:	2b00      	cmp	r3, #0
 8001250:	d001      	beq.n	8001256 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001252:	f000 f9ff 	bl	8001654 <Error_Handler>
  }
}
 8001256:	bf00      	nop
 8001258:	3750      	adds	r7, #80	; 0x50
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}
 800125e:	bf00      	nop
 8001260:	40023800 	.word	0x40023800
 8001264:	40007000 	.word	0x40007000

08001268 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b08c      	sub	sp, #48	; 0x30
 800126c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800126e:	f107 030c 	add.w	r3, r7, #12
 8001272:	2224      	movs	r2, #36	; 0x24
 8001274:	2100      	movs	r1, #0
 8001276:	4618      	mov	r0, r3
 8001278:	f002 fc2a 	bl	8003ad0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800127c:	1d3b      	adds	r3, r7, #4
 800127e:	2200      	movs	r2, #0
 8001280:	601a      	str	r2, [r3, #0]
 8001282:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001284:	4b20      	ldr	r3, [pc, #128]	; (8001308 <MX_TIM3_Init+0xa0>)
 8001286:	4a21      	ldr	r2, [pc, #132]	; (800130c <MX_TIM3_Init+0xa4>)
 8001288:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800128a:	4b1f      	ldr	r3, [pc, #124]	; (8001308 <MX_TIM3_Init+0xa0>)
 800128c:	2200      	movs	r2, #0
 800128e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001290:	4b1d      	ldr	r3, [pc, #116]	; (8001308 <MX_TIM3_Init+0xa0>)
 8001292:	2200      	movs	r2, #0
 8001294:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = QEI_PERIOD-1;
 8001296:	4b1c      	ldr	r3, [pc, #112]	; (8001308 <MX_TIM3_Init+0xa0>)
 8001298:	f64f 32ff 	movw	r2, #64511	; 0xfbff
 800129c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800129e:	4b1a      	ldr	r3, [pc, #104]	; (8001308 <MX_TIM3_Init+0xa0>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012a4:	4b18      	ldr	r3, [pc, #96]	; (8001308 <MX_TIM3_Init+0xa0>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80012aa:	2303      	movs	r3, #3
 80012ac:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80012ae:	2300      	movs	r3, #0
 80012b0:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80012b2:	2301      	movs	r3, #1
 80012b4:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80012b6:	2300      	movs	r3, #0
 80012b8:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80012ba:	2300      	movs	r3, #0
 80012bc:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80012be:	2300      	movs	r3, #0
 80012c0:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80012c2:	2301      	movs	r3, #1
 80012c4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80012c6:	2300      	movs	r3, #0
 80012c8:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80012ca:	2300      	movs	r3, #0
 80012cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80012ce:	f107 030c 	add.w	r3, r7, #12
 80012d2:	4619      	mov	r1, r3
 80012d4:	480c      	ldr	r0, [pc, #48]	; (8001308 <MX_TIM3_Init+0xa0>)
 80012d6:	f001 fc21 	bl	8002b1c <HAL_TIM_Encoder_Init>
 80012da:	4603      	mov	r3, r0
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d001      	beq.n	80012e4 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 80012e0:	f000 f9b8 	bl	8001654 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012e4:	2300      	movs	r3, #0
 80012e6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012e8:	2300      	movs	r3, #0
 80012ea:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80012ec:	1d3b      	adds	r3, r7, #4
 80012ee:	4619      	mov	r1, r3
 80012f0:	4805      	ldr	r0, [pc, #20]	; (8001308 <MX_TIM3_Init+0xa0>)
 80012f2:	f002 f87f 	bl	80033f4 <HAL_TIMEx_MasterConfigSynchronization>
 80012f6:	4603      	mov	r3, r0
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d001      	beq.n	8001300 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 80012fc:	f000 f9aa 	bl	8001654 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001300:	bf00      	nop
 8001302:	3730      	adds	r7, #48	; 0x30
 8001304:	46bd      	mov	sp, r7
 8001306:	bd80      	pop	{r7, pc}
 8001308:	200001fc 	.word	0x200001fc
 800130c:	40000400 	.word	0x40000400

08001310 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b086      	sub	sp, #24
 8001314:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001316:	f107 0308 	add.w	r3, r7, #8
 800131a:	2200      	movs	r2, #0
 800131c:	601a      	str	r2, [r3, #0]
 800131e:	605a      	str	r2, [r3, #4]
 8001320:	609a      	str	r2, [r3, #8]
 8001322:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001324:	463b      	mov	r3, r7
 8001326:	2200      	movs	r2, #0
 8001328:	601a      	str	r2, [r3, #0]
 800132a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800132c:	4b1d      	ldr	r3, [pc, #116]	; (80013a4 <MX_TIM5_Init+0x94>)
 800132e:	4a1e      	ldr	r2, [pc, #120]	; (80013a8 <MX_TIM5_Init+0x98>)
 8001330:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 83;
 8001332:	4b1c      	ldr	r3, [pc, #112]	; (80013a4 <MX_TIM5_Init+0x94>)
 8001334:	2253      	movs	r2, #83	; 0x53
 8001336:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001338:	4b1a      	ldr	r3, [pc, #104]	; (80013a4 <MX_TIM5_Init+0x94>)
 800133a:	2200      	movs	r2, #0
 800133c:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 800133e:	4b19      	ldr	r3, [pc, #100]	; (80013a4 <MX_TIM5_Init+0x94>)
 8001340:	f04f 32ff 	mov.w	r2, #4294967295
 8001344:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001346:	4b17      	ldr	r3, [pc, #92]	; (80013a4 <MX_TIM5_Init+0x94>)
 8001348:	2200      	movs	r2, #0
 800134a:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800134c:	4b15      	ldr	r3, [pc, #84]	; (80013a4 <MX_TIM5_Init+0x94>)
 800134e:	2200      	movs	r2, #0
 8001350:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001352:	4814      	ldr	r0, [pc, #80]	; (80013a4 <MX_TIM5_Init+0x94>)
 8001354:	f001 fb38 	bl	80029c8 <HAL_TIM_Base_Init>
 8001358:	4603      	mov	r3, r0
 800135a:	2b00      	cmp	r3, #0
 800135c:	d001      	beq.n	8001362 <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 800135e:	f000 f979 	bl	8001654 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001362:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001366:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001368:	f107 0308 	add.w	r3, r7, #8
 800136c:	4619      	mov	r1, r3
 800136e:	480d      	ldr	r0, [pc, #52]	; (80013a4 <MX_TIM5_Init+0x94>)
 8001370:	f001 fe10 	bl	8002f94 <HAL_TIM_ConfigClockSource>
 8001374:	4603      	mov	r3, r0
 8001376:	2b00      	cmp	r3, #0
 8001378:	d001      	beq.n	800137e <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 800137a:	f000 f96b 	bl	8001654 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800137e:	2300      	movs	r3, #0
 8001380:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001382:	2300      	movs	r3, #0
 8001384:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001386:	463b      	mov	r3, r7
 8001388:	4619      	mov	r1, r3
 800138a:	4806      	ldr	r0, [pc, #24]	; (80013a4 <MX_TIM5_Init+0x94>)
 800138c:	f002 f832 	bl	80033f4 <HAL_TIMEx_MasterConfigSynchronization>
 8001390:	4603      	mov	r3, r0
 8001392:	2b00      	cmp	r3, #0
 8001394:	d001      	beq.n	800139a <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 8001396:	f000 f95d 	bl	8001654 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 800139a:	bf00      	nop
 800139c:	3718      	adds	r7, #24
 800139e:	46bd      	mov	sp, r7
 80013a0:	bd80      	pop	{r7, pc}
 80013a2:	bf00      	nop
 80013a4:	20000244 	.word	0x20000244
 80013a8:	40000c00 	.word	0x40000c00

080013ac <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80013b0:	4b11      	ldr	r3, [pc, #68]	; (80013f8 <MX_USART2_UART_Init+0x4c>)
 80013b2:	4a12      	ldr	r2, [pc, #72]	; (80013fc <MX_USART2_UART_Init+0x50>)
 80013b4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80013b6:	4b10      	ldr	r3, [pc, #64]	; (80013f8 <MX_USART2_UART_Init+0x4c>)
 80013b8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80013bc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80013be:	4b0e      	ldr	r3, [pc, #56]	; (80013f8 <MX_USART2_UART_Init+0x4c>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80013c4:	4b0c      	ldr	r3, [pc, #48]	; (80013f8 <MX_USART2_UART_Init+0x4c>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80013ca:	4b0b      	ldr	r3, [pc, #44]	; (80013f8 <MX_USART2_UART_Init+0x4c>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80013d0:	4b09      	ldr	r3, [pc, #36]	; (80013f8 <MX_USART2_UART_Init+0x4c>)
 80013d2:	220c      	movs	r2, #12
 80013d4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013d6:	4b08      	ldr	r3, [pc, #32]	; (80013f8 <MX_USART2_UART_Init+0x4c>)
 80013d8:	2200      	movs	r2, #0
 80013da:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80013dc:	4b06      	ldr	r3, [pc, #24]	; (80013f8 <MX_USART2_UART_Init+0x4c>)
 80013de:	2200      	movs	r2, #0
 80013e0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80013e2:	4805      	ldr	r0, [pc, #20]	; (80013f8 <MX_USART2_UART_Init+0x4c>)
 80013e4:	f002 f888 	bl	80034f8 <HAL_UART_Init>
 80013e8:	4603      	mov	r3, r0
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d001      	beq.n	80013f2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80013ee:	f000 f931 	bl	8001654 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80013f2:	bf00      	nop
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	bf00      	nop
 80013f8:	2000028c 	.word	0x2000028c
 80013fc:	40004400 	.word	0x40004400

08001400 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b08a      	sub	sp, #40	; 0x28
 8001404:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001406:	f107 0314 	add.w	r3, r7, #20
 800140a:	2200      	movs	r2, #0
 800140c:	601a      	str	r2, [r3, #0]
 800140e:	605a      	str	r2, [r3, #4]
 8001410:	609a      	str	r2, [r3, #8]
 8001412:	60da      	str	r2, [r3, #12]
 8001414:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001416:	2300      	movs	r3, #0
 8001418:	613b      	str	r3, [r7, #16]
 800141a:	4b2d      	ldr	r3, [pc, #180]	; (80014d0 <MX_GPIO_Init+0xd0>)
 800141c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800141e:	4a2c      	ldr	r2, [pc, #176]	; (80014d0 <MX_GPIO_Init+0xd0>)
 8001420:	f043 0304 	orr.w	r3, r3, #4
 8001424:	6313      	str	r3, [r2, #48]	; 0x30
 8001426:	4b2a      	ldr	r3, [pc, #168]	; (80014d0 <MX_GPIO_Init+0xd0>)
 8001428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800142a:	f003 0304 	and.w	r3, r3, #4
 800142e:	613b      	str	r3, [r7, #16]
 8001430:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001432:	2300      	movs	r3, #0
 8001434:	60fb      	str	r3, [r7, #12]
 8001436:	4b26      	ldr	r3, [pc, #152]	; (80014d0 <MX_GPIO_Init+0xd0>)
 8001438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800143a:	4a25      	ldr	r2, [pc, #148]	; (80014d0 <MX_GPIO_Init+0xd0>)
 800143c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001440:	6313      	str	r3, [r2, #48]	; 0x30
 8001442:	4b23      	ldr	r3, [pc, #140]	; (80014d0 <MX_GPIO_Init+0xd0>)
 8001444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001446:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800144a:	60fb      	str	r3, [r7, #12]
 800144c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800144e:	2300      	movs	r3, #0
 8001450:	60bb      	str	r3, [r7, #8]
 8001452:	4b1f      	ldr	r3, [pc, #124]	; (80014d0 <MX_GPIO_Init+0xd0>)
 8001454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001456:	4a1e      	ldr	r2, [pc, #120]	; (80014d0 <MX_GPIO_Init+0xd0>)
 8001458:	f043 0301 	orr.w	r3, r3, #1
 800145c:	6313      	str	r3, [r2, #48]	; 0x30
 800145e:	4b1c      	ldr	r3, [pc, #112]	; (80014d0 <MX_GPIO_Init+0xd0>)
 8001460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001462:	f003 0301 	and.w	r3, r3, #1
 8001466:	60bb      	str	r3, [r7, #8]
 8001468:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800146a:	2300      	movs	r3, #0
 800146c:	607b      	str	r3, [r7, #4]
 800146e:	4b18      	ldr	r3, [pc, #96]	; (80014d0 <MX_GPIO_Init+0xd0>)
 8001470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001472:	4a17      	ldr	r2, [pc, #92]	; (80014d0 <MX_GPIO_Init+0xd0>)
 8001474:	f043 0302 	orr.w	r3, r3, #2
 8001478:	6313      	str	r3, [r2, #48]	; 0x30
 800147a:	4b15      	ldr	r3, [pc, #84]	; (80014d0 <MX_GPIO_Init+0xd0>)
 800147c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800147e:	f003 0302 	and.w	r3, r3, #2
 8001482:	607b      	str	r3, [r7, #4]
 8001484:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001486:	2200      	movs	r2, #0
 8001488:	2120      	movs	r1, #32
 800148a:	4812      	ldr	r0, [pc, #72]	; (80014d4 <MX_GPIO_Init+0xd4>)
 800148c:	f000 fdea 	bl	8002064 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001490:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001494:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001496:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800149a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800149c:	2300      	movs	r3, #0
 800149e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80014a0:	f107 0314 	add.w	r3, r7, #20
 80014a4:	4619      	mov	r1, r3
 80014a6:	480c      	ldr	r0, [pc, #48]	; (80014d8 <MX_GPIO_Init+0xd8>)
 80014a8:	f000 fc58 	bl	8001d5c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80014ac:	2320      	movs	r3, #32
 80014ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014b0:	2301      	movs	r3, #1
 80014b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b4:	2300      	movs	r3, #0
 80014b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014b8:	2300      	movs	r3, #0
 80014ba:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80014bc:	f107 0314 	add.w	r3, r7, #20
 80014c0:	4619      	mov	r1, r3
 80014c2:	4804      	ldr	r0, [pc, #16]	; (80014d4 <MX_GPIO_Init+0xd4>)
 80014c4:	f000 fc4a 	bl	8001d5c <HAL_GPIO_Init>

}
 80014c8:	bf00      	nop
 80014ca:	3728      	adds	r7, #40	; 0x28
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bd80      	pop	{r7, pc}
 80014d0:	40023800 	.word	0x40023800
 80014d4:	40020000 	.word	0x40020000
 80014d8:	40020800 	.word	0x40020800

080014dc <_write>:

/* USER CODE BEGIN 4 */
/*re-implement _write function of printf*/
int _write(int file,char *ptr,int len)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b086      	sub	sp, #24
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	60f8      	str	r0, [r7, #12]
 80014e4:	60b9      	str	r1, [r7, #8]
 80014e6:	607a      	str	r2, [r7, #4]
	int i;

	for(i = 0;i<len; i++)
 80014e8:	2300      	movs	r3, #0
 80014ea:	617b      	str	r3, [r7, #20]
 80014ec:	e009      	b.n	8001502 <_write+0x26>
	{
		ITM_SendChar(*ptr++);
 80014ee:	68bb      	ldr	r3, [r7, #8]
 80014f0:	1c5a      	adds	r2, r3, #1
 80014f2:	60ba      	str	r2, [r7, #8]
 80014f4:	781b      	ldrb	r3, [r3, #0]
 80014f6:	4618      	mov	r0, r3
 80014f8:	f7ff fdee 	bl	80010d8 <ITM_SendChar>
	for(i = 0;i<len; i++)
 80014fc:	697b      	ldr	r3, [r7, #20]
 80014fe:	3301      	adds	r3, #1
 8001500:	617b      	str	r3, [r7, #20]
 8001502:	697a      	ldr	r2, [r7, #20]
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	429a      	cmp	r2, r3
 8001508:	dbf1      	blt.n	80014ee <_write+0x12>
	}
	return len;
 800150a:	687b      	ldr	r3, [r7, #4]
}
 800150c:	4618      	mov	r0, r3
 800150e:	3718      	adds	r7, #24
 8001510:	46bd      	mov	sp, r7
 8001512:	bd80      	pop	{r7, pc}

08001514 <QEIEncoderPositionVelocity_Update>:

void QEIEncoderPositionVelocity_Update()
{
 8001514:	b5b0      	push	{r4, r5, r7, lr}
 8001516:	b084      	sub	sp, #16
 8001518:	af00      	add	r7, sp, #0
	//collect data
	QEIData.timestamp[0] = micros();
 800151a:	f000 f881 	bl	8001620 <micros>
 800151e:	4602      	mov	r2, r0
 8001520:	460b      	mov	r3, r1
 8001522:	492e      	ldr	r1, [pc, #184]	; (80015dc <QEIEncoderPositionVelocity_Update+0xc8>)
 8001524:	e9c1 2302 	strd	r2, r3, [r1, #8]
	uint32_t couterPosition = __HAL_TIM_GET_COUNTER(&htim3);
 8001528:	4b2d      	ldr	r3, [pc, #180]	; (80015e0 <QEIEncoderPositionVelocity_Update+0xcc>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800152e:	60bb      	str	r3, [r7, #8]
	QEIData.data[0] = couterPosition;
 8001530:	4a2a      	ldr	r2, [pc, #168]	; (80015dc <QEIEncoderPositionVelocity_Update+0xc8>)
 8001532:	68bb      	ldr	r3, [r7, #8]
 8001534:	6013      	str	r3, [r2, #0]

	//calculation
	QEIData.QEIPosition = couterPosition % 3072;
 8001536:	68b9      	ldr	r1, [r7, #8]
 8001538:	4b2a      	ldr	r3, [pc, #168]	; (80015e4 <QEIEncoderPositionVelocity_Update+0xd0>)
 800153a:	fba3 2301 	umull	r2, r3, r3, r1
 800153e:	0ada      	lsrs	r2, r3, #11
 8001540:	4613      	mov	r3, r2
 8001542:	005b      	lsls	r3, r3, #1
 8001544:	4413      	add	r3, r2
 8001546:	029b      	lsls	r3, r3, #10
 8001548:	1aca      	subs	r2, r1, r3
 800154a:	ee07 2a90 	vmov	s15, r2
 800154e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001552:	4b22      	ldr	r3, [pc, #136]	; (80015dc <QEIEncoderPositionVelocity_Update+0xc8>)
 8001554:	edc3 7a06 	vstr	s15, [r3, #24]

	int32_t diffPosition = QEIData.data[0] - QEIData.data[1];
 8001558:	4b20      	ldr	r3, [pc, #128]	; (80015dc <QEIEncoderPositionVelocity_Update+0xc8>)
 800155a:	681a      	ldr	r2, [r3, #0]
 800155c:	4b1f      	ldr	r3, [pc, #124]	; (80015dc <QEIEncoderPositionVelocity_Update+0xc8>)
 800155e:	685b      	ldr	r3, [r3, #4]
 8001560:	1ad3      	subs	r3, r2, r3
 8001562:	60fb      	str	r3, [r7, #12]
	float difftime = (QEIData.timestamp[0]-QEIData.timestamp[1]);
 8001564:	4b1d      	ldr	r3, [pc, #116]	; (80015dc <QEIEncoderPositionVelocity_Update+0xc8>)
 8001566:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800156a:	4b1c      	ldr	r3, [pc, #112]	; (80015dc <QEIEncoderPositionVelocity_Update+0xc8>)
 800156c:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001570:	1a84      	subs	r4, r0, r2
 8001572:	eb61 0503 	sbc.w	r5, r1, r3
 8001576:	4620      	mov	r0, r4
 8001578:	4629      	mov	r1, r5
 800157a:	f7ff fbe5 	bl	8000d48 <__aeabi_ul2f>
 800157e:	4603      	mov	r3, r0
 8001580:	607b      	str	r3, [r7, #4]

	//handle wrap-around
	if(diffPosition > QEI_PERIOD>>1) diffPosition -= QEI_PERIOD;
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	f5b3 4ffc 	cmp.w	r3, #32256	; 0x7e00
 8001588:	dd03      	ble.n	8001592 <QEIEncoderPositionVelocity_Update+0x7e>
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	f5a3 437c 	sub.w	r3, r3, #64512	; 0xfc00
 8001590:	60fb      	str	r3, [r7, #12]
	if(diffPosition < -(QEI_PERIOD>>1)) diffPosition += QEI_PERIOD;
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	f513 4ffc 	cmn.w	r3, #32256	; 0x7e00
 8001598:	da03      	bge.n	80015a2 <QEIEncoderPositionVelocity_Update+0x8e>
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	f503 437c 	add.w	r3, r3, #64512	; 0xfc00
 80015a0:	60fb      	str	r3, [r7, #12]

	//calculate angular velocity in pulse per sec
	QEIData.QEIVelocity = (diffPosition*1000000)/difftime;
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	4a10      	ldr	r2, [pc, #64]	; (80015e8 <QEIEncoderPositionVelocity_Update+0xd4>)
 80015a6:	fb02 f303 	mul.w	r3, r2, r3
 80015aa:	ee07 3a90 	vmov	s15, r3
 80015ae:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80015b2:	ed97 7a01 	vldr	s14, [r7, #4]
 80015b6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80015ba:	4b08      	ldr	r3, [pc, #32]	; (80015dc <QEIEncoderPositionVelocity_Update+0xc8>)
 80015bc:	edc3 7a07 	vstr	s15, [r3, #28]

	QEIData.data[1] = QEIData.data[0];
 80015c0:	4b06      	ldr	r3, [pc, #24]	; (80015dc <QEIEncoderPositionVelocity_Update+0xc8>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	4a05      	ldr	r2, [pc, #20]	; (80015dc <QEIEncoderPositionVelocity_Update+0xc8>)
 80015c6:	6053      	str	r3, [r2, #4]
	QEIData.timestamp[1] = QEIData.timestamp[0];
 80015c8:	4b04      	ldr	r3, [pc, #16]	; (80015dc <QEIEncoderPositionVelocity_Update+0xc8>)
 80015ca:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80015ce:	4903      	ldr	r1, [pc, #12]	; (80015dc <QEIEncoderPositionVelocity_Update+0xc8>)
 80015d0:	e9c1 2304 	strd	r2, r3, [r1, #16]
}
 80015d4:	bf00      	nop
 80015d6:	3710      	adds	r7, #16
 80015d8:	46bd      	mov	sp, r7
 80015da:	bdb0      	pop	{r4, r5, r7, pc}
 80015dc:	200002d0 	.word	0x200002d0
 80015e0:	200001fc 	.word	0x200001fc
 80015e4:	aaaaaaab 	.word	0xaaaaaaab
 80015e8:	000f4240 	.word	0x000f4240

080015ec <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80015ec:	b4b0      	push	{r4, r5, r7}
 80015ee:	b083      	sub	sp, #12
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
	if(htim == &htim5)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	4a08      	ldr	r2, [pc, #32]	; (8001618 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 80015f8:	4293      	cmp	r3, r2
 80015fa:	d108      	bne.n	800160e <HAL_TIM_PeriodElapsedCallback+0x22>
	{
		_micros += UINT32_MAX;
 80015fc:	4b07      	ldr	r3, [pc, #28]	; (800161c <HAL_TIM_PeriodElapsedCallback+0x30>)
 80015fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001602:	1e54      	subs	r4, r2, #1
 8001604:	f143 0500 	adc.w	r5, r3, #0
 8001608:	4b04      	ldr	r3, [pc, #16]	; (800161c <HAL_TIM_PeriodElapsedCallback+0x30>)
 800160a:	e9c3 4500 	strd	r4, r5, [r3]
	}
}
 800160e:	bf00      	nop
 8001610:	370c      	adds	r7, #12
 8001612:	46bd      	mov	sp, r7
 8001614:	bcb0      	pop	{r4, r5, r7}
 8001616:	4770      	bx	lr
 8001618:	20000244 	.word	0x20000244
 800161c:	200002f0 	.word	0x200002f0

08001620 <micros>:

uint64_t micros()
{
 8001620:	b4b0      	push	{r4, r5, r7}
 8001622:	af00      	add	r7, sp, #0
	return __HAL_TIM_GET_COUNTER(&htim5)+_micros;
 8001624:	4b09      	ldr	r3, [pc, #36]	; (800164c <micros+0x2c>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800162a:	2200      	movs	r2, #0
 800162c:	4618      	mov	r0, r3
 800162e:	4611      	mov	r1, r2
 8001630:	4b07      	ldr	r3, [pc, #28]	; (8001650 <micros+0x30>)
 8001632:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001636:	1884      	adds	r4, r0, r2
 8001638:	eb41 0503 	adc.w	r5, r1, r3
 800163c:	4622      	mov	r2, r4
 800163e:	462b      	mov	r3, r5
}
 8001640:	4610      	mov	r0, r2
 8001642:	4619      	mov	r1, r3
 8001644:	46bd      	mov	sp, r7
 8001646:	bcb0      	pop	{r4, r5, r7}
 8001648:	4770      	bx	lr
 800164a:	bf00      	nop
 800164c:	20000244 	.word	0x20000244
 8001650:	200002f0 	.word	0x200002f0

08001654 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001654:	b480      	push	{r7}
 8001656:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001658:	b672      	cpsid	i
}
 800165a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800165c:	e7fe      	b.n	800165c <Error_Handler+0x8>
	...

08001660 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b082      	sub	sp, #8
 8001664:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001666:	2300      	movs	r3, #0
 8001668:	607b      	str	r3, [r7, #4]
 800166a:	4b10      	ldr	r3, [pc, #64]	; (80016ac <HAL_MspInit+0x4c>)
 800166c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800166e:	4a0f      	ldr	r2, [pc, #60]	; (80016ac <HAL_MspInit+0x4c>)
 8001670:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001674:	6453      	str	r3, [r2, #68]	; 0x44
 8001676:	4b0d      	ldr	r3, [pc, #52]	; (80016ac <HAL_MspInit+0x4c>)
 8001678:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800167a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800167e:	607b      	str	r3, [r7, #4]
 8001680:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001682:	2300      	movs	r3, #0
 8001684:	603b      	str	r3, [r7, #0]
 8001686:	4b09      	ldr	r3, [pc, #36]	; (80016ac <HAL_MspInit+0x4c>)
 8001688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800168a:	4a08      	ldr	r2, [pc, #32]	; (80016ac <HAL_MspInit+0x4c>)
 800168c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001690:	6413      	str	r3, [r2, #64]	; 0x40
 8001692:	4b06      	ldr	r3, [pc, #24]	; (80016ac <HAL_MspInit+0x4c>)
 8001694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001696:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800169a:	603b      	str	r3, [r7, #0]
 800169c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800169e:	2007      	movs	r0, #7
 80016a0:	f000 fb1a 	bl	8001cd8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016a4:	bf00      	nop
 80016a6:	3708      	adds	r7, #8
 80016a8:	46bd      	mov	sp, r7
 80016aa:	bd80      	pop	{r7, pc}
 80016ac:	40023800 	.word	0x40023800

080016b0 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b08a      	sub	sp, #40	; 0x28
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016b8:	f107 0314 	add.w	r3, r7, #20
 80016bc:	2200      	movs	r2, #0
 80016be:	601a      	str	r2, [r3, #0]
 80016c0:	605a      	str	r2, [r3, #4]
 80016c2:	609a      	str	r2, [r3, #8]
 80016c4:	60da      	str	r2, [r3, #12]
 80016c6:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	4a19      	ldr	r2, [pc, #100]	; (8001734 <HAL_TIM_Encoder_MspInit+0x84>)
 80016ce:	4293      	cmp	r3, r2
 80016d0:	d12b      	bne.n	800172a <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80016d2:	2300      	movs	r3, #0
 80016d4:	613b      	str	r3, [r7, #16]
 80016d6:	4b18      	ldr	r3, [pc, #96]	; (8001738 <HAL_TIM_Encoder_MspInit+0x88>)
 80016d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016da:	4a17      	ldr	r2, [pc, #92]	; (8001738 <HAL_TIM_Encoder_MspInit+0x88>)
 80016dc:	f043 0302 	orr.w	r3, r3, #2
 80016e0:	6413      	str	r3, [r2, #64]	; 0x40
 80016e2:	4b15      	ldr	r3, [pc, #84]	; (8001738 <HAL_TIM_Encoder_MspInit+0x88>)
 80016e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016e6:	f003 0302 	and.w	r3, r3, #2
 80016ea:	613b      	str	r3, [r7, #16]
 80016ec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016ee:	2300      	movs	r3, #0
 80016f0:	60fb      	str	r3, [r7, #12]
 80016f2:	4b11      	ldr	r3, [pc, #68]	; (8001738 <HAL_TIM_Encoder_MspInit+0x88>)
 80016f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016f6:	4a10      	ldr	r2, [pc, #64]	; (8001738 <HAL_TIM_Encoder_MspInit+0x88>)
 80016f8:	f043 0301 	orr.w	r3, r3, #1
 80016fc:	6313      	str	r3, [r2, #48]	; 0x30
 80016fe:	4b0e      	ldr	r3, [pc, #56]	; (8001738 <HAL_TIM_Encoder_MspInit+0x88>)
 8001700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001702:	f003 0301 	and.w	r3, r3, #1
 8001706:	60fb      	str	r3, [r7, #12]
 8001708:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800170a:	23c0      	movs	r3, #192	; 0xc0
 800170c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800170e:	2302      	movs	r3, #2
 8001710:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001712:	2300      	movs	r3, #0
 8001714:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001716:	2300      	movs	r3, #0
 8001718:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800171a:	2302      	movs	r3, #2
 800171c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800171e:	f107 0314 	add.w	r3, r7, #20
 8001722:	4619      	mov	r1, r3
 8001724:	4805      	ldr	r0, [pc, #20]	; (800173c <HAL_TIM_Encoder_MspInit+0x8c>)
 8001726:	f000 fb19 	bl	8001d5c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800172a:	bf00      	nop
 800172c:	3728      	adds	r7, #40	; 0x28
 800172e:	46bd      	mov	sp, r7
 8001730:	bd80      	pop	{r7, pc}
 8001732:	bf00      	nop
 8001734:	40000400 	.word	0x40000400
 8001738:	40023800 	.word	0x40023800
 800173c:	40020000 	.word	0x40020000

08001740 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b084      	sub	sp, #16
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM5)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	4a0e      	ldr	r2, [pc, #56]	; (8001788 <HAL_TIM_Base_MspInit+0x48>)
 800174e:	4293      	cmp	r3, r2
 8001750:	d115      	bne.n	800177e <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001752:	2300      	movs	r3, #0
 8001754:	60fb      	str	r3, [r7, #12]
 8001756:	4b0d      	ldr	r3, [pc, #52]	; (800178c <HAL_TIM_Base_MspInit+0x4c>)
 8001758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800175a:	4a0c      	ldr	r2, [pc, #48]	; (800178c <HAL_TIM_Base_MspInit+0x4c>)
 800175c:	f043 0308 	orr.w	r3, r3, #8
 8001760:	6413      	str	r3, [r2, #64]	; 0x40
 8001762:	4b0a      	ldr	r3, [pc, #40]	; (800178c <HAL_TIM_Base_MspInit+0x4c>)
 8001764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001766:	f003 0308 	and.w	r3, r3, #8
 800176a:	60fb      	str	r3, [r7, #12]
 800176c:	68fb      	ldr	r3, [r7, #12]
    /* TIM5 interrupt Init */
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 800176e:	2200      	movs	r2, #0
 8001770:	2100      	movs	r1, #0
 8001772:	2032      	movs	r0, #50	; 0x32
 8001774:	f000 fabb 	bl	8001cee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8001778:	2032      	movs	r0, #50	; 0x32
 800177a:	f000 fad4 	bl	8001d26 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 800177e:	bf00      	nop
 8001780:	3710      	adds	r7, #16
 8001782:	46bd      	mov	sp, r7
 8001784:	bd80      	pop	{r7, pc}
 8001786:	bf00      	nop
 8001788:	40000c00 	.word	0x40000c00
 800178c:	40023800 	.word	0x40023800

08001790 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b08a      	sub	sp, #40	; 0x28
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001798:	f107 0314 	add.w	r3, r7, #20
 800179c:	2200      	movs	r2, #0
 800179e:	601a      	str	r2, [r3, #0]
 80017a0:	605a      	str	r2, [r3, #4]
 80017a2:	609a      	str	r2, [r3, #8]
 80017a4:	60da      	str	r2, [r3, #12]
 80017a6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	4a19      	ldr	r2, [pc, #100]	; (8001814 <HAL_UART_MspInit+0x84>)
 80017ae:	4293      	cmp	r3, r2
 80017b0:	d12b      	bne.n	800180a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80017b2:	2300      	movs	r3, #0
 80017b4:	613b      	str	r3, [r7, #16]
 80017b6:	4b18      	ldr	r3, [pc, #96]	; (8001818 <HAL_UART_MspInit+0x88>)
 80017b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ba:	4a17      	ldr	r2, [pc, #92]	; (8001818 <HAL_UART_MspInit+0x88>)
 80017bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017c0:	6413      	str	r3, [r2, #64]	; 0x40
 80017c2:	4b15      	ldr	r3, [pc, #84]	; (8001818 <HAL_UART_MspInit+0x88>)
 80017c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017ca:	613b      	str	r3, [r7, #16]
 80017cc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017ce:	2300      	movs	r3, #0
 80017d0:	60fb      	str	r3, [r7, #12]
 80017d2:	4b11      	ldr	r3, [pc, #68]	; (8001818 <HAL_UART_MspInit+0x88>)
 80017d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017d6:	4a10      	ldr	r2, [pc, #64]	; (8001818 <HAL_UART_MspInit+0x88>)
 80017d8:	f043 0301 	orr.w	r3, r3, #1
 80017dc:	6313      	str	r3, [r2, #48]	; 0x30
 80017de:	4b0e      	ldr	r3, [pc, #56]	; (8001818 <HAL_UART_MspInit+0x88>)
 80017e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017e2:	f003 0301 	and.w	r3, r3, #1
 80017e6:	60fb      	str	r3, [r7, #12]
 80017e8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80017ea:	230c      	movs	r3, #12
 80017ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017ee:	2302      	movs	r3, #2
 80017f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f2:	2300      	movs	r3, #0
 80017f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017f6:	2303      	movs	r3, #3
 80017f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80017fa:	2307      	movs	r3, #7
 80017fc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017fe:	f107 0314 	add.w	r3, r7, #20
 8001802:	4619      	mov	r1, r3
 8001804:	4805      	ldr	r0, [pc, #20]	; (800181c <HAL_UART_MspInit+0x8c>)
 8001806:	f000 faa9 	bl	8001d5c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800180a:	bf00      	nop
 800180c:	3728      	adds	r7, #40	; 0x28
 800180e:	46bd      	mov	sp, r7
 8001810:	bd80      	pop	{r7, pc}
 8001812:	bf00      	nop
 8001814:	40004400 	.word	0x40004400
 8001818:	40023800 	.word	0x40023800
 800181c:	40020000 	.word	0x40020000

08001820 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001820:	b480      	push	{r7}
 8001822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001824:	e7fe      	b.n	8001824 <NMI_Handler+0x4>

08001826 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001826:	b480      	push	{r7}
 8001828:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800182a:	e7fe      	b.n	800182a <HardFault_Handler+0x4>

0800182c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800182c:	b480      	push	{r7}
 800182e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001830:	e7fe      	b.n	8001830 <MemManage_Handler+0x4>

08001832 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001832:	b480      	push	{r7}
 8001834:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001836:	e7fe      	b.n	8001836 <BusFault_Handler+0x4>

08001838 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001838:	b480      	push	{r7}
 800183a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800183c:	e7fe      	b.n	800183c <UsageFault_Handler+0x4>

0800183e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800183e:	b480      	push	{r7}
 8001840:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001842:	bf00      	nop
 8001844:	46bd      	mov	sp, r7
 8001846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184a:	4770      	bx	lr

0800184c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800184c:	b480      	push	{r7}
 800184e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001850:	bf00      	nop
 8001852:	46bd      	mov	sp, r7
 8001854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001858:	4770      	bx	lr

0800185a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800185a:	b480      	push	{r7}
 800185c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800185e:	bf00      	nop
 8001860:	46bd      	mov	sp, r7
 8001862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001866:	4770      	bx	lr

08001868 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800186c:	f000 f944 	bl	8001af8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001870:	bf00      	nop
 8001872:	bd80      	pop	{r7, pc}

08001874 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8001878:	4802      	ldr	r0, [pc, #8]	; (8001884 <TIM5_IRQHandler+0x10>)
 800187a:	f001 fa83 	bl	8002d84 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 800187e:	bf00      	nop
 8001880:	bd80      	pop	{r7, pc}
 8001882:	bf00      	nop
 8001884:	20000244 	.word	0x20000244

08001888 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001888:	b480      	push	{r7}
 800188a:	af00      	add	r7, sp, #0
  return 1;
 800188c:	2301      	movs	r3, #1
}
 800188e:	4618      	mov	r0, r3
 8001890:	46bd      	mov	sp, r7
 8001892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001896:	4770      	bx	lr

08001898 <_kill>:

int _kill(int pid, int sig)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b082      	sub	sp, #8
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
 80018a0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80018a2:	f002 f8eb 	bl	8003a7c <__errno>
 80018a6:	4603      	mov	r3, r0
 80018a8:	2216      	movs	r2, #22
 80018aa:	601a      	str	r2, [r3, #0]
  return -1;
 80018ac:	f04f 33ff 	mov.w	r3, #4294967295
}
 80018b0:	4618      	mov	r0, r3
 80018b2:	3708      	adds	r7, #8
 80018b4:	46bd      	mov	sp, r7
 80018b6:	bd80      	pop	{r7, pc}

080018b8 <_exit>:

void _exit (int status)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b082      	sub	sp, #8
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80018c0:	f04f 31ff 	mov.w	r1, #4294967295
 80018c4:	6878      	ldr	r0, [r7, #4]
 80018c6:	f7ff ffe7 	bl	8001898 <_kill>
  while (1) {}    /* Make sure we hang here */
 80018ca:	e7fe      	b.n	80018ca <_exit+0x12>

080018cc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b086      	sub	sp, #24
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	60f8      	str	r0, [r7, #12]
 80018d4:	60b9      	str	r1, [r7, #8]
 80018d6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018d8:	2300      	movs	r3, #0
 80018da:	617b      	str	r3, [r7, #20]
 80018dc:	e00a      	b.n	80018f4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80018de:	f3af 8000 	nop.w
 80018e2:	4601      	mov	r1, r0
 80018e4:	68bb      	ldr	r3, [r7, #8]
 80018e6:	1c5a      	adds	r2, r3, #1
 80018e8:	60ba      	str	r2, [r7, #8]
 80018ea:	b2ca      	uxtb	r2, r1
 80018ec:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018ee:	697b      	ldr	r3, [r7, #20]
 80018f0:	3301      	adds	r3, #1
 80018f2:	617b      	str	r3, [r7, #20]
 80018f4:	697a      	ldr	r2, [r7, #20]
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	429a      	cmp	r2, r3
 80018fa:	dbf0      	blt.n	80018de <_read+0x12>
  }

  return len;
 80018fc:	687b      	ldr	r3, [r7, #4]
}
 80018fe:	4618      	mov	r0, r3
 8001900:	3718      	adds	r7, #24
 8001902:	46bd      	mov	sp, r7
 8001904:	bd80      	pop	{r7, pc}

08001906 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001906:	b480      	push	{r7}
 8001908:	b083      	sub	sp, #12
 800190a:	af00      	add	r7, sp, #0
 800190c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800190e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001912:	4618      	mov	r0, r3
 8001914:	370c      	adds	r7, #12
 8001916:	46bd      	mov	sp, r7
 8001918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191c:	4770      	bx	lr

0800191e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800191e:	b480      	push	{r7}
 8001920:	b083      	sub	sp, #12
 8001922:	af00      	add	r7, sp, #0
 8001924:	6078      	str	r0, [r7, #4]
 8001926:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800192e:	605a      	str	r2, [r3, #4]
  return 0;
 8001930:	2300      	movs	r3, #0
}
 8001932:	4618      	mov	r0, r3
 8001934:	370c      	adds	r7, #12
 8001936:	46bd      	mov	sp, r7
 8001938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193c:	4770      	bx	lr

0800193e <_isatty>:

int _isatty(int file)
{
 800193e:	b480      	push	{r7}
 8001940:	b083      	sub	sp, #12
 8001942:	af00      	add	r7, sp, #0
 8001944:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001946:	2301      	movs	r3, #1
}
 8001948:	4618      	mov	r0, r3
 800194a:	370c      	adds	r7, #12
 800194c:	46bd      	mov	sp, r7
 800194e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001952:	4770      	bx	lr

08001954 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001954:	b480      	push	{r7}
 8001956:	b085      	sub	sp, #20
 8001958:	af00      	add	r7, sp, #0
 800195a:	60f8      	str	r0, [r7, #12]
 800195c:	60b9      	str	r1, [r7, #8]
 800195e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001960:	2300      	movs	r3, #0
}
 8001962:	4618      	mov	r0, r3
 8001964:	3714      	adds	r7, #20
 8001966:	46bd      	mov	sp, r7
 8001968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196c:	4770      	bx	lr
	...

08001970 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b086      	sub	sp, #24
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001978:	4a14      	ldr	r2, [pc, #80]	; (80019cc <_sbrk+0x5c>)
 800197a:	4b15      	ldr	r3, [pc, #84]	; (80019d0 <_sbrk+0x60>)
 800197c:	1ad3      	subs	r3, r2, r3
 800197e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001980:	697b      	ldr	r3, [r7, #20]
 8001982:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001984:	4b13      	ldr	r3, [pc, #76]	; (80019d4 <_sbrk+0x64>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	2b00      	cmp	r3, #0
 800198a:	d102      	bne.n	8001992 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800198c:	4b11      	ldr	r3, [pc, #68]	; (80019d4 <_sbrk+0x64>)
 800198e:	4a12      	ldr	r2, [pc, #72]	; (80019d8 <_sbrk+0x68>)
 8001990:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001992:	4b10      	ldr	r3, [pc, #64]	; (80019d4 <_sbrk+0x64>)
 8001994:	681a      	ldr	r2, [r3, #0]
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	4413      	add	r3, r2
 800199a:	693a      	ldr	r2, [r7, #16]
 800199c:	429a      	cmp	r2, r3
 800199e:	d207      	bcs.n	80019b0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80019a0:	f002 f86c 	bl	8003a7c <__errno>
 80019a4:	4603      	mov	r3, r0
 80019a6:	220c      	movs	r2, #12
 80019a8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80019aa:	f04f 33ff 	mov.w	r3, #4294967295
 80019ae:	e009      	b.n	80019c4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80019b0:	4b08      	ldr	r3, [pc, #32]	; (80019d4 <_sbrk+0x64>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80019b6:	4b07      	ldr	r3, [pc, #28]	; (80019d4 <_sbrk+0x64>)
 80019b8:	681a      	ldr	r2, [r3, #0]
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	4413      	add	r3, r2
 80019be:	4a05      	ldr	r2, [pc, #20]	; (80019d4 <_sbrk+0x64>)
 80019c0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80019c2:	68fb      	ldr	r3, [r7, #12]
}
 80019c4:	4618      	mov	r0, r3
 80019c6:	3718      	adds	r7, #24
 80019c8:	46bd      	mov	sp, r7
 80019ca:	bd80      	pop	{r7, pc}
 80019cc:	20020000 	.word	0x20020000
 80019d0:	00000400 	.word	0x00000400
 80019d4:	200002fc 	.word	0x200002fc
 80019d8:	20000318 	.word	0x20000318

080019dc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80019dc:	b480      	push	{r7}
 80019de:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80019e0:	4b06      	ldr	r3, [pc, #24]	; (80019fc <SystemInit+0x20>)
 80019e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80019e6:	4a05      	ldr	r2, [pc, #20]	; (80019fc <SystemInit+0x20>)
 80019e8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80019ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80019f0:	bf00      	nop
 80019f2:	46bd      	mov	sp, r7
 80019f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f8:	4770      	bx	lr
 80019fa:	bf00      	nop
 80019fc:	e000ed00 	.word	0xe000ed00

08001a00 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001a00:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001a38 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001a04:	480d      	ldr	r0, [pc, #52]	; (8001a3c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001a06:	490e      	ldr	r1, [pc, #56]	; (8001a40 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001a08:	4a0e      	ldr	r2, [pc, #56]	; (8001a44 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001a0a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a0c:	e002      	b.n	8001a14 <LoopCopyDataInit>

08001a0e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a0e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a10:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a12:	3304      	adds	r3, #4

08001a14 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a14:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a16:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a18:	d3f9      	bcc.n	8001a0e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a1a:	4a0b      	ldr	r2, [pc, #44]	; (8001a48 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001a1c:	4c0b      	ldr	r4, [pc, #44]	; (8001a4c <LoopFillZerobss+0x26>)
  movs r3, #0
 8001a1e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a20:	e001      	b.n	8001a26 <LoopFillZerobss>

08001a22 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a22:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a24:	3204      	adds	r2, #4

08001a26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a26:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a28:	d3fb      	bcc.n	8001a22 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001a2a:	f7ff ffd7 	bl	80019dc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001a2e:	f002 f82b 	bl	8003a88 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001a32:	f7ff fb79 	bl	8001128 <main>
  bx  lr    
 8001a36:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001a38:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001a3c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a40:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8001a44:	0800692c 	.word	0x0800692c
  ldr r2, =_sbss
 8001a48:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8001a4c:	20000314 	.word	0x20000314

08001a50 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a50:	e7fe      	b.n	8001a50 <ADC_IRQHandler>
	...

08001a54 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001a58:	4b0e      	ldr	r3, [pc, #56]	; (8001a94 <HAL_Init+0x40>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	4a0d      	ldr	r2, [pc, #52]	; (8001a94 <HAL_Init+0x40>)
 8001a5e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a62:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001a64:	4b0b      	ldr	r3, [pc, #44]	; (8001a94 <HAL_Init+0x40>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	4a0a      	ldr	r2, [pc, #40]	; (8001a94 <HAL_Init+0x40>)
 8001a6a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001a6e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a70:	4b08      	ldr	r3, [pc, #32]	; (8001a94 <HAL_Init+0x40>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	4a07      	ldr	r2, [pc, #28]	; (8001a94 <HAL_Init+0x40>)
 8001a76:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a7a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a7c:	2003      	movs	r0, #3
 8001a7e:	f000 f92b 	bl	8001cd8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a82:	2000      	movs	r0, #0
 8001a84:	f000 f808 	bl	8001a98 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a88:	f7ff fdea 	bl	8001660 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a8c:	2300      	movs	r3, #0
}
 8001a8e:	4618      	mov	r0, r3
 8001a90:	bd80      	pop	{r7, pc}
 8001a92:	bf00      	nop
 8001a94:	40023c00 	.word	0x40023c00

08001a98 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b082      	sub	sp, #8
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001aa0:	4b12      	ldr	r3, [pc, #72]	; (8001aec <HAL_InitTick+0x54>)
 8001aa2:	681a      	ldr	r2, [r3, #0]
 8001aa4:	4b12      	ldr	r3, [pc, #72]	; (8001af0 <HAL_InitTick+0x58>)
 8001aa6:	781b      	ldrb	r3, [r3, #0]
 8001aa8:	4619      	mov	r1, r3
 8001aaa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001aae:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ab2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	f000 f943 	bl	8001d42 <HAL_SYSTICK_Config>
 8001abc:	4603      	mov	r3, r0
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d001      	beq.n	8001ac6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001ac2:	2301      	movs	r3, #1
 8001ac4:	e00e      	b.n	8001ae4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	2b0f      	cmp	r3, #15
 8001aca:	d80a      	bhi.n	8001ae2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001acc:	2200      	movs	r2, #0
 8001ace:	6879      	ldr	r1, [r7, #4]
 8001ad0:	f04f 30ff 	mov.w	r0, #4294967295
 8001ad4:	f000 f90b 	bl	8001cee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ad8:	4a06      	ldr	r2, [pc, #24]	; (8001af4 <HAL_InitTick+0x5c>)
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	e000      	b.n	8001ae4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001ae2:	2301      	movs	r3, #1
}
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	3708      	adds	r7, #8
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	bd80      	pop	{r7, pc}
 8001aec:	20000000 	.word	0x20000000
 8001af0:	20000008 	.word	0x20000008
 8001af4:	20000004 	.word	0x20000004

08001af8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001af8:	b480      	push	{r7}
 8001afa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001afc:	4b06      	ldr	r3, [pc, #24]	; (8001b18 <HAL_IncTick+0x20>)
 8001afe:	781b      	ldrb	r3, [r3, #0]
 8001b00:	461a      	mov	r2, r3
 8001b02:	4b06      	ldr	r3, [pc, #24]	; (8001b1c <HAL_IncTick+0x24>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	4413      	add	r3, r2
 8001b08:	4a04      	ldr	r2, [pc, #16]	; (8001b1c <HAL_IncTick+0x24>)
 8001b0a:	6013      	str	r3, [r2, #0]
}
 8001b0c:	bf00      	nop
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b14:	4770      	bx	lr
 8001b16:	bf00      	nop
 8001b18:	20000008 	.word	0x20000008
 8001b1c:	20000300 	.word	0x20000300

08001b20 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b20:	b480      	push	{r7}
 8001b22:	af00      	add	r7, sp, #0
  return uwTick;
 8001b24:	4b03      	ldr	r3, [pc, #12]	; (8001b34 <HAL_GetTick+0x14>)
 8001b26:	681b      	ldr	r3, [r3, #0]
}
 8001b28:	4618      	mov	r0, r3
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b30:	4770      	bx	lr
 8001b32:	bf00      	nop
 8001b34:	20000300 	.word	0x20000300

08001b38 <__NVIC_SetPriorityGrouping>:
{
 8001b38:	b480      	push	{r7}
 8001b3a:	b085      	sub	sp, #20
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	f003 0307 	and.w	r3, r3, #7
 8001b46:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b48:	4b0c      	ldr	r3, [pc, #48]	; (8001b7c <__NVIC_SetPriorityGrouping+0x44>)
 8001b4a:	68db      	ldr	r3, [r3, #12]
 8001b4c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b4e:	68ba      	ldr	r2, [r7, #8]
 8001b50:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b54:	4013      	ands	r3, r2
 8001b56:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b5c:	68bb      	ldr	r3, [r7, #8]
 8001b5e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b60:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b68:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b6a:	4a04      	ldr	r2, [pc, #16]	; (8001b7c <__NVIC_SetPriorityGrouping+0x44>)
 8001b6c:	68bb      	ldr	r3, [r7, #8]
 8001b6e:	60d3      	str	r3, [r2, #12]
}
 8001b70:	bf00      	nop
 8001b72:	3714      	adds	r7, #20
 8001b74:	46bd      	mov	sp, r7
 8001b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7a:	4770      	bx	lr
 8001b7c:	e000ed00 	.word	0xe000ed00

08001b80 <__NVIC_GetPriorityGrouping>:
{
 8001b80:	b480      	push	{r7}
 8001b82:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b84:	4b04      	ldr	r3, [pc, #16]	; (8001b98 <__NVIC_GetPriorityGrouping+0x18>)
 8001b86:	68db      	ldr	r3, [r3, #12]
 8001b88:	0a1b      	lsrs	r3, r3, #8
 8001b8a:	f003 0307 	and.w	r3, r3, #7
}
 8001b8e:	4618      	mov	r0, r3
 8001b90:	46bd      	mov	sp, r7
 8001b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b96:	4770      	bx	lr
 8001b98:	e000ed00 	.word	0xe000ed00

08001b9c <__NVIC_EnableIRQ>:
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	b083      	sub	sp, #12
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ba6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	db0b      	blt.n	8001bc6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001bae:	79fb      	ldrb	r3, [r7, #7]
 8001bb0:	f003 021f 	and.w	r2, r3, #31
 8001bb4:	4907      	ldr	r1, [pc, #28]	; (8001bd4 <__NVIC_EnableIRQ+0x38>)
 8001bb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bba:	095b      	lsrs	r3, r3, #5
 8001bbc:	2001      	movs	r0, #1
 8001bbe:	fa00 f202 	lsl.w	r2, r0, r2
 8001bc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001bc6:	bf00      	nop
 8001bc8:	370c      	adds	r7, #12
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd0:	4770      	bx	lr
 8001bd2:	bf00      	nop
 8001bd4:	e000e100 	.word	0xe000e100

08001bd8 <__NVIC_SetPriority>:
{
 8001bd8:	b480      	push	{r7}
 8001bda:	b083      	sub	sp, #12
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	4603      	mov	r3, r0
 8001be0:	6039      	str	r1, [r7, #0]
 8001be2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001be4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	db0a      	blt.n	8001c02 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bec:	683b      	ldr	r3, [r7, #0]
 8001bee:	b2da      	uxtb	r2, r3
 8001bf0:	490c      	ldr	r1, [pc, #48]	; (8001c24 <__NVIC_SetPriority+0x4c>)
 8001bf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bf6:	0112      	lsls	r2, r2, #4
 8001bf8:	b2d2      	uxtb	r2, r2
 8001bfa:	440b      	add	r3, r1
 8001bfc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001c00:	e00a      	b.n	8001c18 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	b2da      	uxtb	r2, r3
 8001c06:	4908      	ldr	r1, [pc, #32]	; (8001c28 <__NVIC_SetPriority+0x50>)
 8001c08:	79fb      	ldrb	r3, [r7, #7]
 8001c0a:	f003 030f 	and.w	r3, r3, #15
 8001c0e:	3b04      	subs	r3, #4
 8001c10:	0112      	lsls	r2, r2, #4
 8001c12:	b2d2      	uxtb	r2, r2
 8001c14:	440b      	add	r3, r1
 8001c16:	761a      	strb	r2, [r3, #24]
}
 8001c18:	bf00      	nop
 8001c1a:	370c      	adds	r7, #12
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c22:	4770      	bx	lr
 8001c24:	e000e100 	.word	0xe000e100
 8001c28:	e000ed00 	.word	0xe000ed00

08001c2c <NVIC_EncodePriority>:
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	b089      	sub	sp, #36	; 0x24
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	60f8      	str	r0, [r7, #12]
 8001c34:	60b9      	str	r1, [r7, #8]
 8001c36:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	f003 0307 	and.w	r3, r3, #7
 8001c3e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c40:	69fb      	ldr	r3, [r7, #28]
 8001c42:	f1c3 0307 	rsb	r3, r3, #7
 8001c46:	2b04      	cmp	r3, #4
 8001c48:	bf28      	it	cs
 8001c4a:	2304      	movcs	r3, #4
 8001c4c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c4e:	69fb      	ldr	r3, [r7, #28]
 8001c50:	3304      	adds	r3, #4
 8001c52:	2b06      	cmp	r3, #6
 8001c54:	d902      	bls.n	8001c5c <NVIC_EncodePriority+0x30>
 8001c56:	69fb      	ldr	r3, [r7, #28]
 8001c58:	3b03      	subs	r3, #3
 8001c5a:	e000      	b.n	8001c5e <NVIC_EncodePriority+0x32>
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c60:	f04f 32ff 	mov.w	r2, #4294967295
 8001c64:	69bb      	ldr	r3, [r7, #24]
 8001c66:	fa02 f303 	lsl.w	r3, r2, r3
 8001c6a:	43da      	mvns	r2, r3
 8001c6c:	68bb      	ldr	r3, [r7, #8]
 8001c6e:	401a      	ands	r2, r3
 8001c70:	697b      	ldr	r3, [r7, #20]
 8001c72:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c74:	f04f 31ff 	mov.w	r1, #4294967295
 8001c78:	697b      	ldr	r3, [r7, #20]
 8001c7a:	fa01 f303 	lsl.w	r3, r1, r3
 8001c7e:	43d9      	mvns	r1, r3
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c84:	4313      	orrs	r3, r2
}
 8001c86:	4618      	mov	r0, r3
 8001c88:	3724      	adds	r7, #36	; 0x24
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c90:	4770      	bx	lr
	...

08001c94 <SysTick_Config>:
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b082      	sub	sp, #8
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	3b01      	subs	r3, #1
 8001ca0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ca4:	d301      	bcc.n	8001caa <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	e00f      	b.n	8001cca <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001caa:	4a0a      	ldr	r2, [pc, #40]	; (8001cd4 <SysTick_Config+0x40>)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	3b01      	subs	r3, #1
 8001cb0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001cb2:	210f      	movs	r1, #15
 8001cb4:	f04f 30ff 	mov.w	r0, #4294967295
 8001cb8:	f7ff ff8e 	bl	8001bd8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001cbc:	4b05      	ldr	r3, [pc, #20]	; (8001cd4 <SysTick_Config+0x40>)
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001cc2:	4b04      	ldr	r3, [pc, #16]	; (8001cd4 <SysTick_Config+0x40>)
 8001cc4:	2207      	movs	r2, #7
 8001cc6:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8001cc8:	2300      	movs	r3, #0
}
 8001cca:	4618      	mov	r0, r3
 8001ccc:	3708      	adds	r7, #8
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bd80      	pop	{r7, pc}
 8001cd2:	bf00      	nop
 8001cd4:	e000e010 	.word	0xe000e010

08001cd8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b082      	sub	sp, #8
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ce0:	6878      	ldr	r0, [r7, #4]
 8001ce2:	f7ff ff29 	bl	8001b38 <__NVIC_SetPriorityGrouping>
}
 8001ce6:	bf00      	nop
 8001ce8:	3708      	adds	r7, #8
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bd80      	pop	{r7, pc}

08001cee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001cee:	b580      	push	{r7, lr}
 8001cf0:	b086      	sub	sp, #24
 8001cf2:	af00      	add	r7, sp, #0
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	60b9      	str	r1, [r7, #8]
 8001cf8:	607a      	str	r2, [r7, #4]
 8001cfa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d00:	f7ff ff3e 	bl	8001b80 <__NVIC_GetPriorityGrouping>
 8001d04:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d06:	687a      	ldr	r2, [r7, #4]
 8001d08:	68b9      	ldr	r1, [r7, #8]
 8001d0a:	6978      	ldr	r0, [r7, #20]
 8001d0c:	f7ff ff8e 	bl	8001c2c <NVIC_EncodePriority>
 8001d10:	4602      	mov	r2, r0
 8001d12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d16:	4611      	mov	r1, r2
 8001d18:	4618      	mov	r0, r3
 8001d1a:	f7ff ff5d 	bl	8001bd8 <__NVIC_SetPriority>
}
 8001d1e:	bf00      	nop
 8001d20:	3718      	adds	r7, #24
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bd80      	pop	{r7, pc}

08001d26 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d26:	b580      	push	{r7, lr}
 8001d28:	b082      	sub	sp, #8
 8001d2a:	af00      	add	r7, sp, #0
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d34:	4618      	mov	r0, r3
 8001d36:	f7ff ff31 	bl	8001b9c <__NVIC_EnableIRQ>
}
 8001d3a:	bf00      	nop
 8001d3c:	3708      	adds	r7, #8
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bd80      	pop	{r7, pc}

08001d42 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d42:	b580      	push	{r7, lr}
 8001d44:	b082      	sub	sp, #8
 8001d46:	af00      	add	r7, sp, #0
 8001d48:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d4a:	6878      	ldr	r0, [r7, #4]
 8001d4c:	f7ff ffa2 	bl	8001c94 <SysTick_Config>
 8001d50:	4603      	mov	r3, r0
}
 8001d52:	4618      	mov	r0, r3
 8001d54:	3708      	adds	r7, #8
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bd80      	pop	{r7, pc}
	...

08001d5c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	b089      	sub	sp, #36	; 0x24
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
 8001d64:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001d66:	2300      	movs	r3, #0
 8001d68:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d72:	2300      	movs	r3, #0
 8001d74:	61fb      	str	r3, [r7, #28]
 8001d76:	e159      	b.n	800202c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001d78:	2201      	movs	r2, #1
 8001d7a:	69fb      	ldr	r3, [r7, #28]
 8001d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d80:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d82:	683b      	ldr	r3, [r7, #0]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	697a      	ldr	r2, [r7, #20]
 8001d88:	4013      	ands	r3, r2
 8001d8a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001d8c:	693a      	ldr	r2, [r7, #16]
 8001d8e:	697b      	ldr	r3, [r7, #20]
 8001d90:	429a      	cmp	r2, r3
 8001d92:	f040 8148 	bne.w	8002026 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	685b      	ldr	r3, [r3, #4]
 8001d9a:	f003 0303 	and.w	r3, r3, #3
 8001d9e:	2b01      	cmp	r3, #1
 8001da0:	d005      	beq.n	8001dae <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001da2:	683b      	ldr	r3, [r7, #0]
 8001da4:	685b      	ldr	r3, [r3, #4]
 8001da6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001daa:	2b02      	cmp	r3, #2
 8001dac:	d130      	bne.n	8001e10 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	689b      	ldr	r3, [r3, #8]
 8001db2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001db4:	69fb      	ldr	r3, [r7, #28]
 8001db6:	005b      	lsls	r3, r3, #1
 8001db8:	2203      	movs	r2, #3
 8001dba:	fa02 f303 	lsl.w	r3, r2, r3
 8001dbe:	43db      	mvns	r3, r3
 8001dc0:	69ba      	ldr	r2, [r7, #24]
 8001dc2:	4013      	ands	r3, r2
 8001dc4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001dc6:	683b      	ldr	r3, [r7, #0]
 8001dc8:	68da      	ldr	r2, [r3, #12]
 8001dca:	69fb      	ldr	r3, [r7, #28]
 8001dcc:	005b      	lsls	r3, r3, #1
 8001dce:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd2:	69ba      	ldr	r2, [r7, #24]
 8001dd4:	4313      	orrs	r3, r2
 8001dd6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	69ba      	ldr	r2, [r7, #24]
 8001ddc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	685b      	ldr	r3, [r3, #4]
 8001de2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001de4:	2201      	movs	r2, #1
 8001de6:	69fb      	ldr	r3, [r7, #28]
 8001de8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dec:	43db      	mvns	r3, r3
 8001dee:	69ba      	ldr	r2, [r7, #24]
 8001df0:	4013      	ands	r3, r2
 8001df2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	685b      	ldr	r3, [r3, #4]
 8001df8:	091b      	lsrs	r3, r3, #4
 8001dfa:	f003 0201 	and.w	r2, r3, #1
 8001dfe:	69fb      	ldr	r3, [r7, #28]
 8001e00:	fa02 f303 	lsl.w	r3, r2, r3
 8001e04:	69ba      	ldr	r2, [r7, #24]
 8001e06:	4313      	orrs	r3, r2
 8001e08:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	69ba      	ldr	r2, [r7, #24]
 8001e0e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	685b      	ldr	r3, [r3, #4]
 8001e14:	f003 0303 	and.w	r3, r3, #3
 8001e18:	2b03      	cmp	r3, #3
 8001e1a:	d017      	beq.n	8001e4c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	68db      	ldr	r3, [r3, #12]
 8001e20:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001e22:	69fb      	ldr	r3, [r7, #28]
 8001e24:	005b      	lsls	r3, r3, #1
 8001e26:	2203      	movs	r2, #3
 8001e28:	fa02 f303 	lsl.w	r3, r2, r3
 8001e2c:	43db      	mvns	r3, r3
 8001e2e:	69ba      	ldr	r2, [r7, #24]
 8001e30:	4013      	ands	r3, r2
 8001e32:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	689a      	ldr	r2, [r3, #8]
 8001e38:	69fb      	ldr	r3, [r7, #28]
 8001e3a:	005b      	lsls	r3, r3, #1
 8001e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e40:	69ba      	ldr	r2, [r7, #24]
 8001e42:	4313      	orrs	r3, r2
 8001e44:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	69ba      	ldr	r2, [r7, #24]
 8001e4a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	685b      	ldr	r3, [r3, #4]
 8001e50:	f003 0303 	and.w	r3, r3, #3
 8001e54:	2b02      	cmp	r3, #2
 8001e56:	d123      	bne.n	8001ea0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001e58:	69fb      	ldr	r3, [r7, #28]
 8001e5a:	08da      	lsrs	r2, r3, #3
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	3208      	adds	r2, #8
 8001e60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e64:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001e66:	69fb      	ldr	r3, [r7, #28]
 8001e68:	f003 0307 	and.w	r3, r3, #7
 8001e6c:	009b      	lsls	r3, r3, #2
 8001e6e:	220f      	movs	r2, #15
 8001e70:	fa02 f303 	lsl.w	r3, r2, r3
 8001e74:	43db      	mvns	r3, r3
 8001e76:	69ba      	ldr	r2, [r7, #24]
 8001e78:	4013      	ands	r3, r2
 8001e7a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	691a      	ldr	r2, [r3, #16]
 8001e80:	69fb      	ldr	r3, [r7, #28]
 8001e82:	f003 0307 	and.w	r3, r3, #7
 8001e86:	009b      	lsls	r3, r3, #2
 8001e88:	fa02 f303 	lsl.w	r3, r2, r3
 8001e8c:	69ba      	ldr	r2, [r7, #24]
 8001e8e:	4313      	orrs	r3, r2
 8001e90:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001e92:	69fb      	ldr	r3, [r7, #28]
 8001e94:	08da      	lsrs	r2, r3, #3
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	3208      	adds	r2, #8
 8001e9a:	69b9      	ldr	r1, [r7, #24]
 8001e9c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001ea6:	69fb      	ldr	r3, [r7, #28]
 8001ea8:	005b      	lsls	r3, r3, #1
 8001eaa:	2203      	movs	r2, #3
 8001eac:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb0:	43db      	mvns	r3, r3
 8001eb2:	69ba      	ldr	r2, [r7, #24]
 8001eb4:	4013      	ands	r3, r2
 8001eb6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	685b      	ldr	r3, [r3, #4]
 8001ebc:	f003 0203 	and.w	r2, r3, #3
 8001ec0:	69fb      	ldr	r3, [r7, #28]
 8001ec2:	005b      	lsls	r3, r3, #1
 8001ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec8:	69ba      	ldr	r2, [r7, #24]
 8001eca:	4313      	orrs	r3, r2
 8001ecc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	69ba      	ldr	r2, [r7, #24]
 8001ed2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	685b      	ldr	r3, [r3, #4]
 8001ed8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	f000 80a2 	beq.w	8002026 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	60fb      	str	r3, [r7, #12]
 8001ee6:	4b57      	ldr	r3, [pc, #348]	; (8002044 <HAL_GPIO_Init+0x2e8>)
 8001ee8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eea:	4a56      	ldr	r2, [pc, #344]	; (8002044 <HAL_GPIO_Init+0x2e8>)
 8001eec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ef0:	6453      	str	r3, [r2, #68]	; 0x44
 8001ef2:	4b54      	ldr	r3, [pc, #336]	; (8002044 <HAL_GPIO_Init+0x2e8>)
 8001ef4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ef6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001efa:	60fb      	str	r3, [r7, #12]
 8001efc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001efe:	4a52      	ldr	r2, [pc, #328]	; (8002048 <HAL_GPIO_Init+0x2ec>)
 8001f00:	69fb      	ldr	r3, [r7, #28]
 8001f02:	089b      	lsrs	r3, r3, #2
 8001f04:	3302      	adds	r3, #2
 8001f06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001f0c:	69fb      	ldr	r3, [r7, #28]
 8001f0e:	f003 0303 	and.w	r3, r3, #3
 8001f12:	009b      	lsls	r3, r3, #2
 8001f14:	220f      	movs	r2, #15
 8001f16:	fa02 f303 	lsl.w	r3, r2, r3
 8001f1a:	43db      	mvns	r3, r3
 8001f1c:	69ba      	ldr	r2, [r7, #24]
 8001f1e:	4013      	ands	r3, r2
 8001f20:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	4a49      	ldr	r2, [pc, #292]	; (800204c <HAL_GPIO_Init+0x2f0>)
 8001f26:	4293      	cmp	r3, r2
 8001f28:	d019      	beq.n	8001f5e <HAL_GPIO_Init+0x202>
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	4a48      	ldr	r2, [pc, #288]	; (8002050 <HAL_GPIO_Init+0x2f4>)
 8001f2e:	4293      	cmp	r3, r2
 8001f30:	d013      	beq.n	8001f5a <HAL_GPIO_Init+0x1fe>
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	4a47      	ldr	r2, [pc, #284]	; (8002054 <HAL_GPIO_Init+0x2f8>)
 8001f36:	4293      	cmp	r3, r2
 8001f38:	d00d      	beq.n	8001f56 <HAL_GPIO_Init+0x1fa>
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	4a46      	ldr	r2, [pc, #280]	; (8002058 <HAL_GPIO_Init+0x2fc>)
 8001f3e:	4293      	cmp	r3, r2
 8001f40:	d007      	beq.n	8001f52 <HAL_GPIO_Init+0x1f6>
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	4a45      	ldr	r2, [pc, #276]	; (800205c <HAL_GPIO_Init+0x300>)
 8001f46:	4293      	cmp	r3, r2
 8001f48:	d101      	bne.n	8001f4e <HAL_GPIO_Init+0x1f2>
 8001f4a:	2304      	movs	r3, #4
 8001f4c:	e008      	b.n	8001f60 <HAL_GPIO_Init+0x204>
 8001f4e:	2307      	movs	r3, #7
 8001f50:	e006      	b.n	8001f60 <HAL_GPIO_Init+0x204>
 8001f52:	2303      	movs	r3, #3
 8001f54:	e004      	b.n	8001f60 <HAL_GPIO_Init+0x204>
 8001f56:	2302      	movs	r3, #2
 8001f58:	e002      	b.n	8001f60 <HAL_GPIO_Init+0x204>
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	e000      	b.n	8001f60 <HAL_GPIO_Init+0x204>
 8001f5e:	2300      	movs	r3, #0
 8001f60:	69fa      	ldr	r2, [r7, #28]
 8001f62:	f002 0203 	and.w	r2, r2, #3
 8001f66:	0092      	lsls	r2, r2, #2
 8001f68:	4093      	lsls	r3, r2
 8001f6a:	69ba      	ldr	r2, [r7, #24]
 8001f6c:	4313      	orrs	r3, r2
 8001f6e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001f70:	4935      	ldr	r1, [pc, #212]	; (8002048 <HAL_GPIO_Init+0x2ec>)
 8001f72:	69fb      	ldr	r3, [r7, #28]
 8001f74:	089b      	lsrs	r3, r3, #2
 8001f76:	3302      	adds	r3, #2
 8001f78:	69ba      	ldr	r2, [r7, #24]
 8001f7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001f7e:	4b38      	ldr	r3, [pc, #224]	; (8002060 <HAL_GPIO_Init+0x304>)
 8001f80:	689b      	ldr	r3, [r3, #8]
 8001f82:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f84:	693b      	ldr	r3, [r7, #16]
 8001f86:	43db      	mvns	r3, r3
 8001f88:	69ba      	ldr	r2, [r7, #24]
 8001f8a:	4013      	ands	r3, r2
 8001f8c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	685b      	ldr	r3, [r3, #4]
 8001f92:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d003      	beq.n	8001fa2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001f9a:	69ba      	ldr	r2, [r7, #24]
 8001f9c:	693b      	ldr	r3, [r7, #16]
 8001f9e:	4313      	orrs	r3, r2
 8001fa0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001fa2:	4a2f      	ldr	r2, [pc, #188]	; (8002060 <HAL_GPIO_Init+0x304>)
 8001fa4:	69bb      	ldr	r3, [r7, #24]
 8001fa6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001fa8:	4b2d      	ldr	r3, [pc, #180]	; (8002060 <HAL_GPIO_Init+0x304>)
 8001faa:	68db      	ldr	r3, [r3, #12]
 8001fac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fae:	693b      	ldr	r3, [r7, #16]
 8001fb0:	43db      	mvns	r3, r3
 8001fb2:	69ba      	ldr	r2, [r7, #24]
 8001fb4:	4013      	ands	r3, r2
 8001fb6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	685b      	ldr	r3, [r3, #4]
 8001fbc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d003      	beq.n	8001fcc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001fc4:	69ba      	ldr	r2, [r7, #24]
 8001fc6:	693b      	ldr	r3, [r7, #16]
 8001fc8:	4313      	orrs	r3, r2
 8001fca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001fcc:	4a24      	ldr	r2, [pc, #144]	; (8002060 <HAL_GPIO_Init+0x304>)
 8001fce:	69bb      	ldr	r3, [r7, #24]
 8001fd0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001fd2:	4b23      	ldr	r3, [pc, #140]	; (8002060 <HAL_GPIO_Init+0x304>)
 8001fd4:	685b      	ldr	r3, [r3, #4]
 8001fd6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fd8:	693b      	ldr	r3, [r7, #16]
 8001fda:	43db      	mvns	r3, r3
 8001fdc:	69ba      	ldr	r2, [r7, #24]
 8001fde:	4013      	ands	r3, r2
 8001fe0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	685b      	ldr	r3, [r3, #4]
 8001fe6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d003      	beq.n	8001ff6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001fee:	69ba      	ldr	r2, [r7, #24]
 8001ff0:	693b      	ldr	r3, [r7, #16]
 8001ff2:	4313      	orrs	r3, r2
 8001ff4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001ff6:	4a1a      	ldr	r2, [pc, #104]	; (8002060 <HAL_GPIO_Init+0x304>)
 8001ff8:	69bb      	ldr	r3, [r7, #24]
 8001ffa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001ffc:	4b18      	ldr	r3, [pc, #96]	; (8002060 <HAL_GPIO_Init+0x304>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002002:	693b      	ldr	r3, [r7, #16]
 8002004:	43db      	mvns	r3, r3
 8002006:	69ba      	ldr	r2, [r7, #24]
 8002008:	4013      	ands	r3, r2
 800200a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	685b      	ldr	r3, [r3, #4]
 8002010:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002014:	2b00      	cmp	r3, #0
 8002016:	d003      	beq.n	8002020 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002018:	69ba      	ldr	r2, [r7, #24]
 800201a:	693b      	ldr	r3, [r7, #16]
 800201c:	4313      	orrs	r3, r2
 800201e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002020:	4a0f      	ldr	r2, [pc, #60]	; (8002060 <HAL_GPIO_Init+0x304>)
 8002022:	69bb      	ldr	r3, [r7, #24]
 8002024:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002026:	69fb      	ldr	r3, [r7, #28]
 8002028:	3301      	adds	r3, #1
 800202a:	61fb      	str	r3, [r7, #28]
 800202c:	69fb      	ldr	r3, [r7, #28]
 800202e:	2b0f      	cmp	r3, #15
 8002030:	f67f aea2 	bls.w	8001d78 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002034:	bf00      	nop
 8002036:	bf00      	nop
 8002038:	3724      	adds	r7, #36	; 0x24
 800203a:	46bd      	mov	sp, r7
 800203c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002040:	4770      	bx	lr
 8002042:	bf00      	nop
 8002044:	40023800 	.word	0x40023800
 8002048:	40013800 	.word	0x40013800
 800204c:	40020000 	.word	0x40020000
 8002050:	40020400 	.word	0x40020400
 8002054:	40020800 	.word	0x40020800
 8002058:	40020c00 	.word	0x40020c00
 800205c:	40021000 	.word	0x40021000
 8002060:	40013c00 	.word	0x40013c00

08002064 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002064:	b480      	push	{r7}
 8002066:	b083      	sub	sp, #12
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
 800206c:	460b      	mov	r3, r1
 800206e:	807b      	strh	r3, [r7, #2]
 8002070:	4613      	mov	r3, r2
 8002072:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002074:	787b      	ldrb	r3, [r7, #1]
 8002076:	2b00      	cmp	r3, #0
 8002078:	d003      	beq.n	8002082 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800207a:	887a      	ldrh	r2, [r7, #2]
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002080:	e003      	b.n	800208a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002082:	887b      	ldrh	r3, [r7, #2]
 8002084:	041a      	lsls	r2, r3, #16
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	619a      	str	r2, [r3, #24]
}
 800208a:	bf00      	nop
 800208c:	370c      	adds	r7, #12
 800208e:	46bd      	mov	sp, r7
 8002090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002094:	4770      	bx	lr
	...

08002098 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b086      	sub	sp, #24
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d101      	bne.n	80020aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80020a6:	2301      	movs	r3, #1
 80020a8:	e267      	b.n	800257a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f003 0301 	and.w	r3, r3, #1
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d075      	beq.n	80021a2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80020b6:	4b88      	ldr	r3, [pc, #544]	; (80022d8 <HAL_RCC_OscConfig+0x240>)
 80020b8:	689b      	ldr	r3, [r3, #8]
 80020ba:	f003 030c 	and.w	r3, r3, #12
 80020be:	2b04      	cmp	r3, #4
 80020c0:	d00c      	beq.n	80020dc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80020c2:	4b85      	ldr	r3, [pc, #532]	; (80022d8 <HAL_RCC_OscConfig+0x240>)
 80020c4:	689b      	ldr	r3, [r3, #8]
 80020c6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80020ca:	2b08      	cmp	r3, #8
 80020cc:	d112      	bne.n	80020f4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80020ce:	4b82      	ldr	r3, [pc, #520]	; (80022d8 <HAL_RCC_OscConfig+0x240>)
 80020d0:	685b      	ldr	r3, [r3, #4]
 80020d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020d6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80020da:	d10b      	bne.n	80020f4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020dc:	4b7e      	ldr	r3, [pc, #504]	; (80022d8 <HAL_RCC_OscConfig+0x240>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d05b      	beq.n	80021a0 <HAL_RCC_OscConfig+0x108>
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	685b      	ldr	r3, [r3, #4]
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d157      	bne.n	80021a0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80020f0:	2301      	movs	r3, #1
 80020f2:	e242      	b.n	800257a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	685b      	ldr	r3, [r3, #4]
 80020f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020fc:	d106      	bne.n	800210c <HAL_RCC_OscConfig+0x74>
 80020fe:	4b76      	ldr	r3, [pc, #472]	; (80022d8 <HAL_RCC_OscConfig+0x240>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	4a75      	ldr	r2, [pc, #468]	; (80022d8 <HAL_RCC_OscConfig+0x240>)
 8002104:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002108:	6013      	str	r3, [r2, #0]
 800210a:	e01d      	b.n	8002148 <HAL_RCC_OscConfig+0xb0>
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	685b      	ldr	r3, [r3, #4]
 8002110:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002114:	d10c      	bne.n	8002130 <HAL_RCC_OscConfig+0x98>
 8002116:	4b70      	ldr	r3, [pc, #448]	; (80022d8 <HAL_RCC_OscConfig+0x240>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	4a6f      	ldr	r2, [pc, #444]	; (80022d8 <HAL_RCC_OscConfig+0x240>)
 800211c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002120:	6013      	str	r3, [r2, #0]
 8002122:	4b6d      	ldr	r3, [pc, #436]	; (80022d8 <HAL_RCC_OscConfig+0x240>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	4a6c      	ldr	r2, [pc, #432]	; (80022d8 <HAL_RCC_OscConfig+0x240>)
 8002128:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800212c:	6013      	str	r3, [r2, #0]
 800212e:	e00b      	b.n	8002148 <HAL_RCC_OscConfig+0xb0>
 8002130:	4b69      	ldr	r3, [pc, #420]	; (80022d8 <HAL_RCC_OscConfig+0x240>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	4a68      	ldr	r2, [pc, #416]	; (80022d8 <HAL_RCC_OscConfig+0x240>)
 8002136:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800213a:	6013      	str	r3, [r2, #0]
 800213c:	4b66      	ldr	r3, [pc, #408]	; (80022d8 <HAL_RCC_OscConfig+0x240>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	4a65      	ldr	r2, [pc, #404]	; (80022d8 <HAL_RCC_OscConfig+0x240>)
 8002142:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002146:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	685b      	ldr	r3, [r3, #4]
 800214c:	2b00      	cmp	r3, #0
 800214e:	d013      	beq.n	8002178 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002150:	f7ff fce6 	bl	8001b20 <HAL_GetTick>
 8002154:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002156:	e008      	b.n	800216a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002158:	f7ff fce2 	bl	8001b20 <HAL_GetTick>
 800215c:	4602      	mov	r2, r0
 800215e:	693b      	ldr	r3, [r7, #16]
 8002160:	1ad3      	subs	r3, r2, r3
 8002162:	2b64      	cmp	r3, #100	; 0x64
 8002164:	d901      	bls.n	800216a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002166:	2303      	movs	r3, #3
 8002168:	e207      	b.n	800257a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800216a:	4b5b      	ldr	r3, [pc, #364]	; (80022d8 <HAL_RCC_OscConfig+0x240>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002172:	2b00      	cmp	r3, #0
 8002174:	d0f0      	beq.n	8002158 <HAL_RCC_OscConfig+0xc0>
 8002176:	e014      	b.n	80021a2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002178:	f7ff fcd2 	bl	8001b20 <HAL_GetTick>
 800217c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800217e:	e008      	b.n	8002192 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002180:	f7ff fcce 	bl	8001b20 <HAL_GetTick>
 8002184:	4602      	mov	r2, r0
 8002186:	693b      	ldr	r3, [r7, #16]
 8002188:	1ad3      	subs	r3, r2, r3
 800218a:	2b64      	cmp	r3, #100	; 0x64
 800218c:	d901      	bls.n	8002192 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800218e:	2303      	movs	r3, #3
 8002190:	e1f3      	b.n	800257a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002192:	4b51      	ldr	r3, [pc, #324]	; (80022d8 <HAL_RCC_OscConfig+0x240>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800219a:	2b00      	cmp	r3, #0
 800219c:	d1f0      	bne.n	8002180 <HAL_RCC_OscConfig+0xe8>
 800219e:	e000      	b.n	80021a2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f003 0302 	and.w	r3, r3, #2
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d063      	beq.n	8002276 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80021ae:	4b4a      	ldr	r3, [pc, #296]	; (80022d8 <HAL_RCC_OscConfig+0x240>)
 80021b0:	689b      	ldr	r3, [r3, #8]
 80021b2:	f003 030c 	and.w	r3, r3, #12
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d00b      	beq.n	80021d2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80021ba:	4b47      	ldr	r3, [pc, #284]	; (80022d8 <HAL_RCC_OscConfig+0x240>)
 80021bc:	689b      	ldr	r3, [r3, #8]
 80021be:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80021c2:	2b08      	cmp	r3, #8
 80021c4:	d11c      	bne.n	8002200 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80021c6:	4b44      	ldr	r3, [pc, #272]	; (80022d8 <HAL_RCC_OscConfig+0x240>)
 80021c8:	685b      	ldr	r3, [r3, #4]
 80021ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d116      	bne.n	8002200 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021d2:	4b41      	ldr	r3, [pc, #260]	; (80022d8 <HAL_RCC_OscConfig+0x240>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f003 0302 	and.w	r3, r3, #2
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d005      	beq.n	80021ea <HAL_RCC_OscConfig+0x152>
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	68db      	ldr	r3, [r3, #12]
 80021e2:	2b01      	cmp	r3, #1
 80021e4:	d001      	beq.n	80021ea <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80021e6:	2301      	movs	r3, #1
 80021e8:	e1c7      	b.n	800257a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021ea:	4b3b      	ldr	r3, [pc, #236]	; (80022d8 <HAL_RCC_OscConfig+0x240>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	691b      	ldr	r3, [r3, #16]
 80021f6:	00db      	lsls	r3, r3, #3
 80021f8:	4937      	ldr	r1, [pc, #220]	; (80022d8 <HAL_RCC_OscConfig+0x240>)
 80021fa:	4313      	orrs	r3, r2
 80021fc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021fe:	e03a      	b.n	8002276 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	68db      	ldr	r3, [r3, #12]
 8002204:	2b00      	cmp	r3, #0
 8002206:	d020      	beq.n	800224a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002208:	4b34      	ldr	r3, [pc, #208]	; (80022dc <HAL_RCC_OscConfig+0x244>)
 800220a:	2201      	movs	r2, #1
 800220c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800220e:	f7ff fc87 	bl	8001b20 <HAL_GetTick>
 8002212:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002214:	e008      	b.n	8002228 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002216:	f7ff fc83 	bl	8001b20 <HAL_GetTick>
 800221a:	4602      	mov	r2, r0
 800221c:	693b      	ldr	r3, [r7, #16]
 800221e:	1ad3      	subs	r3, r2, r3
 8002220:	2b02      	cmp	r3, #2
 8002222:	d901      	bls.n	8002228 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002224:	2303      	movs	r3, #3
 8002226:	e1a8      	b.n	800257a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002228:	4b2b      	ldr	r3, [pc, #172]	; (80022d8 <HAL_RCC_OscConfig+0x240>)
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f003 0302 	and.w	r3, r3, #2
 8002230:	2b00      	cmp	r3, #0
 8002232:	d0f0      	beq.n	8002216 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002234:	4b28      	ldr	r3, [pc, #160]	; (80022d8 <HAL_RCC_OscConfig+0x240>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	691b      	ldr	r3, [r3, #16]
 8002240:	00db      	lsls	r3, r3, #3
 8002242:	4925      	ldr	r1, [pc, #148]	; (80022d8 <HAL_RCC_OscConfig+0x240>)
 8002244:	4313      	orrs	r3, r2
 8002246:	600b      	str	r3, [r1, #0]
 8002248:	e015      	b.n	8002276 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800224a:	4b24      	ldr	r3, [pc, #144]	; (80022dc <HAL_RCC_OscConfig+0x244>)
 800224c:	2200      	movs	r2, #0
 800224e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002250:	f7ff fc66 	bl	8001b20 <HAL_GetTick>
 8002254:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002256:	e008      	b.n	800226a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002258:	f7ff fc62 	bl	8001b20 <HAL_GetTick>
 800225c:	4602      	mov	r2, r0
 800225e:	693b      	ldr	r3, [r7, #16]
 8002260:	1ad3      	subs	r3, r2, r3
 8002262:	2b02      	cmp	r3, #2
 8002264:	d901      	bls.n	800226a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002266:	2303      	movs	r3, #3
 8002268:	e187      	b.n	800257a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800226a:	4b1b      	ldr	r3, [pc, #108]	; (80022d8 <HAL_RCC_OscConfig+0x240>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f003 0302 	and.w	r3, r3, #2
 8002272:	2b00      	cmp	r3, #0
 8002274:	d1f0      	bne.n	8002258 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f003 0308 	and.w	r3, r3, #8
 800227e:	2b00      	cmp	r3, #0
 8002280:	d036      	beq.n	80022f0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	695b      	ldr	r3, [r3, #20]
 8002286:	2b00      	cmp	r3, #0
 8002288:	d016      	beq.n	80022b8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800228a:	4b15      	ldr	r3, [pc, #84]	; (80022e0 <HAL_RCC_OscConfig+0x248>)
 800228c:	2201      	movs	r2, #1
 800228e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002290:	f7ff fc46 	bl	8001b20 <HAL_GetTick>
 8002294:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002296:	e008      	b.n	80022aa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002298:	f7ff fc42 	bl	8001b20 <HAL_GetTick>
 800229c:	4602      	mov	r2, r0
 800229e:	693b      	ldr	r3, [r7, #16]
 80022a0:	1ad3      	subs	r3, r2, r3
 80022a2:	2b02      	cmp	r3, #2
 80022a4:	d901      	bls.n	80022aa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80022a6:	2303      	movs	r3, #3
 80022a8:	e167      	b.n	800257a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022aa:	4b0b      	ldr	r3, [pc, #44]	; (80022d8 <HAL_RCC_OscConfig+0x240>)
 80022ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80022ae:	f003 0302 	and.w	r3, r3, #2
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d0f0      	beq.n	8002298 <HAL_RCC_OscConfig+0x200>
 80022b6:	e01b      	b.n	80022f0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80022b8:	4b09      	ldr	r3, [pc, #36]	; (80022e0 <HAL_RCC_OscConfig+0x248>)
 80022ba:	2200      	movs	r2, #0
 80022bc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022be:	f7ff fc2f 	bl	8001b20 <HAL_GetTick>
 80022c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022c4:	e00e      	b.n	80022e4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80022c6:	f7ff fc2b 	bl	8001b20 <HAL_GetTick>
 80022ca:	4602      	mov	r2, r0
 80022cc:	693b      	ldr	r3, [r7, #16]
 80022ce:	1ad3      	subs	r3, r2, r3
 80022d0:	2b02      	cmp	r3, #2
 80022d2:	d907      	bls.n	80022e4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80022d4:	2303      	movs	r3, #3
 80022d6:	e150      	b.n	800257a <HAL_RCC_OscConfig+0x4e2>
 80022d8:	40023800 	.word	0x40023800
 80022dc:	42470000 	.word	0x42470000
 80022e0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022e4:	4b88      	ldr	r3, [pc, #544]	; (8002508 <HAL_RCC_OscConfig+0x470>)
 80022e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80022e8:	f003 0302 	and.w	r3, r3, #2
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d1ea      	bne.n	80022c6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f003 0304 	and.w	r3, r3, #4
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	f000 8097 	beq.w	800242c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80022fe:	2300      	movs	r3, #0
 8002300:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002302:	4b81      	ldr	r3, [pc, #516]	; (8002508 <HAL_RCC_OscConfig+0x470>)
 8002304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002306:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800230a:	2b00      	cmp	r3, #0
 800230c:	d10f      	bne.n	800232e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800230e:	2300      	movs	r3, #0
 8002310:	60bb      	str	r3, [r7, #8]
 8002312:	4b7d      	ldr	r3, [pc, #500]	; (8002508 <HAL_RCC_OscConfig+0x470>)
 8002314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002316:	4a7c      	ldr	r2, [pc, #496]	; (8002508 <HAL_RCC_OscConfig+0x470>)
 8002318:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800231c:	6413      	str	r3, [r2, #64]	; 0x40
 800231e:	4b7a      	ldr	r3, [pc, #488]	; (8002508 <HAL_RCC_OscConfig+0x470>)
 8002320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002322:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002326:	60bb      	str	r3, [r7, #8]
 8002328:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800232a:	2301      	movs	r3, #1
 800232c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800232e:	4b77      	ldr	r3, [pc, #476]	; (800250c <HAL_RCC_OscConfig+0x474>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002336:	2b00      	cmp	r3, #0
 8002338:	d118      	bne.n	800236c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800233a:	4b74      	ldr	r3, [pc, #464]	; (800250c <HAL_RCC_OscConfig+0x474>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	4a73      	ldr	r2, [pc, #460]	; (800250c <HAL_RCC_OscConfig+0x474>)
 8002340:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002344:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002346:	f7ff fbeb 	bl	8001b20 <HAL_GetTick>
 800234a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800234c:	e008      	b.n	8002360 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800234e:	f7ff fbe7 	bl	8001b20 <HAL_GetTick>
 8002352:	4602      	mov	r2, r0
 8002354:	693b      	ldr	r3, [r7, #16]
 8002356:	1ad3      	subs	r3, r2, r3
 8002358:	2b02      	cmp	r3, #2
 800235a:	d901      	bls.n	8002360 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800235c:	2303      	movs	r3, #3
 800235e:	e10c      	b.n	800257a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002360:	4b6a      	ldr	r3, [pc, #424]	; (800250c <HAL_RCC_OscConfig+0x474>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002368:	2b00      	cmp	r3, #0
 800236a:	d0f0      	beq.n	800234e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	689b      	ldr	r3, [r3, #8]
 8002370:	2b01      	cmp	r3, #1
 8002372:	d106      	bne.n	8002382 <HAL_RCC_OscConfig+0x2ea>
 8002374:	4b64      	ldr	r3, [pc, #400]	; (8002508 <HAL_RCC_OscConfig+0x470>)
 8002376:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002378:	4a63      	ldr	r2, [pc, #396]	; (8002508 <HAL_RCC_OscConfig+0x470>)
 800237a:	f043 0301 	orr.w	r3, r3, #1
 800237e:	6713      	str	r3, [r2, #112]	; 0x70
 8002380:	e01c      	b.n	80023bc <HAL_RCC_OscConfig+0x324>
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	689b      	ldr	r3, [r3, #8]
 8002386:	2b05      	cmp	r3, #5
 8002388:	d10c      	bne.n	80023a4 <HAL_RCC_OscConfig+0x30c>
 800238a:	4b5f      	ldr	r3, [pc, #380]	; (8002508 <HAL_RCC_OscConfig+0x470>)
 800238c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800238e:	4a5e      	ldr	r2, [pc, #376]	; (8002508 <HAL_RCC_OscConfig+0x470>)
 8002390:	f043 0304 	orr.w	r3, r3, #4
 8002394:	6713      	str	r3, [r2, #112]	; 0x70
 8002396:	4b5c      	ldr	r3, [pc, #368]	; (8002508 <HAL_RCC_OscConfig+0x470>)
 8002398:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800239a:	4a5b      	ldr	r2, [pc, #364]	; (8002508 <HAL_RCC_OscConfig+0x470>)
 800239c:	f043 0301 	orr.w	r3, r3, #1
 80023a0:	6713      	str	r3, [r2, #112]	; 0x70
 80023a2:	e00b      	b.n	80023bc <HAL_RCC_OscConfig+0x324>
 80023a4:	4b58      	ldr	r3, [pc, #352]	; (8002508 <HAL_RCC_OscConfig+0x470>)
 80023a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023a8:	4a57      	ldr	r2, [pc, #348]	; (8002508 <HAL_RCC_OscConfig+0x470>)
 80023aa:	f023 0301 	bic.w	r3, r3, #1
 80023ae:	6713      	str	r3, [r2, #112]	; 0x70
 80023b0:	4b55      	ldr	r3, [pc, #340]	; (8002508 <HAL_RCC_OscConfig+0x470>)
 80023b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023b4:	4a54      	ldr	r2, [pc, #336]	; (8002508 <HAL_RCC_OscConfig+0x470>)
 80023b6:	f023 0304 	bic.w	r3, r3, #4
 80023ba:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	689b      	ldr	r3, [r3, #8]
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d015      	beq.n	80023f0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023c4:	f7ff fbac 	bl	8001b20 <HAL_GetTick>
 80023c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023ca:	e00a      	b.n	80023e2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80023cc:	f7ff fba8 	bl	8001b20 <HAL_GetTick>
 80023d0:	4602      	mov	r2, r0
 80023d2:	693b      	ldr	r3, [r7, #16]
 80023d4:	1ad3      	subs	r3, r2, r3
 80023d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80023da:	4293      	cmp	r3, r2
 80023dc:	d901      	bls.n	80023e2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80023de:	2303      	movs	r3, #3
 80023e0:	e0cb      	b.n	800257a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023e2:	4b49      	ldr	r3, [pc, #292]	; (8002508 <HAL_RCC_OscConfig+0x470>)
 80023e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023e6:	f003 0302 	and.w	r3, r3, #2
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d0ee      	beq.n	80023cc <HAL_RCC_OscConfig+0x334>
 80023ee:	e014      	b.n	800241a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023f0:	f7ff fb96 	bl	8001b20 <HAL_GetTick>
 80023f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023f6:	e00a      	b.n	800240e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80023f8:	f7ff fb92 	bl	8001b20 <HAL_GetTick>
 80023fc:	4602      	mov	r2, r0
 80023fe:	693b      	ldr	r3, [r7, #16]
 8002400:	1ad3      	subs	r3, r2, r3
 8002402:	f241 3288 	movw	r2, #5000	; 0x1388
 8002406:	4293      	cmp	r3, r2
 8002408:	d901      	bls.n	800240e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800240a:	2303      	movs	r3, #3
 800240c:	e0b5      	b.n	800257a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800240e:	4b3e      	ldr	r3, [pc, #248]	; (8002508 <HAL_RCC_OscConfig+0x470>)
 8002410:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002412:	f003 0302 	and.w	r3, r3, #2
 8002416:	2b00      	cmp	r3, #0
 8002418:	d1ee      	bne.n	80023f8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800241a:	7dfb      	ldrb	r3, [r7, #23]
 800241c:	2b01      	cmp	r3, #1
 800241e:	d105      	bne.n	800242c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002420:	4b39      	ldr	r3, [pc, #228]	; (8002508 <HAL_RCC_OscConfig+0x470>)
 8002422:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002424:	4a38      	ldr	r2, [pc, #224]	; (8002508 <HAL_RCC_OscConfig+0x470>)
 8002426:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800242a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	699b      	ldr	r3, [r3, #24]
 8002430:	2b00      	cmp	r3, #0
 8002432:	f000 80a1 	beq.w	8002578 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002436:	4b34      	ldr	r3, [pc, #208]	; (8002508 <HAL_RCC_OscConfig+0x470>)
 8002438:	689b      	ldr	r3, [r3, #8]
 800243a:	f003 030c 	and.w	r3, r3, #12
 800243e:	2b08      	cmp	r3, #8
 8002440:	d05c      	beq.n	80024fc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	699b      	ldr	r3, [r3, #24]
 8002446:	2b02      	cmp	r3, #2
 8002448:	d141      	bne.n	80024ce <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800244a:	4b31      	ldr	r3, [pc, #196]	; (8002510 <HAL_RCC_OscConfig+0x478>)
 800244c:	2200      	movs	r2, #0
 800244e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002450:	f7ff fb66 	bl	8001b20 <HAL_GetTick>
 8002454:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002456:	e008      	b.n	800246a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002458:	f7ff fb62 	bl	8001b20 <HAL_GetTick>
 800245c:	4602      	mov	r2, r0
 800245e:	693b      	ldr	r3, [r7, #16]
 8002460:	1ad3      	subs	r3, r2, r3
 8002462:	2b02      	cmp	r3, #2
 8002464:	d901      	bls.n	800246a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002466:	2303      	movs	r3, #3
 8002468:	e087      	b.n	800257a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800246a:	4b27      	ldr	r3, [pc, #156]	; (8002508 <HAL_RCC_OscConfig+0x470>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002472:	2b00      	cmp	r3, #0
 8002474:	d1f0      	bne.n	8002458 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	69da      	ldr	r2, [r3, #28]
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	6a1b      	ldr	r3, [r3, #32]
 800247e:	431a      	orrs	r2, r3
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002484:	019b      	lsls	r3, r3, #6
 8002486:	431a      	orrs	r2, r3
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800248c:	085b      	lsrs	r3, r3, #1
 800248e:	3b01      	subs	r3, #1
 8002490:	041b      	lsls	r3, r3, #16
 8002492:	431a      	orrs	r2, r3
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002498:	061b      	lsls	r3, r3, #24
 800249a:	491b      	ldr	r1, [pc, #108]	; (8002508 <HAL_RCC_OscConfig+0x470>)
 800249c:	4313      	orrs	r3, r2
 800249e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80024a0:	4b1b      	ldr	r3, [pc, #108]	; (8002510 <HAL_RCC_OscConfig+0x478>)
 80024a2:	2201      	movs	r2, #1
 80024a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024a6:	f7ff fb3b 	bl	8001b20 <HAL_GetTick>
 80024aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024ac:	e008      	b.n	80024c0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024ae:	f7ff fb37 	bl	8001b20 <HAL_GetTick>
 80024b2:	4602      	mov	r2, r0
 80024b4:	693b      	ldr	r3, [r7, #16]
 80024b6:	1ad3      	subs	r3, r2, r3
 80024b8:	2b02      	cmp	r3, #2
 80024ba:	d901      	bls.n	80024c0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80024bc:	2303      	movs	r3, #3
 80024be:	e05c      	b.n	800257a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024c0:	4b11      	ldr	r3, [pc, #68]	; (8002508 <HAL_RCC_OscConfig+0x470>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d0f0      	beq.n	80024ae <HAL_RCC_OscConfig+0x416>
 80024cc:	e054      	b.n	8002578 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024ce:	4b10      	ldr	r3, [pc, #64]	; (8002510 <HAL_RCC_OscConfig+0x478>)
 80024d0:	2200      	movs	r2, #0
 80024d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024d4:	f7ff fb24 	bl	8001b20 <HAL_GetTick>
 80024d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024da:	e008      	b.n	80024ee <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024dc:	f7ff fb20 	bl	8001b20 <HAL_GetTick>
 80024e0:	4602      	mov	r2, r0
 80024e2:	693b      	ldr	r3, [r7, #16]
 80024e4:	1ad3      	subs	r3, r2, r3
 80024e6:	2b02      	cmp	r3, #2
 80024e8:	d901      	bls.n	80024ee <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80024ea:	2303      	movs	r3, #3
 80024ec:	e045      	b.n	800257a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024ee:	4b06      	ldr	r3, [pc, #24]	; (8002508 <HAL_RCC_OscConfig+0x470>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d1f0      	bne.n	80024dc <HAL_RCC_OscConfig+0x444>
 80024fa:	e03d      	b.n	8002578 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	699b      	ldr	r3, [r3, #24]
 8002500:	2b01      	cmp	r3, #1
 8002502:	d107      	bne.n	8002514 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002504:	2301      	movs	r3, #1
 8002506:	e038      	b.n	800257a <HAL_RCC_OscConfig+0x4e2>
 8002508:	40023800 	.word	0x40023800
 800250c:	40007000 	.word	0x40007000
 8002510:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002514:	4b1b      	ldr	r3, [pc, #108]	; (8002584 <HAL_RCC_OscConfig+0x4ec>)
 8002516:	685b      	ldr	r3, [r3, #4]
 8002518:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	699b      	ldr	r3, [r3, #24]
 800251e:	2b01      	cmp	r3, #1
 8002520:	d028      	beq.n	8002574 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800252c:	429a      	cmp	r2, r3
 800252e:	d121      	bne.n	8002574 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800253a:	429a      	cmp	r2, r3
 800253c:	d11a      	bne.n	8002574 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800253e:	68fa      	ldr	r2, [r7, #12]
 8002540:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002544:	4013      	ands	r3, r2
 8002546:	687a      	ldr	r2, [r7, #4]
 8002548:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800254a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800254c:	4293      	cmp	r3, r2
 800254e:	d111      	bne.n	8002574 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800255a:	085b      	lsrs	r3, r3, #1
 800255c:	3b01      	subs	r3, #1
 800255e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002560:	429a      	cmp	r2, r3
 8002562:	d107      	bne.n	8002574 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800256e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002570:	429a      	cmp	r2, r3
 8002572:	d001      	beq.n	8002578 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002574:	2301      	movs	r3, #1
 8002576:	e000      	b.n	800257a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002578:	2300      	movs	r3, #0
}
 800257a:	4618      	mov	r0, r3
 800257c:	3718      	adds	r7, #24
 800257e:	46bd      	mov	sp, r7
 8002580:	bd80      	pop	{r7, pc}
 8002582:	bf00      	nop
 8002584:	40023800 	.word	0x40023800

08002588 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b084      	sub	sp, #16
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
 8002590:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	2b00      	cmp	r3, #0
 8002596:	d101      	bne.n	800259c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002598:	2301      	movs	r3, #1
 800259a:	e0cc      	b.n	8002736 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800259c:	4b68      	ldr	r3, [pc, #416]	; (8002740 <HAL_RCC_ClockConfig+0x1b8>)
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f003 0307 	and.w	r3, r3, #7
 80025a4:	683a      	ldr	r2, [r7, #0]
 80025a6:	429a      	cmp	r2, r3
 80025a8:	d90c      	bls.n	80025c4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025aa:	4b65      	ldr	r3, [pc, #404]	; (8002740 <HAL_RCC_ClockConfig+0x1b8>)
 80025ac:	683a      	ldr	r2, [r7, #0]
 80025ae:	b2d2      	uxtb	r2, r2
 80025b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80025b2:	4b63      	ldr	r3, [pc, #396]	; (8002740 <HAL_RCC_ClockConfig+0x1b8>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f003 0307 	and.w	r3, r3, #7
 80025ba:	683a      	ldr	r2, [r7, #0]
 80025bc:	429a      	cmp	r2, r3
 80025be:	d001      	beq.n	80025c4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80025c0:	2301      	movs	r3, #1
 80025c2:	e0b8      	b.n	8002736 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f003 0302 	and.w	r3, r3, #2
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d020      	beq.n	8002612 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f003 0304 	and.w	r3, r3, #4
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d005      	beq.n	80025e8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80025dc:	4b59      	ldr	r3, [pc, #356]	; (8002744 <HAL_RCC_ClockConfig+0x1bc>)
 80025de:	689b      	ldr	r3, [r3, #8]
 80025e0:	4a58      	ldr	r2, [pc, #352]	; (8002744 <HAL_RCC_ClockConfig+0x1bc>)
 80025e2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80025e6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f003 0308 	and.w	r3, r3, #8
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d005      	beq.n	8002600 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80025f4:	4b53      	ldr	r3, [pc, #332]	; (8002744 <HAL_RCC_ClockConfig+0x1bc>)
 80025f6:	689b      	ldr	r3, [r3, #8]
 80025f8:	4a52      	ldr	r2, [pc, #328]	; (8002744 <HAL_RCC_ClockConfig+0x1bc>)
 80025fa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80025fe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002600:	4b50      	ldr	r3, [pc, #320]	; (8002744 <HAL_RCC_ClockConfig+0x1bc>)
 8002602:	689b      	ldr	r3, [r3, #8]
 8002604:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	689b      	ldr	r3, [r3, #8]
 800260c:	494d      	ldr	r1, [pc, #308]	; (8002744 <HAL_RCC_ClockConfig+0x1bc>)
 800260e:	4313      	orrs	r3, r2
 8002610:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f003 0301 	and.w	r3, r3, #1
 800261a:	2b00      	cmp	r3, #0
 800261c:	d044      	beq.n	80026a8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	685b      	ldr	r3, [r3, #4]
 8002622:	2b01      	cmp	r3, #1
 8002624:	d107      	bne.n	8002636 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002626:	4b47      	ldr	r3, [pc, #284]	; (8002744 <HAL_RCC_ClockConfig+0x1bc>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800262e:	2b00      	cmp	r3, #0
 8002630:	d119      	bne.n	8002666 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002632:	2301      	movs	r3, #1
 8002634:	e07f      	b.n	8002736 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	685b      	ldr	r3, [r3, #4]
 800263a:	2b02      	cmp	r3, #2
 800263c:	d003      	beq.n	8002646 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002642:	2b03      	cmp	r3, #3
 8002644:	d107      	bne.n	8002656 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002646:	4b3f      	ldr	r3, [pc, #252]	; (8002744 <HAL_RCC_ClockConfig+0x1bc>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800264e:	2b00      	cmp	r3, #0
 8002650:	d109      	bne.n	8002666 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002652:	2301      	movs	r3, #1
 8002654:	e06f      	b.n	8002736 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002656:	4b3b      	ldr	r3, [pc, #236]	; (8002744 <HAL_RCC_ClockConfig+0x1bc>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f003 0302 	and.w	r3, r3, #2
 800265e:	2b00      	cmp	r3, #0
 8002660:	d101      	bne.n	8002666 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002662:	2301      	movs	r3, #1
 8002664:	e067      	b.n	8002736 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002666:	4b37      	ldr	r3, [pc, #220]	; (8002744 <HAL_RCC_ClockConfig+0x1bc>)
 8002668:	689b      	ldr	r3, [r3, #8]
 800266a:	f023 0203 	bic.w	r2, r3, #3
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	685b      	ldr	r3, [r3, #4]
 8002672:	4934      	ldr	r1, [pc, #208]	; (8002744 <HAL_RCC_ClockConfig+0x1bc>)
 8002674:	4313      	orrs	r3, r2
 8002676:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002678:	f7ff fa52 	bl	8001b20 <HAL_GetTick>
 800267c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800267e:	e00a      	b.n	8002696 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002680:	f7ff fa4e 	bl	8001b20 <HAL_GetTick>
 8002684:	4602      	mov	r2, r0
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	1ad3      	subs	r3, r2, r3
 800268a:	f241 3288 	movw	r2, #5000	; 0x1388
 800268e:	4293      	cmp	r3, r2
 8002690:	d901      	bls.n	8002696 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002692:	2303      	movs	r3, #3
 8002694:	e04f      	b.n	8002736 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002696:	4b2b      	ldr	r3, [pc, #172]	; (8002744 <HAL_RCC_ClockConfig+0x1bc>)
 8002698:	689b      	ldr	r3, [r3, #8]
 800269a:	f003 020c 	and.w	r2, r3, #12
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	685b      	ldr	r3, [r3, #4]
 80026a2:	009b      	lsls	r3, r3, #2
 80026a4:	429a      	cmp	r2, r3
 80026a6:	d1eb      	bne.n	8002680 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80026a8:	4b25      	ldr	r3, [pc, #148]	; (8002740 <HAL_RCC_ClockConfig+0x1b8>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f003 0307 	and.w	r3, r3, #7
 80026b0:	683a      	ldr	r2, [r7, #0]
 80026b2:	429a      	cmp	r2, r3
 80026b4:	d20c      	bcs.n	80026d0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026b6:	4b22      	ldr	r3, [pc, #136]	; (8002740 <HAL_RCC_ClockConfig+0x1b8>)
 80026b8:	683a      	ldr	r2, [r7, #0]
 80026ba:	b2d2      	uxtb	r2, r2
 80026bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80026be:	4b20      	ldr	r3, [pc, #128]	; (8002740 <HAL_RCC_ClockConfig+0x1b8>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f003 0307 	and.w	r3, r3, #7
 80026c6:	683a      	ldr	r2, [r7, #0]
 80026c8:	429a      	cmp	r2, r3
 80026ca:	d001      	beq.n	80026d0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80026cc:	2301      	movs	r3, #1
 80026ce:	e032      	b.n	8002736 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f003 0304 	and.w	r3, r3, #4
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d008      	beq.n	80026ee <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80026dc:	4b19      	ldr	r3, [pc, #100]	; (8002744 <HAL_RCC_ClockConfig+0x1bc>)
 80026de:	689b      	ldr	r3, [r3, #8]
 80026e0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	68db      	ldr	r3, [r3, #12]
 80026e8:	4916      	ldr	r1, [pc, #88]	; (8002744 <HAL_RCC_ClockConfig+0x1bc>)
 80026ea:	4313      	orrs	r3, r2
 80026ec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f003 0308 	and.w	r3, r3, #8
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d009      	beq.n	800270e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80026fa:	4b12      	ldr	r3, [pc, #72]	; (8002744 <HAL_RCC_ClockConfig+0x1bc>)
 80026fc:	689b      	ldr	r3, [r3, #8]
 80026fe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	691b      	ldr	r3, [r3, #16]
 8002706:	00db      	lsls	r3, r3, #3
 8002708:	490e      	ldr	r1, [pc, #56]	; (8002744 <HAL_RCC_ClockConfig+0x1bc>)
 800270a:	4313      	orrs	r3, r2
 800270c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800270e:	f000 f821 	bl	8002754 <HAL_RCC_GetSysClockFreq>
 8002712:	4602      	mov	r2, r0
 8002714:	4b0b      	ldr	r3, [pc, #44]	; (8002744 <HAL_RCC_ClockConfig+0x1bc>)
 8002716:	689b      	ldr	r3, [r3, #8]
 8002718:	091b      	lsrs	r3, r3, #4
 800271a:	f003 030f 	and.w	r3, r3, #15
 800271e:	490a      	ldr	r1, [pc, #40]	; (8002748 <HAL_RCC_ClockConfig+0x1c0>)
 8002720:	5ccb      	ldrb	r3, [r1, r3]
 8002722:	fa22 f303 	lsr.w	r3, r2, r3
 8002726:	4a09      	ldr	r2, [pc, #36]	; (800274c <HAL_RCC_ClockConfig+0x1c4>)
 8002728:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800272a:	4b09      	ldr	r3, [pc, #36]	; (8002750 <HAL_RCC_ClockConfig+0x1c8>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	4618      	mov	r0, r3
 8002730:	f7ff f9b2 	bl	8001a98 <HAL_InitTick>

  return HAL_OK;
 8002734:	2300      	movs	r3, #0
}
 8002736:	4618      	mov	r0, r3
 8002738:	3710      	adds	r7, #16
 800273a:	46bd      	mov	sp, r7
 800273c:	bd80      	pop	{r7, pc}
 800273e:	bf00      	nop
 8002740:	40023c00 	.word	0x40023c00
 8002744:	40023800 	.word	0x40023800
 8002748:	08006528 	.word	0x08006528
 800274c:	20000000 	.word	0x20000000
 8002750:	20000004 	.word	0x20000004

08002754 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002754:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002758:	b094      	sub	sp, #80	; 0x50
 800275a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800275c:	2300      	movs	r3, #0
 800275e:	647b      	str	r3, [r7, #68]	; 0x44
 8002760:	2300      	movs	r3, #0
 8002762:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002764:	2300      	movs	r3, #0
 8002766:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002768:	2300      	movs	r3, #0
 800276a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800276c:	4b79      	ldr	r3, [pc, #484]	; (8002954 <HAL_RCC_GetSysClockFreq+0x200>)
 800276e:	689b      	ldr	r3, [r3, #8]
 8002770:	f003 030c 	and.w	r3, r3, #12
 8002774:	2b08      	cmp	r3, #8
 8002776:	d00d      	beq.n	8002794 <HAL_RCC_GetSysClockFreq+0x40>
 8002778:	2b08      	cmp	r3, #8
 800277a:	f200 80e1 	bhi.w	8002940 <HAL_RCC_GetSysClockFreq+0x1ec>
 800277e:	2b00      	cmp	r3, #0
 8002780:	d002      	beq.n	8002788 <HAL_RCC_GetSysClockFreq+0x34>
 8002782:	2b04      	cmp	r3, #4
 8002784:	d003      	beq.n	800278e <HAL_RCC_GetSysClockFreq+0x3a>
 8002786:	e0db      	b.n	8002940 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002788:	4b73      	ldr	r3, [pc, #460]	; (8002958 <HAL_RCC_GetSysClockFreq+0x204>)
 800278a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800278c:	e0db      	b.n	8002946 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800278e:	4b73      	ldr	r3, [pc, #460]	; (800295c <HAL_RCC_GetSysClockFreq+0x208>)
 8002790:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002792:	e0d8      	b.n	8002946 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002794:	4b6f      	ldr	r3, [pc, #444]	; (8002954 <HAL_RCC_GetSysClockFreq+0x200>)
 8002796:	685b      	ldr	r3, [r3, #4]
 8002798:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800279c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800279e:	4b6d      	ldr	r3, [pc, #436]	; (8002954 <HAL_RCC_GetSysClockFreq+0x200>)
 80027a0:	685b      	ldr	r3, [r3, #4]
 80027a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d063      	beq.n	8002872 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80027aa:	4b6a      	ldr	r3, [pc, #424]	; (8002954 <HAL_RCC_GetSysClockFreq+0x200>)
 80027ac:	685b      	ldr	r3, [r3, #4]
 80027ae:	099b      	lsrs	r3, r3, #6
 80027b0:	2200      	movs	r2, #0
 80027b2:	63bb      	str	r3, [r7, #56]	; 0x38
 80027b4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80027b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80027bc:	633b      	str	r3, [r7, #48]	; 0x30
 80027be:	2300      	movs	r3, #0
 80027c0:	637b      	str	r3, [r7, #52]	; 0x34
 80027c2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80027c6:	4622      	mov	r2, r4
 80027c8:	462b      	mov	r3, r5
 80027ca:	f04f 0000 	mov.w	r0, #0
 80027ce:	f04f 0100 	mov.w	r1, #0
 80027d2:	0159      	lsls	r1, r3, #5
 80027d4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80027d8:	0150      	lsls	r0, r2, #5
 80027da:	4602      	mov	r2, r0
 80027dc:	460b      	mov	r3, r1
 80027de:	4621      	mov	r1, r4
 80027e0:	1a51      	subs	r1, r2, r1
 80027e2:	6139      	str	r1, [r7, #16]
 80027e4:	4629      	mov	r1, r5
 80027e6:	eb63 0301 	sbc.w	r3, r3, r1
 80027ea:	617b      	str	r3, [r7, #20]
 80027ec:	f04f 0200 	mov.w	r2, #0
 80027f0:	f04f 0300 	mov.w	r3, #0
 80027f4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80027f8:	4659      	mov	r1, fp
 80027fa:	018b      	lsls	r3, r1, #6
 80027fc:	4651      	mov	r1, sl
 80027fe:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002802:	4651      	mov	r1, sl
 8002804:	018a      	lsls	r2, r1, #6
 8002806:	4651      	mov	r1, sl
 8002808:	ebb2 0801 	subs.w	r8, r2, r1
 800280c:	4659      	mov	r1, fp
 800280e:	eb63 0901 	sbc.w	r9, r3, r1
 8002812:	f04f 0200 	mov.w	r2, #0
 8002816:	f04f 0300 	mov.w	r3, #0
 800281a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800281e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002822:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002826:	4690      	mov	r8, r2
 8002828:	4699      	mov	r9, r3
 800282a:	4623      	mov	r3, r4
 800282c:	eb18 0303 	adds.w	r3, r8, r3
 8002830:	60bb      	str	r3, [r7, #8]
 8002832:	462b      	mov	r3, r5
 8002834:	eb49 0303 	adc.w	r3, r9, r3
 8002838:	60fb      	str	r3, [r7, #12]
 800283a:	f04f 0200 	mov.w	r2, #0
 800283e:	f04f 0300 	mov.w	r3, #0
 8002842:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002846:	4629      	mov	r1, r5
 8002848:	024b      	lsls	r3, r1, #9
 800284a:	4621      	mov	r1, r4
 800284c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002850:	4621      	mov	r1, r4
 8002852:	024a      	lsls	r2, r1, #9
 8002854:	4610      	mov	r0, r2
 8002856:	4619      	mov	r1, r3
 8002858:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800285a:	2200      	movs	r2, #0
 800285c:	62bb      	str	r3, [r7, #40]	; 0x28
 800285e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002860:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002864:	f7fe fab6 	bl	8000dd4 <__aeabi_uldivmod>
 8002868:	4602      	mov	r2, r0
 800286a:	460b      	mov	r3, r1
 800286c:	4613      	mov	r3, r2
 800286e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002870:	e058      	b.n	8002924 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002872:	4b38      	ldr	r3, [pc, #224]	; (8002954 <HAL_RCC_GetSysClockFreq+0x200>)
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	099b      	lsrs	r3, r3, #6
 8002878:	2200      	movs	r2, #0
 800287a:	4618      	mov	r0, r3
 800287c:	4611      	mov	r1, r2
 800287e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002882:	623b      	str	r3, [r7, #32]
 8002884:	2300      	movs	r3, #0
 8002886:	627b      	str	r3, [r7, #36]	; 0x24
 8002888:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800288c:	4642      	mov	r2, r8
 800288e:	464b      	mov	r3, r9
 8002890:	f04f 0000 	mov.w	r0, #0
 8002894:	f04f 0100 	mov.w	r1, #0
 8002898:	0159      	lsls	r1, r3, #5
 800289a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800289e:	0150      	lsls	r0, r2, #5
 80028a0:	4602      	mov	r2, r0
 80028a2:	460b      	mov	r3, r1
 80028a4:	4641      	mov	r1, r8
 80028a6:	ebb2 0a01 	subs.w	sl, r2, r1
 80028aa:	4649      	mov	r1, r9
 80028ac:	eb63 0b01 	sbc.w	fp, r3, r1
 80028b0:	f04f 0200 	mov.w	r2, #0
 80028b4:	f04f 0300 	mov.w	r3, #0
 80028b8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80028bc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80028c0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80028c4:	ebb2 040a 	subs.w	r4, r2, sl
 80028c8:	eb63 050b 	sbc.w	r5, r3, fp
 80028cc:	f04f 0200 	mov.w	r2, #0
 80028d0:	f04f 0300 	mov.w	r3, #0
 80028d4:	00eb      	lsls	r3, r5, #3
 80028d6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80028da:	00e2      	lsls	r2, r4, #3
 80028dc:	4614      	mov	r4, r2
 80028de:	461d      	mov	r5, r3
 80028e0:	4643      	mov	r3, r8
 80028e2:	18e3      	adds	r3, r4, r3
 80028e4:	603b      	str	r3, [r7, #0]
 80028e6:	464b      	mov	r3, r9
 80028e8:	eb45 0303 	adc.w	r3, r5, r3
 80028ec:	607b      	str	r3, [r7, #4]
 80028ee:	f04f 0200 	mov.w	r2, #0
 80028f2:	f04f 0300 	mov.w	r3, #0
 80028f6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80028fa:	4629      	mov	r1, r5
 80028fc:	028b      	lsls	r3, r1, #10
 80028fe:	4621      	mov	r1, r4
 8002900:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002904:	4621      	mov	r1, r4
 8002906:	028a      	lsls	r2, r1, #10
 8002908:	4610      	mov	r0, r2
 800290a:	4619      	mov	r1, r3
 800290c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800290e:	2200      	movs	r2, #0
 8002910:	61bb      	str	r3, [r7, #24]
 8002912:	61fa      	str	r2, [r7, #28]
 8002914:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002918:	f7fe fa5c 	bl	8000dd4 <__aeabi_uldivmod>
 800291c:	4602      	mov	r2, r0
 800291e:	460b      	mov	r3, r1
 8002920:	4613      	mov	r3, r2
 8002922:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002924:	4b0b      	ldr	r3, [pc, #44]	; (8002954 <HAL_RCC_GetSysClockFreq+0x200>)
 8002926:	685b      	ldr	r3, [r3, #4]
 8002928:	0c1b      	lsrs	r3, r3, #16
 800292a:	f003 0303 	and.w	r3, r3, #3
 800292e:	3301      	adds	r3, #1
 8002930:	005b      	lsls	r3, r3, #1
 8002932:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002934:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002936:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002938:	fbb2 f3f3 	udiv	r3, r2, r3
 800293c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800293e:	e002      	b.n	8002946 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002940:	4b05      	ldr	r3, [pc, #20]	; (8002958 <HAL_RCC_GetSysClockFreq+0x204>)
 8002942:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002944:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002946:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002948:	4618      	mov	r0, r3
 800294a:	3750      	adds	r7, #80	; 0x50
 800294c:	46bd      	mov	sp, r7
 800294e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002952:	bf00      	nop
 8002954:	40023800 	.word	0x40023800
 8002958:	00f42400 	.word	0x00f42400
 800295c:	007a1200 	.word	0x007a1200

08002960 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002960:	b480      	push	{r7}
 8002962:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002964:	4b03      	ldr	r3, [pc, #12]	; (8002974 <HAL_RCC_GetHCLKFreq+0x14>)
 8002966:	681b      	ldr	r3, [r3, #0]
}
 8002968:	4618      	mov	r0, r3
 800296a:	46bd      	mov	sp, r7
 800296c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002970:	4770      	bx	lr
 8002972:	bf00      	nop
 8002974:	20000000 	.word	0x20000000

08002978 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800297c:	f7ff fff0 	bl	8002960 <HAL_RCC_GetHCLKFreq>
 8002980:	4602      	mov	r2, r0
 8002982:	4b05      	ldr	r3, [pc, #20]	; (8002998 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002984:	689b      	ldr	r3, [r3, #8]
 8002986:	0a9b      	lsrs	r3, r3, #10
 8002988:	f003 0307 	and.w	r3, r3, #7
 800298c:	4903      	ldr	r1, [pc, #12]	; (800299c <HAL_RCC_GetPCLK1Freq+0x24>)
 800298e:	5ccb      	ldrb	r3, [r1, r3]
 8002990:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002994:	4618      	mov	r0, r3
 8002996:	bd80      	pop	{r7, pc}
 8002998:	40023800 	.word	0x40023800
 800299c:	08006538 	.word	0x08006538

080029a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80029a4:	f7ff ffdc 	bl	8002960 <HAL_RCC_GetHCLKFreq>
 80029a8:	4602      	mov	r2, r0
 80029aa:	4b05      	ldr	r3, [pc, #20]	; (80029c0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80029ac:	689b      	ldr	r3, [r3, #8]
 80029ae:	0b5b      	lsrs	r3, r3, #13
 80029b0:	f003 0307 	and.w	r3, r3, #7
 80029b4:	4903      	ldr	r1, [pc, #12]	; (80029c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80029b6:	5ccb      	ldrb	r3, [r1, r3]
 80029b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80029bc:	4618      	mov	r0, r3
 80029be:	bd80      	pop	{r7, pc}
 80029c0:	40023800 	.word	0x40023800
 80029c4:	08006538 	.word	0x08006538

080029c8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b082      	sub	sp, #8
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d101      	bne.n	80029da <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80029d6:	2301      	movs	r3, #1
 80029d8:	e041      	b.n	8002a5e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029e0:	b2db      	uxtb	r3, r3
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d106      	bne.n	80029f4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	2200      	movs	r2, #0
 80029ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80029ee:	6878      	ldr	r0, [r7, #4]
 80029f0:	f7fe fea6 	bl	8001740 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2202      	movs	r2, #2
 80029f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681a      	ldr	r2, [r3, #0]
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	3304      	adds	r3, #4
 8002a04:	4619      	mov	r1, r3
 8002a06:	4610      	mov	r0, r2
 8002a08:	f000 fbb4 	bl	8003174 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2201      	movs	r2, #1
 8002a10:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2201      	movs	r2, #1
 8002a18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2201      	movs	r2, #1
 8002a20:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2201      	movs	r2, #1
 8002a28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2201      	movs	r2, #1
 8002a30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2201      	movs	r2, #1
 8002a38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	2201      	movs	r2, #1
 8002a40:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	2201      	movs	r2, #1
 8002a48:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	2201      	movs	r2, #1
 8002a50:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2201      	movs	r2, #1
 8002a58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002a5c:	2300      	movs	r3, #0
}
 8002a5e:	4618      	mov	r0, r3
 8002a60:	3708      	adds	r7, #8
 8002a62:	46bd      	mov	sp, r7
 8002a64:	bd80      	pop	{r7, pc}
	...

08002a68 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002a68:	b480      	push	{r7}
 8002a6a:	b085      	sub	sp, #20
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a76:	b2db      	uxtb	r3, r3
 8002a78:	2b01      	cmp	r3, #1
 8002a7a:	d001      	beq.n	8002a80 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002a7c:	2301      	movs	r3, #1
 8002a7e:	e03c      	b.n	8002afa <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2202      	movs	r2, #2
 8002a84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	4a1e      	ldr	r2, [pc, #120]	; (8002b08 <HAL_TIM_Base_Start+0xa0>)
 8002a8e:	4293      	cmp	r3, r2
 8002a90:	d018      	beq.n	8002ac4 <HAL_TIM_Base_Start+0x5c>
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a9a:	d013      	beq.n	8002ac4 <HAL_TIM_Base_Start+0x5c>
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	4a1a      	ldr	r2, [pc, #104]	; (8002b0c <HAL_TIM_Base_Start+0xa4>)
 8002aa2:	4293      	cmp	r3, r2
 8002aa4:	d00e      	beq.n	8002ac4 <HAL_TIM_Base_Start+0x5c>
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	4a19      	ldr	r2, [pc, #100]	; (8002b10 <HAL_TIM_Base_Start+0xa8>)
 8002aac:	4293      	cmp	r3, r2
 8002aae:	d009      	beq.n	8002ac4 <HAL_TIM_Base_Start+0x5c>
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	4a17      	ldr	r2, [pc, #92]	; (8002b14 <HAL_TIM_Base_Start+0xac>)
 8002ab6:	4293      	cmp	r3, r2
 8002ab8:	d004      	beq.n	8002ac4 <HAL_TIM_Base_Start+0x5c>
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	4a16      	ldr	r2, [pc, #88]	; (8002b18 <HAL_TIM_Base_Start+0xb0>)
 8002ac0:	4293      	cmp	r3, r2
 8002ac2:	d111      	bne.n	8002ae8 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	689b      	ldr	r3, [r3, #8]
 8002aca:	f003 0307 	and.w	r3, r3, #7
 8002ace:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	2b06      	cmp	r3, #6
 8002ad4:	d010      	beq.n	8002af8 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	681a      	ldr	r2, [r3, #0]
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f042 0201 	orr.w	r2, r2, #1
 8002ae4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ae6:	e007      	b.n	8002af8 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	681a      	ldr	r2, [r3, #0]
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f042 0201 	orr.w	r2, r2, #1
 8002af6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002af8:	2300      	movs	r3, #0
}
 8002afa:	4618      	mov	r0, r3
 8002afc:	3714      	adds	r7, #20
 8002afe:	46bd      	mov	sp, r7
 8002b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b04:	4770      	bx	lr
 8002b06:	bf00      	nop
 8002b08:	40010000 	.word	0x40010000
 8002b0c:	40000400 	.word	0x40000400
 8002b10:	40000800 	.word	0x40000800
 8002b14:	40000c00 	.word	0x40000c00
 8002b18:	40014000 	.word	0x40014000

08002b1c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b086      	sub	sp, #24
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
 8002b24:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d101      	bne.n	8002b30 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8002b2c:	2301      	movs	r3, #1
 8002b2e:	e097      	b.n	8002c60 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b36:	b2db      	uxtb	r3, r3
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d106      	bne.n	8002b4a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2200      	movs	r2, #0
 8002b40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8002b44:	6878      	ldr	r0, [r7, #4]
 8002b46:	f7fe fdb3 	bl	80016b0 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	2202      	movs	r2, #2
 8002b4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	689b      	ldr	r3, [r3, #8]
 8002b58:	687a      	ldr	r2, [r7, #4]
 8002b5a:	6812      	ldr	r2, [r2, #0]
 8002b5c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002b60:	f023 0307 	bic.w	r3, r3, #7
 8002b64:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681a      	ldr	r2, [r3, #0]
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	3304      	adds	r3, #4
 8002b6e:	4619      	mov	r1, r3
 8002b70:	4610      	mov	r0, r2
 8002b72:	f000 faff 	bl	8003174 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	689b      	ldr	r3, [r3, #8]
 8002b7c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	699b      	ldr	r3, [r3, #24]
 8002b84:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	6a1b      	ldr	r3, [r3, #32]
 8002b8c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	697a      	ldr	r2, [r7, #20]
 8002b94:	4313      	orrs	r3, r2
 8002b96:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8002b98:	693b      	ldr	r3, [r7, #16]
 8002b9a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b9e:	f023 0303 	bic.w	r3, r3, #3
 8002ba2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	689a      	ldr	r2, [r3, #8]
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	699b      	ldr	r3, [r3, #24]
 8002bac:	021b      	lsls	r3, r3, #8
 8002bae:	4313      	orrs	r3, r2
 8002bb0:	693a      	ldr	r2, [r7, #16]
 8002bb2:	4313      	orrs	r3, r2
 8002bb4:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8002bb6:	693b      	ldr	r3, [r7, #16]
 8002bb8:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8002bbc:	f023 030c 	bic.w	r3, r3, #12
 8002bc0:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8002bc2:	693b      	ldr	r3, [r7, #16]
 8002bc4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002bc8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002bcc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	68da      	ldr	r2, [r3, #12]
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	69db      	ldr	r3, [r3, #28]
 8002bd6:	021b      	lsls	r3, r3, #8
 8002bd8:	4313      	orrs	r3, r2
 8002bda:	693a      	ldr	r2, [r7, #16]
 8002bdc:	4313      	orrs	r3, r2
 8002bde:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	691b      	ldr	r3, [r3, #16]
 8002be4:	011a      	lsls	r2, r3, #4
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	6a1b      	ldr	r3, [r3, #32]
 8002bea:	031b      	lsls	r3, r3, #12
 8002bec:	4313      	orrs	r3, r2
 8002bee:	693a      	ldr	r2, [r7, #16]
 8002bf0:	4313      	orrs	r3, r2
 8002bf2:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8002bfa:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8002c02:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	685a      	ldr	r2, [r3, #4]
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	695b      	ldr	r3, [r3, #20]
 8002c0c:	011b      	lsls	r3, r3, #4
 8002c0e:	4313      	orrs	r3, r2
 8002c10:	68fa      	ldr	r2, [r7, #12]
 8002c12:	4313      	orrs	r3, r2
 8002c14:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	697a      	ldr	r2, [r7, #20]
 8002c1c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	693a      	ldr	r2, [r7, #16]
 8002c24:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	68fa      	ldr	r2, [r7, #12]
 8002c2c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	2201      	movs	r2, #1
 8002c32:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	2201      	movs	r2, #1
 8002c3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	2201      	movs	r2, #1
 8002c42:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	2201      	movs	r2, #1
 8002c4a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	2201      	movs	r2, #1
 8002c52:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	2201      	movs	r2, #1
 8002c5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002c5e:	2300      	movs	r3, #0
}
 8002c60:	4618      	mov	r0, r3
 8002c62:	3718      	adds	r7, #24
 8002c64:	46bd      	mov	sp, r7
 8002c66:	bd80      	pop	{r7, pc}

08002c68 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	b084      	sub	sp, #16
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
 8002c70:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002c78:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002c80:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002c88:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8002c90:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8002c92:	683b      	ldr	r3, [r7, #0]
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d110      	bne.n	8002cba <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002c98:	7bfb      	ldrb	r3, [r7, #15]
 8002c9a:	2b01      	cmp	r3, #1
 8002c9c:	d102      	bne.n	8002ca4 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8002c9e:	7b7b      	ldrb	r3, [r7, #13]
 8002ca0:	2b01      	cmp	r3, #1
 8002ca2:	d001      	beq.n	8002ca8 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8002ca4:	2301      	movs	r3, #1
 8002ca6:	e069      	b.n	8002d7c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2202      	movs	r2, #2
 8002cac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2202      	movs	r2, #2
 8002cb4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002cb8:	e031      	b.n	8002d1e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8002cba:	683b      	ldr	r3, [r7, #0]
 8002cbc:	2b04      	cmp	r3, #4
 8002cbe:	d110      	bne.n	8002ce2 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8002cc0:	7bbb      	ldrb	r3, [r7, #14]
 8002cc2:	2b01      	cmp	r3, #1
 8002cc4:	d102      	bne.n	8002ccc <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8002cc6:	7b3b      	ldrb	r3, [r7, #12]
 8002cc8:	2b01      	cmp	r3, #1
 8002cca:	d001      	beq.n	8002cd0 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8002ccc:	2301      	movs	r3, #1
 8002cce:	e055      	b.n	8002d7c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2202      	movs	r2, #2
 8002cd4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2202      	movs	r2, #2
 8002cdc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002ce0:	e01d      	b.n	8002d1e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002ce2:	7bfb      	ldrb	r3, [r7, #15]
 8002ce4:	2b01      	cmp	r3, #1
 8002ce6:	d108      	bne.n	8002cfa <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8002ce8:	7bbb      	ldrb	r3, [r7, #14]
 8002cea:	2b01      	cmp	r3, #1
 8002cec:	d105      	bne.n	8002cfa <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002cee:	7b7b      	ldrb	r3, [r7, #13]
 8002cf0:	2b01      	cmp	r3, #1
 8002cf2:	d102      	bne.n	8002cfa <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8002cf4:	7b3b      	ldrb	r3, [r7, #12]
 8002cf6:	2b01      	cmp	r3, #1
 8002cf8:	d001      	beq.n	8002cfe <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8002cfa:	2301      	movs	r3, #1
 8002cfc:	e03e      	b.n	8002d7c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	2202      	movs	r2, #2
 8002d02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	2202      	movs	r2, #2
 8002d0a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	2202      	movs	r2, #2
 8002d12:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	2202      	movs	r2, #2
 8002d1a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8002d1e:	683b      	ldr	r3, [r7, #0]
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d003      	beq.n	8002d2c <HAL_TIM_Encoder_Start+0xc4>
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	2b04      	cmp	r3, #4
 8002d28:	d008      	beq.n	8002d3c <HAL_TIM_Encoder_Start+0xd4>
 8002d2a:	e00f      	b.n	8002d4c <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	2201      	movs	r2, #1
 8002d32:	2100      	movs	r1, #0
 8002d34:	4618      	mov	r0, r3
 8002d36:	f000 fb37 	bl	80033a8 <TIM_CCxChannelCmd>
      break;
 8002d3a:	e016      	b.n	8002d6a <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	2201      	movs	r2, #1
 8002d42:	2104      	movs	r1, #4
 8002d44:	4618      	mov	r0, r3
 8002d46:	f000 fb2f 	bl	80033a8 <TIM_CCxChannelCmd>
      break;
 8002d4a:	e00e      	b.n	8002d6a <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	2201      	movs	r2, #1
 8002d52:	2100      	movs	r1, #0
 8002d54:	4618      	mov	r0, r3
 8002d56:	f000 fb27 	bl	80033a8 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	2201      	movs	r2, #1
 8002d60:	2104      	movs	r1, #4
 8002d62:	4618      	mov	r0, r3
 8002d64:	f000 fb20 	bl	80033a8 <TIM_CCxChannelCmd>
      break;
 8002d68:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	681a      	ldr	r2, [r3, #0]
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f042 0201 	orr.w	r2, r2, #1
 8002d78:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8002d7a:	2300      	movs	r3, #0
}
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	3710      	adds	r7, #16
 8002d80:	46bd      	mov	sp, r7
 8002d82:	bd80      	pop	{r7, pc}

08002d84 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b082      	sub	sp, #8
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	691b      	ldr	r3, [r3, #16]
 8002d92:	f003 0302 	and.w	r3, r3, #2
 8002d96:	2b02      	cmp	r3, #2
 8002d98:	d122      	bne.n	8002de0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	68db      	ldr	r3, [r3, #12]
 8002da0:	f003 0302 	and.w	r3, r3, #2
 8002da4:	2b02      	cmp	r3, #2
 8002da6:	d11b      	bne.n	8002de0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f06f 0202 	mvn.w	r2, #2
 8002db0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	2201      	movs	r2, #1
 8002db6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	699b      	ldr	r3, [r3, #24]
 8002dbe:	f003 0303 	and.w	r3, r3, #3
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d003      	beq.n	8002dce <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002dc6:	6878      	ldr	r0, [r7, #4]
 8002dc8:	f000 f9b5 	bl	8003136 <HAL_TIM_IC_CaptureCallback>
 8002dcc:	e005      	b.n	8002dda <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002dce:	6878      	ldr	r0, [r7, #4]
 8002dd0:	f000 f9a7 	bl	8003122 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002dd4:	6878      	ldr	r0, [r7, #4]
 8002dd6:	f000 f9b8 	bl	800314a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	2200      	movs	r2, #0
 8002dde:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	691b      	ldr	r3, [r3, #16]
 8002de6:	f003 0304 	and.w	r3, r3, #4
 8002dea:	2b04      	cmp	r3, #4
 8002dec:	d122      	bne.n	8002e34 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	68db      	ldr	r3, [r3, #12]
 8002df4:	f003 0304 	and.w	r3, r3, #4
 8002df8:	2b04      	cmp	r3, #4
 8002dfa:	d11b      	bne.n	8002e34 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f06f 0204 	mvn.w	r2, #4
 8002e04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	2202      	movs	r2, #2
 8002e0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	699b      	ldr	r3, [r3, #24]
 8002e12:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d003      	beq.n	8002e22 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e1a:	6878      	ldr	r0, [r7, #4]
 8002e1c:	f000 f98b 	bl	8003136 <HAL_TIM_IC_CaptureCallback>
 8002e20:	e005      	b.n	8002e2e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e22:	6878      	ldr	r0, [r7, #4]
 8002e24:	f000 f97d 	bl	8003122 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e28:	6878      	ldr	r0, [r7, #4]
 8002e2a:	f000 f98e 	bl	800314a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	2200      	movs	r2, #0
 8002e32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	691b      	ldr	r3, [r3, #16]
 8002e3a:	f003 0308 	and.w	r3, r3, #8
 8002e3e:	2b08      	cmp	r3, #8
 8002e40:	d122      	bne.n	8002e88 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	68db      	ldr	r3, [r3, #12]
 8002e48:	f003 0308 	and.w	r3, r3, #8
 8002e4c:	2b08      	cmp	r3, #8
 8002e4e:	d11b      	bne.n	8002e88 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f06f 0208 	mvn.w	r2, #8
 8002e58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	2204      	movs	r2, #4
 8002e5e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	69db      	ldr	r3, [r3, #28]
 8002e66:	f003 0303 	and.w	r3, r3, #3
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d003      	beq.n	8002e76 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e6e:	6878      	ldr	r0, [r7, #4]
 8002e70:	f000 f961 	bl	8003136 <HAL_TIM_IC_CaptureCallback>
 8002e74:	e005      	b.n	8002e82 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e76:	6878      	ldr	r0, [r7, #4]
 8002e78:	f000 f953 	bl	8003122 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e7c:	6878      	ldr	r0, [r7, #4]
 8002e7e:	f000 f964 	bl	800314a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	2200      	movs	r2, #0
 8002e86:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	691b      	ldr	r3, [r3, #16]
 8002e8e:	f003 0310 	and.w	r3, r3, #16
 8002e92:	2b10      	cmp	r3, #16
 8002e94:	d122      	bne.n	8002edc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	68db      	ldr	r3, [r3, #12]
 8002e9c:	f003 0310 	and.w	r3, r3, #16
 8002ea0:	2b10      	cmp	r3, #16
 8002ea2:	d11b      	bne.n	8002edc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f06f 0210 	mvn.w	r2, #16
 8002eac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	2208      	movs	r2, #8
 8002eb2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	69db      	ldr	r3, [r3, #28]
 8002eba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d003      	beq.n	8002eca <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ec2:	6878      	ldr	r0, [r7, #4]
 8002ec4:	f000 f937 	bl	8003136 <HAL_TIM_IC_CaptureCallback>
 8002ec8:	e005      	b.n	8002ed6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002eca:	6878      	ldr	r0, [r7, #4]
 8002ecc:	f000 f929 	bl	8003122 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ed0:	6878      	ldr	r0, [r7, #4]
 8002ed2:	f000 f93a 	bl	800314a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	2200      	movs	r2, #0
 8002eda:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	691b      	ldr	r3, [r3, #16]
 8002ee2:	f003 0301 	and.w	r3, r3, #1
 8002ee6:	2b01      	cmp	r3, #1
 8002ee8:	d10e      	bne.n	8002f08 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	68db      	ldr	r3, [r3, #12]
 8002ef0:	f003 0301 	and.w	r3, r3, #1
 8002ef4:	2b01      	cmp	r3, #1
 8002ef6:	d107      	bne.n	8002f08 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f06f 0201 	mvn.w	r2, #1
 8002f00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002f02:	6878      	ldr	r0, [r7, #4]
 8002f04:	f7fe fb72 	bl	80015ec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	691b      	ldr	r3, [r3, #16]
 8002f0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f12:	2b80      	cmp	r3, #128	; 0x80
 8002f14:	d10e      	bne.n	8002f34 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	68db      	ldr	r3, [r3, #12]
 8002f1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f20:	2b80      	cmp	r3, #128	; 0x80
 8002f22:	d107      	bne.n	8002f34 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002f2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002f2e:	6878      	ldr	r0, [r7, #4]
 8002f30:	f000 fad8 	bl	80034e4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	691b      	ldr	r3, [r3, #16]
 8002f3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f3e:	2b40      	cmp	r3, #64	; 0x40
 8002f40:	d10e      	bne.n	8002f60 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	68db      	ldr	r3, [r3, #12]
 8002f48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f4c:	2b40      	cmp	r3, #64	; 0x40
 8002f4e:	d107      	bne.n	8002f60 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002f58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002f5a:	6878      	ldr	r0, [r7, #4]
 8002f5c:	f000 f8ff 	bl	800315e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	691b      	ldr	r3, [r3, #16]
 8002f66:	f003 0320 	and.w	r3, r3, #32
 8002f6a:	2b20      	cmp	r3, #32
 8002f6c:	d10e      	bne.n	8002f8c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	68db      	ldr	r3, [r3, #12]
 8002f74:	f003 0320 	and.w	r3, r3, #32
 8002f78:	2b20      	cmp	r3, #32
 8002f7a:	d107      	bne.n	8002f8c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f06f 0220 	mvn.w	r2, #32
 8002f84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002f86:	6878      	ldr	r0, [r7, #4]
 8002f88:	f000 faa2 	bl	80034d0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002f8c:	bf00      	nop
 8002f8e:	3708      	adds	r7, #8
 8002f90:	46bd      	mov	sp, r7
 8002f92:	bd80      	pop	{r7, pc}

08002f94 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b084      	sub	sp, #16
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
 8002f9c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002fa8:	2b01      	cmp	r3, #1
 8002faa:	d101      	bne.n	8002fb0 <HAL_TIM_ConfigClockSource+0x1c>
 8002fac:	2302      	movs	r3, #2
 8002fae:	e0b4      	b.n	800311a <HAL_TIM_ConfigClockSource+0x186>
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2201      	movs	r2, #1
 8002fb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	2202      	movs	r2, #2
 8002fbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	689b      	ldr	r3, [r3, #8]
 8002fc6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002fc8:	68bb      	ldr	r3, [r7, #8]
 8002fca:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002fce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002fd0:	68bb      	ldr	r3, [r7, #8]
 8002fd2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002fd6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	68ba      	ldr	r2, [r7, #8]
 8002fde:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002fe8:	d03e      	beq.n	8003068 <HAL_TIM_ConfigClockSource+0xd4>
 8002fea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002fee:	f200 8087 	bhi.w	8003100 <HAL_TIM_ConfigClockSource+0x16c>
 8002ff2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ff6:	f000 8086 	beq.w	8003106 <HAL_TIM_ConfigClockSource+0x172>
 8002ffa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ffe:	d87f      	bhi.n	8003100 <HAL_TIM_ConfigClockSource+0x16c>
 8003000:	2b70      	cmp	r3, #112	; 0x70
 8003002:	d01a      	beq.n	800303a <HAL_TIM_ConfigClockSource+0xa6>
 8003004:	2b70      	cmp	r3, #112	; 0x70
 8003006:	d87b      	bhi.n	8003100 <HAL_TIM_ConfigClockSource+0x16c>
 8003008:	2b60      	cmp	r3, #96	; 0x60
 800300a:	d050      	beq.n	80030ae <HAL_TIM_ConfigClockSource+0x11a>
 800300c:	2b60      	cmp	r3, #96	; 0x60
 800300e:	d877      	bhi.n	8003100 <HAL_TIM_ConfigClockSource+0x16c>
 8003010:	2b50      	cmp	r3, #80	; 0x50
 8003012:	d03c      	beq.n	800308e <HAL_TIM_ConfigClockSource+0xfa>
 8003014:	2b50      	cmp	r3, #80	; 0x50
 8003016:	d873      	bhi.n	8003100 <HAL_TIM_ConfigClockSource+0x16c>
 8003018:	2b40      	cmp	r3, #64	; 0x40
 800301a:	d058      	beq.n	80030ce <HAL_TIM_ConfigClockSource+0x13a>
 800301c:	2b40      	cmp	r3, #64	; 0x40
 800301e:	d86f      	bhi.n	8003100 <HAL_TIM_ConfigClockSource+0x16c>
 8003020:	2b30      	cmp	r3, #48	; 0x30
 8003022:	d064      	beq.n	80030ee <HAL_TIM_ConfigClockSource+0x15a>
 8003024:	2b30      	cmp	r3, #48	; 0x30
 8003026:	d86b      	bhi.n	8003100 <HAL_TIM_ConfigClockSource+0x16c>
 8003028:	2b20      	cmp	r3, #32
 800302a:	d060      	beq.n	80030ee <HAL_TIM_ConfigClockSource+0x15a>
 800302c:	2b20      	cmp	r3, #32
 800302e:	d867      	bhi.n	8003100 <HAL_TIM_ConfigClockSource+0x16c>
 8003030:	2b00      	cmp	r3, #0
 8003032:	d05c      	beq.n	80030ee <HAL_TIM_ConfigClockSource+0x15a>
 8003034:	2b10      	cmp	r3, #16
 8003036:	d05a      	beq.n	80030ee <HAL_TIM_ConfigClockSource+0x15a>
 8003038:	e062      	b.n	8003100 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6818      	ldr	r0, [r3, #0]
 800303e:	683b      	ldr	r3, [r7, #0]
 8003040:	6899      	ldr	r1, [r3, #8]
 8003042:	683b      	ldr	r3, [r7, #0]
 8003044:	685a      	ldr	r2, [r3, #4]
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	68db      	ldr	r3, [r3, #12]
 800304a:	f000 f98d 	bl	8003368 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	689b      	ldr	r3, [r3, #8]
 8003054:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003056:	68bb      	ldr	r3, [r7, #8]
 8003058:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800305c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	68ba      	ldr	r2, [r7, #8]
 8003064:	609a      	str	r2, [r3, #8]
      break;
 8003066:	e04f      	b.n	8003108 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6818      	ldr	r0, [r3, #0]
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	6899      	ldr	r1, [r3, #8]
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	685a      	ldr	r2, [r3, #4]
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	68db      	ldr	r3, [r3, #12]
 8003078:	f000 f976 	bl	8003368 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	689a      	ldr	r2, [r3, #8]
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800308a:	609a      	str	r2, [r3, #8]
      break;
 800308c:	e03c      	b.n	8003108 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6818      	ldr	r0, [r3, #0]
 8003092:	683b      	ldr	r3, [r7, #0]
 8003094:	6859      	ldr	r1, [r3, #4]
 8003096:	683b      	ldr	r3, [r7, #0]
 8003098:	68db      	ldr	r3, [r3, #12]
 800309a:	461a      	mov	r2, r3
 800309c:	f000 f8ea 	bl	8003274 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	2150      	movs	r1, #80	; 0x50
 80030a6:	4618      	mov	r0, r3
 80030a8:	f000 f943 	bl	8003332 <TIM_ITRx_SetConfig>
      break;
 80030ac:	e02c      	b.n	8003108 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6818      	ldr	r0, [r3, #0]
 80030b2:	683b      	ldr	r3, [r7, #0]
 80030b4:	6859      	ldr	r1, [r3, #4]
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	68db      	ldr	r3, [r3, #12]
 80030ba:	461a      	mov	r2, r3
 80030bc:	f000 f909 	bl	80032d2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	2160      	movs	r1, #96	; 0x60
 80030c6:	4618      	mov	r0, r3
 80030c8:	f000 f933 	bl	8003332 <TIM_ITRx_SetConfig>
      break;
 80030cc:	e01c      	b.n	8003108 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6818      	ldr	r0, [r3, #0]
 80030d2:	683b      	ldr	r3, [r7, #0]
 80030d4:	6859      	ldr	r1, [r3, #4]
 80030d6:	683b      	ldr	r3, [r7, #0]
 80030d8:	68db      	ldr	r3, [r3, #12]
 80030da:	461a      	mov	r2, r3
 80030dc:	f000 f8ca 	bl	8003274 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	2140      	movs	r1, #64	; 0x40
 80030e6:	4618      	mov	r0, r3
 80030e8:	f000 f923 	bl	8003332 <TIM_ITRx_SetConfig>
      break;
 80030ec:	e00c      	b.n	8003108 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681a      	ldr	r2, [r3, #0]
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	4619      	mov	r1, r3
 80030f8:	4610      	mov	r0, r2
 80030fa:	f000 f91a 	bl	8003332 <TIM_ITRx_SetConfig>
      break;
 80030fe:	e003      	b.n	8003108 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003100:	2301      	movs	r3, #1
 8003102:	73fb      	strb	r3, [r7, #15]
      break;
 8003104:	e000      	b.n	8003108 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003106:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2201      	movs	r2, #1
 800310c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2200      	movs	r2, #0
 8003114:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003118:	7bfb      	ldrb	r3, [r7, #15]
}
 800311a:	4618      	mov	r0, r3
 800311c:	3710      	adds	r7, #16
 800311e:	46bd      	mov	sp, r7
 8003120:	bd80      	pop	{r7, pc}

08003122 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003122:	b480      	push	{r7}
 8003124:	b083      	sub	sp, #12
 8003126:	af00      	add	r7, sp, #0
 8003128:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800312a:	bf00      	nop
 800312c:	370c      	adds	r7, #12
 800312e:	46bd      	mov	sp, r7
 8003130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003134:	4770      	bx	lr

08003136 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003136:	b480      	push	{r7}
 8003138:	b083      	sub	sp, #12
 800313a:	af00      	add	r7, sp, #0
 800313c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800313e:	bf00      	nop
 8003140:	370c      	adds	r7, #12
 8003142:	46bd      	mov	sp, r7
 8003144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003148:	4770      	bx	lr

0800314a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800314a:	b480      	push	{r7}
 800314c:	b083      	sub	sp, #12
 800314e:	af00      	add	r7, sp, #0
 8003150:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003152:	bf00      	nop
 8003154:	370c      	adds	r7, #12
 8003156:	46bd      	mov	sp, r7
 8003158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315c:	4770      	bx	lr

0800315e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800315e:	b480      	push	{r7}
 8003160:	b083      	sub	sp, #12
 8003162:	af00      	add	r7, sp, #0
 8003164:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003166:	bf00      	nop
 8003168:	370c      	adds	r7, #12
 800316a:	46bd      	mov	sp, r7
 800316c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003170:	4770      	bx	lr
	...

08003174 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003174:	b480      	push	{r7}
 8003176:	b085      	sub	sp, #20
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
 800317c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	4a34      	ldr	r2, [pc, #208]	; (8003258 <TIM_Base_SetConfig+0xe4>)
 8003188:	4293      	cmp	r3, r2
 800318a:	d00f      	beq.n	80031ac <TIM_Base_SetConfig+0x38>
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003192:	d00b      	beq.n	80031ac <TIM_Base_SetConfig+0x38>
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	4a31      	ldr	r2, [pc, #196]	; (800325c <TIM_Base_SetConfig+0xe8>)
 8003198:	4293      	cmp	r3, r2
 800319a:	d007      	beq.n	80031ac <TIM_Base_SetConfig+0x38>
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	4a30      	ldr	r2, [pc, #192]	; (8003260 <TIM_Base_SetConfig+0xec>)
 80031a0:	4293      	cmp	r3, r2
 80031a2:	d003      	beq.n	80031ac <TIM_Base_SetConfig+0x38>
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	4a2f      	ldr	r2, [pc, #188]	; (8003264 <TIM_Base_SetConfig+0xf0>)
 80031a8:	4293      	cmp	r3, r2
 80031aa:	d108      	bne.n	80031be <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031b2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80031b4:	683b      	ldr	r3, [r7, #0]
 80031b6:	685b      	ldr	r3, [r3, #4]
 80031b8:	68fa      	ldr	r2, [r7, #12]
 80031ba:	4313      	orrs	r3, r2
 80031bc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	4a25      	ldr	r2, [pc, #148]	; (8003258 <TIM_Base_SetConfig+0xe4>)
 80031c2:	4293      	cmp	r3, r2
 80031c4:	d01b      	beq.n	80031fe <TIM_Base_SetConfig+0x8a>
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031cc:	d017      	beq.n	80031fe <TIM_Base_SetConfig+0x8a>
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	4a22      	ldr	r2, [pc, #136]	; (800325c <TIM_Base_SetConfig+0xe8>)
 80031d2:	4293      	cmp	r3, r2
 80031d4:	d013      	beq.n	80031fe <TIM_Base_SetConfig+0x8a>
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	4a21      	ldr	r2, [pc, #132]	; (8003260 <TIM_Base_SetConfig+0xec>)
 80031da:	4293      	cmp	r3, r2
 80031dc:	d00f      	beq.n	80031fe <TIM_Base_SetConfig+0x8a>
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	4a20      	ldr	r2, [pc, #128]	; (8003264 <TIM_Base_SetConfig+0xf0>)
 80031e2:	4293      	cmp	r3, r2
 80031e4:	d00b      	beq.n	80031fe <TIM_Base_SetConfig+0x8a>
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	4a1f      	ldr	r2, [pc, #124]	; (8003268 <TIM_Base_SetConfig+0xf4>)
 80031ea:	4293      	cmp	r3, r2
 80031ec:	d007      	beq.n	80031fe <TIM_Base_SetConfig+0x8a>
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	4a1e      	ldr	r2, [pc, #120]	; (800326c <TIM_Base_SetConfig+0xf8>)
 80031f2:	4293      	cmp	r3, r2
 80031f4:	d003      	beq.n	80031fe <TIM_Base_SetConfig+0x8a>
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	4a1d      	ldr	r2, [pc, #116]	; (8003270 <TIM_Base_SetConfig+0xfc>)
 80031fa:	4293      	cmp	r3, r2
 80031fc:	d108      	bne.n	8003210 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003204:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003206:	683b      	ldr	r3, [r7, #0]
 8003208:	68db      	ldr	r3, [r3, #12]
 800320a:	68fa      	ldr	r2, [r7, #12]
 800320c:	4313      	orrs	r3, r2
 800320e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003216:	683b      	ldr	r3, [r7, #0]
 8003218:	695b      	ldr	r3, [r3, #20]
 800321a:	4313      	orrs	r3, r2
 800321c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	68fa      	ldr	r2, [r7, #12]
 8003222:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	689a      	ldr	r2, [r3, #8]
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800322c:	683b      	ldr	r3, [r7, #0]
 800322e:	681a      	ldr	r2, [r3, #0]
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	4a08      	ldr	r2, [pc, #32]	; (8003258 <TIM_Base_SetConfig+0xe4>)
 8003238:	4293      	cmp	r3, r2
 800323a:	d103      	bne.n	8003244 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	691a      	ldr	r2, [r3, #16]
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2201      	movs	r2, #1
 8003248:	615a      	str	r2, [r3, #20]
}
 800324a:	bf00      	nop
 800324c:	3714      	adds	r7, #20
 800324e:	46bd      	mov	sp, r7
 8003250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003254:	4770      	bx	lr
 8003256:	bf00      	nop
 8003258:	40010000 	.word	0x40010000
 800325c:	40000400 	.word	0x40000400
 8003260:	40000800 	.word	0x40000800
 8003264:	40000c00 	.word	0x40000c00
 8003268:	40014000 	.word	0x40014000
 800326c:	40014400 	.word	0x40014400
 8003270:	40014800 	.word	0x40014800

08003274 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003274:	b480      	push	{r7}
 8003276:	b087      	sub	sp, #28
 8003278:	af00      	add	r7, sp, #0
 800327a:	60f8      	str	r0, [r7, #12]
 800327c:	60b9      	str	r1, [r7, #8]
 800327e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	6a1b      	ldr	r3, [r3, #32]
 8003284:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	6a1b      	ldr	r3, [r3, #32]
 800328a:	f023 0201 	bic.w	r2, r3, #1
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	699b      	ldr	r3, [r3, #24]
 8003296:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003298:	693b      	ldr	r3, [r7, #16]
 800329a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800329e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	011b      	lsls	r3, r3, #4
 80032a4:	693a      	ldr	r2, [r7, #16]
 80032a6:	4313      	orrs	r3, r2
 80032a8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80032aa:	697b      	ldr	r3, [r7, #20]
 80032ac:	f023 030a 	bic.w	r3, r3, #10
 80032b0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80032b2:	697a      	ldr	r2, [r7, #20]
 80032b4:	68bb      	ldr	r3, [r7, #8]
 80032b6:	4313      	orrs	r3, r2
 80032b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	693a      	ldr	r2, [r7, #16]
 80032be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	697a      	ldr	r2, [r7, #20]
 80032c4:	621a      	str	r2, [r3, #32]
}
 80032c6:	bf00      	nop
 80032c8:	371c      	adds	r7, #28
 80032ca:	46bd      	mov	sp, r7
 80032cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d0:	4770      	bx	lr

080032d2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80032d2:	b480      	push	{r7}
 80032d4:	b087      	sub	sp, #28
 80032d6:	af00      	add	r7, sp, #0
 80032d8:	60f8      	str	r0, [r7, #12]
 80032da:	60b9      	str	r1, [r7, #8]
 80032dc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	6a1b      	ldr	r3, [r3, #32]
 80032e2:	f023 0210 	bic.w	r2, r3, #16
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	699b      	ldr	r3, [r3, #24]
 80032ee:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	6a1b      	ldr	r3, [r3, #32]
 80032f4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80032f6:	697b      	ldr	r3, [r7, #20]
 80032f8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80032fc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	031b      	lsls	r3, r3, #12
 8003302:	697a      	ldr	r2, [r7, #20]
 8003304:	4313      	orrs	r3, r2
 8003306:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003308:	693b      	ldr	r3, [r7, #16]
 800330a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800330e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003310:	68bb      	ldr	r3, [r7, #8]
 8003312:	011b      	lsls	r3, r3, #4
 8003314:	693a      	ldr	r2, [r7, #16]
 8003316:	4313      	orrs	r3, r2
 8003318:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	697a      	ldr	r2, [r7, #20]
 800331e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	693a      	ldr	r2, [r7, #16]
 8003324:	621a      	str	r2, [r3, #32]
}
 8003326:	bf00      	nop
 8003328:	371c      	adds	r7, #28
 800332a:	46bd      	mov	sp, r7
 800332c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003330:	4770      	bx	lr

08003332 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003332:	b480      	push	{r7}
 8003334:	b085      	sub	sp, #20
 8003336:	af00      	add	r7, sp, #0
 8003338:	6078      	str	r0, [r7, #4]
 800333a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	689b      	ldr	r3, [r3, #8]
 8003340:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003348:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800334a:	683a      	ldr	r2, [r7, #0]
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	4313      	orrs	r3, r2
 8003350:	f043 0307 	orr.w	r3, r3, #7
 8003354:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	68fa      	ldr	r2, [r7, #12]
 800335a:	609a      	str	r2, [r3, #8]
}
 800335c:	bf00      	nop
 800335e:	3714      	adds	r7, #20
 8003360:	46bd      	mov	sp, r7
 8003362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003366:	4770      	bx	lr

08003368 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003368:	b480      	push	{r7}
 800336a:	b087      	sub	sp, #28
 800336c:	af00      	add	r7, sp, #0
 800336e:	60f8      	str	r0, [r7, #12]
 8003370:	60b9      	str	r1, [r7, #8]
 8003372:	607a      	str	r2, [r7, #4]
 8003374:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	689b      	ldr	r3, [r3, #8]
 800337a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800337c:	697b      	ldr	r3, [r7, #20]
 800337e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003382:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	021a      	lsls	r2, r3, #8
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	431a      	orrs	r2, r3
 800338c:	68bb      	ldr	r3, [r7, #8]
 800338e:	4313      	orrs	r3, r2
 8003390:	697a      	ldr	r2, [r7, #20]
 8003392:	4313      	orrs	r3, r2
 8003394:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	697a      	ldr	r2, [r7, #20]
 800339a:	609a      	str	r2, [r3, #8]
}
 800339c:	bf00      	nop
 800339e:	371c      	adds	r7, #28
 80033a0:	46bd      	mov	sp, r7
 80033a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a6:	4770      	bx	lr

080033a8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80033a8:	b480      	push	{r7}
 80033aa:	b087      	sub	sp, #28
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	60f8      	str	r0, [r7, #12]
 80033b0:	60b9      	str	r1, [r7, #8]
 80033b2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80033b4:	68bb      	ldr	r3, [r7, #8]
 80033b6:	f003 031f 	and.w	r3, r3, #31
 80033ba:	2201      	movs	r2, #1
 80033bc:	fa02 f303 	lsl.w	r3, r2, r3
 80033c0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	6a1a      	ldr	r2, [r3, #32]
 80033c6:	697b      	ldr	r3, [r7, #20]
 80033c8:	43db      	mvns	r3, r3
 80033ca:	401a      	ands	r2, r3
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	6a1a      	ldr	r2, [r3, #32]
 80033d4:	68bb      	ldr	r3, [r7, #8]
 80033d6:	f003 031f 	and.w	r3, r3, #31
 80033da:	6879      	ldr	r1, [r7, #4]
 80033dc:	fa01 f303 	lsl.w	r3, r1, r3
 80033e0:	431a      	orrs	r2, r3
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	621a      	str	r2, [r3, #32]
}
 80033e6:	bf00      	nop
 80033e8:	371c      	adds	r7, #28
 80033ea:	46bd      	mov	sp, r7
 80033ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f0:	4770      	bx	lr
	...

080033f4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80033f4:	b480      	push	{r7}
 80033f6:	b085      	sub	sp, #20
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
 80033fc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003404:	2b01      	cmp	r3, #1
 8003406:	d101      	bne.n	800340c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003408:	2302      	movs	r3, #2
 800340a:	e050      	b.n	80034ae <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2201      	movs	r2, #1
 8003410:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2202      	movs	r2, #2
 8003418:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	685b      	ldr	r3, [r3, #4]
 8003422:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	689b      	ldr	r3, [r3, #8]
 800342a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003432:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	68fa      	ldr	r2, [r7, #12]
 800343a:	4313      	orrs	r3, r2
 800343c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	68fa      	ldr	r2, [r7, #12]
 8003444:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	4a1c      	ldr	r2, [pc, #112]	; (80034bc <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800344c:	4293      	cmp	r3, r2
 800344e:	d018      	beq.n	8003482 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003458:	d013      	beq.n	8003482 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	4a18      	ldr	r2, [pc, #96]	; (80034c0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003460:	4293      	cmp	r3, r2
 8003462:	d00e      	beq.n	8003482 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	4a16      	ldr	r2, [pc, #88]	; (80034c4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800346a:	4293      	cmp	r3, r2
 800346c:	d009      	beq.n	8003482 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	4a15      	ldr	r2, [pc, #84]	; (80034c8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003474:	4293      	cmp	r3, r2
 8003476:	d004      	beq.n	8003482 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	4a13      	ldr	r2, [pc, #76]	; (80034cc <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800347e:	4293      	cmp	r3, r2
 8003480:	d10c      	bne.n	800349c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003482:	68bb      	ldr	r3, [r7, #8]
 8003484:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003488:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800348a:	683b      	ldr	r3, [r7, #0]
 800348c:	685b      	ldr	r3, [r3, #4]
 800348e:	68ba      	ldr	r2, [r7, #8]
 8003490:	4313      	orrs	r3, r2
 8003492:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	68ba      	ldr	r2, [r7, #8]
 800349a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2201      	movs	r2, #1
 80034a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2200      	movs	r2, #0
 80034a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80034ac:	2300      	movs	r3, #0
}
 80034ae:	4618      	mov	r0, r3
 80034b0:	3714      	adds	r7, #20
 80034b2:	46bd      	mov	sp, r7
 80034b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b8:	4770      	bx	lr
 80034ba:	bf00      	nop
 80034bc:	40010000 	.word	0x40010000
 80034c0:	40000400 	.word	0x40000400
 80034c4:	40000800 	.word	0x40000800
 80034c8:	40000c00 	.word	0x40000c00
 80034cc:	40014000 	.word	0x40014000

080034d0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80034d0:	b480      	push	{r7}
 80034d2:	b083      	sub	sp, #12
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80034d8:	bf00      	nop
 80034da:	370c      	adds	r7, #12
 80034dc:	46bd      	mov	sp, r7
 80034de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e2:	4770      	bx	lr

080034e4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80034e4:	b480      	push	{r7}
 80034e6:	b083      	sub	sp, #12
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80034ec:	bf00      	nop
 80034ee:	370c      	adds	r7, #12
 80034f0:	46bd      	mov	sp, r7
 80034f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f6:	4770      	bx	lr

080034f8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	b082      	sub	sp, #8
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2b00      	cmp	r3, #0
 8003504:	d101      	bne.n	800350a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003506:	2301      	movs	r3, #1
 8003508:	e03f      	b.n	800358a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003510:	b2db      	uxtb	r3, r3
 8003512:	2b00      	cmp	r3, #0
 8003514:	d106      	bne.n	8003524 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	2200      	movs	r2, #0
 800351a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800351e:	6878      	ldr	r0, [r7, #4]
 8003520:	f7fe f936 	bl	8001790 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2224      	movs	r2, #36	; 0x24
 8003528:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	68da      	ldr	r2, [r3, #12]
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800353a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800353c:	6878      	ldr	r0, [r7, #4]
 800353e:	f000 f829 	bl	8003594 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	691a      	ldr	r2, [r3, #16]
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003550:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	695a      	ldr	r2, [r3, #20]
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003560:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	68da      	ldr	r2, [r3, #12]
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003570:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	2200      	movs	r2, #0
 8003576:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2220      	movs	r2, #32
 800357c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2220      	movs	r2, #32
 8003584:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003588:	2300      	movs	r3, #0
}
 800358a:	4618      	mov	r0, r3
 800358c:	3708      	adds	r7, #8
 800358e:	46bd      	mov	sp, r7
 8003590:	bd80      	pop	{r7, pc}
	...

08003594 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003594:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003598:	b0c0      	sub	sp, #256	; 0x100
 800359a:	af00      	add	r7, sp, #0
 800359c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80035a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	691b      	ldr	r3, [r3, #16]
 80035a8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80035ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035b0:	68d9      	ldr	r1, [r3, #12]
 80035b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035b6:	681a      	ldr	r2, [r3, #0]
 80035b8:	ea40 0301 	orr.w	r3, r0, r1
 80035bc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80035be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035c2:	689a      	ldr	r2, [r3, #8]
 80035c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035c8:	691b      	ldr	r3, [r3, #16]
 80035ca:	431a      	orrs	r2, r3
 80035cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035d0:	695b      	ldr	r3, [r3, #20]
 80035d2:	431a      	orrs	r2, r3
 80035d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035d8:	69db      	ldr	r3, [r3, #28]
 80035da:	4313      	orrs	r3, r2
 80035dc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80035e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	68db      	ldr	r3, [r3, #12]
 80035e8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80035ec:	f021 010c 	bic.w	r1, r1, #12
 80035f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035f4:	681a      	ldr	r2, [r3, #0]
 80035f6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80035fa:	430b      	orrs	r3, r1
 80035fc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80035fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	695b      	ldr	r3, [r3, #20]
 8003606:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800360a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800360e:	6999      	ldr	r1, [r3, #24]
 8003610:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003614:	681a      	ldr	r2, [r3, #0]
 8003616:	ea40 0301 	orr.w	r3, r0, r1
 800361a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800361c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003620:	681a      	ldr	r2, [r3, #0]
 8003622:	4b8f      	ldr	r3, [pc, #572]	; (8003860 <UART_SetConfig+0x2cc>)
 8003624:	429a      	cmp	r2, r3
 8003626:	d005      	beq.n	8003634 <UART_SetConfig+0xa0>
 8003628:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800362c:	681a      	ldr	r2, [r3, #0]
 800362e:	4b8d      	ldr	r3, [pc, #564]	; (8003864 <UART_SetConfig+0x2d0>)
 8003630:	429a      	cmp	r2, r3
 8003632:	d104      	bne.n	800363e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003634:	f7ff f9b4 	bl	80029a0 <HAL_RCC_GetPCLK2Freq>
 8003638:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800363c:	e003      	b.n	8003646 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800363e:	f7ff f99b 	bl	8002978 <HAL_RCC_GetPCLK1Freq>
 8003642:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003646:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800364a:	69db      	ldr	r3, [r3, #28]
 800364c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003650:	f040 810c 	bne.w	800386c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003654:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003658:	2200      	movs	r2, #0
 800365a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800365e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003662:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003666:	4622      	mov	r2, r4
 8003668:	462b      	mov	r3, r5
 800366a:	1891      	adds	r1, r2, r2
 800366c:	65b9      	str	r1, [r7, #88]	; 0x58
 800366e:	415b      	adcs	r3, r3
 8003670:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003672:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003676:	4621      	mov	r1, r4
 8003678:	eb12 0801 	adds.w	r8, r2, r1
 800367c:	4629      	mov	r1, r5
 800367e:	eb43 0901 	adc.w	r9, r3, r1
 8003682:	f04f 0200 	mov.w	r2, #0
 8003686:	f04f 0300 	mov.w	r3, #0
 800368a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800368e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003692:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003696:	4690      	mov	r8, r2
 8003698:	4699      	mov	r9, r3
 800369a:	4623      	mov	r3, r4
 800369c:	eb18 0303 	adds.w	r3, r8, r3
 80036a0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80036a4:	462b      	mov	r3, r5
 80036a6:	eb49 0303 	adc.w	r3, r9, r3
 80036aa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80036ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036b2:	685b      	ldr	r3, [r3, #4]
 80036b4:	2200      	movs	r2, #0
 80036b6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80036ba:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80036be:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80036c2:	460b      	mov	r3, r1
 80036c4:	18db      	adds	r3, r3, r3
 80036c6:	653b      	str	r3, [r7, #80]	; 0x50
 80036c8:	4613      	mov	r3, r2
 80036ca:	eb42 0303 	adc.w	r3, r2, r3
 80036ce:	657b      	str	r3, [r7, #84]	; 0x54
 80036d0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80036d4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80036d8:	f7fd fb7c 	bl	8000dd4 <__aeabi_uldivmod>
 80036dc:	4602      	mov	r2, r0
 80036de:	460b      	mov	r3, r1
 80036e0:	4b61      	ldr	r3, [pc, #388]	; (8003868 <UART_SetConfig+0x2d4>)
 80036e2:	fba3 2302 	umull	r2, r3, r3, r2
 80036e6:	095b      	lsrs	r3, r3, #5
 80036e8:	011c      	lsls	r4, r3, #4
 80036ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80036ee:	2200      	movs	r2, #0
 80036f0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80036f4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80036f8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80036fc:	4642      	mov	r2, r8
 80036fe:	464b      	mov	r3, r9
 8003700:	1891      	adds	r1, r2, r2
 8003702:	64b9      	str	r1, [r7, #72]	; 0x48
 8003704:	415b      	adcs	r3, r3
 8003706:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003708:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800370c:	4641      	mov	r1, r8
 800370e:	eb12 0a01 	adds.w	sl, r2, r1
 8003712:	4649      	mov	r1, r9
 8003714:	eb43 0b01 	adc.w	fp, r3, r1
 8003718:	f04f 0200 	mov.w	r2, #0
 800371c:	f04f 0300 	mov.w	r3, #0
 8003720:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003724:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003728:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800372c:	4692      	mov	sl, r2
 800372e:	469b      	mov	fp, r3
 8003730:	4643      	mov	r3, r8
 8003732:	eb1a 0303 	adds.w	r3, sl, r3
 8003736:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800373a:	464b      	mov	r3, r9
 800373c:	eb4b 0303 	adc.w	r3, fp, r3
 8003740:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003744:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003748:	685b      	ldr	r3, [r3, #4]
 800374a:	2200      	movs	r2, #0
 800374c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003750:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003754:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003758:	460b      	mov	r3, r1
 800375a:	18db      	adds	r3, r3, r3
 800375c:	643b      	str	r3, [r7, #64]	; 0x40
 800375e:	4613      	mov	r3, r2
 8003760:	eb42 0303 	adc.w	r3, r2, r3
 8003764:	647b      	str	r3, [r7, #68]	; 0x44
 8003766:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800376a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800376e:	f7fd fb31 	bl	8000dd4 <__aeabi_uldivmod>
 8003772:	4602      	mov	r2, r0
 8003774:	460b      	mov	r3, r1
 8003776:	4611      	mov	r1, r2
 8003778:	4b3b      	ldr	r3, [pc, #236]	; (8003868 <UART_SetConfig+0x2d4>)
 800377a:	fba3 2301 	umull	r2, r3, r3, r1
 800377e:	095b      	lsrs	r3, r3, #5
 8003780:	2264      	movs	r2, #100	; 0x64
 8003782:	fb02 f303 	mul.w	r3, r2, r3
 8003786:	1acb      	subs	r3, r1, r3
 8003788:	00db      	lsls	r3, r3, #3
 800378a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800378e:	4b36      	ldr	r3, [pc, #216]	; (8003868 <UART_SetConfig+0x2d4>)
 8003790:	fba3 2302 	umull	r2, r3, r3, r2
 8003794:	095b      	lsrs	r3, r3, #5
 8003796:	005b      	lsls	r3, r3, #1
 8003798:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800379c:	441c      	add	r4, r3
 800379e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80037a2:	2200      	movs	r2, #0
 80037a4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80037a8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80037ac:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80037b0:	4642      	mov	r2, r8
 80037b2:	464b      	mov	r3, r9
 80037b4:	1891      	adds	r1, r2, r2
 80037b6:	63b9      	str	r1, [r7, #56]	; 0x38
 80037b8:	415b      	adcs	r3, r3
 80037ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 80037bc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80037c0:	4641      	mov	r1, r8
 80037c2:	1851      	adds	r1, r2, r1
 80037c4:	6339      	str	r1, [r7, #48]	; 0x30
 80037c6:	4649      	mov	r1, r9
 80037c8:	414b      	adcs	r3, r1
 80037ca:	637b      	str	r3, [r7, #52]	; 0x34
 80037cc:	f04f 0200 	mov.w	r2, #0
 80037d0:	f04f 0300 	mov.w	r3, #0
 80037d4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80037d8:	4659      	mov	r1, fp
 80037da:	00cb      	lsls	r3, r1, #3
 80037dc:	4651      	mov	r1, sl
 80037de:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80037e2:	4651      	mov	r1, sl
 80037e4:	00ca      	lsls	r2, r1, #3
 80037e6:	4610      	mov	r0, r2
 80037e8:	4619      	mov	r1, r3
 80037ea:	4603      	mov	r3, r0
 80037ec:	4642      	mov	r2, r8
 80037ee:	189b      	adds	r3, r3, r2
 80037f0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80037f4:	464b      	mov	r3, r9
 80037f6:	460a      	mov	r2, r1
 80037f8:	eb42 0303 	adc.w	r3, r2, r3
 80037fc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003800:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003804:	685b      	ldr	r3, [r3, #4]
 8003806:	2200      	movs	r2, #0
 8003808:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800380c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003810:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003814:	460b      	mov	r3, r1
 8003816:	18db      	adds	r3, r3, r3
 8003818:	62bb      	str	r3, [r7, #40]	; 0x28
 800381a:	4613      	mov	r3, r2
 800381c:	eb42 0303 	adc.w	r3, r2, r3
 8003820:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003822:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003826:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800382a:	f7fd fad3 	bl	8000dd4 <__aeabi_uldivmod>
 800382e:	4602      	mov	r2, r0
 8003830:	460b      	mov	r3, r1
 8003832:	4b0d      	ldr	r3, [pc, #52]	; (8003868 <UART_SetConfig+0x2d4>)
 8003834:	fba3 1302 	umull	r1, r3, r3, r2
 8003838:	095b      	lsrs	r3, r3, #5
 800383a:	2164      	movs	r1, #100	; 0x64
 800383c:	fb01 f303 	mul.w	r3, r1, r3
 8003840:	1ad3      	subs	r3, r2, r3
 8003842:	00db      	lsls	r3, r3, #3
 8003844:	3332      	adds	r3, #50	; 0x32
 8003846:	4a08      	ldr	r2, [pc, #32]	; (8003868 <UART_SetConfig+0x2d4>)
 8003848:	fba2 2303 	umull	r2, r3, r2, r3
 800384c:	095b      	lsrs	r3, r3, #5
 800384e:	f003 0207 	and.w	r2, r3, #7
 8003852:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	4422      	add	r2, r4
 800385a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800385c:	e105      	b.n	8003a6a <UART_SetConfig+0x4d6>
 800385e:	bf00      	nop
 8003860:	40011000 	.word	0x40011000
 8003864:	40011400 	.word	0x40011400
 8003868:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800386c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003870:	2200      	movs	r2, #0
 8003872:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003876:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800387a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800387e:	4642      	mov	r2, r8
 8003880:	464b      	mov	r3, r9
 8003882:	1891      	adds	r1, r2, r2
 8003884:	6239      	str	r1, [r7, #32]
 8003886:	415b      	adcs	r3, r3
 8003888:	627b      	str	r3, [r7, #36]	; 0x24
 800388a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800388e:	4641      	mov	r1, r8
 8003890:	1854      	adds	r4, r2, r1
 8003892:	4649      	mov	r1, r9
 8003894:	eb43 0501 	adc.w	r5, r3, r1
 8003898:	f04f 0200 	mov.w	r2, #0
 800389c:	f04f 0300 	mov.w	r3, #0
 80038a0:	00eb      	lsls	r3, r5, #3
 80038a2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80038a6:	00e2      	lsls	r2, r4, #3
 80038a8:	4614      	mov	r4, r2
 80038aa:	461d      	mov	r5, r3
 80038ac:	4643      	mov	r3, r8
 80038ae:	18e3      	adds	r3, r4, r3
 80038b0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80038b4:	464b      	mov	r3, r9
 80038b6:	eb45 0303 	adc.w	r3, r5, r3
 80038ba:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80038be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038c2:	685b      	ldr	r3, [r3, #4]
 80038c4:	2200      	movs	r2, #0
 80038c6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80038ca:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80038ce:	f04f 0200 	mov.w	r2, #0
 80038d2:	f04f 0300 	mov.w	r3, #0
 80038d6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80038da:	4629      	mov	r1, r5
 80038dc:	008b      	lsls	r3, r1, #2
 80038de:	4621      	mov	r1, r4
 80038e0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80038e4:	4621      	mov	r1, r4
 80038e6:	008a      	lsls	r2, r1, #2
 80038e8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80038ec:	f7fd fa72 	bl	8000dd4 <__aeabi_uldivmod>
 80038f0:	4602      	mov	r2, r0
 80038f2:	460b      	mov	r3, r1
 80038f4:	4b60      	ldr	r3, [pc, #384]	; (8003a78 <UART_SetConfig+0x4e4>)
 80038f6:	fba3 2302 	umull	r2, r3, r3, r2
 80038fa:	095b      	lsrs	r3, r3, #5
 80038fc:	011c      	lsls	r4, r3, #4
 80038fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003902:	2200      	movs	r2, #0
 8003904:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003908:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800390c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003910:	4642      	mov	r2, r8
 8003912:	464b      	mov	r3, r9
 8003914:	1891      	adds	r1, r2, r2
 8003916:	61b9      	str	r1, [r7, #24]
 8003918:	415b      	adcs	r3, r3
 800391a:	61fb      	str	r3, [r7, #28]
 800391c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003920:	4641      	mov	r1, r8
 8003922:	1851      	adds	r1, r2, r1
 8003924:	6139      	str	r1, [r7, #16]
 8003926:	4649      	mov	r1, r9
 8003928:	414b      	adcs	r3, r1
 800392a:	617b      	str	r3, [r7, #20]
 800392c:	f04f 0200 	mov.w	r2, #0
 8003930:	f04f 0300 	mov.w	r3, #0
 8003934:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003938:	4659      	mov	r1, fp
 800393a:	00cb      	lsls	r3, r1, #3
 800393c:	4651      	mov	r1, sl
 800393e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003942:	4651      	mov	r1, sl
 8003944:	00ca      	lsls	r2, r1, #3
 8003946:	4610      	mov	r0, r2
 8003948:	4619      	mov	r1, r3
 800394a:	4603      	mov	r3, r0
 800394c:	4642      	mov	r2, r8
 800394e:	189b      	adds	r3, r3, r2
 8003950:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003954:	464b      	mov	r3, r9
 8003956:	460a      	mov	r2, r1
 8003958:	eb42 0303 	adc.w	r3, r2, r3
 800395c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003960:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003964:	685b      	ldr	r3, [r3, #4]
 8003966:	2200      	movs	r2, #0
 8003968:	67bb      	str	r3, [r7, #120]	; 0x78
 800396a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800396c:	f04f 0200 	mov.w	r2, #0
 8003970:	f04f 0300 	mov.w	r3, #0
 8003974:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003978:	4649      	mov	r1, r9
 800397a:	008b      	lsls	r3, r1, #2
 800397c:	4641      	mov	r1, r8
 800397e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003982:	4641      	mov	r1, r8
 8003984:	008a      	lsls	r2, r1, #2
 8003986:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800398a:	f7fd fa23 	bl	8000dd4 <__aeabi_uldivmod>
 800398e:	4602      	mov	r2, r0
 8003990:	460b      	mov	r3, r1
 8003992:	4b39      	ldr	r3, [pc, #228]	; (8003a78 <UART_SetConfig+0x4e4>)
 8003994:	fba3 1302 	umull	r1, r3, r3, r2
 8003998:	095b      	lsrs	r3, r3, #5
 800399a:	2164      	movs	r1, #100	; 0x64
 800399c:	fb01 f303 	mul.w	r3, r1, r3
 80039a0:	1ad3      	subs	r3, r2, r3
 80039a2:	011b      	lsls	r3, r3, #4
 80039a4:	3332      	adds	r3, #50	; 0x32
 80039a6:	4a34      	ldr	r2, [pc, #208]	; (8003a78 <UART_SetConfig+0x4e4>)
 80039a8:	fba2 2303 	umull	r2, r3, r2, r3
 80039ac:	095b      	lsrs	r3, r3, #5
 80039ae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80039b2:	441c      	add	r4, r3
 80039b4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80039b8:	2200      	movs	r2, #0
 80039ba:	673b      	str	r3, [r7, #112]	; 0x70
 80039bc:	677a      	str	r2, [r7, #116]	; 0x74
 80039be:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80039c2:	4642      	mov	r2, r8
 80039c4:	464b      	mov	r3, r9
 80039c6:	1891      	adds	r1, r2, r2
 80039c8:	60b9      	str	r1, [r7, #8]
 80039ca:	415b      	adcs	r3, r3
 80039cc:	60fb      	str	r3, [r7, #12]
 80039ce:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80039d2:	4641      	mov	r1, r8
 80039d4:	1851      	adds	r1, r2, r1
 80039d6:	6039      	str	r1, [r7, #0]
 80039d8:	4649      	mov	r1, r9
 80039da:	414b      	adcs	r3, r1
 80039dc:	607b      	str	r3, [r7, #4]
 80039de:	f04f 0200 	mov.w	r2, #0
 80039e2:	f04f 0300 	mov.w	r3, #0
 80039e6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80039ea:	4659      	mov	r1, fp
 80039ec:	00cb      	lsls	r3, r1, #3
 80039ee:	4651      	mov	r1, sl
 80039f0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80039f4:	4651      	mov	r1, sl
 80039f6:	00ca      	lsls	r2, r1, #3
 80039f8:	4610      	mov	r0, r2
 80039fa:	4619      	mov	r1, r3
 80039fc:	4603      	mov	r3, r0
 80039fe:	4642      	mov	r2, r8
 8003a00:	189b      	adds	r3, r3, r2
 8003a02:	66bb      	str	r3, [r7, #104]	; 0x68
 8003a04:	464b      	mov	r3, r9
 8003a06:	460a      	mov	r2, r1
 8003a08:	eb42 0303 	adc.w	r3, r2, r3
 8003a0c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003a0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a12:	685b      	ldr	r3, [r3, #4]
 8003a14:	2200      	movs	r2, #0
 8003a16:	663b      	str	r3, [r7, #96]	; 0x60
 8003a18:	667a      	str	r2, [r7, #100]	; 0x64
 8003a1a:	f04f 0200 	mov.w	r2, #0
 8003a1e:	f04f 0300 	mov.w	r3, #0
 8003a22:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003a26:	4649      	mov	r1, r9
 8003a28:	008b      	lsls	r3, r1, #2
 8003a2a:	4641      	mov	r1, r8
 8003a2c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003a30:	4641      	mov	r1, r8
 8003a32:	008a      	lsls	r2, r1, #2
 8003a34:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003a38:	f7fd f9cc 	bl	8000dd4 <__aeabi_uldivmod>
 8003a3c:	4602      	mov	r2, r0
 8003a3e:	460b      	mov	r3, r1
 8003a40:	4b0d      	ldr	r3, [pc, #52]	; (8003a78 <UART_SetConfig+0x4e4>)
 8003a42:	fba3 1302 	umull	r1, r3, r3, r2
 8003a46:	095b      	lsrs	r3, r3, #5
 8003a48:	2164      	movs	r1, #100	; 0x64
 8003a4a:	fb01 f303 	mul.w	r3, r1, r3
 8003a4e:	1ad3      	subs	r3, r2, r3
 8003a50:	011b      	lsls	r3, r3, #4
 8003a52:	3332      	adds	r3, #50	; 0x32
 8003a54:	4a08      	ldr	r2, [pc, #32]	; (8003a78 <UART_SetConfig+0x4e4>)
 8003a56:	fba2 2303 	umull	r2, r3, r2, r3
 8003a5a:	095b      	lsrs	r3, r3, #5
 8003a5c:	f003 020f 	and.w	r2, r3, #15
 8003a60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	4422      	add	r2, r4
 8003a68:	609a      	str	r2, [r3, #8]
}
 8003a6a:	bf00      	nop
 8003a6c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003a70:	46bd      	mov	sp, r7
 8003a72:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003a76:	bf00      	nop
 8003a78:	51eb851f 	.word	0x51eb851f

08003a7c <__errno>:
 8003a7c:	4b01      	ldr	r3, [pc, #4]	; (8003a84 <__errno+0x8>)
 8003a7e:	6818      	ldr	r0, [r3, #0]
 8003a80:	4770      	bx	lr
 8003a82:	bf00      	nop
 8003a84:	2000000c 	.word	0x2000000c

08003a88 <__libc_init_array>:
 8003a88:	b570      	push	{r4, r5, r6, lr}
 8003a8a:	4d0d      	ldr	r5, [pc, #52]	; (8003ac0 <__libc_init_array+0x38>)
 8003a8c:	4c0d      	ldr	r4, [pc, #52]	; (8003ac4 <__libc_init_array+0x3c>)
 8003a8e:	1b64      	subs	r4, r4, r5
 8003a90:	10a4      	asrs	r4, r4, #2
 8003a92:	2600      	movs	r6, #0
 8003a94:	42a6      	cmp	r6, r4
 8003a96:	d109      	bne.n	8003aac <__libc_init_array+0x24>
 8003a98:	4d0b      	ldr	r5, [pc, #44]	; (8003ac8 <__libc_init_array+0x40>)
 8003a9a:	4c0c      	ldr	r4, [pc, #48]	; (8003acc <__libc_init_array+0x44>)
 8003a9c:	f002 fd38 	bl	8006510 <_init>
 8003aa0:	1b64      	subs	r4, r4, r5
 8003aa2:	10a4      	asrs	r4, r4, #2
 8003aa4:	2600      	movs	r6, #0
 8003aa6:	42a6      	cmp	r6, r4
 8003aa8:	d105      	bne.n	8003ab6 <__libc_init_array+0x2e>
 8003aaa:	bd70      	pop	{r4, r5, r6, pc}
 8003aac:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ab0:	4798      	blx	r3
 8003ab2:	3601      	adds	r6, #1
 8003ab4:	e7ee      	b.n	8003a94 <__libc_init_array+0xc>
 8003ab6:	f855 3b04 	ldr.w	r3, [r5], #4
 8003aba:	4798      	blx	r3
 8003abc:	3601      	adds	r6, #1
 8003abe:	e7f2      	b.n	8003aa6 <__libc_init_array+0x1e>
 8003ac0:	08006924 	.word	0x08006924
 8003ac4:	08006924 	.word	0x08006924
 8003ac8:	08006924 	.word	0x08006924
 8003acc:	08006928 	.word	0x08006928

08003ad0 <memset>:
 8003ad0:	4402      	add	r2, r0
 8003ad2:	4603      	mov	r3, r0
 8003ad4:	4293      	cmp	r3, r2
 8003ad6:	d100      	bne.n	8003ada <memset+0xa>
 8003ad8:	4770      	bx	lr
 8003ada:	f803 1b01 	strb.w	r1, [r3], #1
 8003ade:	e7f9      	b.n	8003ad4 <memset+0x4>

08003ae0 <__cvt>:
 8003ae0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003ae4:	ec55 4b10 	vmov	r4, r5, d0
 8003ae8:	2d00      	cmp	r5, #0
 8003aea:	460e      	mov	r6, r1
 8003aec:	4619      	mov	r1, r3
 8003aee:	462b      	mov	r3, r5
 8003af0:	bfbb      	ittet	lt
 8003af2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8003af6:	461d      	movlt	r5, r3
 8003af8:	2300      	movge	r3, #0
 8003afa:	232d      	movlt	r3, #45	; 0x2d
 8003afc:	700b      	strb	r3, [r1, #0]
 8003afe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003b00:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8003b04:	4691      	mov	r9, r2
 8003b06:	f023 0820 	bic.w	r8, r3, #32
 8003b0a:	bfbc      	itt	lt
 8003b0c:	4622      	movlt	r2, r4
 8003b0e:	4614      	movlt	r4, r2
 8003b10:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003b14:	d005      	beq.n	8003b22 <__cvt+0x42>
 8003b16:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8003b1a:	d100      	bne.n	8003b1e <__cvt+0x3e>
 8003b1c:	3601      	adds	r6, #1
 8003b1e:	2102      	movs	r1, #2
 8003b20:	e000      	b.n	8003b24 <__cvt+0x44>
 8003b22:	2103      	movs	r1, #3
 8003b24:	ab03      	add	r3, sp, #12
 8003b26:	9301      	str	r3, [sp, #4]
 8003b28:	ab02      	add	r3, sp, #8
 8003b2a:	9300      	str	r3, [sp, #0]
 8003b2c:	ec45 4b10 	vmov	d0, r4, r5
 8003b30:	4653      	mov	r3, sl
 8003b32:	4632      	mov	r2, r6
 8003b34:	f000 fccc 	bl	80044d0 <_dtoa_r>
 8003b38:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8003b3c:	4607      	mov	r7, r0
 8003b3e:	d102      	bne.n	8003b46 <__cvt+0x66>
 8003b40:	f019 0f01 	tst.w	r9, #1
 8003b44:	d022      	beq.n	8003b8c <__cvt+0xac>
 8003b46:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003b4a:	eb07 0906 	add.w	r9, r7, r6
 8003b4e:	d110      	bne.n	8003b72 <__cvt+0x92>
 8003b50:	783b      	ldrb	r3, [r7, #0]
 8003b52:	2b30      	cmp	r3, #48	; 0x30
 8003b54:	d10a      	bne.n	8003b6c <__cvt+0x8c>
 8003b56:	2200      	movs	r2, #0
 8003b58:	2300      	movs	r3, #0
 8003b5a:	4620      	mov	r0, r4
 8003b5c:	4629      	mov	r1, r5
 8003b5e:	f7fc ffbb 	bl	8000ad8 <__aeabi_dcmpeq>
 8003b62:	b918      	cbnz	r0, 8003b6c <__cvt+0x8c>
 8003b64:	f1c6 0601 	rsb	r6, r6, #1
 8003b68:	f8ca 6000 	str.w	r6, [sl]
 8003b6c:	f8da 3000 	ldr.w	r3, [sl]
 8003b70:	4499      	add	r9, r3
 8003b72:	2200      	movs	r2, #0
 8003b74:	2300      	movs	r3, #0
 8003b76:	4620      	mov	r0, r4
 8003b78:	4629      	mov	r1, r5
 8003b7a:	f7fc ffad 	bl	8000ad8 <__aeabi_dcmpeq>
 8003b7e:	b108      	cbz	r0, 8003b84 <__cvt+0xa4>
 8003b80:	f8cd 900c 	str.w	r9, [sp, #12]
 8003b84:	2230      	movs	r2, #48	; 0x30
 8003b86:	9b03      	ldr	r3, [sp, #12]
 8003b88:	454b      	cmp	r3, r9
 8003b8a:	d307      	bcc.n	8003b9c <__cvt+0xbc>
 8003b8c:	9b03      	ldr	r3, [sp, #12]
 8003b8e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003b90:	1bdb      	subs	r3, r3, r7
 8003b92:	4638      	mov	r0, r7
 8003b94:	6013      	str	r3, [r2, #0]
 8003b96:	b004      	add	sp, #16
 8003b98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003b9c:	1c59      	adds	r1, r3, #1
 8003b9e:	9103      	str	r1, [sp, #12]
 8003ba0:	701a      	strb	r2, [r3, #0]
 8003ba2:	e7f0      	b.n	8003b86 <__cvt+0xa6>

08003ba4 <__exponent>:
 8003ba4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003ba6:	4603      	mov	r3, r0
 8003ba8:	2900      	cmp	r1, #0
 8003baa:	bfb8      	it	lt
 8003bac:	4249      	neglt	r1, r1
 8003bae:	f803 2b02 	strb.w	r2, [r3], #2
 8003bb2:	bfb4      	ite	lt
 8003bb4:	222d      	movlt	r2, #45	; 0x2d
 8003bb6:	222b      	movge	r2, #43	; 0x2b
 8003bb8:	2909      	cmp	r1, #9
 8003bba:	7042      	strb	r2, [r0, #1]
 8003bbc:	dd2a      	ble.n	8003c14 <__exponent+0x70>
 8003bbe:	f10d 0407 	add.w	r4, sp, #7
 8003bc2:	46a4      	mov	ip, r4
 8003bc4:	270a      	movs	r7, #10
 8003bc6:	46a6      	mov	lr, r4
 8003bc8:	460a      	mov	r2, r1
 8003bca:	fb91 f6f7 	sdiv	r6, r1, r7
 8003bce:	fb07 1516 	mls	r5, r7, r6, r1
 8003bd2:	3530      	adds	r5, #48	; 0x30
 8003bd4:	2a63      	cmp	r2, #99	; 0x63
 8003bd6:	f104 34ff 	add.w	r4, r4, #4294967295
 8003bda:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8003bde:	4631      	mov	r1, r6
 8003be0:	dcf1      	bgt.n	8003bc6 <__exponent+0x22>
 8003be2:	3130      	adds	r1, #48	; 0x30
 8003be4:	f1ae 0502 	sub.w	r5, lr, #2
 8003be8:	f804 1c01 	strb.w	r1, [r4, #-1]
 8003bec:	1c44      	adds	r4, r0, #1
 8003bee:	4629      	mov	r1, r5
 8003bf0:	4561      	cmp	r1, ip
 8003bf2:	d30a      	bcc.n	8003c0a <__exponent+0x66>
 8003bf4:	f10d 0209 	add.w	r2, sp, #9
 8003bf8:	eba2 020e 	sub.w	r2, r2, lr
 8003bfc:	4565      	cmp	r5, ip
 8003bfe:	bf88      	it	hi
 8003c00:	2200      	movhi	r2, #0
 8003c02:	4413      	add	r3, r2
 8003c04:	1a18      	subs	r0, r3, r0
 8003c06:	b003      	add	sp, #12
 8003c08:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003c0a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003c0e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8003c12:	e7ed      	b.n	8003bf0 <__exponent+0x4c>
 8003c14:	2330      	movs	r3, #48	; 0x30
 8003c16:	3130      	adds	r1, #48	; 0x30
 8003c18:	7083      	strb	r3, [r0, #2]
 8003c1a:	70c1      	strb	r1, [r0, #3]
 8003c1c:	1d03      	adds	r3, r0, #4
 8003c1e:	e7f1      	b.n	8003c04 <__exponent+0x60>

08003c20 <_printf_float>:
 8003c20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c24:	ed2d 8b02 	vpush	{d8}
 8003c28:	b08d      	sub	sp, #52	; 0x34
 8003c2a:	460c      	mov	r4, r1
 8003c2c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8003c30:	4616      	mov	r6, r2
 8003c32:	461f      	mov	r7, r3
 8003c34:	4605      	mov	r5, r0
 8003c36:	f001 fa39 	bl	80050ac <_localeconv_r>
 8003c3a:	f8d0 a000 	ldr.w	sl, [r0]
 8003c3e:	4650      	mov	r0, sl
 8003c40:	f7fc face 	bl	80001e0 <strlen>
 8003c44:	2300      	movs	r3, #0
 8003c46:	930a      	str	r3, [sp, #40]	; 0x28
 8003c48:	6823      	ldr	r3, [r4, #0]
 8003c4a:	9305      	str	r3, [sp, #20]
 8003c4c:	f8d8 3000 	ldr.w	r3, [r8]
 8003c50:	f894 b018 	ldrb.w	fp, [r4, #24]
 8003c54:	3307      	adds	r3, #7
 8003c56:	f023 0307 	bic.w	r3, r3, #7
 8003c5a:	f103 0208 	add.w	r2, r3, #8
 8003c5e:	f8c8 2000 	str.w	r2, [r8]
 8003c62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c66:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8003c6a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8003c6e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8003c72:	9307      	str	r3, [sp, #28]
 8003c74:	f8cd 8018 	str.w	r8, [sp, #24]
 8003c78:	ee08 0a10 	vmov	s16, r0
 8003c7c:	4b9f      	ldr	r3, [pc, #636]	; (8003efc <_printf_float+0x2dc>)
 8003c7e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003c82:	f04f 32ff 	mov.w	r2, #4294967295
 8003c86:	f7fc ff59 	bl	8000b3c <__aeabi_dcmpun>
 8003c8a:	bb88      	cbnz	r0, 8003cf0 <_printf_float+0xd0>
 8003c8c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003c90:	4b9a      	ldr	r3, [pc, #616]	; (8003efc <_printf_float+0x2dc>)
 8003c92:	f04f 32ff 	mov.w	r2, #4294967295
 8003c96:	f7fc ff33 	bl	8000b00 <__aeabi_dcmple>
 8003c9a:	bb48      	cbnz	r0, 8003cf0 <_printf_float+0xd0>
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	2300      	movs	r3, #0
 8003ca0:	4640      	mov	r0, r8
 8003ca2:	4649      	mov	r1, r9
 8003ca4:	f7fc ff22 	bl	8000aec <__aeabi_dcmplt>
 8003ca8:	b110      	cbz	r0, 8003cb0 <_printf_float+0x90>
 8003caa:	232d      	movs	r3, #45	; 0x2d
 8003cac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003cb0:	4b93      	ldr	r3, [pc, #588]	; (8003f00 <_printf_float+0x2e0>)
 8003cb2:	4894      	ldr	r0, [pc, #592]	; (8003f04 <_printf_float+0x2e4>)
 8003cb4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8003cb8:	bf94      	ite	ls
 8003cba:	4698      	movls	r8, r3
 8003cbc:	4680      	movhi	r8, r0
 8003cbe:	2303      	movs	r3, #3
 8003cc0:	6123      	str	r3, [r4, #16]
 8003cc2:	9b05      	ldr	r3, [sp, #20]
 8003cc4:	f023 0204 	bic.w	r2, r3, #4
 8003cc8:	6022      	str	r2, [r4, #0]
 8003cca:	f04f 0900 	mov.w	r9, #0
 8003cce:	9700      	str	r7, [sp, #0]
 8003cd0:	4633      	mov	r3, r6
 8003cd2:	aa0b      	add	r2, sp, #44	; 0x2c
 8003cd4:	4621      	mov	r1, r4
 8003cd6:	4628      	mov	r0, r5
 8003cd8:	f000 f9d8 	bl	800408c <_printf_common>
 8003cdc:	3001      	adds	r0, #1
 8003cde:	f040 8090 	bne.w	8003e02 <_printf_float+0x1e2>
 8003ce2:	f04f 30ff 	mov.w	r0, #4294967295
 8003ce6:	b00d      	add	sp, #52	; 0x34
 8003ce8:	ecbd 8b02 	vpop	{d8}
 8003cec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003cf0:	4642      	mov	r2, r8
 8003cf2:	464b      	mov	r3, r9
 8003cf4:	4640      	mov	r0, r8
 8003cf6:	4649      	mov	r1, r9
 8003cf8:	f7fc ff20 	bl	8000b3c <__aeabi_dcmpun>
 8003cfc:	b140      	cbz	r0, 8003d10 <_printf_float+0xf0>
 8003cfe:	464b      	mov	r3, r9
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	bfbc      	itt	lt
 8003d04:	232d      	movlt	r3, #45	; 0x2d
 8003d06:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8003d0a:	487f      	ldr	r0, [pc, #508]	; (8003f08 <_printf_float+0x2e8>)
 8003d0c:	4b7f      	ldr	r3, [pc, #508]	; (8003f0c <_printf_float+0x2ec>)
 8003d0e:	e7d1      	b.n	8003cb4 <_printf_float+0x94>
 8003d10:	6863      	ldr	r3, [r4, #4]
 8003d12:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8003d16:	9206      	str	r2, [sp, #24]
 8003d18:	1c5a      	adds	r2, r3, #1
 8003d1a:	d13f      	bne.n	8003d9c <_printf_float+0x17c>
 8003d1c:	2306      	movs	r3, #6
 8003d1e:	6063      	str	r3, [r4, #4]
 8003d20:	9b05      	ldr	r3, [sp, #20]
 8003d22:	6861      	ldr	r1, [r4, #4]
 8003d24:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8003d28:	2300      	movs	r3, #0
 8003d2a:	9303      	str	r3, [sp, #12]
 8003d2c:	ab0a      	add	r3, sp, #40	; 0x28
 8003d2e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8003d32:	ab09      	add	r3, sp, #36	; 0x24
 8003d34:	ec49 8b10 	vmov	d0, r8, r9
 8003d38:	9300      	str	r3, [sp, #0]
 8003d3a:	6022      	str	r2, [r4, #0]
 8003d3c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8003d40:	4628      	mov	r0, r5
 8003d42:	f7ff fecd 	bl	8003ae0 <__cvt>
 8003d46:	9b06      	ldr	r3, [sp, #24]
 8003d48:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003d4a:	2b47      	cmp	r3, #71	; 0x47
 8003d4c:	4680      	mov	r8, r0
 8003d4e:	d108      	bne.n	8003d62 <_printf_float+0x142>
 8003d50:	1cc8      	adds	r0, r1, #3
 8003d52:	db02      	blt.n	8003d5a <_printf_float+0x13a>
 8003d54:	6863      	ldr	r3, [r4, #4]
 8003d56:	4299      	cmp	r1, r3
 8003d58:	dd41      	ble.n	8003dde <_printf_float+0x1be>
 8003d5a:	f1ab 0b02 	sub.w	fp, fp, #2
 8003d5e:	fa5f fb8b 	uxtb.w	fp, fp
 8003d62:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8003d66:	d820      	bhi.n	8003daa <_printf_float+0x18a>
 8003d68:	3901      	subs	r1, #1
 8003d6a:	465a      	mov	r2, fp
 8003d6c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8003d70:	9109      	str	r1, [sp, #36]	; 0x24
 8003d72:	f7ff ff17 	bl	8003ba4 <__exponent>
 8003d76:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003d78:	1813      	adds	r3, r2, r0
 8003d7a:	2a01      	cmp	r2, #1
 8003d7c:	4681      	mov	r9, r0
 8003d7e:	6123      	str	r3, [r4, #16]
 8003d80:	dc02      	bgt.n	8003d88 <_printf_float+0x168>
 8003d82:	6822      	ldr	r2, [r4, #0]
 8003d84:	07d2      	lsls	r2, r2, #31
 8003d86:	d501      	bpl.n	8003d8c <_printf_float+0x16c>
 8003d88:	3301      	adds	r3, #1
 8003d8a:	6123      	str	r3, [r4, #16]
 8003d8c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d09c      	beq.n	8003cce <_printf_float+0xae>
 8003d94:	232d      	movs	r3, #45	; 0x2d
 8003d96:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003d9a:	e798      	b.n	8003cce <_printf_float+0xae>
 8003d9c:	9a06      	ldr	r2, [sp, #24]
 8003d9e:	2a47      	cmp	r2, #71	; 0x47
 8003da0:	d1be      	bne.n	8003d20 <_printf_float+0x100>
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d1bc      	bne.n	8003d20 <_printf_float+0x100>
 8003da6:	2301      	movs	r3, #1
 8003da8:	e7b9      	b.n	8003d1e <_printf_float+0xfe>
 8003daa:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8003dae:	d118      	bne.n	8003de2 <_printf_float+0x1c2>
 8003db0:	2900      	cmp	r1, #0
 8003db2:	6863      	ldr	r3, [r4, #4]
 8003db4:	dd0b      	ble.n	8003dce <_printf_float+0x1ae>
 8003db6:	6121      	str	r1, [r4, #16]
 8003db8:	b913      	cbnz	r3, 8003dc0 <_printf_float+0x1a0>
 8003dba:	6822      	ldr	r2, [r4, #0]
 8003dbc:	07d0      	lsls	r0, r2, #31
 8003dbe:	d502      	bpl.n	8003dc6 <_printf_float+0x1a6>
 8003dc0:	3301      	adds	r3, #1
 8003dc2:	440b      	add	r3, r1
 8003dc4:	6123      	str	r3, [r4, #16]
 8003dc6:	65a1      	str	r1, [r4, #88]	; 0x58
 8003dc8:	f04f 0900 	mov.w	r9, #0
 8003dcc:	e7de      	b.n	8003d8c <_printf_float+0x16c>
 8003dce:	b913      	cbnz	r3, 8003dd6 <_printf_float+0x1b6>
 8003dd0:	6822      	ldr	r2, [r4, #0]
 8003dd2:	07d2      	lsls	r2, r2, #31
 8003dd4:	d501      	bpl.n	8003dda <_printf_float+0x1ba>
 8003dd6:	3302      	adds	r3, #2
 8003dd8:	e7f4      	b.n	8003dc4 <_printf_float+0x1a4>
 8003dda:	2301      	movs	r3, #1
 8003ddc:	e7f2      	b.n	8003dc4 <_printf_float+0x1a4>
 8003dde:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8003de2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003de4:	4299      	cmp	r1, r3
 8003de6:	db05      	blt.n	8003df4 <_printf_float+0x1d4>
 8003de8:	6823      	ldr	r3, [r4, #0]
 8003dea:	6121      	str	r1, [r4, #16]
 8003dec:	07d8      	lsls	r0, r3, #31
 8003dee:	d5ea      	bpl.n	8003dc6 <_printf_float+0x1a6>
 8003df0:	1c4b      	adds	r3, r1, #1
 8003df2:	e7e7      	b.n	8003dc4 <_printf_float+0x1a4>
 8003df4:	2900      	cmp	r1, #0
 8003df6:	bfd4      	ite	le
 8003df8:	f1c1 0202 	rsble	r2, r1, #2
 8003dfc:	2201      	movgt	r2, #1
 8003dfe:	4413      	add	r3, r2
 8003e00:	e7e0      	b.n	8003dc4 <_printf_float+0x1a4>
 8003e02:	6823      	ldr	r3, [r4, #0]
 8003e04:	055a      	lsls	r2, r3, #21
 8003e06:	d407      	bmi.n	8003e18 <_printf_float+0x1f8>
 8003e08:	6923      	ldr	r3, [r4, #16]
 8003e0a:	4642      	mov	r2, r8
 8003e0c:	4631      	mov	r1, r6
 8003e0e:	4628      	mov	r0, r5
 8003e10:	47b8      	blx	r7
 8003e12:	3001      	adds	r0, #1
 8003e14:	d12c      	bne.n	8003e70 <_printf_float+0x250>
 8003e16:	e764      	b.n	8003ce2 <_printf_float+0xc2>
 8003e18:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8003e1c:	f240 80e0 	bls.w	8003fe0 <_printf_float+0x3c0>
 8003e20:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003e24:	2200      	movs	r2, #0
 8003e26:	2300      	movs	r3, #0
 8003e28:	f7fc fe56 	bl	8000ad8 <__aeabi_dcmpeq>
 8003e2c:	2800      	cmp	r0, #0
 8003e2e:	d034      	beq.n	8003e9a <_printf_float+0x27a>
 8003e30:	4a37      	ldr	r2, [pc, #220]	; (8003f10 <_printf_float+0x2f0>)
 8003e32:	2301      	movs	r3, #1
 8003e34:	4631      	mov	r1, r6
 8003e36:	4628      	mov	r0, r5
 8003e38:	47b8      	blx	r7
 8003e3a:	3001      	adds	r0, #1
 8003e3c:	f43f af51 	beq.w	8003ce2 <_printf_float+0xc2>
 8003e40:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003e44:	429a      	cmp	r2, r3
 8003e46:	db02      	blt.n	8003e4e <_printf_float+0x22e>
 8003e48:	6823      	ldr	r3, [r4, #0]
 8003e4a:	07d8      	lsls	r0, r3, #31
 8003e4c:	d510      	bpl.n	8003e70 <_printf_float+0x250>
 8003e4e:	ee18 3a10 	vmov	r3, s16
 8003e52:	4652      	mov	r2, sl
 8003e54:	4631      	mov	r1, r6
 8003e56:	4628      	mov	r0, r5
 8003e58:	47b8      	blx	r7
 8003e5a:	3001      	adds	r0, #1
 8003e5c:	f43f af41 	beq.w	8003ce2 <_printf_float+0xc2>
 8003e60:	f04f 0800 	mov.w	r8, #0
 8003e64:	f104 091a 	add.w	r9, r4, #26
 8003e68:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003e6a:	3b01      	subs	r3, #1
 8003e6c:	4543      	cmp	r3, r8
 8003e6e:	dc09      	bgt.n	8003e84 <_printf_float+0x264>
 8003e70:	6823      	ldr	r3, [r4, #0]
 8003e72:	079b      	lsls	r3, r3, #30
 8003e74:	f100 8105 	bmi.w	8004082 <_printf_float+0x462>
 8003e78:	68e0      	ldr	r0, [r4, #12]
 8003e7a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003e7c:	4298      	cmp	r0, r3
 8003e7e:	bfb8      	it	lt
 8003e80:	4618      	movlt	r0, r3
 8003e82:	e730      	b.n	8003ce6 <_printf_float+0xc6>
 8003e84:	2301      	movs	r3, #1
 8003e86:	464a      	mov	r2, r9
 8003e88:	4631      	mov	r1, r6
 8003e8a:	4628      	mov	r0, r5
 8003e8c:	47b8      	blx	r7
 8003e8e:	3001      	adds	r0, #1
 8003e90:	f43f af27 	beq.w	8003ce2 <_printf_float+0xc2>
 8003e94:	f108 0801 	add.w	r8, r8, #1
 8003e98:	e7e6      	b.n	8003e68 <_printf_float+0x248>
 8003e9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	dc39      	bgt.n	8003f14 <_printf_float+0x2f4>
 8003ea0:	4a1b      	ldr	r2, [pc, #108]	; (8003f10 <_printf_float+0x2f0>)
 8003ea2:	2301      	movs	r3, #1
 8003ea4:	4631      	mov	r1, r6
 8003ea6:	4628      	mov	r0, r5
 8003ea8:	47b8      	blx	r7
 8003eaa:	3001      	adds	r0, #1
 8003eac:	f43f af19 	beq.w	8003ce2 <_printf_float+0xc2>
 8003eb0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003eb4:	4313      	orrs	r3, r2
 8003eb6:	d102      	bne.n	8003ebe <_printf_float+0x29e>
 8003eb8:	6823      	ldr	r3, [r4, #0]
 8003eba:	07d9      	lsls	r1, r3, #31
 8003ebc:	d5d8      	bpl.n	8003e70 <_printf_float+0x250>
 8003ebe:	ee18 3a10 	vmov	r3, s16
 8003ec2:	4652      	mov	r2, sl
 8003ec4:	4631      	mov	r1, r6
 8003ec6:	4628      	mov	r0, r5
 8003ec8:	47b8      	blx	r7
 8003eca:	3001      	adds	r0, #1
 8003ecc:	f43f af09 	beq.w	8003ce2 <_printf_float+0xc2>
 8003ed0:	f04f 0900 	mov.w	r9, #0
 8003ed4:	f104 0a1a 	add.w	sl, r4, #26
 8003ed8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003eda:	425b      	negs	r3, r3
 8003edc:	454b      	cmp	r3, r9
 8003ede:	dc01      	bgt.n	8003ee4 <_printf_float+0x2c4>
 8003ee0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003ee2:	e792      	b.n	8003e0a <_printf_float+0x1ea>
 8003ee4:	2301      	movs	r3, #1
 8003ee6:	4652      	mov	r2, sl
 8003ee8:	4631      	mov	r1, r6
 8003eea:	4628      	mov	r0, r5
 8003eec:	47b8      	blx	r7
 8003eee:	3001      	adds	r0, #1
 8003ef0:	f43f aef7 	beq.w	8003ce2 <_printf_float+0xc2>
 8003ef4:	f109 0901 	add.w	r9, r9, #1
 8003ef8:	e7ee      	b.n	8003ed8 <_printf_float+0x2b8>
 8003efa:	bf00      	nop
 8003efc:	7fefffff 	.word	0x7fefffff
 8003f00:	08006544 	.word	0x08006544
 8003f04:	08006548 	.word	0x08006548
 8003f08:	08006550 	.word	0x08006550
 8003f0c:	0800654c 	.word	0x0800654c
 8003f10:	08006554 	.word	0x08006554
 8003f14:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003f16:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003f18:	429a      	cmp	r2, r3
 8003f1a:	bfa8      	it	ge
 8003f1c:	461a      	movge	r2, r3
 8003f1e:	2a00      	cmp	r2, #0
 8003f20:	4691      	mov	r9, r2
 8003f22:	dc37      	bgt.n	8003f94 <_printf_float+0x374>
 8003f24:	f04f 0b00 	mov.w	fp, #0
 8003f28:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003f2c:	f104 021a 	add.w	r2, r4, #26
 8003f30:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003f32:	9305      	str	r3, [sp, #20]
 8003f34:	eba3 0309 	sub.w	r3, r3, r9
 8003f38:	455b      	cmp	r3, fp
 8003f3a:	dc33      	bgt.n	8003fa4 <_printf_float+0x384>
 8003f3c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003f40:	429a      	cmp	r2, r3
 8003f42:	db3b      	blt.n	8003fbc <_printf_float+0x39c>
 8003f44:	6823      	ldr	r3, [r4, #0]
 8003f46:	07da      	lsls	r2, r3, #31
 8003f48:	d438      	bmi.n	8003fbc <_printf_float+0x39c>
 8003f4a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003f4c:	9a05      	ldr	r2, [sp, #20]
 8003f4e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003f50:	1a9a      	subs	r2, r3, r2
 8003f52:	eba3 0901 	sub.w	r9, r3, r1
 8003f56:	4591      	cmp	r9, r2
 8003f58:	bfa8      	it	ge
 8003f5a:	4691      	movge	r9, r2
 8003f5c:	f1b9 0f00 	cmp.w	r9, #0
 8003f60:	dc35      	bgt.n	8003fce <_printf_float+0x3ae>
 8003f62:	f04f 0800 	mov.w	r8, #0
 8003f66:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003f6a:	f104 0a1a 	add.w	sl, r4, #26
 8003f6e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003f72:	1a9b      	subs	r3, r3, r2
 8003f74:	eba3 0309 	sub.w	r3, r3, r9
 8003f78:	4543      	cmp	r3, r8
 8003f7a:	f77f af79 	ble.w	8003e70 <_printf_float+0x250>
 8003f7e:	2301      	movs	r3, #1
 8003f80:	4652      	mov	r2, sl
 8003f82:	4631      	mov	r1, r6
 8003f84:	4628      	mov	r0, r5
 8003f86:	47b8      	blx	r7
 8003f88:	3001      	adds	r0, #1
 8003f8a:	f43f aeaa 	beq.w	8003ce2 <_printf_float+0xc2>
 8003f8e:	f108 0801 	add.w	r8, r8, #1
 8003f92:	e7ec      	b.n	8003f6e <_printf_float+0x34e>
 8003f94:	4613      	mov	r3, r2
 8003f96:	4631      	mov	r1, r6
 8003f98:	4642      	mov	r2, r8
 8003f9a:	4628      	mov	r0, r5
 8003f9c:	47b8      	blx	r7
 8003f9e:	3001      	adds	r0, #1
 8003fa0:	d1c0      	bne.n	8003f24 <_printf_float+0x304>
 8003fa2:	e69e      	b.n	8003ce2 <_printf_float+0xc2>
 8003fa4:	2301      	movs	r3, #1
 8003fa6:	4631      	mov	r1, r6
 8003fa8:	4628      	mov	r0, r5
 8003faa:	9205      	str	r2, [sp, #20]
 8003fac:	47b8      	blx	r7
 8003fae:	3001      	adds	r0, #1
 8003fb0:	f43f ae97 	beq.w	8003ce2 <_printf_float+0xc2>
 8003fb4:	9a05      	ldr	r2, [sp, #20]
 8003fb6:	f10b 0b01 	add.w	fp, fp, #1
 8003fba:	e7b9      	b.n	8003f30 <_printf_float+0x310>
 8003fbc:	ee18 3a10 	vmov	r3, s16
 8003fc0:	4652      	mov	r2, sl
 8003fc2:	4631      	mov	r1, r6
 8003fc4:	4628      	mov	r0, r5
 8003fc6:	47b8      	blx	r7
 8003fc8:	3001      	adds	r0, #1
 8003fca:	d1be      	bne.n	8003f4a <_printf_float+0x32a>
 8003fcc:	e689      	b.n	8003ce2 <_printf_float+0xc2>
 8003fce:	9a05      	ldr	r2, [sp, #20]
 8003fd0:	464b      	mov	r3, r9
 8003fd2:	4442      	add	r2, r8
 8003fd4:	4631      	mov	r1, r6
 8003fd6:	4628      	mov	r0, r5
 8003fd8:	47b8      	blx	r7
 8003fda:	3001      	adds	r0, #1
 8003fdc:	d1c1      	bne.n	8003f62 <_printf_float+0x342>
 8003fde:	e680      	b.n	8003ce2 <_printf_float+0xc2>
 8003fe0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003fe2:	2a01      	cmp	r2, #1
 8003fe4:	dc01      	bgt.n	8003fea <_printf_float+0x3ca>
 8003fe6:	07db      	lsls	r3, r3, #31
 8003fe8:	d538      	bpl.n	800405c <_printf_float+0x43c>
 8003fea:	2301      	movs	r3, #1
 8003fec:	4642      	mov	r2, r8
 8003fee:	4631      	mov	r1, r6
 8003ff0:	4628      	mov	r0, r5
 8003ff2:	47b8      	blx	r7
 8003ff4:	3001      	adds	r0, #1
 8003ff6:	f43f ae74 	beq.w	8003ce2 <_printf_float+0xc2>
 8003ffa:	ee18 3a10 	vmov	r3, s16
 8003ffe:	4652      	mov	r2, sl
 8004000:	4631      	mov	r1, r6
 8004002:	4628      	mov	r0, r5
 8004004:	47b8      	blx	r7
 8004006:	3001      	adds	r0, #1
 8004008:	f43f ae6b 	beq.w	8003ce2 <_printf_float+0xc2>
 800400c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004010:	2200      	movs	r2, #0
 8004012:	2300      	movs	r3, #0
 8004014:	f7fc fd60 	bl	8000ad8 <__aeabi_dcmpeq>
 8004018:	b9d8      	cbnz	r0, 8004052 <_printf_float+0x432>
 800401a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800401c:	f108 0201 	add.w	r2, r8, #1
 8004020:	3b01      	subs	r3, #1
 8004022:	4631      	mov	r1, r6
 8004024:	4628      	mov	r0, r5
 8004026:	47b8      	blx	r7
 8004028:	3001      	adds	r0, #1
 800402a:	d10e      	bne.n	800404a <_printf_float+0x42a>
 800402c:	e659      	b.n	8003ce2 <_printf_float+0xc2>
 800402e:	2301      	movs	r3, #1
 8004030:	4652      	mov	r2, sl
 8004032:	4631      	mov	r1, r6
 8004034:	4628      	mov	r0, r5
 8004036:	47b8      	blx	r7
 8004038:	3001      	adds	r0, #1
 800403a:	f43f ae52 	beq.w	8003ce2 <_printf_float+0xc2>
 800403e:	f108 0801 	add.w	r8, r8, #1
 8004042:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004044:	3b01      	subs	r3, #1
 8004046:	4543      	cmp	r3, r8
 8004048:	dcf1      	bgt.n	800402e <_printf_float+0x40e>
 800404a:	464b      	mov	r3, r9
 800404c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004050:	e6dc      	b.n	8003e0c <_printf_float+0x1ec>
 8004052:	f04f 0800 	mov.w	r8, #0
 8004056:	f104 0a1a 	add.w	sl, r4, #26
 800405a:	e7f2      	b.n	8004042 <_printf_float+0x422>
 800405c:	2301      	movs	r3, #1
 800405e:	4642      	mov	r2, r8
 8004060:	e7df      	b.n	8004022 <_printf_float+0x402>
 8004062:	2301      	movs	r3, #1
 8004064:	464a      	mov	r2, r9
 8004066:	4631      	mov	r1, r6
 8004068:	4628      	mov	r0, r5
 800406a:	47b8      	blx	r7
 800406c:	3001      	adds	r0, #1
 800406e:	f43f ae38 	beq.w	8003ce2 <_printf_float+0xc2>
 8004072:	f108 0801 	add.w	r8, r8, #1
 8004076:	68e3      	ldr	r3, [r4, #12]
 8004078:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800407a:	1a5b      	subs	r3, r3, r1
 800407c:	4543      	cmp	r3, r8
 800407e:	dcf0      	bgt.n	8004062 <_printf_float+0x442>
 8004080:	e6fa      	b.n	8003e78 <_printf_float+0x258>
 8004082:	f04f 0800 	mov.w	r8, #0
 8004086:	f104 0919 	add.w	r9, r4, #25
 800408a:	e7f4      	b.n	8004076 <_printf_float+0x456>

0800408c <_printf_common>:
 800408c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004090:	4616      	mov	r6, r2
 8004092:	4699      	mov	r9, r3
 8004094:	688a      	ldr	r2, [r1, #8]
 8004096:	690b      	ldr	r3, [r1, #16]
 8004098:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800409c:	4293      	cmp	r3, r2
 800409e:	bfb8      	it	lt
 80040a0:	4613      	movlt	r3, r2
 80040a2:	6033      	str	r3, [r6, #0]
 80040a4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80040a8:	4607      	mov	r7, r0
 80040aa:	460c      	mov	r4, r1
 80040ac:	b10a      	cbz	r2, 80040b2 <_printf_common+0x26>
 80040ae:	3301      	adds	r3, #1
 80040b0:	6033      	str	r3, [r6, #0]
 80040b2:	6823      	ldr	r3, [r4, #0]
 80040b4:	0699      	lsls	r1, r3, #26
 80040b6:	bf42      	ittt	mi
 80040b8:	6833      	ldrmi	r3, [r6, #0]
 80040ba:	3302      	addmi	r3, #2
 80040bc:	6033      	strmi	r3, [r6, #0]
 80040be:	6825      	ldr	r5, [r4, #0]
 80040c0:	f015 0506 	ands.w	r5, r5, #6
 80040c4:	d106      	bne.n	80040d4 <_printf_common+0x48>
 80040c6:	f104 0a19 	add.w	sl, r4, #25
 80040ca:	68e3      	ldr	r3, [r4, #12]
 80040cc:	6832      	ldr	r2, [r6, #0]
 80040ce:	1a9b      	subs	r3, r3, r2
 80040d0:	42ab      	cmp	r3, r5
 80040d2:	dc26      	bgt.n	8004122 <_printf_common+0x96>
 80040d4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80040d8:	1e13      	subs	r3, r2, #0
 80040da:	6822      	ldr	r2, [r4, #0]
 80040dc:	bf18      	it	ne
 80040de:	2301      	movne	r3, #1
 80040e0:	0692      	lsls	r2, r2, #26
 80040e2:	d42b      	bmi.n	800413c <_printf_common+0xb0>
 80040e4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80040e8:	4649      	mov	r1, r9
 80040ea:	4638      	mov	r0, r7
 80040ec:	47c0      	blx	r8
 80040ee:	3001      	adds	r0, #1
 80040f0:	d01e      	beq.n	8004130 <_printf_common+0xa4>
 80040f2:	6823      	ldr	r3, [r4, #0]
 80040f4:	68e5      	ldr	r5, [r4, #12]
 80040f6:	6832      	ldr	r2, [r6, #0]
 80040f8:	f003 0306 	and.w	r3, r3, #6
 80040fc:	2b04      	cmp	r3, #4
 80040fe:	bf08      	it	eq
 8004100:	1aad      	subeq	r5, r5, r2
 8004102:	68a3      	ldr	r3, [r4, #8]
 8004104:	6922      	ldr	r2, [r4, #16]
 8004106:	bf0c      	ite	eq
 8004108:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800410c:	2500      	movne	r5, #0
 800410e:	4293      	cmp	r3, r2
 8004110:	bfc4      	itt	gt
 8004112:	1a9b      	subgt	r3, r3, r2
 8004114:	18ed      	addgt	r5, r5, r3
 8004116:	2600      	movs	r6, #0
 8004118:	341a      	adds	r4, #26
 800411a:	42b5      	cmp	r5, r6
 800411c:	d11a      	bne.n	8004154 <_printf_common+0xc8>
 800411e:	2000      	movs	r0, #0
 8004120:	e008      	b.n	8004134 <_printf_common+0xa8>
 8004122:	2301      	movs	r3, #1
 8004124:	4652      	mov	r2, sl
 8004126:	4649      	mov	r1, r9
 8004128:	4638      	mov	r0, r7
 800412a:	47c0      	blx	r8
 800412c:	3001      	adds	r0, #1
 800412e:	d103      	bne.n	8004138 <_printf_common+0xac>
 8004130:	f04f 30ff 	mov.w	r0, #4294967295
 8004134:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004138:	3501      	adds	r5, #1
 800413a:	e7c6      	b.n	80040ca <_printf_common+0x3e>
 800413c:	18e1      	adds	r1, r4, r3
 800413e:	1c5a      	adds	r2, r3, #1
 8004140:	2030      	movs	r0, #48	; 0x30
 8004142:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004146:	4422      	add	r2, r4
 8004148:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800414c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004150:	3302      	adds	r3, #2
 8004152:	e7c7      	b.n	80040e4 <_printf_common+0x58>
 8004154:	2301      	movs	r3, #1
 8004156:	4622      	mov	r2, r4
 8004158:	4649      	mov	r1, r9
 800415a:	4638      	mov	r0, r7
 800415c:	47c0      	blx	r8
 800415e:	3001      	adds	r0, #1
 8004160:	d0e6      	beq.n	8004130 <_printf_common+0xa4>
 8004162:	3601      	adds	r6, #1
 8004164:	e7d9      	b.n	800411a <_printf_common+0x8e>
	...

08004168 <_printf_i>:
 8004168:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800416c:	7e0f      	ldrb	r7, [r1, #24]
 800416e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004170:	2f78      	cmp	r7, #120	; 0x78
 8004172:	4691      	mov	r9, r2
 8004174:	4680      	mov	r8, r0
 8004176:	460c      	mov	r4, r1
 8004178:	469a      	mov	sl, r3
 800417a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800417e:	d807      	bhi.n	8004190 <_printf_i+0x28>
 8004180:	2f62      	cmp	r7, #98	; 0x62
 8004182:	d80a      	bhi.n	800419a <_printf_i+0x32>
 8004184:	2f00      	cmp	r7, #0
 8004186:	f000 80d8 	beq.w	800433a <_printf_i+0x1d2>
 800418a:	2f58      	cmp	r7, #88	; 0x58
 800418c:	f000 80a3 	beq.w	80042d6 <_printf_i+0x16e>
 8004190:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004194:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004198:	e03a      	b.n	8004210 <_printf_i+0xa8>
 800419a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800419e:	2b15      	cmp	r3, #21
 80041a0:	d8f6      	bhi.n	8004190 <_printf_i+0x28>
 80041a2:	a101      	add	r1, pc, #4	; (adr r1, 80041a8 <_printf_i+0x40>)
 80041a4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80041a8:	08004201 	.word	0x08004201
 80041ac:	08004215 	.word	0x08004215
 80041b0:	08004191 	.word	0x08004191
 80041b4:	08004191 	.word	0x08004191
 80041b8:	08004191 	.word	0x08004191
 80041bc:	08004191 	.word	0x08004191
 80041c0:	08004215 	.word	0x08004215
 80041c4:	08004191 	.word	0x08004191
 80041c8:	08004191 	.word	0x08004191
 80041cc:	08004191 	.word	0x08004191
 80041d0:	08004191 	.word	0x08004191
 80041d4:	08004321 	.word	0x08004321
 80041d8:	08004245 	.word	0x08004245
 80041dc:	08004303 	.word	0x08004303
 80041e0:	08004191 	.word	0x08004191
 80041e4:	08004191 	.word	0x08004191
 80041e8:	08004343 	.word	0x08004343
 80041ec:	08004191 	.word	0x08004191
 80041f0:	08004245 	.word	0x08004245
 80041f4:	08004191 	.word	0x08004191
 80041f8:	08004191 	.word	0x08004191
 80041fc:	0800430b 	.word	0x0800430b
 8004200:	682b      	ldr	r3, [r5, #0]
 8004202:	1d1a      	adds	r2, r3, #4
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	602a      	str	r2, [r5, #0]
 8004208:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800420c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004210:	2301      	movs	r3, #1
 8004212:	e0a3      	b.n	800435c <_printf_i+0x1f4>
 8004214:	6820      	ldr	r0, [r4, #0]
 8004216:	6829      	ldr	r1, [r5, #0]
 8004218:	0606      	lsls	r6, r0, #24
 800421a:	f101 0304 	add.w	r3, r1, #4
 800421e:	d50a      	bpl.n	8004236 <_printf_i+0xce>
 8004220:	680e      	ldr	r6, [r1, #0]
 8004222:	602b      	str	r3, [r5, #0]
 8004224:	2e00      	cmp	r6, #0
 8004226:	da03      	bge.n	8004230 <_printf_i+0xc8>
 8004228:	232d      	movs	r3, #45	; 0x2d
 800422a:	4276      	negs	r6, r6
 800422c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004230:	485e      	ldr	r0, [pc, #376]	; (80043ac <_printf_i+0x244>)
 8004232:	230a      	movs	r3, #10
 8004234:	e019      	b.n	800426a <_printf_i+0x102>
 8004236:	680e      	ldr	r6, [r1, #0]
 8004238:	602b      	str	r3, [r5, #0]
 800423a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800423e:	bf18      	it	ne
 8004240:	b236      	sxthne	r6, r6
 8004242:	e7ef      	b.n	8004224 <_printf_i+0xbc>
 8004244:	682b      	ldr	r3, [r5, #0]
 8004246:	6820      	ldr	r0, [r4, #0]
 8004248:	1d19      	adds	r1, r3, #4
 800424a:	6029      	str	r1, [r5, #0]
 800424c:	0601      	lsls	r1, r0, #24
 800424e:	d501      	bpl.n	8004254 <_printf_i+0xec>
 8004250:	681e      	ldr	r6, [r3, #0]
 8004252:	e002      	b.n	800425a <_printf_i+0xf2>
 8004254:	0646      	lsls	r6, r0, #25
 8004256:	d5fb      	bpl.n	8004250 <_printf_i+0xe8>
 8004258:	881e      	ldrh	r6, [r3, #0]
 800425a:	4854      	ldr	r0, [pc, #336]	; (80043ac <_printf_i+0x244>)
 800425c:	2f6f      	cmp	r7, #111	; 0x6f
 800425e:	bf0c      	ite	eq
 8004260:	2308      	moveq	r3, #8
 8004262:	230a      	movne	r3, #10
 8004264:	2100      	movs	r1, #0
 8004266:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800426a:	6865      	ldr	r5, [r4, #4]
 800426c:	60a5      	str	r5, [r4, #8]
 800426e:	2d00      	cmp	r5, #0
 8004270:	bfa2      	ittt	ge
 8004272:	6821      	ldrge	r1, [r4, #0]
 8004274:	f021 0104 	bicge.w	r1, r1, #4
 8004278:	6021      	strge	r1, [r4, #0]
 800427a:	b90e      	cbnz	r6, 8004280 <_printf_i+0x118>
 800427c:	2d00      	cmp	r5, #0
 800427e:	d04d      	beq.n	800431c <_printf_i+0x1b4>
 8004280:	4615      	mov	r5, r2
 8004282:	fbb6 f1f3 	udiv	r1, r6, r3
 8004286:	fb03 6711 	mls	r7, r3, r1, r6
 800428a:	5dc7      	ldrb	r7, [r0, r7]
 800428c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004290:	4637      	mov	r7, r6
 8004292:	42bb      	cmp	r3, r7
 8004294:	460e      	mov	r6, r1
 8004296:	d9f4      	bls.n	8004282 <_printf_i+0x11a>
 8004298:	2b08      	cmp	r3, #8
 800429a:	d10b      	bne.n	80042b4 <_printf_i+0x14c>
 800429c:	6823      	ldr	r3, [r4, #0]
 800429e:	07de      	lsls	r6, r3, #31
 80042a0:	d508      	bpl.n	80042b4 <_printf_i+0x14c>
 80042a2:	6923      	ldr	r3, [r4, #16]
 80042a4:	6861      	ldr	r1, [r4, #4]
 80042a6:	4299      	cmp	r1, r3
 80042a8:	bfde      	ittt	le
 80042aa:	2330      	movle	r3, #48	; 0x30
 80042ac:	f805 3c01 	strble.w	r3, [r5, #-1]
 80042b0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80042b4:	1b52      	subs	r2, r2, r5
 80042b6:	6122      	str	r2, [r4, #16]
 80042b8:	f8cd a000 	str.w	sl, [sp]
 80042bc:	464b      	mov	r3, r9
 80042be:	aa03      	add	r2, sp, #12
 80042c0:	4621      	mov	r1, r4
 80042c2:	4640      	mov	r0, r8
 80042c4:	f7ff fee2 	bl	800408c <_printf_common>
 80042c8:	3001      	adds	r0, #1
 80042ca:	d14c      	bne.n	8004366 <_printf_i+0x1fe>
 80042cc:	f04f 30ff 	mov.w	r0, #4294967295
 80042d0:	b004      	add	sp, #16
 80042d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80042d6:	4835      	ldr	r0, [pc, #212]	; (80043ac <_printf_i+0x244>)
 80042d8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80042dc:	6829      	ldr	r1, [r5, #0]
 80042de:	6823      	ldr	r3, [r4, #0]
 80042e0:	f851 6b04 	ldr.w	r6, [r1], #4
 80042e4:	6029      	str	r1, [r5, #0]
 80042e6:	061d      	lsls	r5, r3, #24
 80042e8:	d514      	bpl.n	8004314 <_printf_i+0x1ac>
 80042ea:	07df      	lsls	r7, r3, #31
 80042ec:	bf44      	itt	mi
 80042ee:	f043 0320 	orrmi.w	r3, r3, #32
 80042f2:	6023      	strmi	r3, [r4, #0]
 80042f4:	b91e      	cbnz	r6, 80042fe <_printf_i+0x196>
 80042f6:	6823      	ldr	r3, [r4, #0]
 80042f8:	f023 0320 	bic.w	r3, r3, #32
 80042fc:	6023      	str	r3, [r4, #0]
 80042fe:	2310      	movs	r3, #16
 8004300:	e7b0      	b.n	8004264 <_printf_i+0xfc>
 8004302:	6823      	ldr	r3, [r4, #0]
 8004304:	f043 0320 	orr.w	r3, r3, #32
 8004308:	6023      	str	r3, [r4, #0]
 800430a:	2378      	movs	r3, #120	; 0x78
 800430c:	4828      	ldr	r0, [pc, #160]	; (80043b0 <_printf_i+0x248>)
 800430e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004312:	e7e3      	b.n	80042dc <_printf_i+0x174>
 8004314:	0659      	lsls	r1, r3, #25
 8004316:	bf48      	it	mi
 8004318:	b2b6      	uxthmi	r6, r6
 800431a:	e7e6      	b.n	80042ea <_printf_i+0x182>
 800431c:	4615      	mov	r5, r2
 800431e:	e7bb      	b.n	8004298 <_printf_i+0x130>
 8004320:	682b      	ldr	r3, [r5, #0]
 8004322:	6826      	ldr	r6, [r4, #0]
 8004324:	6961      	ldr	r1, [r4, #20]
 8004326:	1d18      	adds	r0, r3, #4
 8004328:	6028      	str	r0, [r5, #0]
 800432a:	0635      	lsls	r5, r6, #24
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	d501      	bpl.n	8004334 <_printf_i+0x1cc>
 8004330:	6019      	str	r1, [r3, #0]
 8004332:	e002      	b.n	800433a <_printf_i+0x1d2>
 8004334:	0670      	lsls	r0, r6, #25
 8004336:	d5fb      	bpl.n	8004330 <_printf_i+0x1c8>
 8004338:	8019      	strh	r1, [r3, #0]
 800433a:	2300      	movs	r3, #0
 800433c:	6123      	str	r3, [r4, #16]
 800433e:	4615      	mov	r5, r2
 8004340:	e7ba      	b.n	80042b8 <_printf_i+0x150>
 8004342:	682b      	ldr	r3, [r5, #0]
 8004344:	1d1a      	adds	r2, r3, #4
 8004346:	602a      	str	r2, [r5, #0]
 8004348:	681d      	ldr	r5, [r3, #0]
 800434a:	6862      	ldr	r2, [r4, #4]
 800434c:	2100      	movs	r1, #0
 800434e:	4628      	mov	r0, r5
 8004350:	f7fb ff4e 	bl	80001f0 <memchr>
 8004354:	b108      	cbz	r0, 800435a <_printf_i+0x1f2>
 8004356:	1b40      	subs	r0, r0, r5
 8004358:	6060      	str	r0, [r4, #4]
 800435a:	6863      	ldr	r3, [r4, #4]
 800435c:	6123      	str	r3, [r4, #16]
 800435e:	2300      	movs	r3, #0
 8004360:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004364:	e7a8      	b.n	80042b8 <_printf_i+0x150>
 8004366:	6923      	ldr	r3, [r4, #16]
 8004368:	462a      	mov	r2, r5
 800436a:	4649      	mov	r1, r9
 800436c:	4640      	mov	r0, r8
 800436e:	47d0      	blx	sl
 8004370:	3001      	adds	r0, #1
 8004372:	d0ab      	beq.n	80042cc <_printf_i+0x164>
 8004374:	6823      	ldr	r3, [r4, #0]
 8004376:	079b      	lsls	r3, r3, #30
 8004378:	d413      	bmi.n	80043a2 <_printf_i+0x23a>
 800437a:	68e0      	ldr	r0, [r4, #12]
 800437c:	9b03      	ldr	r3, [sp, #12]
 800437e:	4298      	cmp	r0, r3
 8004380:	bfb8      	it	lt
 8004382:	4618      	movlt	r0, r3
 8004384:	e7a4      	b.n	80042d0 <_printf_i+0x168>
 8004386:	2301      	movs	r3, #1
 8004388:	4632      	mov	r2, r6
 800438a:	4649      	mov	r1, r9
 800438c:	4640      	mov	r0, r8
 800438e:	47d0      	blx	sl
 8004390:	3001      	adds	r0, #1
 8004392:	d09b      	beq.n	80042cc <_printf_i+0x164>
 8004394:	3501      	adds	r5, #1
 8004396:	68e3      	ldr	r3, [r4, #12]
 8004398:	9903      	ldr	r1, [sp, #12]
 800439a:	1a5b      	subs	r3, r3, r1
 800439c:	42ab      	cmp	r3, r5
 800439e:	dcf2      	bgt.n	8004386 <_printf_i+0x21e>
 80043a0:	e7eb      	b.n	800437a <_printf_i+0x212>
 80043a2:	2500      	movs	r5, #0
 80043a4:	f104 0619 	add.w	r6, r4, #25
 80043a8:	e7f5      	b.n	8004396 <_printf_i+0x22e>
 80043aa:	bf00      	nop
 80043ac:	08006556 	.word	0x08006556
 80043b0:	08006567 	.word	0x08006567

080043b4 <quorem>:
 80043b4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80043b8:	6903      	ldr	r3, [r0, #16]
 80043ba:	690c      	ldr	r4, [r1, #16]
 80043bc:	42a3      	cmp	r3, r4
 80043be:	4607      	mov	r7, r0
 80043c0:	f2c0 8081 	blt.w	80044c6 <quorem+0x112>
 80043c4:	3c01      	subs	r4, #1
 80043c6:	f101 0814 	add.w	r8, r1, #20
 80043ca:	f100 0514 	add.w	r5, r0, #20
 80043ce:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80043d2:	9301      	str	r3, [sp, #4]
 80043d4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80043d8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80043dc:	3301      	adds	r3, #1
 80043de:	429a      	cmp	r2, r3
 80043e0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80043e4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80043e8:	fbb2 f6f3 	udiv	r6, r2, r3
 80043ec:	d331      	bcc.n	8004452 <quorem+0x9e>
 80043ee:	f04f 0e00 	mov.w	lr, #0
 80043f2:	4640      	mov	r0, r8
 80043f4:	46ac      	mov	ip, r5
 80043f6:	46f2      	mov	sl, lr
 80043f8:	f850 2b04 	ldr.w	r2, [r0], #4
 80043fc:	b293      	uxth	r3, r2
 80043fe:	fb06 e303 	mla	r3, r6, r3, lr
 8004402:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8004406:	b29b      	uxth	r3, r3
 8004408:	ebaa 0303 	sub.w	r3, sl, r3
 800440c:	f8dc a000 	ldr.w	sl, [ip]
 8004410:	0c12      	lsrs	r2, r2, #16
 8004412:	fa13 f38a 	uxtah	r3, r3, sl
 8004416:	fb06 e202 	mla	r2, r6, r2, lr
 800441a:	9300      	str	r3, [sp, #0]
 800441c:	9b00      	ldr	r3, [sp, #0]
 800441e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8004422:	b292      	uxth	r2, r2
 8004424:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8004428:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800442c:	f8bd 3000 	ldrh.w	r3, [sp]
 8004430:	4581      	cmp	r9, r0
 8004432:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004436:	f84c 3b04 	str.w	r3, [ip], #4
 800443a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800443e:	d2db      	bcs.n	80043f8 <quorem+0x44>
 8004440:	f855 300b 	ldr.w	r3, [r5, fp]
 8004444:	b92b      	cbnz	r3, 8004452 <quorem+0x9e>
 8004446:	9b01      	ldr	r3, [sp, #4]
 8004448:	3b04      	subs	r3, #4
 800444a:	429d      	cmp	r5, r3
 800444c:	461a      	mov	r2, r3
 800444e:	d32e      	bcc.n	80044ae <quorem+0xfa>
 8004450:	613c      	str	r4, [r7, #16]
 8004452:	4638      	mov	r0, r7
 8004454:	f001 f8c6 	bl	80055e4 <__mcmp>
 8004458:	2800      	cmp	r0, #0
 800445a:	db24      	blt.n	80044a6 <quorem+0xf2>
 800445c:	3601      	adds	r6, #1
 800445e:	4628      	mov	r0, r5
 8004460:	f04f 0c00 	mov.w	ip, #0
 8004464:	f858 2b04 	ldr.w	r2, [r8], #4
 8004468:	f8d0 e000 	ldr.w	lr, [r0]
 800446c:	b293      	uxth	r3, r2
 800446e:	ebac 0303 	sub.w	r3, ip, r3
 8004472:	0c12      	lsrs	r2, r2, #16
 8004474:	fa13 f38e 	uxtah	r3, r3, lr
 8004478:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800447c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004480:	b29b      	uxth	r3, r3
 8004482:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004486:	45c1      	cmp	r9, r8
 8004488:	f840 3b04 	str.w	r3, [r0], #4
 800448c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8004490:	d2e8      	bcs.n	8004464 <quorem+0xb0>
 8004492:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004496:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800449a:	b922      	cbnz	r2, 80044a6 <quorem+0xf2>
 800449c:	3b04      	subs	r3, #4
 800449e:	429d      	cmp	r5, r3
 80044a0:	461a      	mov	r2, r3
 80044a2:	d30a      	bcc.n	80044ba <quorem+0x106>
 80044a4:	613c      	str	r4, [r7, #16]
 80044a6:	4630      	mov	r0, r6
 80044a8:	b003      	add	sp, #12
 80044aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80044ae:	6812      	ldr	r2, [r2, #0]
 80044b0:	3b04      	subs	r3, #4
 80044b2:	2a00      	cmp	r2, #0
 80044b4:	d1cc      	bne.n	8004450 <quorem+0x9c>
 80044b6:	3c01      	subs	r4, #1
 80044b8:	e7c7      	b.n	800444a <quorem+0x96>
 80044ba:	6812      	ldr	r2, [r2, #0]
 80044bc:	3b04      	subs	r3, #4
 80044be:	2a00      	cmp	r2, #0
 80044c0:	d1f0      	bne.n	80044a4 <quorem+0xf0>
 80044c2:	3c01      	subs	r4, #1
 80044c4:	e7eb      	b.n	800449e <quorem+0xea>
 80044c6:	2000      	movs	r0, #0
 80044c8:	e7ee      	b.n	80044a8 <quorem+0xf4>
 80044ca:	0000      	movs	r0, r0
 80044cc:	0000      	movs	r0, r0
	...

080044d0 <_dtoa_r>:
 80044d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80044d4:	ed2d 8b04 	vpush	{d8-d9}
 80044d8:	ec57 6b10 	vmov	r6, r7, d0
 80044dc:	b093      	sub	sp, #76	; 0x4c
 80044de:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80044e0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80044e4:	9106      	str	r1, [sp, #24]
 80044e6:	ee10 aa10 	vmov	sl, s0
 80044ea:	4604      	mov	r4, r0
 80044ec:	9209      	str	r2, [sp, #36]	; 0x24
 80044ee:	930c      	str	r3, [sp, #48]	; 0x30
 80044f0:	46bb      	mov	fp, r7
 80044f2:	b975      	cbnz	r5, 8004512 <_dtoa_r+0x42>
 80044f4:	2010      	movs	r0, #16
 80044f6:	f000 fddd 	bl	80050b4 <malloc>
 80044fa:	4602      	mov	r2, r0
 80044fc:	6260      	str	r0, [r4, #36]	; 0x24
 80044fe:	b920      	cbnz	r0, 800450a <_dtoa_r+0x3a>
 8004500:	4ba7      	ldr	r3, [pc, #668]	; (80047a0 <_dtoa_r+0x2d0>)
 8004502:	21ea      	movs	r1, #234	; 0xea
 8004504:	48a7      	ldr	r0, [pc, #668]	; (80047a4 <_dtoa_r+0x2d4>)
 8004506:	f001 fa75 	bl	80059f4 <__assert_func>
 800450a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800450e:	6005      	str	r5, [r0, #0]
 8004510:	60c5      	str	r5, [r0, #12]
 8004512:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004514:	6819      	ldr	r1, [r3, #0]
 8004516:	b151      	cbz	r1, 800452e <_dtoa_r+0x5e>
 8004518:	685a      	ldr	r2, [r3, #4]
 800451a:	604a      	str	r2, [r1, #4]
 800451c:	2301      	movs	r3, #1
 800451e:	4093      	lsls	r3, r2
 8004520:	608b      	str	r3, [r1, #8]
 8004522:	4620      	mov	r0, r4
 8004524:	f000 fe1c 	bl	8005160 <_Bfree>
 8004528:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800452a:	2200      	movs	r2, #0
 800452c:	601a      	str	r2, [r3, #0]
 800452e:	1e3b      	subs	r3, r7, #0
 8004530:	bfaa      	itet	ge
 8004532:	2300      	movge	r3, #0
 8004534:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8004538:	f8c8 3000 	strge.w	r3, [r8]
 800453c:	4b9a      	ldr	r3, [pc, #616]	; (80047a8 <_dtoa_r+0x2d8>)
 800453e:	bfbc      	itt	lt
 8004540:	2201      	movlt	r2, #1
 8004542:	f8c8 2000 	strlt.w	r2, [r8]
 8004546:	ea33 030b 	bics.w	r3, r3, fp
 800454a:	d11b      	bne.n	8004584 <_dtoa_r+0xb4>
 800454c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800454e:	f242 730f 	movw	r3, #9999	; 0x270f
 8004552:	6013      	str	r3, [r2, #0]
 8004554:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8004558:	4333      	orrs	r3, r6
 800455a:	f000 8592 	beq.w	8005082 <_dtoa_r+0xbb2>
 800455e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004560:	b963      	cbnz	r3, 800457c <_dtoa_r+0xac>
 8004562:	4b92      	ldr	r3, [pc, #584]	; (80047ac <_dtoa_r+0x2dc>)
 8004564:	e022      	b.n	80045ac <_dtoa_r+0xdc>
 8004566:	4b92      	ldr	r3, [pc, #584]	; (80047b0 <_dtoa_r+0x2e0>)
 8004568:	9301      	str	r3, [sp, #4]
 800456a:	3308      	adds	r3, #8
 800456c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800456e:	6013      	str	r3, [r2, #0]
 8004570:	9801      	ldr	r0, [sp, #4]
 8004572:	b013      	add	sp, #76	; 0x4c
 8004574:	ecbd 8b04 	vpop	{d8-d9}
 8004578:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800457c:	4b8b      	ldr	r3, [pc, #556]	; (80047ac <_dtoa_r+0x2dc>)
 800457e:	9301      	str	r3, [sp, #4]
 8004580:	3303      	adds	r3, #3
 8004582:	e7f3      	b.n	800456c <_dtoa_r+0x9c>
 8004584:	2200      	movs	r2, #0
 8004586:	2300      	movs	r3, #0
 8004588:	4650      	mov	r0, sl
 800458a:	4659      	mov	r1, fp
 800458c:	f7fc faa4 	bl	8000ad8 <__aeabi_dcmpeq>
 8004590:	ec4b ab19 	vmov	d9, sl, fp
 8004594:	4680      	mov	r8, r0
 8004596:	b158      	cbz	r0, 80045b0 <_dtoa_r+0xe0>
 8004598:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800459a:	2301      	movs	r3, #1
 800459c:	6013      	str	r3, [r2, #0]
 800459e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	f000 856b 	beq.w	800507c <_dtoa_r+0xbac>
 80045a6:	4883      	ldr	r0, [pc, #524]	; (80047b4 <_dtoa_r+0x2e4>)
 80045a8:	6018      	str	r0, [r3, #0]
 80045aa:	1e43      	subs	r3, r0, #1
 80045ac:	9301      	str	r3, [sp, #4]
 80045ae:	e7df      	b.n	8004570 <_dtoa_r+0xa0>
 80045b0:	ec4b ab10 	vmov	d0, sl, fp
 80045b4:	aa10      	add	r2, sp, #64	; 0x40
 80045b6:	a911      	add	r1, sp, #68	; 0x44
 80045b8:	4620      	mov	r0, r4
 80045ba:	f001 f8b9 	bl	8005730 <__d2b>
 80045be:	f3cb 550a 	ubfx	r5, fp, #20, #11
 80045c2:	ee08 0a10 	vmov	s16, r0
 80045c6:	2d00      	cmp	r5, #0
 80045c8:	f000 8084 	beq.w	80046d4 <_dtoa_r+0x204>
 80045cc:	ee19 3a90 	vmov	r3, s19
 80045d0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80045d4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80045d8:	4656      	mov	r6, sl
 80045da:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80045de:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80045e2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 80045e6:	4b74      	ldr	r3, [pc, #464]	; (80047b8 <_dtoa_r+0x2e8>)
 80045e8:	2200      	movs	r2, #0
 80045ea:	4630      	mov	r0, r6
 80045ec:	4639      	mov	r1, r7
 80045ee:	f7fb fe53 	bl	8000298 <__aeabi_dsub>
 80045f2:	a365      	add	r3, pc, #404	; (adr r3, 8004788 <_dtoa_r+0x2b8>)
 80045f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045f8:	f7fc f806 	bl	8000608 <__aeabi_dmul>
 80045fc:	a364      	add	r3, pc, #400	; (adr r3, 8004790 <_dtoa_r+0x2c0>)
 80045fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004602:	f7fb fe4b 	bl	800029c <__adddf3>
 8004606:	4606      	mov	r6, r0
 8004608:	4628      	mov	r0, r5
 800460a:	460f      	mov	r7, r1
 800460c:	f7fb ff92 	bl	8000534 <__aeabi_i2d>
 8004610:	a361      	add	r3, pc, #388	; (adr r3, 8004798 <_dtoa_r+0x2c8>)
 8004612:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004616:	f7fb fff7 	bl	8000608 <__aeabi_dmul>
 800461a:	4602      	mov	r2, r0
 800461c:	460b      	mov	r3, r1
 800461e:	4630      	mov	r0, r6
 8004620:	4639      	mov	r1, r7
 8004622:	f7fb fe3b 	bl	800029c <__adddf3>
 8004626:	4606      	mov	r6, r0
 8004628:	460f      	mov	r7, r1
 800462a:	f7fc fa9d 	bl	8000b68 <__aeabi_d2iz>
 800462e:	2200      	movs	r2, #0
 8004630:	9000      	str	r0, [sp, #0]
 8004632:	2300      	movs	r3, #0
 8004634:	4630      	mov	r0, r6
 8004636:	4639      	mov	r1, r7
 8004638:	f7fc fa58 	bl	8000aec <__aeabi_dcmplt>
 800463c:	b150      	cbz	r0, 8004654 <_dtoa_r+0x184>
 800463e:	9800      	ldr	r0, [sp, #0]
 8004640:	f7fb ff78 	bl	8000534 <__aeabi_i2d>
 8004644:	4632      	mov	r2, r6
 8004646:	463b      	mov	r3, r7
 8004648:	f7fc fa46 	bl	8000ad8 <__aeabi_dcmpeq>
 800464c:	b910      	cbnz	r0, 8004654 <_dtoa_r+0x184>
 800464e:	9b00      	ldr	r3, [sp, #0]
 8004650:	3b01      	subs	r3, #1
 8004652:	9300      	str	r3, [sp, #0]
 8004654:	9b00      	ldr	r3, [sp, #0]
 8004656:	2b16      	cmp	r3, #22
 8004658:	d85a      	bhi.n	8004710 <_dtoa_r+0x240>
 800465a:	9a00      	ldr	r2, [sp, #0]
 800465c:	4b57      	ldr	r3, [pc, #348]	; (80047bc <_dtoa_r+0x2ec>)
 800465e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004662:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004666:	ec51 0b19 	vmov	r0, r1, d9
 800466a:	f7fc fa3f 	bl	8000aec <__aeabi_dcmplt>
 800466e:	2800      	cmp	r0, #0
 8004670:	d050      	beq.n	8004714 <_dtoa_r+0x244>
 8004672:	9b00      	ldr	r3, [sp, #0]
 8004674:	3b01      	subs	r3, #1
 8004676:	9300      	str	r3, [sp, #0]
 8004678:	2300      	movs	r3, #0
 800467a:	930b      	str	r3, [sp, #44]	; 0x2c
 800467c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800467e:	1b5d      	subs	r5, r3, r5
 8004680:	1e6b      	subs	r3, r5, #1
 8004682:	9305      	str	r3, [sp, #20]
 8004684:	bf45      	ittet	mi
 8004686:	f1c5 0301 	rsbmi	r3, r5, #1
 800468a:	9304      	strmi	r3, [sp, #16]
 800468c:	2300      	movpl	r3, #0
 800468e:	2300      	movmi	r3, #0
 8004690:	bf4c      	ite	mi
 8004692:	9305      	strmi	r3, [sp, #20]
 8004694:	9304      	strpl	r3, [sp, #16]
 8004696:	9b00      	ldr	r3, [sp, #0]
 8004698:	2b00      	cmp	r3, #0
 800469a:	db3d      	blt.n	8004718 <_dtoa_r+0x248>
 800469c:	9b05      	ldr	r3, [sp, #20]
 800469e:	9a00      	ldr	r2, [sp, #0]
 80046a0:	920a      	str	r2, [sp, #40]	; 0x28
 80046a2:	4413      	add	r3, r2
 80046a4:	9305      	str	r3, [sp, #20]
 80046a6:	2300      	movs	r3, #0
 80046a8:	9307      	str	r3, [sp, #28]
 80046aa:	9b06      	ldr	r3, [sp, #24]
 80046ac:	2b09      	cmp	r3, #9
 80046ae:	f200 8089 	bhi.w	80047c4 <_dtoa_r+0x2f4>
 80046b2:	2b05      	cmp	r3, #5
 80046b4:	bfc4      	itt	gt
 80046b6:	3b04      	subgt	r3, #4
 80046b8:	9306      	strgt	r3, [sp, #24]
 80046ba:	9b06      	ldr	r3, [sp, #24]
 80046bc:	f1a3 0302 	sub.w	r3, r3, #2
 80046c0:	bfcc      	ite	gt
 80046c2:	2500      	movgt	r5, #0
 80046c4:	2501      	movle	r5, #1
 80046c6:	2b03      	cmp	r3, #3
 80046c8:	f200 8087 	bhi.w	80047da <_dtoa_r+0x30a>
 80046cc:	e8df f003 	tbb	[pc, r3]
 80046d0:	59383a2d 	.word	0x59383a2d
 80046d4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80046d8:	441d      	add	r5, r3
 80046da:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80046de:	2b20      	cmp	r3, #32
 80046e0:	bfc1      	itttt	gt
 80046e2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80046e6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80046ea:	fa0b f303 	lslgt.w	r3, fp, r3
 80046ee:	fa26 f000 	lsrgt.w	r0, r6, r0
 80046f2:	bfda      	itte	le
 80046f4:	f1c3 0320 	rsble	r3, r3, #32
 80046f8:	fa06 f003 	lslle.w	r0, r6, r3
 80046fc:	4318      	orrgt	r0, r3
 80046fe:	f7fb ff09 	bl	8000514 <__aeabi_ui2d>
 8004702:	2301      	movs	r3, #1
 8004704:	4606      	mov	r6, r0
 8004706:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800470a:	3d01      	subs	r5, #1
 800470c:	930e      	str	r3, [sp, #56]	; 0x38
 800470e:	e76a      	b.n	80045e6 <_dtoa_r+0x116>
 8004710:	2301      	movs	r3, #1
 8004712:	e7b2      	b.n	800467a <_dtoa_r+0x1aa>
 8004714:	900b      	str	r0, [sp, #44]	; 0x2c
 8004716:	e7b1      	b.n	800467c <_dtoa_r+0x1ac>
 8004718:	9b04      	ldr	r3, [sp, #16]
 800471a:	9a00      	ldr	r2, [sp, #0]
 800471c:	1a9b      	subs	r3, r3, r2
 800471e:	9304      	str	r3, [sp, #16]
 8004720:	4253      	negs	r3, r2
 8004722:	9307      	str	r3, [sp, #28]
 8004724:	2300      	movs	r3, #0
 8004726:	930a      	str	r3, [sp, #40]	; 0x28
 8004728:	e7bf      	b.n	80046aa <_dtoa_r+0x1da>
 800472a:	2300      	movs	r3, #0
 800472c:	9308      	str	r3, [sp, #32]
 800472e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004730:	2b00      	cmp	r3, #0
 8004732:	dc55      	bgt.n	80047e0 <_dtoa_r+0x310>
 8004734:	2301      	movs	r3, #1
 8004736:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800473a:	461a      	mov	r2, r3
 800473c:	9209      	str	r2, [sp, #36]	; 0x24
 800473e:	e00c      	b.n	800475a <_dtoa_r+0x28a>
 8004740:	2301      	movs	r3, #1
 8004742:	e7f3      	b.n	800472c <_dtoa_r+0x25c>
 8004744:	2300      	movs	r3, #0
 8004746:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004748:	9308      	str	r3, [sp, #32]
 800474a:	9b00      	ldr	r3, [sp, #0]
 800474c:	4413      	add	r3, r2
 800474e:	9302      	str	r3, [sp, #8]
 8004750:	3301      	adds	r3, #1
 8004752:	2b01      	cmp	r3, #1
 8004754:	9303      	str	r3, [sp, #12]
 8004756:	bfb8      	it	lt
 8004758:	2301      	movlt	r3, #1
 800475a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800475c:	2200      	movs	r2, #0
 800475e:	6042      	str	r2, [r0, #4]
 8004760:	2204      	movs	r2, #4
 8004762:	f102 0614 	add.w	r6, r2, #20
 8004766:	429e      	cmp	r6, r3
 8004768:	6841      	ldr	r1, [r0, #4]
 800476a:	d93d      	bls.n	80047e8 <_dtoa_r+0x318>
 800476c:	4620      	mov	r0, r4
 800476e:	f000 fcb7 	bl	80050e0 <_Balloc>
 8004772:	9001      	str	r0, [sp, #4]
 8004774:	2800      	cmp	r0, #0
 8004776:	d13b      	bne.n	80047f0 <_dtoa_r+0x320>
 8004778:	4b11      	ldr	r3, [pc, #68]	; (80047c0 <_dtoa_r+0x2f0>)
 800477a:	4602      	mov	r2, r0
 800477c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8004780:	e6c0      	b.n	8004504 <_dtoa_r+0x34>
 8004782:	2301      	movs	r3, #1
 8004784:	e7df      	b.n	8004746 <_dtoa_r+0x276>
 8004786:	bf00      	nop
 8004788:	636f4361 	.word	0x636f4361
 800478c:	3fd287a7 	.word	0x3fd287a7
 8004790:	8b60c8b3 	.word	0x8b60c8b3
 8004794:	3fc68a28 	.word	0x3fc68a28
 8004798:	509f79fb 	.word	0x509f79fb
 800479c:	3fd34413 	.word	0x3fd34413
 80047a0:	08006585 	.word	0x08006585
 80047a4:	0800659c 	.word	0x0800659c
 80047a8:	7ff00000 	.word	0x7ff00000
 80047ac:	08006581 	.word	0x08006581
 80047b0:	08006578 	.word	0x08006578
 80047b4:	08006555 	.word	0x08006555
 80047b8:	3ff80000 	.word	0x3ff80000
 80047bc:	08006690 	.word	0x08006690
 80047c0:	080065f7 	.word	0x080065f7
 80047c4:	2501      	movs	r5, #1
 80047c6:	2300      	movs	r3, #0
 80047c8:	9306      	str	r3, [sp, #24]
 80047ca:	9508      	str	r5, [sp, #32]
 80047cc:	f04f 33ff 	mov.w	r3, #4294967295
 80047d0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80047d4:	2200      	movs	r2, #0
 80047d6:	2312      	movs	r3, #18
 80047d8:	e7b0      	b.n	800473c <_dtoa_r+0x26c>
 80047da:	2301      	movs	r3, #1
 80047dc:	9308      	str	r3, [sp, #32]
 80047de:	e7f5      	b.n	80047cc <_dtoa_r+0x2fc>
 80047e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80047e2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80047e6:	e7b8      	b.n	800475a <_dtoa_r+0x28a>
 80047e8:	3101      	adds	r1, #1
 80047ea:	6041      	str	r1, [r0, #4]
 80047ec:	0052      	lsls	r2, r2, #1
 80047ee:	e7b8      	b.n	8004762 <_dtoa_r+0x292>
 80047f0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80047f2:	9a01      	ldr	r2, [sp, #4]
 80047f4:	601a      	str	r2, [r3, #0]
 80047f6:	9b03      	ldr	r3, [sp, #12]
 80047f8:	2b0e      	cmp	r3, #14
 80047fa:	f200 809d 	bhi.w	8004938 <_dtoa_r+0x468>
 80047fe:	2d00      	cmp	r5, #0
 8004800:	f000 809a 	beq.w	8004938 <_dtoa_r+0x468>
 8004804:	9b00      	ldr	r3, [sp, #0]
 8004806:	2b00      	cmp	r3, #0
 8004808:	dd32      	ble.n	8004870 <_dtoa_r+0x3a0>
 800480a:	4ab7      	ldr	r2, [pc, #732]	; (8004ae8 <_dtoa_r+0x618>)
 800480c:	f003 030f 	and.w	r3, r3, #15
 8004810:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8004814:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004818:	9b00      	ldr	r3, [sp, #0]
 800481a:	05d8      	lsls	r0, r3, #23
 800481c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8004820:	d516      	bpl.n	8004850 <_dtoa_r+0x380>
 8004822:	4bb2      	ldr	r3, [pc, #712]	; (8004aec <_dtoa_r+0x61c>)
 8004824:	ec51 0b19 	vmov	r0, r1, d9
 8004828:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800482c:	f7fc f816 	bl	800085c <__aeabi_ddiv>
 8004830:	f007 070f 	and.w	r7, r7, #15
 8004834:	4682      	mov	sl, r0
 8004836:	468b      	mov	fp, r1
 8004838:	2503      	movs	r5, #3
 800483a:	4eac      	ldr	r6, [pc, #688]	; (8004aec <_dtoa_r+0x61c>)
 800483c:	b957      	cbnz	r7, 8004854 <_dtoa_r+0x384>
 800483e:	4642      	mov	r2, r8
 8004840:	464b      	mov	r3, r9
 8004842:	4650      	mov	r0, sl
 8004844:	4659      	mov	r1, fp
 8004846:	f7fc f809 	bl	800085c <__aeabi_ddiv>
 800484a:	4682      	mov	sl, r0
 800484c:	468b      	mov	fp, r1
 800484e:	e028      	b.n	80048a2 <_dtoa_r+0x3d2>
 8004850:	2502      	movs	r5, #2
 8004852:	e7f2      	b.n	800483a <_dtoa_r+0x36a>
 8004854:	07f9      	lsls	r1, r7, #31
 8004856:	d508      	bpl.n	800486a <_dtoa_r+0x39a>
 8004858:	4640      	mov	r0, r8
 800485a:	4649      	mov	r1, r9
 800485c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8004860:	f7fb fed2 	bl	8000608 <__aeabi_dmul>
 8004864:	3501      	adds	r5, #1
 8004866:	4680      	mov	r8, r0
 8004868:	4689      	mov	r9, r1
 800486a:	107f      	asrs	r7, r7, #1
 800486c:	3608      	adds	r6, #8
 800486e:	e7e5      	b.n	800483c <_dtoa_r+0x36c>
 8004870:	f000 809b 	beq.w	80049aa <_dtoa_r+0x4da>
 8004874:	9b00      	ldr	r3, [sp, #0]
 8004876:	4f9d      	ldr	r7, [pc, #628]	; (8004aec <_dtoa_r+0x61c>)
 8004878:	425e      	negs	r6, r3
 800487a:	4b9b      	ldr	r3, [pc, #620]	; (8004ae8 <_dtoa_r+0x618>)
 800487c:	f006 020f 	and.w	r2, r6, #15
 8004880:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004884:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004888:	ec51 0b19 	vmov	r0, r1, d9
 800488c:	f7fb febc 	bl	8000608 <__aeabi_dmul>
 8004890:	1136      	asrs	r6, r6, #4
 8004892:	4682      	mov	sl, r0
 8004894:	468b      	mov	fp, r1
 8004896:	2300      	movs	r3, #0
 8004898:	2502      	movs	r5, #2
 800489a:	2e00      	cmp	r6, #0
 800489c:	d17a      	bne.n	8004994 <_dtoa_r+0x4c4>
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d1d3      	bne.n	800484a <_dtoa_r+0x37a>
 80048a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	f000 8082 	beq.w	80049ae <_dtoa_r+0x4de>
 80048aa:	4b91      	ldr	r3, [pc, #580]	; (8004af0 <_dtoa_r+0x620>)
 80048ac:	2200      	movs	r2, #0
 80048ae:	4650      	mov	r0, sl
 80048b0:	4659      	mov	r1, fp
 80048b2:	f7fc f91b 	bl	8000aec <__aeabi_dcmplt>
 80048b6:	2800      	cmp	r0, #0
 80048b8:	d079      	beq.n	80049ae <_dtoa_r+0x4de>
 80048ba:	9b03      	ldr	r3, [sp, #12]
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d076      	beq.n	80049ae <_dtoa_r+0x4de>
 80048c0:	9b02      	ldr	r3, [sp, #8]
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	dd36      	ble.n	8004934 <_dtoa_r+0x464>
 80048c6:	9b00      	ldr	r3, [sp, #0]
 80048c8:	4650      	mov	r0, sl
 80048ca:	4659      	mov	r1, fp
 80048cc:	1e5f      	subs	r7, r3, #1
 80048ce:	2200      	movs	r2, #0
 80048d0:	4b88      	ldr	r3, [pc, #544]	; (8004af4 <_dtoa_r+0x624>)
 80048d2:	f7fb fe99 	bl	8000608 <__aeabi_dmul>
 80048d6:	9e02      	ldr	r6, [sp, #8]
 80048d8:	4682      	mov	sl, r0
 80048da:	468b      	mov	fp, r1
 80048dc:	3501      	adds	r5, #1
 80048de:	4628      	mov	r0, r5
 80048e0:	f7fb fe28 	bl	8000534 <__aeabi_i2d>
 80048e4:	4652      	mov	r2, sl
 80048e6:	465b      	mov	r3, fp
 80048e8:	f7fb fe8e 	bl	8000608 <__aeabi_dmul>
 80048ec:	4b82      	ldr	r3, [pc, #520]	; (8004af8 <_dtoa_r+0x628>)
 80048ee:	2200      	movs	r2, #0
 80048f0:	f7fb fcd4 	bl	800029c <__adddf3>
 80048f4:	46d0      	mov	r8, sl
 80048f6:	46d9      	mov	r9, fp
 80048f8:	4682      	mov	sl, r0
 80048fa:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 80048fe:	2e00      	cmp	r6, #0
 8004900:	d158      	bne.n	80049b4 <_dtoa_r+0x4e4>
 8004902:	4b7e      	ldr	r3, [pc, #504]	; (8004afc <_dtoa_r+0x62c>)
 8004904:	2200      	movs	r2, #0
 8004906:	4640      	mov	r0, r8
 8004908:	4649      	mov	r1, r9
 800490a:	f7fb fcc5 	bl	8000298 <__aeabi_dsub>
 800490e:	4652      	mov	r2, sl
 8004910:	465b      	mov	r3, fp
 8004912:	4680      	mov	r8, r0
 8004914:	4689      	mov	r9, r1
 8004916:	f7fc f907 	bl	8000b28 <__aeabi_dcmpgt>
 800491a:	2800      	cmp	r0, #0
 800491c:	f040 8295 	bne.w	8004e4a <_dtoa_r+0x97a>
 8004920:	4652      	mov	r2, sl
 8004922:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8004926:	4640      	mov	r0, r8
 8004928:	4649      	mov	r1, r9
 800492a:	f7fc f8df 	bl	8000aec <__aeabi_dcmplt>
 800492e:	2800      	cmp	r0, #0
 8004930:	f040 8289 	bne.w	8004e46 <_dtoa_r+0x976>
 8004934:	ec5b ab19 	vmov	sl, fp, d9
 8004938:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800493a:	2b00      	cmp	r3, #0
 800493c:	f2c0 8148 	blt.w	8004bd0 <_dtoa_r+0x700>
 8004940:	9a00      	ldr	r2, [sp, #0]
 8004942:	2a0e      	cmp	r2, #14
 8004944:	f300 8144 	bgt.w	8004bd0 <_dtoa_r+0x700>
 8004948:	4b67      	ldr	r3, [pc, #412]	; (8004ae8 <_dtoa_r+0x618>)
 800494a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800494e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004952:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004954:	2b00      	cmp	r3, #0
 8004956:	f280 80d5 	bge.w	8004b04 <_dtoa_r+0x634>
 800495a:	9b03      	ldr	r3, [sp, #12]
 800495c:	2b00      	cmp	r3, #0
 800495e:	f300 80d1 	bgt.w	8004b04 <_dtoa_r+0x634>
 8004962:	f040 826f 	bne.w	8004e44 <_dtoa_r+0x974>
 8004966:	4b65      	ldr	r3, [pc, #404]	; (8004afc <_dtoa_r+0x62c>)
 8004968:	2200      	movs	r2, #0
 800496a:	4640      	mov	r0, r8
 800496c:	4649      	mov	r1, r9
 800496e:	f7fb fe4b 	bl	8000608 <__aeabi_dmul>
 8004972:	4652      	mov	r2, sl
 8004974:	465b      	mov	r3, fp
 8004976:	f7fc f8cd 	bl	8000b14 <__aeabi_dcmpge>
 800497a:	9e03      	ldr	r6, [sp, #12]
 800497c:	4637      	mov	r7, r6
 800497e:	2800      	cmp	r0, #0
 8004980:	f040 8245 	bne.w	8004e0e <_dtoa_r+0x93e>
 8004984:	9d01      	ldr	r5, [sp, #4]
 8004986:	2331      	movs	r3, #49	; 0x31
 8004988:	f805 3b01 	strb.w	r3, [r5], #1
 800498c:	9b00      	ldr	r3, [sp, #0]
 800498e:	3301      	adds	r3, #1
 8004990:	9300      	str	r3, [sp, #0]
 8004992:	e240      	b.n	8004e16 <_dtoa_r+0x946>
 8004994:	07f2      	lsls	r2, r6, #31
 8004996:	d505      	bpl.n	80049a4 <_dtoa_r+0x4d4>
 8004998:	e9d7 2300 	ldrd	r2, r3, [r7]
 800499c:	f7fb fe34 	bl	8000608 <__aeabi_dmul>
 80049a0:	3501      	adds	r5, #1
 80049a2:	2301      	movs	r3, #1
 80049a4:	1076      	asrs	r6, r6, #1
 80049a6:	3708      	adds	r7, #8
 80049a8:	e777      	b.n	800489a <_dtoa_r+0x3ca>
 80049aa:	2502      	movs	r5, #2
 80049ac:	e779      	b.n	80048a2 <_dtoa_r+0x3d2>
 80049ae:	9f00      	ldr	r7, [sp, #0]
 80049b0:	9e03      	ldr	r6, [sp, #12]
 80049b2:	e794      	b.n	80048de <_dtoa_r+0x40e>
 80049b4:	9901      	ldr	r1, [sp, #4]
 80049b6:	4b4c      	ldr	r3, [pc, #304]	; (8004ae8 <_dtoa_r+0x618>)
 80049b8:	4431      	add	r1, r6
 80049ba:	910d      	str	r1, [sp, #52]	; 0x34
 80049bc:	9908      	ldr	r1, [sp, #32]
 80049be:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80049c2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80049c6:	2900      	cmp	r1, #0
 80049c8:	d043      	beq.n	8004a52 <_dtoa_r+0x582>
 80049ca:	494d      	ldr	r1, [pc, #308]	; (8004b00 <_dtoa_r+0x630>)
 80049cc:	2000      	movs	r0, #0
 80049ce:	f7fb ff45 	bl	800085c <__aeabi_ddiv>
 80049d2:	4652      	mov	r2, sl
 80049d4:	465b      	mov	r3, fp
 80049d6:	f7fb fc5f 	bl	8000298 <__aeabi_dsub>
 80049da:	9d01      	ldr	r5, [sp, #4]
 80049dc:	4682      	mov	sl, r0
 80049de:	468b      	mov	fp, r1
 80049e0:	4649      	mov	r1, r9
 80049e2:	4640      	mov	r0, r8
 80049e4:	f7fc f8c0 	bl	8000b68 <__aeabi_d2iz>
 80049e8:	4606      	mov	r6, r0
 80049ea:	f7fb fda3 	bl	8000534 <__aeabi_i2d>
 80049ee:	4602      	mov	r2, r0
 80049f0:	460b      	mov	r3, r1
 80049f2:	4640      	mov	r0, r8
 80049f4:	4649      	mov	r1, r9
 80049f6:	f7fb fc4f 	bl	8000298 <__aeabi_dsub>
 80049fa:	3630      	adds	r6, #48	; 0x30
 80049fc:	f805 6b01 	strb.w	r6, [r5], #1
 8004a00:	4652      	mov	r2, sl
 8004a02:	465b      	mov	r3, fp
 8004a04:	4680      	mov	r8, r0
 8004a06:	4689      	mov	r9, r1
 8004a08:	f7fc f870 	bl	8000aec <__aeabi_dcmplt>
 8004a0c:	2800      	cmp	r0, #0
 8004a0e:	d163      	bne.n	8004ad8 <_dtoa_r+0x608>
 8004a10:	4642      	mov	r2, r8
 8004a12:	464b      	mov	r3, r9
 8004a14:	4936      	ldr	r1, [pc, #216]	; (8004af0 <_dtoa_r+0x620>)
 8004a16:	2000      	movs	r0, #0
 8004a18:	f7fb fc3e 	bl	8000298 <__aeabi_dsub>
 8004a1c:	4652      	mov	r2, sl
 8004a1e:	465b      	mov	r3, fp
 8004a20:	f7fc f864 	bl	8000aec <__aeabi_dcmplt>
 8004a24:	2800      	cmp	r0, #0
 8004a26:	f040 80b5 	bne.w	8004b94 <_dtoa_r+0x6c4>
 8004a2a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004a2c:	429d      	cmp	r5, r3
 8004a2e:	d081      	beq.n	8004934 <_dtoa_r+0x464>
 8004a30:	4b30      	ldr	r3, [pc, #192]	; (8004af4 <_dtoa_r+0x624>)
 8004a32:	2200      	movs	r2, #0
 8004a34:	4650      	mov	r0, sl
 8004a36:	4659      	mov	r1, fp
 8004a38:	f7fb fde6 	bl	8000608 <__aeabi_dmul>
 8004a3c:	4b2d      	ldr	r3, [pc, #180]	; (8004af4 <_dtoa_r+0x624>)
 8004a3e:	4682      	mov	sl, r0
 8004a40:	468b      	mov	fp, r1
 8004a42:	4640      	mov	r0, r8
 8004a44:	4649      	mov	r1, r9
 8004a46:	2200      	movs	r2, #0
 8004a48:	f7fb fdde 	bl	8000608 <__aeabi_dmul>
 8004a4c:	4680      	mov	r8, r0
 8004a4e:	4689      	mov	r9, r1
 8004a50:	e7c6      	b.n	80049e0 <_dtoa_r+0x510>
 8004a52:	4650      	mov	r0, sl
 8004a54:	4659      	mov	r1, fp
 8004a56:	f7fb fdd7 	bl	8000608 <__aeabi_dmul>
 8004a5a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004a5c:	9d01      	ldr	r5, [sp, #4]
 8004a5e:	930f      	str	r3, [sp, #60]	; 0x3c
 8004a60:	4682      	mov	sl, r0
 8004a62:	468b      	mov	fp, r1
 8004a64:	4649      	mov	r1, r9
 8004a66:	4640      	mov	r0, r8
 8004a68:	f7fc f87e 	bl	8000b68 <__aeabi_d2iz>
 8004a6c:	4606      	mov	r6, r0
 8004a6e:	f7fb fd61 	bl	8000534 <__aeabi_i2d>
 8004a72:	3630      	adds	r6, #48	; 0x30
 8004a74:	4602      	mov	r2, r0
 8004a76:	460b      	mov	r3, r1
 8004a78:	4640      	mov	r0, r8
 8004a7a:	4649      	mov	r1, r9
 8004a7c:	f7fb fc0c 	bl	8000298 <__aeabi_dsub>
 8004a80:	f805 6b01 	strb.w	r6, [r5], #1
 8004a84:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004a86:	429d      	cmp	r5, r3
 8004a88:	4680      	mov	r8, r0
 8004a8a:	4689      	mov	r9, r1
 8004a8c:	f04f 0200 	mov.w	r2, #0
 8004a90:	d124      	bne.n	8004adc <_dtoa_r+0x60c>
 8004a92:	4b1b      	ldr	r3, [pc, #108]	; (8004b00 <_dtoa_r+0x630>)
 8004a94:	4650      	mov	r0, sl
 8004a96:	4659      	mov	r1, fp
 8004a98:	f7fb fc00 	bl	800029c <__adddf3>
 8004a9c:	4602      	mov	r2, r0
 8004a9e:	460b      	mov	r3, r1
 8004aa0:	4640      	mov	r0, r8
 8004aa2:	4649      	mov	r1, r9
 8004aa4:	f7fc f840 	bl	8000b28 <__aeabi_dcmpgt>
 8004aa8:	2800      	cmp	r0, #0
 8004aaa:	d173      	bne.n	8004b94 <_dtoa_r+0x6c4>
 8004aac:	4652      	mov	r2, sl
 8004aae:	465b      	mov	r3, fp
 8004ab0:	4913      	ldr	r1, [pc, #76]	; (8004b00 <_dtoa_r+0x630>)
 8004ab2:	2000      	movs	r0, #0
 8004ab4:	f7fb fbf0 	bl	8000298 <__aeabi_dsub>
 8004ab8:	4602      	mov	r2, r0
 8004aba:	460b      	mov	r3, r1
 8004abc:	4640      	mov	r0, r8
 8004abe:	4649      	mov	r1, r9
 8004ac0:	f7fc f814 	bl	8000aec <__aeabi_dcmplt>
 8004ac4:	2800      	cmp	r0, #0
 8004ac6:	f43f af35 	beq.w	8004934 <_dtoa_r+0x464>
 8004aca:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8004acc:	1e6b      	subs	r3, r5, #1
 8004ace:	930f      	str	r3, [sp, #60]	; 0x3c
 8004ad0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8004ad4:	2b30      	cmp	r3, #48	; 0x30
 8004ad6:	d0f8      	beq.n	8004aca <_dtoa_r+0x5fa>
 8004ad8:	9700      	str	r7, [sp, #0]
 8004ada:	e049      	b.n	8004b70 <_dtoa_r+0x6a0>
 8004adc:	4b05      	ldr	r3, [pc, #20]	; (8004af4 <_dtoa_r+0x624>)
 8004ade:	f7fb fd93 	bl	8000608 <__aeabi_dmul>
 8004ae2:	4680      	mov	r8, r0
 8004ae4:	4689      	mov	r9, r1
 8004ae6:	e7bd      	b.n	8004a64 <_dtoa_r+0x594>
 8004ae8:	08006690 	.word	0x08006690
 8004aec:	08006668 	.word	0x08006668
 8004af0:	3ff00000 	.word	0x3ff00000
 8004af4:	40240000 	.word	0x40240000
 8004af8:	401c0000 	.word	0x401c0000
 8004afc:	40140000 	.word	0x40140000
 8004b00:	3fe00000 	.word	0x3fe00000
 8004b04:	9d01      	ldr	r5, [sp, #4]
 8004b06:	4656      	mov	r6, sl
 8004b08:	465f      	mov	r7, fp
 8004b0a:	4642      	mov	r2, r8
 8004b0c:	464b      	mov	r3, r9
 8004b0e:	4630      	mov	r0, r6
 8004b10:	4639      	mov	r1, r7
 8004b12:	f7fb fea3 	bl	800085c <__aeabi_ddiv>
 8004b16:	f7fc f827 	bl	8000b68 <__aeabi_d2iz>
 8004b1a:	4682      	mov	sl, r0
 8004b1c:	f7fb fd0a 	bl	8000534 <__aeabi_i2d>
 8004b20:	4642      	mov	r2, r8
 8004b22:	464b      	mov	r3, r9
 8004b24:	f7fb fd70 	bl	8000608 <__aeabi_dmul>
 8004b28:	4602      	mov	r2, r0
 8004b2a:	460b      	mov	r3, r1
 8004b2c:	4630      	mov	r0, r6
 8004b2e:	4639      	mov	r1, r7
 8004b30:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8004b34:	f7fb fbb0 	bl	8000298 <__aeabi_dsub>
 8004b38:	f805 6b01 	strb.w	r6, [r5], #1
 8004b3c:	9e01      	ldr	r6, [sp, #4]
 8004b3e:	9f03      	ldr	r7, [sp, #12]
 8004b40:	1bae      	subs	r6, r5, r6
 8004b42:	42b7      	cmp	r7, r6
 8004b44:	4602      	mov	r2, r0
 8004b46:	460b      	mov	r3, r1
 8004b48:	d135      	bne.n	8004bb6 <_dtoa_r+0x6e6>
 8004b4a:	f7fb fba7 	bl	800029c <__adddf3>
 8004b4e:	4642      	mov	r2, r8
 8004b50:	464b      	mov	r3, r9
 8004b52:	4606      	mov	r6, r0
 8004b54:	460f      	mov	r7, r1
 8004b56:	f7fb ffe7 	bl	8000b28 <__aeabi_dcmpgt>
 8004b5a:	b9d0      	cbnz	r0, 8004b92 <_dtoa_r+0x6c2>
 8004b5c:	4642      	mov	r2, r8
 8004b5e:	464b      	mov	r3, r9
 8004b60:	4630      	mov	r0, r6
 8004b62:	4639      	mov	r1, r7
 8004b64:	f7fb ffb8 	bl	8000ad8 <__aeabi_dcmpeq>
 8004b68:	b110      	cbz	r0, 8004b70 <_dtoa_r+0x6a0>
 8004b6a:	f01a 0f01 	tst.w	sl, #1
 8004b6e:	d110      	bne.n	8004b92 <_dtoa_r+0x6c2>
 8004b70:	4620      	mov	r0, r4
 8004b72:	ee18 1a10 	vmov	r1, s16
 8004b76:	f000 faf3 	bl	8005160 <_Bfree>
 8004b7a:	2300      	movs	r3, #0
 8004b7c:	9800      	ldr	r0, [sp, #0]
 8004b7e:	702b      	strb	r3, [r5, #0]
 8004b80:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004b82:	3001      	adds	r0, #1
 8004b84:	6018      	str	r0, [r3, #0]
 8004b86:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	f43f acf1 	beq.w	8004570 <_dtoa_r+0xa0>
 8004b8e:	601d      	str	r5, [r3, #0]
 8004b90:	e4ee      	b.n	8004570 <_dtoa_r+0xa0>
 8004b92:	9f00      	ldr	r7, [sp, #0]
 8004b94:	462b      	mov	r3, r5
 8004b96:	461d      	mov	r5, r3
 8004b98:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004b9c:	2a39      	cmp	r2, #57	; 0x39
 8004b9e:	d106      	bne.n	8004bae <_dtoa_r+0x6de>
 8004ba0:	9a01      	ldr	r2, [sp, #4]
 8004ba2:	429a      	cmp	r2, r3
 8004ba4:	d1f7      	bne.n	8004b96 <_dtoa_r+0x6c6>
 8004ba6:	9901      	ldr	r1, [sp, #4]
 8004ba8:	2230      	movs	r2, #48	; 0x30
 8004baa:	3701      	adds	r7, #1
 8004bac:	700a      	strb	r2, [r1, #0]
 8004bae:	781a      	ldrb	r2, [r3, #0]
 8004bb0:	3201      	adds	r2, #1
 8004bb2:	701a      	strb	r2, [r3, #0]
 8004bb4:	e790      	b.n	8004ad8 <_dtoa_r+0x608>
 8004bb6:	4ba6      	ldr	r3, [pc, #664]	; (8004e50 <_dtoa_r+0x980>)
 8004bb8:	2200      	movs	r2, #0
 8004bba:	f7fb fd25 	bl	8000608 <__aeabi_dmul>
 8004bbe:	2200      	movs	r2, #0
 8004bc0:	2300      	movs	r3, #0
 8004bc2:	4606      	mov	r6, r0
 8004bc4:	460f      	mov	r7, r1
 8004bc6:	f7fb ff87 	bl	8000ad8 <__aeabi_dcmpeq>
 8004bca:	2800      	cmp	r0, #0
 8004bcc:	d09d      	beq.n	8004b0a <_dtoa_r+0x63a>
 8004bce:	e7cf      	b.n	8004b70 <_dtoa_r+0x6a0>
 8004bd0:	9a08      	ldr	r2, [sp, #32]
 8004bd2:	2a00      	cmp	r2, #0
 8004bd4:	f000 80d7 	beq.w	8004d86 <_dtoa_r+0x8b6>
 8004bd8:	9a06      	ldr	r2, [sp, #24]
 8004bda:	2a01      	cmp	r2, #1
 8004bdc:	f300 80ba 	bgt.w	8004d54 <_dtoa_r+0x884>
 8004be0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004be2:	2a00      	cmp	r2, #0
 8004be4:	f000 80b2 	beq.w	8004d4c <_dtoa_r+0x87c>
 8004be8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8004bec:	9e07      	ldr	r6, [sp, #28]
 8004bee:	9d04      	ldr	r5, [sp, #16]
 8004bf0:	9a04      	ldr	r2, [sp, #16]
 8004bf2:	441a      	add	r2, r3
 8004bf4:	9204      	str	r2, [sp, #16]
 8004bf6:	9a05      	ldr	r2, [sp, #20]
 8004bf8:	2101      	movs	r1, #1
 8004bfa:	441a      	add	r2, r3
 8004bfc:	4620      	mov	r0, r4
 8004bfe:	9205      	str	r2, [sp, #20]
 8004c00:	f000 fb66 	bl	80052d0 <__i2b>
 8004c04:	4607      	mov	r7, r0
 8004c06:	2d00      	cmp	r5, #0
 8004c08:	dd0c      	ble.n	8004c24 <_dtoa_r+0x754>
 8004c0a:	9b05      	ldr	r3, [sp, #20]
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	dd09      	ble.n	8004c24 <_dtoa_r+0x754>
 8004c10:	42ab      	cmp	r3, r5
 8004c12:	9a04      	ldr	r2, [sp, #16]
 8004c14:	bfa8      	it	ge
 8004c16:	462b      	movge	r3, r5
 8004c18:	1ad2      	subs	r2, r2, r3
 8004c1a:	9204      	str	r2, [sp, #16]
 8004c1c:	9a05      	ldr	r2, [sp, #20]
 8004c1e:	1aed      	subs	r5, r5, r3
 8004c20:	1ad3      	subs	r3, r2, r3
 8004c22:	9305      	str	r3, [sp, #20]
 8004c24:	9b07      	ldr	r3, [sp, #28]
 8004c26:	b31b      	cbz	r3, 8004c70 <_dtoa_r+0x7a0>
 8004c28:	9b08      	ldr	r3, [sp, #32]
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	f000 80af 	beq.w	8004d8e <_dtoa_r+0x8be>
 8004c30:	2e00      	cmp	r6, #0
 8004c32:	dd13      	ble.n	8004c5c <_dtoa_r+0x78c>
 8004c34:	4639      	mov	r1, r7
 8004c36:	4632      	mov	r2, r6
 8004c38:	4620      	mov	r0, r4
 8004c3a:	f000 fc09 	bl	8005450 <__pow5mult>
 8004c3e:	ee18 2a10 	vmov	r2, s16
 8004c42:	4601      	mov	r1, r0
 8004c44:	4607      	mov	r7, r0
 8004c46:	4620      	mov	r0, r4
 8004c48:	f000 fb58 	bl	80052fc <__multiply>
 8004c4c:	ee18 1a10 	vmov	r1, s16
 8004c50:	4680      	mov	r8, r0
 8004c52:	4620      	mov	r0, r4
 8004c54:	f000 fa84 	bl	8005160 <_Bfree>
 8004c58:	ee08 8a10 	vmov	s16, r8
 8004c5c:	9b07      	ldr	r3, [sp, #28]
 8004c5e:	1b9a      	subs	r2, r3, r6
 8004c60:	d006      	beq.n	8004c70 <_dtoa_r+0x7a0>
 8004c62:	ee18 1a10 	vmov	r1, s16
 8004c66:	4620      	mov	r0, r4
 8004c68:	f000 fbf2 	bl	8005450 <__pow5mult>
 8004c6c:	ee08 0a10 	vmov	s16, r0
 8004c70:	2101      	movs	r1, #1
 8004c72:	4620      	mov	r0, r4
 8004c74:	f000 fb2c 	bl	80052d0 <__i2b>
 8004c78:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	4606      	mov	r6, r0
 8004c7e:	f340 8088 	ble.w	8004d92 <_dtoa_r+0x8c2>
 8004c82:	461a      	mov	r2, r3
 8004c84:	4601      	mov	r1, r0
 8004c86:	4620      	mov	r0, r4
 8004c88:	f000 fbe2 	bl	8005450 <__pow5mult>
 8004c8c:	9b06      	ldr	r3, [sp, #24]
 8004c8e:	2b01      	cmp	r3, #1
 8004c90:	4606      	mov	r6, r0
 8004c92:	f340 8081 	ble.w	8004d98 <_dtoa_r+0x8c8>
 8004c96:	f04f 0800 	mov.w	r8, #0
 8004c9a:	6933      	ldr	r3, [r6, #16]
 8004c9c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8004ca0:	6918      	ldr	r0, [r3, #16]
 8004ca2:	f000 fac5 	bl	8005230 <__hi0bits>
 8004ca6:	f1c0 0020 	rsb	r0, r0, #32
 8004caa:	9b05      	ldr	r3, [sp, #20]
 8004cac:	4418      	add	r0, r3
 8004cae:	f010 001f 	ands.w	r0, r0, #31
 8004cb2:	f000 8092 	beq.w	8004dda <_dtoa_r+0x90a>
 8004cb6:	f1c0 0320 	rsb	r3, r0, #32
 8004cba:	2b04      	cmp	r3, #4
 8004cbc:	f340 808a 	ble.w	8004dd4 <_dtoa_r+0x904>
 8004cc0:	f1c0 001c 	rsb	r0, r0, #28
 8004cc4:	9b04      	ldr	r3, [sp, #16]
 8004cc6:	4403      	add	r3, r0
 8004cc8:	9304      	str	r3, [sp, #16]
 8004cca:	9b05      	ldr	r3, [sp, #20]
 8004ccc:	4403      	add	r3, r0
 8004cce:	4405      	add	r5, r0
 8004cd0:	9305      	str	r3, [sp, #20]
 8004cd2:	9b04      	ldr	r3, [sp, #16]
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	dd07      	ble.n	8004ce8 <_dtoa_r+0x818>
 8004cd8:	ee18 1a10 	vmov	r1, s16
 8004cdc:	461a      	mov	r2, r3
 8004cde:	4620      	mov	r0, r4
 8004ce0:	f000 fc10 	bl	8005504 <__lshift>
 8004ce4:	ee08 0a10 	vmov	s16, r0
 8004ce8:	9b05      	ldr	r3, [sp, #20]
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	dd05      	ble.n	8004cfa <_dtoa_r+0x82a>
 8004cee:	4631      	mov	r1, r6
 8004cf0:	461a      	mov	r2, r3
 8004cf2:	4620      	mov	r0, r4
 8004cf4:	f000 fc06 	bl	8005504 <__lshift>
 8004cf8:	4606      	mov	r6, r0
 8004cfa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d06e      	beq.n	8004dde <_dtoa_r+0x90e>
 8004d00:	ee18 0a10 	vmov	r0, s16
 8004d04:	4631      	mov	r1, r6
 8004d06:	f000 fc6d 	bl	80055e4 <__mcmp>
 8004d0a:	2800      	cmp	r0, #0
 8004d0c:	da67      	bge.n	8004dde <_dtoa_r+0x90e>
 8004d0e:	9b00      	ldr	r3, [sp, #0]
 8004d10:	3b01      	subs	r3, #1
 8004d12:	ee18 1a10 	vmov	r1, s16
 8004d16:	9300      	str	r3, [sp, #0]
 8004d18:	220a      	movs	r2, #10
 8004d1a:	2300      	movs	r3, #0
 8004d1c:	4620      	mov	r0, r4
 8004d1e:	f000 fa41 	bl	80051a4 <__multadd>
 8004d22:	9b08      	ldr	r3, [sp, #32]
 8004d24:	ee08 0a10 	vmov	s16, r0
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	f000 81b1 	beq.w	8005090 <_dtoa_r+0xbc0>
 8004d2e:	2300      	movs	r3, #0
 8004d30:	4639      	mov	r1, r7
 8004d32:	220a      	movs	r2, #10
 8004d34:	4620      	mov	r0, r4
 8004d36:	f000 fa35 	bl	80051a4 <__multadd>
 8004d3a:	9b02      	ldr	r3, [sp, #8]
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	4607      	mov	r7, r0
 8004d40:	f300 808e 	bgt.w	8004e60 <_dtoa_r+0x990>
 8004d44:	9b06      	ldr	r3, [sp, #24]
 8004d46:	2b02      	cmp	r3, #2
 8004d48:	dc51      	bgt.n	8004dee <_dtoa_r+0x91e>
 8004d4a:	e089      	b.n	8004e60 <_dtoa_r+0x990>
 8004d4c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004d4e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8004d52:	e74b      	b.n	8004bec <_dtoa_r+0x71c>
 8004d54:	9b03      	ldr	r3, [sp, #12]
 8004d56:	1e5e      	subs	r6, r3, #1
 8004d58:	9b07      	ldr	r3, [sp, #28]
 8004d5a:	42b3      	cmp	r3, r6
 8004d5c:	bfbf      	itttt	lt
 8004d5e:	9b07      	ldrlt	r3, [sp, #28]
 8004d60:	9607      	strlt	r6, [sp, #28]
 8004d62:	1af2      	sublt	r2, r6, r3
 8004d64:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8004d66:	bfb6      	itet	lt
 8004d68:	189b      	addlt	r3, r3, r2
 8004d6a:	1b9e      	subge	r6, r3, r6
 8004d6c:	930a      	strlt	r3, [sp, #40]	; 0x28
 8004d6e:	9b03      	ldr	r3, [sp, #12]
 8004d70:	bfb8      	it	lt
 8004d72:	2600      	movlt	r6, #0
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	bfb7      	itett	lt
 8004d78:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8004d7c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8004d80:	1a9d      	sublt	r5, r3, r2
 8004d82:	2300      	movlt	r3, #0
 8004d84:	e734      	b.n	8004bf0 <_dtoa_r+0x720>
 8004d86:	9e07      	ldr	r6, [sp, #28]
 8004d88:	9d04      	ldr	r5, [sp, #16]
 8004d8a:	9f08      	ldr	r7, [sp, #32]
 8004d8c:	e73b      	b.n	8004c06 <_dtoa_r+0x736>
 8004d8e:	9a07      	ldr	r2, [sp, #28]
 8004d90:	e767      	b.n	8004c62 <_dtoa_r+0x792>
 8004d92:	9b06      	ldr	r3, [sp, #24]
 8004d94:	2b01      	cmp	r3, #1
 8004d96:	dc18      	bgt.n	8004dca <_dtoa_r+0x8fa>
 8004d98:	f1ba 0f00 	cmp.w	sl, #0
 8004d9c:	d115      	bne.n	8004dca <_dtoa_r+0x8fa>
 8004d9e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8004da2:	b993      	cbnz	r3, 8004dca <_dtoa_r+0x8fa>
 8004da4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8004da8:	0d1b      	lsrs	r3, r3, #20
 8004daa:	051b      	lsls	r3, r3, #20
 8004dac:	b183      	cbz	r3, 8004dd0 <_dtoa_r+0x900>
 8004dae:	9b04      	ldr	r3, [sp, #16]
 8004db0:	3301      	adds	r3, #1
 8004db2:	9304      	str	r3, [sp, #16]
 8004db4:	9b05      	ldr	r3, [sp, #20]
 8004db6:	3301      	adds	r3, #1
 8004db8:	9305      	str	r3, [sp, #20]
 8004dba:	f04f 0801 	mov.w	r8, #1
 8004dbe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	f47f af6a 	bne.w	8004c9a <_dtoa_r+0x7ca>
 8004dc6:	2001      	movs	r0, #1
 8004dc8:	e76f      	b.n	8004caa <_dtoa_r+0x7da>
 8004dca:	f04f 0800 	mov.w	r8, #0
 8004dce:	e7f6      	b.n	8004dbe <_dtoa_r+0x8ee>
 8004dd0:	4698      	mov	r8, r3
 8004dd2:	e7f4      	b.n	8004dbe <_dtoa_r+0x8ee>
 8004dd4:	f43f af7d 	beq.w	8004cd2 <_dtoa_r+0x802>
 8004dd8:	4618      	mov	r0, r3
 8004dda:	301c      	adds	r0, #28
 8004ddc:	e772      	b.n	8004cc4 <_dtoa_r+0x7f4>
 8004dde:	9b03      	ldr	r3, [sp, #12]
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	dc37      	bgt.n	8004e54 <_dtoa_r+0x984>
 8004de4:	9b06      	ldr	r3, [sp, #24]
 8004de6:	2b02      	cmp	r3, #2
 8004de8:	dd34      	ble.n	8004e54 <_dtoa_r+0x984>
 8004dea:	9b03      	ldr	r3, [sp, #12]
 8004dec:	9302      	str	r3, [sp, #8]
 8004dee:	9b02      	ldr	r3, [sp, #8]
 8004df0:	b96b      	cbnz	r3, 8004e0e <_dtoa_r+0x93e>
 8004df2:	4631      	mov	r1, r6
 8004df4:	2205      	movs	r2, #5
 8004df6:	4620      	mov	r0, r4
 8004df8:	f000 f9d4 	bl	80051a4 <__multadd>
 8004dfc:	4601      	mov	r1, r0
 8004dfe:	4606      	mov	r6, r0
 8004e00:	ee18 0a10 	vmov	r0, s16
 8004e04:	f000 fbee 	bl	80055e4 <__mcmp>
 8004e08:	2800      	cmp	r0, #0
 8004e0a:	f73f adbb 	bgt.w	8004984 <_dtoa_r+0x4b4>
 8004e0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004e10:	9d01      	ldr	r5, [sp, #4]
 8004e12:	43db      	mvns	r3, r3
 8004e14:	9300      	str	r3, [sp, #0]
 8004e16:	f04f 0800 	mov.w	r8, #0
 8004e1a:	4631      	mov	r1, r6
 8004e1c:	4620      	mov	r0, r4
 8004e1e:	f000 f99f 	bl	8005160 <_Bfree>
 8004e22:	2f00      	cmp	r7, #0
 8004e24:	f43f aea4 	beq.w	8004b70 <_dtoa_r+0x6a0>
 8004e28:	f1b8 0f00 	cmp.w	r8, #0
 8004e2c:	d005      	beq.n	8004e3a <_dtoa_r+0x96a>
 8004e2e:	45b8      	cmp	r8, r7
 8004e30:	d003      	beq.n	8004e3a <_dtoa_r+0x96a>
 8004e32:	4641      	mov	r1, r8
 8004e34:	4620      	mov	r0, r4
 8004e36:	f000 f993 	bl	8005160 <_Bfree>
 8004e3a:	4639      	mov	r1, r7
 8004e3c:	4620      	mov	r0, r4
 8004e3e:	f000 f98f 	bl	8005160 <_Bfree>
 8004e42:	e695      	b.n	8004b70 <_dtoa_r+0x6a0>
 8004e44:	2600      	movs	r6, #0
 8004e46:	4637      	mov	r7, r6
 8004e48:	e7e1      	b.n	8004e0e <_dtoa_r+0x93e>
 8004e4a:	9700      	str	r7, [sp, #0]
 8004e4c:	4637      	mov	r7, r6
 8004e4e:	e599      	b.n	8004984 <_dtoa_r+0x4b4>
 8004e50:	40240000 	.word	0x40240000
 8004e54:	9b08      	ldr	r3, [sp, #32]
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	f000 80ca 	beq.w	8004ff0 <_dtoa_r+0xb20>
 8004e5c:	9b03      	ldr	r3, [sp, #12]
 8004e5e:	9302      	str	r3, [sp, #8]
 8004e60:	2d00      	cmp	r5, #0
 8004e62:	dd05      	ble.n	8004e70 <_dtoa_r+0x9a0>
 8004e64:	4639      	mov	r1, r7
 8004e66:	462a      	mov	r2, r5
 8004e68:	4620      	mov	r0, r4
 8004e6a:	f000 fb4b 	bl	8005504 <__lshift>
 8004e6e:	4607      	mov	r7, r0
 8004e70:	f1b8 0f00 	cmp.w	r8, #0
 8004e74:	d05b      	beq.n	8004f2e <_dtoa_r+0xa5e>
 8004e76:	6879      	ldr	r1, [r7, #4]
 8004e78:	4620      	mov	r0, r4
 8004e7a:	f000 f931 	bl	80050e0 <_Balloc>
 8004e7e:	4605      	mov	r5, r0
 8004e80:	b928      	cbnz	r0, 8004e8e <_dtoa_r+0x9be>
 8004e82:	4b87      	ldr	r3, [pc, #540]	; (80050a0 <_dtoa_r+0xbd0>)
 8004e84:	4602      	mov	r2, r0
 8004e86:	f240 21ea 	movw	r1, #746	; 0x2ea
 8004e8a:	f7ff bb3b 	b.w	8004504 <_dtoa_r+0x34>
 8004e8e:	693a      	ldr	r2, [r7, #16]
 8004e90:	3202      	adds	r2, #2
 8004e92:	0092      	lsls	r2, r2, #2
 8004e94:	f107 010c 	add.w	r1, r7, #12
 8004e98:	300c      	adds	r0, #12
 8004e9a:	f000 f913 	bl	80050c4 <memcpy>
 8004e9e:	2201      	movs	r2, #1
 8004ea0:	4629      	mov	r1, r5
 8004ea2:	4620      	mov	r0, r4
 8004ea4:	f000 fb2e 	bl	8005504 <__lshift>
 8004ea8:	9b01      	ldr	r3, [sp, #4]
 8004eaa:	f103 0901 	add.w	r9, r3, #1
 8004eae:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8004eb2:	4413      	add	r3, r2
 8004eb4:	9305      	str	r3, [sp, #20]
 8004eb6:	f00a 0301 	and.w	r3, sl, #1
 8004eba:	46b8      	mov	r8, r7
 8004ebc:	9304      	str	r3, [sp, #16]
 8004ebe:	4607      	mov	r7, r0
 8004ec0:	4631      	mov	r1, r6
 8004ec2:	ee18 0a10 	vmov	r0, s16
 8004ec6:	f7ff fa75 	bl	80043b4 <quorem>
 8004eca:	4641      	mov	r1, r8
 8004ecc:	9002      	str	r0, [sp, #8]
 8004ece:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8004ed2:	ee18 0a10 	vmov	r0, s16
 8004ed6:	f000 fb85 	bl	80055e4 <__mcmp>
 8004eda:	463a      	mov	r2, r7
 8004edc:	9003      	str	r0, [sp, #12]
 8004ede:	4631      	mov	r1, r6
 8004ee0:	4620      	mov	r0, r4
 8004ee2:	f000 fb9b 	bl	800561c <__mdiff>
 8004ee6:	68c2      	ldr	r2, [r0, #12]
 8004ee8:	f109 3bff 	add.w	fp, r9, #4294967295
 8004eec:	4605      	mov	r5, r0
 8004eee:	bb02      	cbnz	r2, 8004f32 <_dtoa_r+0xa62>
 8004ef0:	4601      	mov	r1, r0
 8004ef2:	ee18 0a10 	vmov	r0, s16
 8004ef6:	f000 fb75 	bl	80055e4 <__mcmp>
 8004efa:	4602      	mov	r2, r0
 8004efc:	4629      	mov	r1, r5
 8004efe:	4620      	mov	r0, r4
 8004f00:	9207      	str	r2, [sp, #28]
 8004f02:	f000 f92d 	bl	8005160 <_Bfree>
 8004f06:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8004f0a:	ea43 0102 	orr.w	r1, r3, r2
 8004f0e:	9b04      	ldr	r3, [sp, #16]
 8004f10:	430b      	orrs	r3, r1
 8004f12:	464d      	mov	r5, r9
 8004f14:	d10f      	bne.n	8004f36 <_dtoa_r+0xa66>
 8004f16:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8004f1a:	d02a      	beq.n	8004f72 <_dtoa_r+0xaa2>
 8004f1c:	9b03      	ldr	r3, [sp, #12]
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	dd02      	ble.n	8004f28 <_dtoa_r+0xa58>
 8004f22:	9b02      	ldr	r3, [sp, #8]
 8004f24:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8004f28:	f88b a000 	strb.w	sl, [fp]
 8004f2c:	e775      	b.n	8004e1a <_dtoa_r+0x94a>
 8004f2e:	4638      	mov	r0, r7
 8004f30:	e7ba      	b.n	8004ea8 <_dtoa_r+0x9d8>
 8004f32:	2201      	movs	r2, #1
 8004f34:	e7e2      	b.n	8004efc <_dtoa_r+0xa2c>
 8004f36:	9b03      	ldr	r3, [sp, #12]
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	db04      	blt.n	8004f46 <_dtoa_r+0xa76>
 8004f3c:	9906      	ldr	r1, [sp, #24]
 8004f3e:	430b      	orrs	r3, r1
 8004f40:	9904      	ldr	r1, [sp, #16]
 8004f42:	430b      	orrs	r3, r1
 8004f44:	d122      	bne.n	8004f8c <_dtoa_r+0xabc>
 8004f46:	2a00      	cmp	r2, #0
 8004f48:	ddee      	ble.n	8004f28 <_dtoa_r+0xa58>
 8004f4a:	ee18 1a10 	vmov	r1, s16
 8004f4e:	2201      	movs	r2, #1
 8004f50:	4620      	mov	r0, r4
 8004f52:	f000 fad7 	bl	8005504 <__lshift>
 8004f56:	4631      	mov	r1, r6
 8004f58:	ee08 0a10 	vmov	s16, r0
 8004f5c:	f000 fb42 	bl	80055e4 <__mcmp>
 8004f60:	2800      	cmp	r0, #0
 8004f62:	dc03      	bgt.n	8004f6c <_dtoa_r+0xa9c>
 8004f64:	d1e0      	bne.n	8004f28 <_dtoa_r+0xa58>
 8004f66:	f01a 0f01 	tst.w	sl, #1
 8004f6a:	d0dd      	beq.n	8004f28 <_dtoa_r+0xa58>
 8004f6c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8004f70:	d1d7      	bne.n	8004f22 <_dtoa_r+0xa52>
 8004f72:	2339      	movs	r3, #57	; 0x39
 8004f74:	f88b 3000 	strb.w	r3, [fp]
 8004f78:	462b      	mov	r3, r5
 8004f7a:	461d      	mov	r5, r3
 8004f7c:	3b01      	subs	r3, #1
 8004f7e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8004f82:	2a39      	cmp	r2, #57	; 0x39
 8004f84:	d071      	beq.n	800506a <_dtoa_r+0xb9a>
 8004f86:	3201      	adds	r2, #1
 8004f88:	701a      	strb	r2, [r3, #0]
 8004f8a:	e746      	b.n	8004e1a <_dtoa_r+0x94a>
 8004f8c:	2a00      	cmp	r2, #0
 8004f8e:	dd07      	ble.n	8004fa0 <_dtoa_r+0xad0>
 8004f90:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8004f94:	d0ed      	beq.n	8004f72 <_dtoa_r+0xaa2>
 8004f96:	f10a 0301 	add.w	r3, sl, #1
 8004f9a:	f88b 3000 	strb.w	r3, [fp]
 8004f9e:	e73c      	b.n	8004e1a <_dtoa_r+0x94a>
 8004fa0:	9b05      	ldr	r3, [sp, #20]
 8004fa2:	f809 ac01 	strb.w	sl, [r9, #-1]
 8004fa6:	4599      	cmp	r9, r3
 8004fa8:	d047      	beq.n	800503a <_dtoa_r+0xb6a>
 8004faa:	ee18 1a10 	vmov	r1, s16
 8004fae:	2300      	movs	r3, #0
 8004fb0:	220a      	movs	r2, #10
 8004fb2:	4620      	mov	r0, r4
 8004fb4:	f000 f8f6 	bl	80051a4 <__multadd>
 8004fb8:	45b8      	cmp	r8, r7
 8004fba:	ee08 0a10 	vmov	s16, r0
 8004fbe:	f04f 0300 	mov.w	r3, #0
 8004fc2:	f04f 020a 	mov.w	r2, #10
 8004fc6:	4641      	mov	r1, r8
 8004fc8:	4620      	mov	r0, r4
 8004fca:	d106      	bne.n	8004fda <_dtoa_r+0xb0a>
 8004fcc:	f000 f8ea 	bl	80051a4 <__multadd>
 8004fd0:	4680      	mov	r8, r0
 8004fd2:	4607      	mov	r7, r0
 8004fd4:	f109 0901 	add.w	r9, r9, #1
 8004fd8:	e772      	b.n	8004ec0 <_dtoa_r+0x9f0>
 8004fda:	f000 f8e3 	bl	80051a4 <__multadd>
 8004fde:	4639      	mov	r1, r7
 8004fe0:	4680      	mov	r8, r0
 8004fe2:	2300      	movs	r3, #0
 8004fe4:	220a      	movs	r2, #10
 8004fe6:	4620      	mov	r0, r4
 8004fe8:	f000 f8dc 	bl	80051a4 <__multadd>
 8004fec:	4607      	mov	r7, r0
 8004fee:	e7f1      	b.n	8004fd4 <_dtoa_r+0xb04>
 8004ff0:	9b03      	ldr	r3, [sp, #12]
 8004ff2:	9302      	str	r3, [sp, #8]
 8004ff4:	9d01      	ldr	r5, [sp, #4]
 8004ff6:	ee18 0a10 	vmov	r0, s16
 8004ffa:	4631      	mov	r1, r6
 8004ffc:	f7ff f9da 	bl	80043b4 <quorem>
 8005000:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8005004:	9b01      	ldr	r3, [sp, #4]
 8005006:	f805 ab01 	strb.w	sl, [r5], #1
 800500a:	1aea      	subs	r2, r5, r3
 800500c:	9b02      	ldr	r3, [sp, #8]
 800500e:	4293      	cmp	r3, r2
 8005010:	dd09      	ble.n	8005026 <_dtoa_r+0xb56>
 8005012:	ee18 1a10 	vmov	r1, s16
 8005016:	2300      	movs	r3, #0
 8005018:	220a      	movs	r2, #10
 800501a:	4620      	mov	r0, r4
 800501c:	f000 f8c2 	bl	80051a4 <__multadd>
 8005020:	ee08 0a10 	vmov	s16, r0
 8005024:	e7e7      	b.n	8004ff6 <_dtoa_r+0xb26>
 8005026:	9b02      	ldr	r3, [sp, #8]
 8005028:	2b00      	cmp	r3, #0
 800502a:	bfc8      	it	gt
 800502c:	461d      	movgt	r5, r3
 800502e:	9b01      	ldr	r3, [sp, #4]
 8005030:	bfd8      	it	le
 8005032:	2501      	movle	r5, #1
 8005034:	441d      	add	r5, r3
 8005036:	f04f 0800 	mov.w	r8, #0
 800503a:	ee18 1a10 	vmov	r1, s16
 800503e:	2201      	movs	r2, #1
 8005040:	4620      	mov	r0, r4
 8005042:	f000 fa5f 	bl	8005504 <__lshift>
 8005046:	4631      	mov	r1, r6
 8005048:	ee08 0a10 	vmov	s16, r0
 800504c:	f000 faca 	bl	80055e4 <__mcmp>
 8005050:	2800      	cmp	r0, #0
 8005052:	dc91      	bgt.n	8004f78 <_dtoa_r+0xaa8>
 8005054:	d102      	bne.n	800505c <_dtoa_r+0xb8c>
 8005056:	f01a 0f01 	tst.w	sl, #1
 800505a:	d18d      	bne.n	8004f78 <_dtoa_r+0xaa8>
 800505c:	462b      	mov	r3, r5
 800505e:	461d      	mov	r5, r3
 8005060:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005064:	2a30      	cmp	r2, #48	; 0x30
 8005066:	d0fa      	beq.n	800505e <_dtoa_r+0xb8e>
 8005068:	e6d7      	b.n	8004e1a <_dtoa_r+0x94a>
 800506a:	9a01      	ldr	r2, [sp, #4]
 800506c:	429a      	cmp	r2, r3
 800506e:	d184      	bne.n	8004f7a <_dtoa_r+0xaaa>
 8005070:	9b00      	ldr	r3, [sp, #0]
 8005072:	3301      	adds	r3, #1
 8005074:	9300      	str	r3, [sp, #0]
 8005076:	2331      	movs	r3, #49	; 0x31
 8005078:	7013      	strb	r3, [r2, #0]
 800507a:	e6ce      	b.n	8004e1a <_dtoa_r+0x94a>
 800507c:	4b09      	ldr	r3, [pc, #36]	; (80050a4 <_dtoa_r+0xbd4>)
 800507e:	f7ff ba95 	b.w	80045ac <_dtoa_r+0xdc>
 8005082:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005084:	2b00      	cmp	r3, #0
 8005086:	f47f aa6e 	bne.w	8004566 <_dtoa_r+0x96>
 800508a:	4b07      	ldr	r3, [pc, #28]	; (80050a8 <_dtoa_r+0xbd8>)
 800508c:	f7ff ba8e 	b.w	80045ac <_dtoa_r+0xdc>
 8005090:	9b02      	ldr	r3, [sp, #8]
 8005092:	2b00      	cmp	r3, #0
 8005094:	dcae      	bgt.n	8004ff4 <_dtoa_r+0xb24>
 8005096:	9b06      	ldr	r3, [sp, #24]
 8005098:	2b02      	cmp	r3, #2
 800509a:	f73f aea8 	bgt.w	8004dee <_dtoa_r+0x91e>
 800509e:	e7a9      	b.n	8004ff4 <_dtoa_r+0xb24>
 80050a0:	080065f7 	.word	0x080065f7
 80050a4:	08006554 	.word	0x08006554
 80050a8:	08006578 	.word	0x08006578

080050ac <_localeconv_r>:
 80050ac:	4800      	ldr	r0, [pc, #0]	; (80050b0 <_localeconv_r+0x4>)
 80050ae:	4770      	bx	lr
 80050b0:	20000160 	.word	0x20000160

080050b4 <malloc>:
 80050b4:	4b02      	ldr	r3, [pc, #8]	; (80050c0 <malloc+0xc>)
 80050b6:	4601      	mov	r1, r0
 80050b8:	6818      	ldr	r0, [r3, #0]
 80050ba:	f000 bc17 	b.w	80058ec <_malloc_r>
 80050be:	bf00      	nop
 80050c0:	2000000c 	.word	0x2000000c

080050c4 <memcpy>:
 80050c4:	440a      	add	r2, r1
 80050c6:	4291      	cmp	r1, r2
 80050c8:	f100 33ff 	add.w	r3, r0, #4294967295
 80050cc:	d100      	bne.n	80050d0 <memcpy+0xc>
 80050ce:	4770      	bx	lr
 80050d0:	b510      	push	{r4, lr}
 80050d2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80050d6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80050da:	4291      	cmp	r1, r2
 80050dc:	d1f9      	bne.n	80050d2 <memcpy+0xe>
 80050de:	bd10      	pop	{r4, pc}

080050e0 <_Balloc>:
 80050e0:	b570      	push	{r4, r5, r6, lr}
 80050e2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80050e4:	4604      	mov	r4, r0
 80050e6:	460d      	mov	r5, r1
 80050e8:	b976      	cbnz	r6, 8005108 <_Balloc+0x28>
 80050ea:	2010      	movs	r0, #16
 80050ec:	f7ff ffe2 	bl	80050b4 <malloc>
 80050f0:	4602      	mov	r2, r0
 80050f2:	6260      	str	r0, [r4, #36]	; 0x24
 80050f4:	b920      	cbnz	r0, 8005100 <_Balloc+0x20>
 80050f6:	4b18      	ldr	r3, [pc, #96]	; (8005158 <_Balloc+0x78>)
 80050f8:	4818      	ldr	r0, [pc, #96]	; (800515c <_Balloc+0x7c>)
 80050fa:	2166      	movs	r1, #102	; 0x66
 80050fc:	f000 fc7a 	bl	80059f4 <__assert_func>
 8005100:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005104:	6006      	str	r6, [r0, #0]
 8005106:	60c6      	str	r6, [r0, #12]
 8005108:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800510a:	68f3      	ldr	r3, [r6, #12]
 800510c:	b183      	cbz	r3, 8005130 <_Balloc+0x50>
 800510e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005110:	68db      	ldr	r3, [r3, #12]
 8005112:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005116:	b9b8      	cbnz	r0, 8005148 <_Balloc+0x68>
 8005118:	2101      	movs	r1, #1
 800511a:	fa01 f605 	lsl.w	r6, r1, r5
 800511e:	1d72      	adds	r2, r6, #5
 8005120:	0092      	lsls	r2, r2, #2
 8005122:	4620      	mov	r0, r4
 8005124:	f000 fb60 	bl	80057e8 <_calloc_r>
 8005128:	b160      	cbz	r0, 8005144 <_Balloc+0x64>
 800512a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800512e:	e00e      	b.n	800514e <_Balloc+0x6e>
 8005130:	2221      	movs	r2, #33	; 0x21
 8005132:	2104      	movs	r1, #4
 8005134:	4620      	mov	r0, r4
 8005136:	f000 fb57 	bl	80057e8 <_calloc_r>
 800513a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800513c:	60f0      	str	r0, [r6, #12]
 800513e:	68db      	ldr	r3, [r3, #12]
 8005140:	2b00      	cmp	r3, #0
 8005142:	d1e4      	bne.n	800510e <_Balloc+0x2e>
 8005144:	2000      	movs	r0, #0
 8005146:	bd70      	pop	{r4, r5, r6, pc}
 8005148:	6802      	ldr	r2, [r0, #0]
 800514a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800514e:	2300      	movs	r3, #0
 8005150:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005154:	e7f7      	b.n	8005146 <_Balloc+0x66>
 8005156:	bf00      	nop
 8005158:	08006585 	.word	0x08006585
 800515c:	08006608 	.word	0x08006608

08005160 <_Bfree>:
 8005160:	b570      	push	{r4, r5, r6, lr}
 8005162:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005164:	4605      	mov	r5, r0
 8005166:	460c      	mov	r4, r1
 8005168:	b976      	cbnz	r6, 8005188 <_Bfree+0x28>
 800516a:	2010      	movs	r0, #16
 800516c:	f7ff ffa2 	bl	80050b4 <malloc>
 8005170:	4602      	mov	r2, r0
 8005172:	6268      	str	r0, [r5, #36]	; 0x24
 8005174:	b920      	cbnz	r0, 8005180 <_Bfree+0x20>
 8005176:	4b09      	ldr	r3, [pc, #36]	; (800519c <_Bfree+0x3c>)
 8005178:	4809      	ldr	r0, [pc, #36]	; (80051a0 <_Bfree+0x40>)
 800517a:	218a      	movs	r1, #138	; 0x8a
 800517c:	f000 fc3a 	bl	80059f4 <__assert_func>
 8005180:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005184:	6006      	str	r6, [r0, #0]
 8005186:	60c6      	str	r6, [r0, #12]
 8005188:	b13c      	cbz	r4, 800519a <_Bfree+0x3a>
 800518a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800518c:	6862      	ldr	r2, [r4, #4]
 800518e:	68db      	ldr	r3, [r3, #12]
 8005190:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005194:	6021      	str	r1, [r4, #0]
 8005196:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800519a:	bd70      	pop	{r4, r5, r6, pc}
 800519c:	08006585 	.word	0x08006585
 80051a0:	08006608 	.word	0x08006608

080051a4 <__multadd>:
 80051a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80051a8:	690d      	ldr	r5, [r1, #16]
 80051aa:	4607      	mov	r7, r0
 80051ac:	460c      	mov	r4, r1
 80051ae:	461e      	mov	r6, r3
 80051b0:	f101 0c14 	add.w	ip, r1, #20
 80051b4:	2000      	movs	r0, #0
 80051b6:	f8dc 3000 	ldr.w	r3, [ip]
 80051ba:	b299      	uxth	r1, r3
 80051bc:	fb02 6101 	mla	r1, r2, r1, r6
 80051c0:	0c1e      	lsrs	r6, r3, #16
 80051c2:	0c0b      	lsrs	r3, r1, #16
 80051c4:	fb02 3306 	mla	r3, r2, r6, r3
 80051c8:	b289      	uxth	r1, r1
 80051ca:	3001      	adds	r0, #1
 80051cc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80051d0:	4285      	cmp	r5, r0
 80051d2:	f84c 1b04 	str.w	r1, [ip], #4
 80051d6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80051da:	dcec      	bgt.n	80051b6 <__multadd+0x12>
 80051dc:	b30e      	cbz	r6, 8005222 <__multadd+0x7e>
 80051de:	68a3      	ldr	r3, [r4, #8]
 80051e0:	42ab      	cmp	r3, r5
 80051e2:	dc19      	bgt.n	8005218 <__multadd+0x74>
 80051e4:	6861      	ldr	r1, [r4, #4]
 80051e6:	4638      	mov	r0, r7
 80051e8:	3101      	adds	r1, #1
 80051ea:	f7ff ff79 	bl	80050e0 <_Balloc>
 80051ee:	4680      	mov	r8, r0
 80051f0:	b928      	cbnz	r0, 80051fe <__multadd+0x5a>
 80051f2:	4602      	mov	r2, r0
 80051f4:	4b0c      	ldr	r3, [pc, #48]	; (8005228 <__multadd+0x84>)
 80051f6:	480d      	ldr	r0, [pc, #52]	; (800522c <__multadd+0x88>)
 80051f8:	21b5      	movs	r1, #181	; 0xb5
 80051fa:	f000 fbfb 	bl	80059f4 <__assert_func>
 80051fe:	6922      	ldr	r2, [r4, #16]
 8005200:	3202      	adds	r2, #2
 8005202:	f104 010c 	add.w	r1, r4, #12
 8005206:	0092      	lsls	r2, r2, #2
 8005208:	300c      	adds	r0, #12
 800520a:	f7ff ff5b 	bl	80050c4 <memcpy>
 800520e:	4621      	mov	r1, r4
 8005210:	4638      	mov	r0, r7
 8005212:	f7ff ffa5 	bl	8005160 <_Bfree>
 8005216:	4644      	mov	r4, r8
 8005218:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800521c:	3501      	adds	r5, #1
 800521e:	615e      	str	r6, [r3, #20]
 8005220:	6125      	str	r5, [r4, #16]
 8005222:	4620      	mov	r0, r4
 8005224:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005228:	080065f7 	.word	0x080065f7
 800522c:	08006608 	.word	0x08006608

08005230 <__hi0bits>:
 8005230:	0c03      	lsrs	r3, r0, #16
 8005232:	041b      	lsls	r3, r3, #16
 8005234:	b9d3      	cbnz	r3, 800526c <__hi0bits+0x3c>
 8005236:	0400      	lsls	r0, r0, #16
 8005238:	2310      	movs	r3, #16
 800523a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800523e:	bf04      	itt	eq
 8005240:	0200      	lsleq	r0, r0, #8
 8005242:	3308      	addeq	r3, #8
 8005244:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8005248:	bf04      	itt	eq
 800524a:	0100      	lsleq	r0, r0, #4
 800524c:	3304      	addeq	r3, #4
 800524e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8005252:	bf04      	itt	eq
 8005254:	0080      	lsleq	r0, r0, #2
 8005256:	3302      	addeq	r3, #2
 8005258:	2800      	cmp	r0, #0
 800525a:	db05      	blt.n	8005268 <__hi0bits+0x38>
 800525c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8005260:	f103 0301 	add.w	r3, r3, #1
 8005264:	bf08      	it	eq
 8005266:	2320      	moveq	r3, #32
 8005268:	4618      	mov	r0, r3
 800526a:	4770      	bx	lr
 800526c:	2300      	movs	r3, #0
 800526e:	e7e4      	b.n	800523a <__hi0bits+0xa>

08005270 <__lo0bits>:
 8005270:	6803      	ldr	r3, [r0, #0]
 8005272:	f013 0207 	ands.w	r2, r3, #7
 8005276:	4601      	mov	r1, r0
 8005278:	d00b      	beq.n	8005292 <__lo0bits+0x22>
 800527a:	07da      	lsls	r2, r3, #31
 800527c:	d423      	bmi.n	80052c6 <__lo0bits+0x56>
 800527e:	0798      	lsls	r0, r3, #30
 8005280:	bf49      	itett	mi
 8005282:	085b      	lsrmi	r3, r3, #1
 8005284:	089b      	lsrpl	r3, r3, #2
 8005286:	2001      	movmi	r0, #1
 8005288:	600b      	strmi	r3, [r1, #0]
 800528a:	bf5c      	itt	pl
 800528c:	600b      	strpl	r3, [r1, #0]
 800528e:	2002      	movpl	r0, #2
 8005290:	4770      	bx	lr
 8005292:	b298      	uxth	r0, r3
 8005294:	b9a8      	cbnz	r0, 80052c2 <__lo0bits+0x52>
 8005296:	0c1b      	lsrs	r3, r3, #16
 8005298:	2010      	movs	r0, #16
 800529a:	b2da      	uxtb	r2, r3
 800529c:	b90a      	cbnz	r2, 80052a2 <__lo0bits+0x32>
 800529e:	3008      	adds	r0, #8
 80052a0:	0a1b      	lsrs	r3, r3, #8
 80052a2:	071a      	lsls	r2, r3, #28
 80052a4:	bf04      	itt	eq
 80052a6:	091b      	lsreq	r3, r3, #4
 80052a8:	3004      	addeq	r0, #4
 80052aa:	079a      	lsls	r2, r3, #30
 80052ac:	bf04      	itt	eq
 80052ae:	089b      	lsreq	r3, r3, #2
 80052b0:	3002      	addeq	r0, #2
 80052b2:	07da      	lsls	r2, r3, #31
 80052b4:	d403      	bmi.n	80052be <__lo0bits+0x4e>
 80052b6:	085b      	lsrs	r3, r3, #1
 80052b8:	f100 0001 	add.w	r0, r0, #1
 80052bc:	d005      	beq.n	80052ca <__lo0bits+0x5a>
 80052be:	600b      	str	r3, [r1, #0]
 80052c0:	4770      	bx	lr
 80052c2:	4610      	mov	r0, r2
 80052c4:	e7e9      	b.n	800529a <__lo0bits+0x2a>
 80052c6:	2000      	movs	r0, #0
 80052c8:	4770      	bx	lr
 80052ca:	2020      	movs	r0, #32
 80052cc:	4770      	bx	lr
	...

080052d0 <__i2b>:
 80052d0:	b510      	push	{r4, lr}
 80052d2:	460c      	mov	r4, r1
 80052d4:	2101      	movs	r1, #1
 80052d6:	f7ff ff03 	bl	80050e0 <_Balloc>
 80052da:	4602      	mov	r2, r0
 80052dc:	b928      	cbnz	r0, 80052ea <__i2b+0x1a>
 80052de:	4b05      	ldr	r3, [pc, #20]	; (80052f4 <__i2b+0x24>)
 80052e0:	4805      	ldr	r0, [pc, #20]	; (80052f8 <__i2b+0x28>)
 80052e2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80052e6:	f000 fb85 	bl	80059f4 <__assert_func>
 80052ea:	2301      	movs	r3, #1
 80052ec:	6144      	str	r4, [r0, #20]
 80052ee:	6103      	str	r3, [r0, #16]
 80052f0:	bd10      	pop	{r4, pc}
 80052f2:	bf00      	nop
 80052f4:	080065f7 	.word	0x080065f7
 80052f8:	08006608 	.word	0x08006608

080052fc <__multiply>:
 80052fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005300:	4691      	mov	r9, r2
 8005302:	690a      	ldr	r2, [r1, #16]
 8005304:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8005308:	429a      	cmp	r2, r3
 800530a:	bfb8      	it	lt
 800530c:	460b      	movlt	r3, r1
 800530e:	460c      	mov	r4, r1
 8005310:	bfbc      	itt	lt
 8005312:	464c      	movlt	r4, r9
 8005314:	4699      	movlt	r9, r3
 8005316:	6927      	ldr	r7, [r4, #16]
 8005318:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800531c:	68a3      	ldr	r3, [r4, #8]
 800531e:	6861      	ldr	r1, [r4, #4]
 8005320:	eb07 060a 	add.w	r6, r7, sl
 8005324:	42b3      	cmp	r3, r6
 8005326:	b085      	sub	sp, #20
 8005328:	bfb8      	it	lt
 800532a:	3101      	addlt	r1, #1
 800532c:	f7ff fed8 	bl	80050e0 <_Balloc>
 8005330:	b930      	cbnz	r0, 8005340 <__multiply+0x44>
 8005332:	4602      	mov	r2, r0
 8005334:	4b44      	ldr	r3, [pc, #272]	; (8005448 <__multiply+0x14c>)
 8005336:	4845      	ldr	r0, [pc, #276]	; (800544c <__multiply+0x150>)
 8005338:	f240 115d 	movw	r1, #349	; 0x15d
 800533c:	f000 fb5a 	bl	80059f4 <__assert_func>
 8005340:	f100 0514 	add.w	r5, r0, #20
 8005344:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8005348:	462b      	mov	r3, r5
 800534a:	2200      	movs	r2, #0
 800534c:	4543      	cmp	r3, r8
 800534e:	d321      	bcc.n	8005394 <__multiply+0x98>
 8005350:	f104 0314 	add.w	r3, r4, #20
 8005354:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8005358:	f109 0314 	add.w	r3, r9, #20
 800535c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8005360:	9202      	str	r2, [sp, #8]
 8005362:	1b3a      	subs	r2, r7, r4
 8005364:	3a15      	subs	r2, #21
 8005366:	f022 0203 	bic.w	r2, r2, #3
 800536a:	3204      	adds	r2, #4
 800536c:	f104 0115 	add.w	r1, r4, #21
 8005370:	428f      	cmp	r7, r1
 8005372:	bf38      	it	cc
 8005374:	2204      	movcc	r2, #4
 8005376:	9201      	str	r2, [sp, #4]
 8005378:	9a02      	ldr	r2, [sp, #8]
 800537a:	9303      	str	r3, [sp, #12]
 800537c:	429a      	cmp	r2, r3
 800537e:	d80c      	bhi.n	800539a <__multiply+0x9e>
 8005380:	2e00      	cmp	r6, #0
 8005382:	dd03      	ble.n	800538c <__multiply+0x90>
 8005384:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005388:	2b00      	cmp	r3, #0
 800538a:	d05a      	beq.n	8005442 <__multiply+0x146>
 800538c:	6106      	str	r6, [r0, #16]
 800538e:	b005      	add	sp, #20
 8005390:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005394:	f843 2b04 	str.w	r2, [r3], #4
 8005398:	e7d8      	b.n	800534c <__multiply+0x50>
 800539a:	f8b3 a000 	ldrh.w	sl, [r3]
 800539e:	f1ba 0f00 	cmp.w	sl, #0
 80053a2:	d024      	beq.n	80053ee <__multiply+0xf2>
 80053a4:	f104 0e14 	add.w	lr, r4, #20
 80053a8:	46a9      	mov	r9, r5
 80053aa:	f04f 0c00 	mov.w	ip, #0
 80053ae:	f85e 2b04 	ldr.w	r2, [lr], #4
 80053b2:	f8d9 1000 	ldr.w	r1, [r9]
 80053b6:	fa1f fb82 	uxth.w	fp, r2
 80053ba:	b289      	uxth	r1, r1
 80053bc:	fb0a 110b 	mla	r1, sl, fp, r1
 80053c0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80053c4:	f8d9 2000 	ldr.w	r2, [r9]
 80053c8:	4461      	add	r1, ip
 80053ca:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80053ce:	fb0a c20b 	mla	r2, sl, fp, ip
 80053d2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80053d6:	b289      	uxth	r1, r1
 80053d8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80053dc:	4577      	cmp	r7, lr
 80053de:	f849 1b04 	str.w	r1, [r9], #4
 80053e2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80053e6:	d8e2      	bhi.n	80053ae <__multiply+0xb2>
 80053e8:	9a01      	ldr	r2, [sp, #4]
 80053ea:	f845 c002 	str.w	ip, [r5, r2]
 80053ee:	9a03      	ldr	r2, [sp, #12]
 80053f0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80053f4:	3304      	adds	r3, #4
 80053f6:	f1b9 0f00 	cmp.w	r9, #0
 80053fa:	d020      	beq.n	800543e <__multiply+0x142>
 80053fc:	6829      	ldr	r1, [r5, #0]
 80053fe:	f104 0c14 	add.w	ip, r4, #20
 8005402:	46ae      	mov	lr, r5
 8005404:	f04f 0a00 	mov.w	sl, #0
 8005408:	f8bc b000 	ldrh.w	fp, [ip]
 800540c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8005410:	fb09 220b 	mla	r2, r9, fp, r2
 8005414:	4492      	add	sl, r2
 8005416:	b289      	uxth	r1, r1
 8005418:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800541c:	f84e 1b04 	str.w	r1, [lr], #4
 8005420:	f85c 2b04 	ldr.w	r2, [ip], #4
 8005424:	f8be 1000 	ldrh.w	r1, [lr]
 8005428:	0c12      	lsrs	r2, r2, #16
 800542a:	fb09 1102 	mla	r1, r9, r2, r1
 800542e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8005432:	4567      	cmp	r7, ip
 8005434:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8005438:	d8e6      	bhi.n	8005408 <__multiply+0x10c>
 800543a:	9a01      	ldr	r2, [sp, #4]
 800543c:	50a9      	str	r1, [r5, r2]
 800543e:	3504      	adds	r5, #4
 8005440:	e79a      	b.n	8005378 <__multiply+0x7c>
 8005442:	3e01      	subs	r6, #1
 8005444:	e79c      	b.n	8005380 <__multiply+0x84>
 8005446:	bf00      	nop
 8005448:	080065f7 	.word	0x080065f7
 800544c:	08006608 	.word	0x08006608

08005450 <__pow5mult>:
 8005450:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005454:	4615      	mov	r5, r2
 8005456:	f012 0203 	ands.w	r2, r2, #3
 800545a:	4606      	mov	r6, r0
 800545c:	460f      	mov	r7, r1
 800545e:	d007      	beq.n	8005470 <__pow5mult+0x20>
 8005460:	4c25      	ldr	r4, [pc, #148]	; (80054f8 <__pow5mult+0xa8>)
 8005462:	3a01      	subs	r2, #1
 8005464:	2300      	movs	r3, #0
 8005466:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800546a:	f7ff fe9b 	bl	80051a4 <__multadd>
 800546e:	4607      	mov	r7, r0
 8005470:	10ad      	asrs	r5, r5, #2
 8005472:	d03d      	beq.n	80054f0 <__pow5mult+0xa0>
 8005474:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8005476:	b97c      	cbnz	r4, 8005498 <__pow5mult+0x48>
 8005478:	2010      	movs	r0, #16
 800547a:	f7ff fe1b 	bl	80050b4 <malloc>
 800547e:	4602      	mov	r2, r0
 8005480:	6270      	str	r0, [r6, #36]	; 0x24
 8005482:	b928      	cbnz	r0, 8005490 <__pow5mult+0x40>
 8005484:	4b1d      	ldr	r3, [pc, #116]	; (80054fc <__pow5mult+0xac>)
 8005486:	481e      	ldr	r0, [pc, #120]	; (8005500 <__pow5mult+0xb0>)
 8005488:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800548c:	f000 fab2 	bl	80059f4 <__assert_func>
 8005490:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005494:	6004      	str	r4, [r0, #0]
 8005496:	60c4      	str	r4, [r0, #12]
 8005498:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800549c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80054a0:	b94c      	cbnz	r4, 80054b6 <__pow5mult+0x66>
 80054a2:	f240 2171 	movw	r1, #625	; 0x271
 80054a6:	4630      	mov	r0, r6
 80054a8:	f7ff ff12 	bl	80052d0 <__i2b>
 80054ac:	2300      	movs	r3, #0
 80054ae:	f8c8 0008 	str.w	r0, [r8, #8]
 80054b2:	4604      	mov	r4, r0
 80054b4:	6003      	str	r3, [r0, #0]
 80054b6:	f04f 0900 	mov.w	r9, #0
 80054ba:	07eb      	lsls	r3, r5, #31
 80054bc:	d50a      	bpl.n	80054d4 <__pow5mult+0x84>
 80054be:	4639      	mov	r1, r7
 80054c0:	4622      	mov	r2, r4
 80054c2:	4630      	mov	r0, r6
 80054c4:	f7ff ff1a 	bl	80052fc <__multiply>
 80054c8:	4639      	mov	r1, r7
 80054ca:	4680      	mov	r8, r0
 80054cc:	4630      	mov	r0, r6
 80054ce:	f7ff fe47 	bl	8005160 <_Bfree>
 80054d2:	4647      	mov	r7, r8
 80054d4:	106d      	asrs	r5, r5, #1
 80054d6:	d00b      	beq.n	80054f0 <__pow5mult+0xa0>
 80054d8:	6820      	ldr	r0, [r4, #0]
 80054da:	b938      	cbnz	r0, 80054ec <__pow5mult+0x9c>
 80054dc:	4622      	mov	r2, r4
 80054de:	4621      	mov	r1, r4
 80054e0:	4630      	mov	r0, r6
 80054e2:	f7ff ff0b 	bl	80052fc <__multiply>
 80054e6:	6020      	str	r0, [r4, #0]
 80054e8:	f8c0 9000 	str.w	r9, [r0]
 80054ec:	4604      	mov	r4, r0
 80054ee:	e7e4      	b.n	80054ba <__pow5mult+0x6a>
 80054f0:	4638      	mov	r0, r7
 80054f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80054f6:	bf00      	nop
 80054f8:	08006758 	.word	0x08006758
 80054fc:	08006585 	.word	0x08006585
 8005500:	08006608 	.word	0x08006608

08005504 <__lshift>:
 8005504:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005508:	460c      	mov	r4, r1
 800550a:	6849      	ldr	r1, [r1, #4]
 800550c:	6923      	ldr	r3, [r4, #16]
 800550e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8005512:	68a3      	ldr	r3, [r4, #8]
 8005514:	4607      	mov	r7, r0
 8005516:	4691      	mov	r9, r2
 8005518:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800551c:	f108 0601 	add.w	r6, r8, #1
 8005520:	42b3      	cmp	r3, r6
 8005522:	db0b      	blt.n	800553c <__lshift+0x38>
 8005524:	4638      	mov	r0, r7
 8005526:	f7ff fddb 	bl	80050e0 <_Balloc>
 800552a:	4605      	mov	r5, r0
 800552c:	b948      	cbnz	r0, 8005542 <__lshift+0x3e>
 800552e:	4602      	mov	r2, r0
 8005530:	4b2a      	ldr	r3, [pc, #168]	; (80055dc <__lshift+0xd8>)
 8005532:	482b      	ldr	r0, [pc, #172]	; (80055e0 <__lshift+0xdc>)
 8005534:	f240 11d9 	movw	r1, #473	; 0x1d9
 8005538:	f000 fa5c 	bl	80059f4 <__assert_func>
 800553c:	3101      	adds	r1, #1
 800553e:	005b      	lsls	r3, r3, #1
 8005540:	e7ee      	b.n	8005520 <__lshift+0x1c>
 8005542:	2300      	movs	r3, #0
 8005544:	f100 0114 	add.w	r1, r0, #20
 8005548:	f100 0210 	add.w	r2, r0, #16
 800554c:	4618      	mov	r0, r3
 800554e:	4553      	cmp	r3, sl
 8005550:	db37      	blt.n	80055c2 <__lshift+0xbe>
 8005552:	6920      	ldr	r0, [r4, #16]
 8005554:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005558:	f104 0314 	add.w	r3, r4, #20
 800555c:	f019 091f 	ands.w	r9, r9, #31
 8005560:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005564:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8005568:	d02f      	beq.n	80055ca <__lshift+0xc6>
 800556a:	f1c9 0e20 	rsb	lr, r9, #32
 800556e:	468a      	mov	sl, r1
 8005570:	f04f 0c00 	mov.w	ip, #0
 8005574:	681a      	ldr	r2, [r3, #0]
 8005576:	fa02 f209 	lsl.w	r2, r2, r9
 800557a:	ea42 020c 	orr.w	r2, r2, ip
 800557e:	f84a 2b04 	str.w	r2, [sl], #4
 8005582:	f853 2b04 	ldr.w	r2, [r3], #4
 8005586:	4298      	cmp	r0, r3
 8005588:	fa22 fc0e 	lsr.w	ip, r2, lr
 800558c:	d8f2      	bhi.n	8005574 <__lshift+0x70>
 800558e:	1b03      	subs	r3, r0, r4
 8005590:	3b15      	subs	r3, #21
 8005592:	f023 0303 	bic.w	r3, r3, #3
 8005596:	3304      	adds	r3, #4
 8005598:	f104 0215 	add.w	r2, r4, #21
 800559c:	4290      	cmp	r0, r2
 800559e:	bf38      	it	cc
 80055a0:	2304      	movcc	r3, #4
 80055a2:	f841 c003 	str.w	ip, [r1, r3]
 80055a6:	f1bc 0f00 	cmp.w	ip, #0
 80055aa:	d001      	beq.n	80055b0 <__lshift+0xac>
 80055ac:	f108 0602 	add.w	r6, r8, #2
 80055b0:	3e01      	subs	r6, #1
 80055b2:	4638      	mov	r0, r7
 80055b4:	612e      	str	r6, [r5, #16]
 80055b6:	4621      	mov	r1, r4
 80055b8:	f7ff fdd2 	bl	8005160 <_Bfree>
 80055bc:	4628      	mov	r0, r5
 80055be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80055c2:	f842 0f04 	str.w	r0, [r2, #4]!
 80055c6:	3301      	adds	r3, #1
 80055c8:	e7c1      	b.n	800554e <__lshift+0x4a>
 80055ca:	3904      	subs	r1, #4
 80055cc:	f853 2b04 	ldr.w	r2, [r3], #4
 80055d0:	f841 2f04 	str.w	r2, [r1, #4]!
 80055d4:	4298      	cmp	r0, r3
 80055d6:	d8f9      	bhi.n	80055cc <__lshift+0xc8>
 80055d8:	e7ea      	b.n	80055b0 <__lshift+0xac>
 80055da:	bf00      	nop
 80055dc:	080065f7 	.word	0x080065f7
 80055e0:	08006608 	.word	0x08006608

080055e4 <__mcmp>:
 80055e4:	b530      	push	{r4, r5, lr}
 80055e6:	6902      	ldr	r2, [r0, #16]
 80055e8:	690c      	ldr	r4, [r1, #16]
 80055ea:	1b12      	subs	r2, r2, r4
 80055ec:	d10e      	bne.n	800560c <__mcmp+0x28>
 80055ee:	f100 0314 	add.w	r3, r0, #20
 80055f2:	3114      	adds	r1, #20
 80055f4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80055f8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80055fc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8005600:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8005604:	42a5      	cmp	r5, r4
 8005606:	d003      	beq.n	8005610 <__mcmp+0x2c>
 8005608:	d305      	bcc.n	8005616 <__mcmp+0x32>
 800560a:	2201      	movs	r2, #1
 800560c:	4610      	mov	r0, r2
 800560e:	bd30      	pop	{r4, r5, pc}
 8005610:	4283      	cmp	r3, r0
 8005612:	d3f3      	bcc.n	80055fc <__mcmp+0x18>
 8005614:	e7fa      	b.n	800560c <__mcmp+0x28>
 8005616:	f04f 32ff 	mov.w	r2, #4294967295
 800561a:	e7f7      	b.n	800560c <__mcmp+0x28>

0800561c <__mdiff>:
 800561c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005620:	460c      	mov	r4, r1
 8005622:	4606      	mov	r6, r0
 8005624:	4611      	mov	r1, r2
 8005626:	4620      	mov	r0, r4
 8005628:	4690      	mov	r8, r2
 800562a:	f7ff ffdb 	bl	80055e4 <__mcmp>
 800562e:	1e05      	subs	r5, r0, #0
 8005630:	d110      	bne.n	8005654 <__mdiff+0x38>
 8005632:	4629      	mov	r1, r5
 8005634:	4630      	mov	r0, r6
 8005636:	f7ff fd53 	bl	80050e0 <_Balloc>
 800563a:	b930      	cbnz	r0, 800564a <__mdiff+0x2e>
 800563c:	4b3a      	ldr	r3, [pc, #232]	; (8005728 <__mdiff+0x10c>)
 800563e:	4602      	mov	r2, r0
 8005640:	f240 2132 	movw	r1, #562	; 0x232
 8005644:	4839      	ldr	r0, [pc, #228]	; (800572c <__mdiff+0x110>)
 8005646:	f000 f9d5 	bl	80059f4 <__assert_func>
 800564a:	2301      	movs	r3, #1
 800564c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8005650:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005654:	bfa4      	itt	ge
 8005656:	4643      	movge	r3, r8
 8005658:	46a0      	movge	r8, r4
 800565a:	4630      	mov	r0, r6
 800565c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8005660:	bfa6      	itte	ge
 8005662:	461c      	movge	r4, r3
 8005664:	2500      	movge	r5, #0
 8005666:	2501      	movlt	r5, #1
 8005668:	f7ff fd3a 	bl	80050e0 <_Balloc>
 800566c:	b920      	cbnz	r0, 8005678 <__mdiff+0x5c>
 800566e:	4b2e      	ldr	r3, [pc, #184]	; (8005728 <__mdiff+0x10c>)
 8005670:	4602      	mov	r2, r0
 8005672:	f44f 7110 	mov.w	r1, #576	; 0x240
 8005676:	e7e5      	b.n	8005644 <__mdiff+0x28>
 8005678:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800567c:	6926      	ldr	r6, [r4, #16]
 800567e:	60c5      	str	r5, [r0, #12]
 8005680:	f104 0914 	add.w	r9, r4, #20
 8005684:	f108 0514 	add.w	r5, r8, #20
 8005688:	f100 0e14 	add.w	lr, r0, #20
 800568c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8005690:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8005694:	f108 0210 	add.w	r2, r8, #16
 8005698:	46f2      	mov	sl, lr
 800569a:	2100      	movs	r1, #0
 800569c:	f859 3b04 	ldr.w	r3, [r9], #4
 80056a0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80056a4:	fa1f f883 	uxth.w	r8, r3
 80056a8:	fa11 f18b 	uxtah	r1, r1, fp
 80056ac:	0c1b      	lsrs	r3, r3, #16
 80056ae:	eba1 0808 	sub.w	r8, r1, r8
 80056b2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80056b6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80056ba:	fa1f f888 	uxth.w	r8, r8
 80056be:	1419      	asrs	r1, r3, #16
 80056c0:	454e      	cmp	r6, r9
 80056c2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80056c6:	f84a 3b04 	str.w	r3, [sl], #4
 80056ca:	d8e7      	bhi.n	800569c <__mdiff+0x80>
 80056cc:	1b33      	subs	r3, r6, r4
 80056ce:	3b15      	subs	r3, #21
 80056d0:	f023 0303 	bic.w	r3, r3, #3
 80056d4:	3304      	adds	r3, #4
 80056d6:	3415      	adds	r4, #21
 80056d8:	42a6      	cmp	r6, r4
 80056da:	bf38      	it	cc
 80056dc:	2304      	movcc	r3, #4
 80056de:	441d      	add	r5, r3
 80056e0:	4473      	add	r3, lr
 80056e2:	469e      	mov	lr, r3
 80056e4:	462e      	mov	r6, r5
 80056e6:	4566      	cmp	r6, ip
 80056e8:	d30e      	bcc.n	8005708 <__mdiff+0xec>
 80056ea:	f10c 0203 	add.w	r2, ip, #3
 80056ee:	1b52      	subs	r2, r2, r5
 80056f0:	f022 0203 	bic.w	r2, r2, #3
 80056f4:	3d03      	subs	r5, #3
 80056f6:	45ac      	cmp	ip, r5
 80056f8:	bf38      	it	cc
 80056fa:	2200      	movcc	r2, #0
 80056fc:	441a      	add	r2, r3
 80056fe:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8005702:	b17b      	cbz	r3, 8005724 <__mdiff+0x108>
 8005704:	6107      	str	r7, [r0, #16]
 8005706:	e7a3      	b.n	8005650 <__mdiff+0x34>
 8005708:	f856 8b04 	ldr.w	r8, [r6], #4
 800570c:	fa11 f288 	uxtah	r2, r1, r8
 8005710:	1414      	asrs	r4, r2, #16
 8005712:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8005716:	b292      	uxth	r2, r2
 8005718:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800571c:	f84e 2b04 	str.w	r2, [lr], #4
 8005720:	1421      	asrs	r1, r4, #16
 8005722:	e7e0      	b.n	80056e6 <__mdiff+0xca>
 8005724:	3f01      	subs	r7, #1
 8005726:	e7ea      	b.n	80056fe <__mdiff+0xe2>
 8005728:	080065f7 	.word	0x080065f7
 800572c:	08006608 	.word	0x08006608

08005730 <__d2b>:
 8005730:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005734:	4689      	mov	r9, r1
 8005736:	2101      	movs	r1, #1
 8005738:	ec57 6b10 	vmov	r6, r7, d0
 800573c:	4690      	mov	r8, r2
 800573e:	f7ff fccf 	bl	80050e0 <_Balloc>
 8005742:	4604      	mov	r4, r0
 8005744:	b930      	cbnz	r0, 8005754 <__d2b+0x24>
 8005746:	4602      	mov	r2, r0
 8005748:	4b25      	ldr	r3, [pc, #148]	; (80057e0 <__d2b+0xb0>)
 800574a:	4826      	ldr	r0, [pc, #152]	; (80057e4 <__d2b+0xb4>)
 800574c:	f240 310a 	movw	r1, #778	; 0x30a
 8005750:	f000 f950 	bl	80059f4 <__assert_func>
 8005754:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8005758:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800575c:	bb35      	cbnz	r5, 80057ac <__d2b+0x7c>
 800575e:	2e00      	cmp	r6, #0
 8005760:	9301      	str	r3, [sp, #4]
 8005762:	d028      	beq.n	80057b6 <__d2b+0x86>
 8005764:	4668      	mov	r0, sp
 8005766:	9600      	str	r6, [sp, #0]
 8005768:	f7ff fd82 	bl	8005270 <__lo0bits>
 800576c:	9900      	ldr	r1, [sp, #0]
 800576e:	b300      	cbz	r0, 80057b2 <__d2b+0x82>
 8005770:	9a01      	ldr	r2, [sp, #4]
 8005772:	f1c0 0320 	rsb	r3, r0, #32
 8005776:	fa02 f303 	lsl.w	r3, r2, r3
 800577a:	430b      	orrs	r3, r1
 800577c:	40c2      	lsrs	r2, r0
 800577e:	6163      	str	r3, [r4, #20]
 8005780:	9201      	str	r2, [sp, #4]
 8005782:	9b01      	ldr	r3, [sp, #4]
 8005784:	61a3      	str	r3, [r4, #24]
 8005786:	2b00      	cmp	r3, #0
 8005788:	bf14      	ite	ne
 800578a:	2202      	movne	r2, #2
 800578c:	2201      	moveq	r2, #1
 800578e:	6122      	str	r2, [r4, #16]
 8005790:	b1d5      	cbz	r5, 80057c8 <__d2b+0x98>
 8005792:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8005796:	4405      	add	r5, r0
 8005798:	f8c9 5000 	str.w	r5, [r9]
 800579c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80057a0:	f8c8 0000 	str.w	r0, [r8]
 80057a4:	4620      	mov	r0, r4
 80057a6:	b003      	add	sp, #12
 80057a8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80057ac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80057b0:	e7d5      	b.n	800575e <__d2b+0x2e>
 80057b2:	6161      	str	r1, [r4, #20]
 80057b4:	e7e5      	b.n	8005782 <__d2b+0x52>
 80057b6:	a801      	add	r0, sp, #4
 80057b8:	f7ff fd5a 	bl	8005270 <__lo0bits>
 80057bc:	9b01      	ldr	r3, [sp, #4]
 80057be:	6163      	str	r3, [r4, #20]
 80057c0:	2201      	movs	r2, #1
 80057c2:	6122      	str	r2, [r4, #16]
 80057c4:	3020      	adds	r0, #32
 80057c6:	e7e3      	b.n	8005790 <__d2b+0x60>
 80057c8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80057cc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80057d0:	f8c9 0000 	str.w	r0, [r9]
 80057d4:	6918      	ldr	r0, [r3, #16]
 80057d6:	f7ff fd2b 	bl	8005230 <__hi0bits>
 80057da:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80057de:	e7df      	b.n	80057a0 <__d2b+0x70>
 80057e0:	080065f7 	.word	0x080065f7
 80057e4:	08006608 	.word	0x08006608

080057e8 <_calloc_r>:
 80057e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80057ea:	fba1 2402 	umull	r2, r4, r1, r2
 80057ee:	b94c      	cbnz	r4, 8005804 <_calloc_r+0x1c>
 80057f0:	4611      	mov	r1, r2
 80057f2:	9201      	str	r2, [sp, #4]
 80057f4:	f000 f87a 	bl	80058ec <_malloc_r>
 80057f8:	9a01      	ldr	r2, [sp, #4]
 80057fa:	4605      	mov	r5, r0
 80057fc:	b930      	cbnz	r0, 800580c <_calloc_r+0x24>
 80057fe:	4628      	mov	r0, r5
 8005800:	b003      	add	sp, #12
 8005802:	bd30      	pop	{r4, r5, pc}
 8005804:	220c      	movs	r2, #12
 8005806:	6002      	str	r2, [r0, #0]
 8005808:	2500      	movs	r5, #0
 800580a:	e7f8      	b.n	80057fe <_calloc_r+0x16>
 800580c:	4621      	mov	r1, r4
 800580e:	f7fe f95f 	bl	8003ad0 <memset>
 8005812:	e7f4      	b.n	80057fe <_calloc_r+0x16>

08005814 <_free_r>:
 8005814:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005816:	2900      	cmp	r1, #0
 8005818:	d044      	beq.n	80058a4 <_free_r+0x90>
 800581a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800581e:	9001      	str	r0, [sp, #4]
 8005820:	2b00      	cmp	r3, #0
 8005822:	f1a1 0404 	sub.w	r4, r1, #4
 8005826:	bfb8      	it	lt
 8005828:	18e4      	addlt	r4, r4, r3
 800582a:	f000 f925 	bl	8005a78 <__malloc_lock>
 800582e:	4a1e      	ldr	r2, [pc, #120]	; (80058a8 <_free_r+0x94>)
 8005830:	9801      	ldr	r0, [sp, #4]
 8005832:	6813      	ldr	r3, [r2, #0]
 8005834:	b933      	cbnz	r3, 8005844 <_free_r+0x30>
 8005836:	6063      	str	r3, [r4, #4]
 8005838:	6014      	str	r4, [r2, #0]
 800583a:	b003      	add	sp, #12
 800583c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005840:	f000 b920 	b.w	8005a84 <__malloc_unlock>
 8005844:	42a3      	cmp	r3, r4
 8005846:	d908      	bls.n	800585a <_free_r+0x46>
 8005848:	6825      	ldr	r5, [r4, #0]
 800584a:	1961      	adds	r1, r4, r5
 800584c:	428b      	cmp	r3, r1
 800584e:	bf01      	itttt	eq
 8005850:	6819      	ldreq	r1, [r3, #0]
 8005852:	685b      	ldreq	r3, [r3, #4]
 8005854:	1949      	addeq	r1, r1, r5
 8005856:	6021      	streq	r1, [r4, #0]
 8005858:	e7ed      	b.n	8005836 <_free_r+0x22>
 800585a:	461a      	mov	r2, r3
 800585c:	685b      	ldr	r3, [r3, #4]
 800585e:	b10b      	cbz	r3, 8005864 <_free_r+0x50>
 8005860:	42a3      	cmp	r3, r4
 8005862:	d9fa      	bls.n	800585a <_free_r+0x46>
 8005864:	6811      	ldr	r1, [r2, #0]
 8005866:	1855      	adds	r5, r2, r1
 8005868:	42a5      	cmp	r5, r4
 800586a:	d10b      	bne.n	8005884 <_free_r+0x70>
 800586c:	6824      	ldr	r4, [r4, #0]
 800586e:	4421      	add	r1, r4
 8005870:	1854      	adds	r4, r2, r1
 8005872:	42a3      	cmp	r3, r4
 8005874:	6011      	str	r1, [r2, #0]
 8005876:	d1e0      	bne.n	800583a <_free_r+0x26>
 8005878:	681c      	ldr	r4, [r3, #0]
 800587a:	685b      	ldr	r3, [r3, #4]
 800587c:	6053      	str	r3, [r2, #4]
 800587e:	4421      	add	r1, r4
 8005880:	6011      	str	r1, [r2, #0]
 8005882:	e7da      	b.n	800583a <_free_r+0x26>
 8005884:	d902      	bls.n	800588c <_free_r+0x78>
 8005886:	230c      	movs	r3, #12
 8005888:	6003      	str	r3, [r0, #0]
 800588a:	e7d6      	b.n	800583a <_free_r+0x26>
 800588c:	6825      	ldr	r5, [r4, #0]
 800588e:	1961      	adds	r1, r4, r5
 8005890:	428b      	cmp	r3, r1
 8005892:	bf04      	itt	eq
 8005894:	6819      	ldreq	r1, [r3, #0]
 8005896:	685b      	ldreq	r3, [r3, #4]
 8005898:	6063      	str	r3, [r4, #4]
 800589a:	bf04      	itt	eq
 800589c:	1949      	addeq	r1, r1, r5
 800589e:	6021      	streq	r1, [r4, #0]
 80058a0:	6054      	str	r4, [r2, #4]
 80058a2:	e7ca      	b.n	800583a <_free_r+0x26>
 80058a4:	b003      	add	sp, #12
 80058a6:	bd30      	pop	{r4, r5, pc}
 80058a8:	20000304 	.word	0x20000304

080058ac <sbrk_aligned>:
 80058ac:	b570      	push	{r4, r5, r6, lr}
 80058ae:	4e0e      	ldr	r6, [pc, #56]	; (80058e8 <sbrk_aligned+0x3c>)
 80058b0:	460c      	mov	r4, r1
 80058b2:	6831      	ldr	r1, [r6, #0]
 80058b4:	4605      	mov	r5, r0
 80058b6:	b911      	cbnz	r1, 80058be <sbrk_aligned+0x12>
 80058b8:	f000 f88c 	bl	80059d4 <_sbrk_r>
 80058bc:	6030      	str	r0, [r6, #0]
 80058be:	4621      	mov	r1, r4
 80058c0:	4628      	mov	r0, r5
 80058c2:	f000 f887 	bl	80059d4 <_sbrk_r>
 80058c6:	1c43      	adds	r3, r0, #1
 80058c8:	d00a      	beq.n	80058e0 <sbrk_aligned+0x34>
 80058ca:	1cc4      	adds	r4, r0, #3
 80058cc:	f024 0403 	bic.w	r4, r4, #3
 80058d0:	42a0      	cmp	r0, r4
 80058d2:	d007      	beq.n	80058e4 <sbrk_aligned+0x38>
 80058d4:	1a21      	subs	r1, r4, r0
 80058d6:	4628      	mov	r0, r5
 80058d8:	f000 f87c 	bl	80059d4 <_sbrk_r>
 80058dc:	3001      	adds	r0, #1
 80058de:	d101      	bne.n	80058e4 <sbrk_aligned+0x38>
 80058e0:	f04f 34ff 	mov.w	r4, #4294967295
 80058e4:	4620      	mov	r0, r4
 80058e6:	bd70      	pop	{r4, r5, r6, pc}
 80058e8:	20000308 	.word	0x20000308

080058ec <_malloc_r>:
 80058ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80058f0:	1ccd      	adds	r5, r1, #3
 80058f2:	f025 0503 	bic.w	r5, r5, #3
 80058f6:	3508      	adds	r5, #8
 80058f8:	2d0c      	cmp	r5, #12
 80058fa:	bf38      	it	cc
 80058fc:	250c      	movcc	r5, #12
 80058fe:	2d00      	cmp	r5, #0
 8005900:	4607      	mov	r7, r0
 8005902:	db01      	blt.n	8005908 <_malloc_r+0x1c>
 8005904:	42a9      	cmp	r1, r5
 8005906:	d905      	bls.n	8005914 <_malloc_r+0x28>
 8005908:	230c      	movs	r3, #12
 800590a:	603b      	str	r3, [r7, #0]
 800590c:	2600      	movs	r6, #0
 800590e:	4630      	mov	r0, r6
 8005910:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005914:	4e2e      	ldr	r6, [pc, #184]	; (80059d0 <_malloc_r+0xe4>)
 8005916:	f000 f8af 	bl	8005a78 <__malloc_lock>
 800591a:	6833      	ldr	r3, [r6, #0]
 800591c:	461c      	mov	r4, r3
 800591e:	bb34      	cbnz	r4, 800596e <_malloc_r+0x82>
 8005920:	4629      	mov	r1, r5
 8005922:	4638      	mov	r0, r7
 8005924:	f7ff ffc2 	bl	80058ac <sbrk_aligned>
 8005928:	1c43      	adds	r3, r0, #1
 800592a:	4604      	mov	r4, r0
 800592c:	d14d      	bne.n	80059ca <_malloc_r+0xde>
 800592e:	6834      	ldr	r4, [r6, #0]
 8005930:	4626      	mov	r6, r4
 8005932:	2e00      	cmp	r6, #0
 8005934:	d140      	bne.n	80059b8 <_malloc_r+0xcc>
 8005936:	6823      	ldr	r3, [r4, #0]
 8005938:	4631      	mov	r1, r6
 800593a:	4638      	mov	r0, r7
 800593c:	eb04 0803 	add.w	r8, r4, r3
 8005940:	f000 f848 	bl	80059d4 <_sbrk_r>
 8005944:	4580      	cmp	r8, r0
 8005946:	d13a      	bne.n	80059be <_malloc_r+0xd2>
 8005948:	6821      	ldr	r1, [r4, #0]
 800594a:	3503      	adds	r5, #3
 800594c:	1a6d      	subs	r5, r5, r1
 800594e:	f025 0503 	bic.w	r5, r5, #3
 8005952:	3508      	adds	r5, #8
 8005954:	2d0c      	cmp	r5, #12
 8005956:	bf38      	it	cc
 8005958:	250c      	movcc	r5, #12
 800595a:	4629      	mov	r1, r5
 800595c:	4638      	mov	r0, r7
 800595e:	f7ff ffa5 	bl	80058ac <sbrk_aligned>
 8005962:	3001      	adds	r0, #1
 8005964:	d02b      	beq.n	80059be <_malloc_r+0xd2>
 8005966:	6823      	ldr	r3, [r4, #0]
 8005968:	442b      	add	r3, r5
 800596a:	6023      	str	r3, [r4, #0]
 800596c:	e00e      	b.n	800598c <_malloc_r+0xa0>
 800596e:	6822      	ldr	r2, [r4, #0]
 8005970:	1b52      	subs	r2, r2, r5
 8005972:	d41e      	bmi.n	80059b2 <_malloc_r+0xc6>
 8005974:	2a0b      	cmp	r2, #11
 8005976:	d916      	bls.n	80059a6 <_malloc_r+0xba>
 8005978:	1961      	adds	r1, r4, r5
 800597a:	42a3      	cmp	r3, r4
 800597c:	6025      	str	r5, [r4, #0]
 800597e:	bf18      	it	ne
 8005980:	6059      	strne	r1, [r3, #4]
 8005982:	6863      	ldr	r3, [r4, #4]
 8005984:	bf08      	it	eq
 8005986:	6031      	streq	r1, [r6, #0]
 8005988:	5162      	str	r2, [r4, r5]
 800598a:	604b      	str	r3, [r1, #4]
 800598c:	4638      	mov	r0, r7
 800598e:	f104 060b 	add.w	r6, r4, #11
 8005992:	f000 f877 	bl	8005a84 <__malloc_unlock>
 8005996:	f026 0607 	bic.w	r6, r6, #7
 800599a:	1d23      	adds	r3, r4, #4
 800599c:	1af2      	subs	r2, r6, r3
 800599e:	d0b6      	beq.n	800590e <_malloc_r+0x22>
 80059a0:	1b9b      	subs	r3, r3, r6
 80059a2:	50a3      	str	r3, [r4, r2]
 80059a4:	e7b3      	b.n	800590e <_malloc_r+0x22>
 80059a6:	6862      	ldr	r2, [r4, #4]
 80059a8:	42a3      	cmp	r3, r4
 80059aa:	bf0c      	ite	eq
 80059ac:	6032      	streq	r2, [r6, #0]
 80059ae:	605a      	strne	r2, [r3, #4]
 80059b0:	e7ec      	b.n	800598c <_malloc_r+0xa0>
 80059b2:	4623      	mov	r3, r4
 80059b4:	6864      	ldr	r4, [r4, #4]
 80059b6:	e7b2      	b.n	800591e <_malloc_r+0x32>
 80059b8:	4634      	mov	r4, r6
 80059ba:	6876      	ldr	r6, [r6, #4]
 80059bc:	e7b9      	b.n	8005932 <_malloc_r+0x46>
 80059be:	230c      	movs	r3, #12
 80059c0:	603b      	str	r3, [r7, #0]
 80059c2:	4638      	mov	r0, r7
 80059c4:	f000 f85e 	bl	8005a84 <__malloc_unlock>
 80059c8:	e7a1      	b.n	800590e <_malloc_r+0x22>
 80059ca:	6025      	str	r5, [r4, #0]
 80059cc:	e7de      	b.n	800598c <_malloc_r+0xa0>
 80059ce:	bf00      	nop
 80059d0:	20000304 	.word	0x20000304

080059d4 <_sbrk_r>:
 80059d4:	b538      	push	{r3, r4, r5, lr}
 80059d6:	4d06      	ldr	r5, [pc, #24]	; (80059f0 <_sbrk_r+0x1c>)
 80059d8:	2300      	movs	r3, #0
 80059da:	4604      	mov	r4, r0
 80059dc:	4608      	mov	r0, r1
 80059de:	602b      	str	r3, [r5, #0]
 80059e0:	f7fb ffc6 	bl	8001970 <_sbrk>
 80059e4:	1c43      	adds	r3, r0, #1
 80059e6:	d102      	bne.n	80059ee <_sbrk_r+0x1a>
 80059e8:	682b      	ldr	r3, [r5, #0]
 80059ea:	b103      	cbz	r3, 80059ee <_sbrk_r+0x1a>
 80059ec:	6023      	str	r3, [r4, #0]
 80059ee:	bd38      	pop	{r3, r4, r5, pc}
 80059f0:	2000030c 	.word	0x2000030c

080059f4 <__assert_func>:
 80059f4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80059f6:	4614      	mov	r4, r2
 80059f8:	461a      	mov	r2, r3
 80059fa:	4b09      	ldr	r3, [pc, #36]	; (8005a20 <__assert_func+0x2c>)
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	4605      	mov	r5, r0
 8005a00:	68d8      	ldr	r0, [r3, #12]
 8005a02:	b14c      	cbz	r4, 8005a18 <__assert_func+0x24>
 8005a04:	4b07      	ldr	r3, [pc, #28]	; (8005a24 <__assert_func+0x30>)
 8005a06:	9100      	str	r1, [sp, #0]
 8005a08:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005a0c:	4906      	ldr	r1, [pc, #24]	; (8005a28 <__assert_func+0x34>)
 8005a0e:	462b      	mov	r3, r5
 8005a10:	f000 f80e 	bl	8005a30 <fiprintf>
 8005a14:	f000 fa64 	bl	8005ee0 <abort>
 8005a18:	4b04      	ldr	r3, [pc, #16]	; (8005a2c <__assert_func+0x38>)
 8005a1a:	461c      	mov	r4, r3
 8005a1c:	e7f3      	b.n	8005a06 <__assert_func+0x12>
 8005a1e:	bf00      	nop
 8005a20:	2000000c 	.word	0x2000000c
 8005a24:	08006764 	.word	0x08006764
 8005a28:	08006771 	.word	0x08006771
 8005a2c:	0800679f 	.word	0x0800679f

08005a30 <fiprintf>:
 8005a30:	b40e      	push	{r1, r2, r3}
 8005a32:	b503      	push	{r0, r1, lr}
 8005a34:	4601      	mov	r1, r0
 8005a36:	ab03      	add	r3, sp, #12
 8005a38:	4805      	ldr	r0, [pc, #20]	; (8005a50 <fiprintf+0x20>)
 8005a3a:	f853 2b04 	ldr.w	r2, [r3], #4
 8005a3e:	6800      	ldr	r0, [r0, #0]
 8005a40:	9301      	str	r3, [sp, #4]
 8005a42:	f000 f84f 	bl	8005ae4 <_vfiprintf_r>
 8005a46:	b002      	add	sp, #8
 8005a48:	f85d eb04 	ldr.w	lr, [sp], #4
 8005a4c:	b003      	add	sp, #12
 8005a4e:	4770      	bx	lr
 8005a50:	2000000c 	.word	0x2000000c

08005a54 <__ascii_mbtowc>:
 8005a54:	b082      	sub	sp, #8
 8005a56:	b901      	cbnz	r1, 8005a5a <__ascii_mbtowc+0x6>
 8005a58:	a901      	add	r1, sp, #4
 8005a5a:	b142      	cbz	r2, 8005a6e <__ascii_mbtowc+0x1a>
 8005a5c:	b14b      	cbz	r3, 8005a72 <__ascii_mbtowc+0x1e>
 8005a5e:	7813      	ldrb	r3, [r2, #0]
 8005a60:	600b      	str	r3, [r1, #0]
 8005a62:	7812      	ldrb	r2, [r2, #0]
 8005a64:	1e10      	subs	r0, r2, #0
 8005a66:	bf18      	it	ne
 8005a68:	2001      	movne	r0, #1
 8005a6a:	b002      	add	sp, #8
 8005a6c:	4770      	bx	lr
 8005a6e:	4610      	mov	r0, r2
 8005a70:	e7fb      	b.n	8005a6a <__ascii_mbtowc+0x16>
 8005a72:	f06f 0001 	mvn.w	r0, #1
 8005a76:	e7f8      	b.n	8005a6a <__ascii_mbtowc+0x16>

08005a78 <__malloc_lock>:
 8005a78:	4801      	ldr	r0, [pc, #4]	; (8005a80 <__malloc_lock+0x8>)
 8005a7a:	f000 bbf1 	b.w	8006260 <__retarget_lock_acquire_recursive>
 8005a7e:	bf00      	nop
 8005a80:	20000310 	.word	0x20000310

08005a84 <__malloc_unlock>:
 8005a84:	4801      	ldr	r0, [pc, #4]	; (8005a8c <__malloc_unlock+0x8>)
 8005a86:	f000 bbec 	b.w	8006262 <__retarget_lock_release_recursive>
 8005a8a:	bf00      	nop
 8005a8c:	20000310 	.word	0x20000310

08005a90 <__sfputc_r>:
 8005a90:	6893      	ldr	r3, [r2, #8]
 8005a92:	3b01      	subs	r3, #1
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	b410      	push	{r4}
 8005a98:	6093      	str	r3, [r2, #8]
 8005a9a:	da08      	bge.n	8005aae <__sfputc_r+0x1e>
 8005a9c:	6994      	ldr	r4, [r2, #24]
 8005a9e:	42a3      	cmp	r3, r4
 8005aa0:	db01      	blt.n	8005aa6 <__sfputc_r+0x16>
 8005aa2:	290a      	cmp	r1, #10
 8005aa4:	d103      	bne.n	8005aae <__sfputc_r+0x1e>
 8005aa6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005aaa:	f000 b94b 	b.w	8005d44 <__swbuf_r>
 8005aae:	6813      	ldr	r3, [r2, #0]
 8005ab0:	1c58      	adds	r0, r3, #1
 8005ab2:	6010      	str	r0, [r2, #0]
 8005ab4:	7019      	strb	r1, [r3, #0]
 8005ab6:	4608      	mov	r0, r1
 8005ab8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005abc:	4770      	bx	lr

08005abe <__sfputs_r>:
 8005abe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ac0:	4606      	mov	r6, r0
 8005ac2:	460f      	mov	r7, r1
 8005ac4:	4614      	mov	r4, r2
 8005ac6:	18d5      	adds	r5, r2, r3
 8005ac8:	42ac      	cmp	r4, r5
 8005aca:	d101      	bne.n	8005ad0 <__sfputs_r+0x12>
 8005acc:	2000      	movs	r0, #0
 8005ace:	e007      	b.n	8005ae0 <__sfputs_r+0x22>
 8005ad0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005ad4:	463a      	mov	r2, r7
 8005ad6:	4630      	mov	r0, r6
 8005ad8:	f7ff ffda 	bl	8005a90 <__sfputc_r>
 8005adc:	1c43      	adds	r3, r0, #1
 8005ade:	d1f3      	bne.n	8005ac8 <__sfputs_r+0xa>
 8005ae0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005ae4 <_vfiprintf_r>:
 8005ae4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ae8:	460d      	mov	r5, r1
 8005aea:	b09d      	sub	sp, #116	; 0x74
 8005aec:	4614      	mov	r4, r2
 8005aee:	4698      	mov	r8, r3
 8005af0:	4606      	mov	r6, r0
 8005af2:	b118      	cbz	r0, 8005afc <_vfiprintf_r+0x18>
 8005af4:	6983      	ldr	r3, [r0, #24]
 8005af6:	b90b      	cbnz	r3, 8005afc <_vfiprintf_r+0x18>
 8005af8:	f000 fb14 	bl	8006124 <__sinit>
 8005afc:	4b89      	ldr	r3, [pc, #548]	; (8005d24 <_vfiprintf_r+0x240>)
 8005afe:	429d      	cmp	r5, r3
 8005b00:	d11b      	bne.n	8005b3a <_vfiprintf_r+0x56>
 8005b02:	6875      	ldr	r5, [r6, #4]
 8005b04:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005b06:	07d9      	lsls	r1, r3, #31
 8005b08:	d405      	bmi.n	8005b16 <_vfiprintf_r+0x32>
 8005b0a:	89ab      	ldrh	r3, [r5, #12]
 8005b0c:	059a      	lsls	r2, r3, #22
 8005b0e:	d402      	bmi.n	8005b16 <_vfiprintf_r+0x32>
 8005b10:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005b12:	f000 fba5 	bl	8006260 <__retarget_lock_acquire_recursive>
 8005b16:	89ab      	ldrh	r3, [r5, #12]
 8005b18:	071b      	lsls	r3, r3, #28
 8005b1a:	d501      	bpl.n	8005b20 <_vfiprintf_r+0x3c>
 8005b1c:	692b      	ldr	r3, [r5, #16]
 8005b1e:	b9eb      	cbnz	r3, 8005b5c <_vfiprintf_r+0x78>
 8005b20:	4629      	mov	r1, r5
 8005b22:	4630      	mov	r0, r6
 8005b24:	f000 f96e 	bl	8005e04 <__swsetup_r>
 8005b28:	b1c0      	cbz	r0, 8005b5c <_vfiprintf_r+0x78>
 8005b2a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005b2c:	07dc      	lsls	r4, r3, #31
 8005b2e:	d50e      	bpl.n	8005b4e <_vfiprintf_r+0x6a>
 8005b30:	f04f 30ff 	mov.w	r0, #4294967295
 8005b34:	b01d      	add	sp, #116	; 0x74
 8005b36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b3a:	4b7b      	ldr	r3, [pc, #492]	; (8005d28 <_vfiprintf_r+0x244>)
 8005b3c:	429d      	cmp	r5, r3
 8005b3e:	d101      	bne.n	8005b44 <_vfiprintf_r+0x60>
 8005b40:	68b5      	ldr	r5, [r6, #8]
 8005b42:	e7df      	b.n	8005b04 <_vfiprintf_r+0x20>
 8005b44:	4b79      	ldr	r3, [pc, #484]	; (8005d2c <_vfiprintf_r+0x248>)
 8005b46:	429d      	cmp	r5, r3
 8005b48:	bf08      	it	eq
 8005b4a:	68f5      	ldreq	r5, [r6, #12]
 8005b4c:	e7da      	b.n	8005b04 <_vfiprintf_r+0x20>
 8005b4e:	89ab      	ldrh	r3, [r5, #12]
 8005b50:	0598      	lsls	r0, r3, #22
 8005b52:	d4ed      	bmi.n	8005b30 <_vfiprintf_r+0x4c>
 8005b54:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005b56:	f000 fb84 	bl	8006262 <__retarget_lock_release_recursive>
 8005b5a:	e7e9      	b.n	8005b30 <_vfiprintf_r+0x4c>
 8005b5c:	2300      	movs	r3, #0
 8005b5e:	9309      	str	r3, [sp, #36]	; 0x24
 8005b60:	2320      	movs	r3, #32
 8005b62:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005b66:	f8cd 800c 	str.w	r8, [sp, #12]
 8005b6a:	2330      	movs	r3, #48	; 0x30
 8005b6c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8005d30 <_vfiprintf_r+0x24c>
 8005b70:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005b74:	f04f 0901 	mov.w	r9, #1
 8005b78:	4623      	mov	r3, r4
 8005b7a:	469a      	mov	sl, r3
 8005b7c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005b80:	b10a      	cbz	r2, 8005b86 <_vfiprintf_r+0xa2>
 8005b82:	2a25      	cmp	r2, #37	; 0x25
 8005b84:	d1f9      	bne.n	8005b7a <_vfiprintf_r+0x96>
 8005b86:	ebba 0b04 	subs.w	fp, sl, r4
 8005b8a:	d00b      	beq.n	8005ba4 <_vfiprintf_r+0xc0>
 8005b8c:	465b      	mov	r3, fp
 8005b8e:	4622      	mov	r2, r4
 8005b90:	4629      	mov	r1, r5
 8005b92:	4630      	mov	r0, r6
 8005b94:	f7ff ff93 	bl	8005abe <__sfputs_r>
 8005b98:	3001      	adds	r0, #1
 8005b9a:	f000 80aa 	beq.w	8005cf2 <_vfiprintf_r+0x20e>
 8005b9e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005ba0:	445a      	add	r2, fp
 8005ba2:	9209      	str	r2, [sp, #36]	; 0x24
 8005ba4:	f89a 3000 	ldrb.w	r3, [sl]
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	f000 80a2 	beq.w	8005cf2 <_vfiprintf_r+0x20e>
 8005bae:	2300      	movs	r3, #0
 8005bb0:	f04f 32ff 	mov.w	r2, #4294967295
 8005bb4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005bb8:	f10a 0a01 	add.w	sl, sl, #1
 8005bbc:	9304      	str	r3, [sp, #16]
 8005bbe:	9307      	str	r3, [sp, #28]
 8005bc0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005bc4:	931a      	str	r3, [sp, #104]	; 0x68
 8005bc6:	4654      	mov	r4, sl
 8005bc8:	2205      	movs	r2, #5
 8005bca:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005bce:	4858      	ldr	r0, [pc, #352]	; (8005d30 <_vfiprintf_r+0x24c>)
 8005bd0:	f7fa fb0e 	bl	80001f0 <memchr>
 8005bd4:	9a04      	ldr	r2, [sp, #16]
 8005bd6:	b9d8      	cbnz	r0, 8005c10 <_vfiprintf_r+0x12c>
 8005bd8:	06d1      	lsls	r1, r2, #27
 8005bda:	bf44      	itt	mi
 8005bdc:	2320      	movmi	r3, #32
 8005bde:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005be2:	0713      	lsls	r3, r2, #28
 8005be4:	bf44      	itt	mi
 8005be6:	232b      	movmi	r3, #43	; 0x2b
 8005be8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005bec:	f89a 3000 	ldrb.w	r3, [sl]
 8005bf0:	2b2a      	cmp	r3, #42	; 0x2a
 8005bf2:	d015      	beq.n	8005c20 <_vfiprintf_r+0x13c>
 8005bf4:	9a07      	ldr	r2, [sp, #28]
 8005bf6:	4654      	mov	r4, sl
 8005bf8:	2000      	movs	r0, #0
 8005bfa:	f04f 0c0a 	mov.w	ip, #10
 8005bfe:	4621      	mov	r1, r4
 8005c00:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005c04:	3b30      	subs	r3, #48	; 0x30
 8005c06:	2b09      	cmp	r3, #9
 8005c08:	d94e      	bls.n	8005ca8 <_vfiprintf_r+0x1c4>
 8005c0a:	b1b0      	cbz	r0, 8005c3a <_vfiprintf_r+0x156>
 8005c0c:	9207      	str	r2, [sp, #28]
 8005c0e:	e014      	b.n	8005c3a <_vfiprintf_r+0x156>
 8005c10:	eba0 0308 	sub.w	r3, r0, r8
 8005c14:	fa09 f303 	lsl.w	r3, r9, r3
 8005c18:	4313      	orrs	r3, r2
 8005c1a:	9304      	str	r3, [sp, #16]
 8005c1c:	46a2      	mov	sl, r4
 8005c1e:	e7d2      	b.n	8005bc6 <_vfiprintf_r+0xe2>
 8005c20:	9b03      	ldr	r3, [sp, #12]
 8005c22:	1d19      	adds	r1, r3, #4
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	9103      	str	r1, [sp, #12]
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	bfbb      	ittet	lt
 8005c2c:	425b      	neglt	r3, r3
 8005c2e:	f042 0202 	orrlt.w	r2, r2, #2
 8005c32:	9307      	strge	r3, [sp, #28]
 8005c34:	9307      	strlt	r3, [sp, #28]
 8005c36:	bfb8      	it	lt
 8005c38:	9204      	strlt	r2, [sp, #16]
 8005c3a:	7823      	ldrb	r3, [r4, #0]
 8005c3c:	2b2e      	cmp	r3, #46	; 0x2e
 8005c3e:	d10c      	bne.n	8005c5a <_vfiprintf_r+0x176>
 8005c40:	7863      	ldrb	r3, [r4, #1]
 8005c42:	2b2a      	cmp	r3, #42	; 0x2a
 8005c44:	d135      	bne.n	8005cb2 <_vfiprintf_r+0x1ce>
 8005c46:	9b03      	ldr	r3, [sp, #12]
 8005c48:	1d1a      	adds	r2, r3, #4
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	9203      	str	r2, [sp, #12]
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	bfb8      	it	lt
 8005c52:	f04f 33ff 	movlt.w	r3, #4294967295
 8005c56:	3402      	adds	r4, #2
 8005c58:	9305      	str	r3, [sp, #20]
 8005c5a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8005d40 <_vfiprintf_r+0x25c>
 8005c5e:	7821      	ldrb	r1, [r4, #0]
 8005c60:	2203      	movs	r2, #3
 8005c62:	4650      	mov	r0, sl
 8005c64:	f7fa fac4 	bl	80001f0 <memchr>
 8005c68:	b140      	cbz	r0, 8005c7c <_vfiprintf_r+0x198>
 8005c6a:	2340      	movs	r3, #64	; 0x40
 8005c6c:	eba0 000a 	sub.w	r0, r0, sl
 8005c70:	fa03 f000 	lsl.w	r0, r3, r0
 8005c74:	9b04      	ldr	r3, [sp, #16]
 8005c76:	4303      	orrs	r3, r0
 8005c78:	3401      	adds	r4, #1
 8005c7a:	9304      	str	r3, [sp, #16]
 8005c7c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005c80:	482c      	ldr	r0, [pc, #176]	; (8005d34 <_vfiprintf_r+0x250>)
 8005c82:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005c86:	2206      	movs	r2, #6
 8005c88:	f7fa fab2 	bl	80001f0 <memchr>
 8005c8c:	2800      	cmp	r0, #0
 8005c8e:	d03f      	beq.n	8005d10 <_vfiprintf_r+0x22c>
 8005c90:	4b29      	ldr	r3, [pc, #164]	; (8005d38 <_vfiprintf_r+0x254>)
 8005c92:	bb1b      	cbnz	r3, 8005cdc <_vfiprintf_r+0x1f8>
 8005c94:	9b03      	ldr	r3, [sp, #12]
 8005c96:	3307      	adds	r3, #7
 8005c98:	f023 0307 	bic.w	r3, r3, #7
 8005c9c:	3308      	adds	r3, #8
 8005c9e:	9303      	str	r3, [sp, #12]
 8005ca0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ca2:	443b      	add	r3, r7
 8005ca4:	9309      	str	r3, [sp, #36]	; 0x24
 8005ca6:	e767      	b.n	8005b78 <_vfiprintf_r+0x94>
 8005ca8:	fb0c 3202 	mla	r2, ip, r2, r3
 8005cac:	460c      	mov	r4, r1
 8005cae:	2001      	movs	r0, #1
 8005cb0:	e7a5      	b.n	8005bfe <_vfiprintf_r+0x11a>
 8005cb2:	2300      	movs	r3, #0
 8005cb4:	3401      	adds	r4, #1
 8005cb6:	9305      	str	r3, [sp, #20]
 8005cb8:	4619      	mov	r1, r3
 8005cba:	f04f 0c0a 	mov.w	ip, #10
 8005cbe:	4620      	mov	r0, r4
 8005cc0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005cc4:	3a30      	subs	r2, #48	; 0x30
 8005cc6:	2a09      	cmp	r2, #9
 8005cc8:	d903      	bls.n	8005cd2 <_vfiprintf_r+0x1ee>
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d0c5      	beq.n	8005c5a <_vfiprintf_r+0x176>
 8005cce:	9105      	str	r1, [sp, #20]
 8005cd0:	e7c3      	b.n	8005c5a <_vfiprintf_r+0x176>
 8005cd2:	fb0c 2101 	mla	r1, ip, r1, r2
 8005cd6:	4604      	mov	r4, r0
 8005cd8:	2301      	movs	r3, #1
 8005cda:	e7f0      	b.n	8005cbe <_vfiprintf_r+0x1da>
 8005cdc:	ab03      	add	r3, sp, #12
 8005cde:	9300      	str	r3, [sp, #0]
 8005ce0:	462a      	mov	r2, r5
 8005ce2:	4b16      	ldr	r3, [pc, #88]	; (8005d3c <_vfiprintf_r+0x258>)
 8005ce4:	a904      	add	r1, sp, #16
 8005ce6:	4630      	mov	r0, r6
 8005ce8:	f7fd ff9a 	bl	8003c20 <_printf_float>
 8005cec:	4607      	mov	r7, r0
 8005cee:	1c78      	adds	r0, r7, #1
 8005cf0:	d1d6      	bne.n	8005ca0 <_vfiprintf_r+0x1bc>
 8005cf2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005cf4:	07d9      	lsls	r1, r3, #31
 8005cf6:	d405      	bmi.n	8005d04 <_vfiprintf_r+0x220>
 8005cf8:	89ab      	ldrh	r3, [r5, #12]
 8005cfa:	059a      	lsls	r2, r3, #22
 8005cfc:	d402      	bmi.n	8005d04 <_vfiprintf_r+0x220>
 8005cfe:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005d00:	f000 faaf 	bl	8006262 <__retarget_lock_release_recursive>
 8005d04:	89ab      	ldrh	r3, [r5, #12]
 8005d06:	065b      	lsls	r3, r3, #25
 8005d08:	f53f af12 	bmi.w	8005b30 <_vfiprintf_r+0x4c>
 8005d0c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005d0e:	e711      	b.n	8005b34 <_vfiprintf_r+0x50>
 8005d10:	ab03      	add	r3, sp, #12
 8005d12:	9300      	str	r3, [sp, #0]
 8005d14:	462a      	mov	r2, r5
 8005d16:	4b09      	ldr	r3, [pc, #36]	; (8005d3c <_vfiprintf_r+0x258>)
 8005d18:	a904      	add	r1, sp, #16
 8005d1a:	4630      	mov	r0, r6
 8005d1c:	f7fe fa24 	bl	8004168 <_printf_i>
 8005d20:	e7e4      	b.n	8005cec <_vfiprintf_r+0x208>
 8005d22:	bf00      	nop
 8005d24:	080068dc 	.word	0x080068dc
 8005d28:	080068fc 	.word	0x080068fc
 8005d2c:	080068bc 	.word	0x080068bc
 8005d30:	080067aa 	.word	0x080067aa
 8005d34:	080067b4 	.word	0x080067b4
 8005d38:	08003c21 	.word	0x08003c21
 8005d3c:	08005abf 	.word	0x08005abf
 8005d40:	080067b0 	.word	0x080067b0

08005d44 <__swbuf_r>:
 8005d44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d46:	460e      	mov	r6, r1
 8005d48:	4614      	mov	r4, r2
 8005d4a:	4605      	mov	r5, r0
 8005d4c:	b118      	cbz	r0, 8005d56 <__swbuf_r+0x12>
 8005d4e:	6983      	ldr	r3, [r0, #24]
 8005d50:	b90b      	cbnz	r3, 8005d56 <__swbuf_r+0x12>
 8005d52:	f000 f9e7 	bl	8006124 <__sinit>
 8005d56:	4b21      	ldr	r3, [pc, #132]	; (8005ddc <__swbuf_r+0x98>)
 8005d58:	429c      	cmp	r4, r3
 8005d5a:	d12b      	bne.n	8005db4 <__swbuf_r+0x70>
 8005d5c:	686c      	ldr	r4, [r5, #4]
 8005d5e:	69a3      	ldr	r3, [r4, #24]
 8005d60:	60a3      	str	r3, [r4, #8]
 8005d62:	89a3      	ldrh	r3, [r4, #12]
 8005d64:	071a      	lsls	r2, r3, #28
 8005d66:	d52f      	bpl.n	8005dc8 <__swbuf_r+0x84>
 8005d68:	6923      	ldr	r3, [r4, #16]
 8005d6a:	b36b      	cbz	r3, 8005dc8 <__swbuf_r+0x84>
 8005d6c:	6923      	ldr	r3, [r4, #16]
 8005d6e:	6820      	ldr	r0, [r4, #0]
 8005d70:	1ac0      	subs	r0, r0, r3
 8005d72:	6963      	ldr	r3, [r4, #20]
 8005d74:	b2f6      	uxtb	r6, r6
 8005d76:	4283      	cmp	r3, r0
 8005d78:	4637      	mov	r7, r6
 8005d7a:	dc04      	bgt.n	8005d86 <__swbuf_r+0x42>
 8005d7c:	4621      	mov	r1, r4
 8005d7e:	4628      	mov	r0, r5
 8005d80:	f000 f93c 	bl	8005ffc <_fflush_r>
 8005d84:	bb30      	cbnz	r0, 8005dd4 <__swbuf_r+0x90>
 8005d86:	68a3      	ldr	r3, [r4, #8]
 8005d88:	3b01      	subs	r3, #1
 8005d8a:	60a3      	str	r3, [r4, #8]
 8005d8c:	6823      	ldr	r3, [r4, #0]
 8005d8e:	1c5a      	adds	r2, r3, #1
 8005d90:	6022      	str	r2, [r4, #0]
 8005d92:	701e      	strb	r6, [r3, #0]
 8005d94:	6963      	ldr	r3, [r4, #20]
 8005d96:	3001      	adds	r0, #1
 8005d98:	4283      	cmp	r3, r0
 8005d9a:	d004      	beq.n	8005da6 <__swbuf_r+0x62>
 8005d9c:	89a3      	ldrh	r3, [r4, #12]
 8005d9e:	07db      	lsls	r3, r3, #31
 8005da0:	d506      	bpl.n	8005db0 <__swbuf_r+0x6c>
 8005da2:	2e0a      	cmp	r6, #10
 8005da4:	d104      	bne.n	8005db0 <__swbuf_r+0x6c>
 8005da6:	4621      	mov	r1, r4
 8005da8:	4628      	mov	r0, r5
 8005daa:	f000 f927 	bl	8005ffc <_fflush_r>
 8005dae:	b988      	cbnz	r0, 8005dd4 <__swbuf_r+0x90>
 8005db0:	4638      	mov	r0, r7
 8005db2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005db4:	4b0a      	ldr	r3, [pc, #40]	; (8005de0 <__swbuf_r+0x9c>)
 8005db6:	429c      	cmp	r4, r3
 8005db8:	d101      	bne.n	8005dbe <__swbuf_r+0x7a>
 8005dba:	68ac      	ldr	r4, [r5, #8]
 8005dbc:	e7cf      	b.n	8005d5e <__swbuf_r+0x1a>
 8005dbe:	4b09      	ldr	r3, [pc, #36]	; (8005de4 <__swbuf_r+0xa0>)
 8005dc0:	429c      	cmp	r4, r3
 8005dc2:	bf08      	it	eq
 8005dc4:	68ec      	ldreq	r4, [r5, #12]
 8005dc6:	e7ca      	b.n	8005d5e <__swbuf_r+0x1a>
 8005dc8:	4621      	mov	r1, r4
 8005dca:	4628      	mov	r0, r5
 8005dcc:	f000 f81a 	bl	8005e04 <__swsetup_r>
 8005dd0:	2800      	cmp	r0, #0
 8005dd2:	d0cb      	beq.n	8005d6c <__swbuf_r+0x28>
 8005dd4:	f04f 37ff 	mov.w	r7, #4294967295
 8005dd8:	e7ea      	b.n	8005db0 <__swbuf_r+0x6c>
 8005dda:	bf00      	nop
 8005ddc:	080068dc 	.word	0x080068dc
 8005de0:	080068fc 	.word	0x080068fc
 8005de4:	080068bc 	.word	0x080068bc

08005de8 <__ascii_wctomb>:
 8005de8:	b149      	cbz	r1, 8005dfe <__ascii_wctomb+0x16>
 8005dea:	2aff      	cmp	r2, #255	; 0xff
 8005dec:	bf85      	ittet	hi
 8005dee:	238a      	movhi	r3, #138	; 0x8a
 8005df0:	6003      	strhi	r3, [r0, #0]
 8005df2:	700a      	strbls	r2, [r1, #0]
 8005df4:	f04f 30ff 	movhi.w	r0, #4294967295
 8005df8:	bf98      	it	ls
 8005dfa:	2001      	movls	r0, #1
 8005dfc:	4770      	bx	lr
 8005dfe:	4608      	mov	r0, r1
 8005e00:	4770      	bx	lr
	...

08005e04 <__swsetup_r>:
 8005e04:	4b32      	ldr	r3, [pc, #200]	; (8005ed0 <__swsetup_r+0xcc>)
 8005e06:	b570      	push	{r4, r5, r6, lr}
 8005e08:	681d      	ldr	r5, [r3, #0]
 8005e0a:	4606      	mov	r6, r0
 8005e0c:	460c      	mov	r4, r1
 8005e0e:	b125      	cbz	r5, 8005e1a <__swsetup_r+0x16>
 8005e10:	69ab      	ldr	r3, [r5, #24]
 8005e12:	b913      	cbnz	r3, 8005e1a <__swsetup_r+0x16>
 8005e14:	4628      	mov	r0, r5
 8005e16:	f000 f985 	bl	8006124 <__sinit>
 8005e1a:	4b2e      	ldr	r3, [pc, #184]	; (8005ed4 <__swsetup_r+0xd0>)
 8005e1c:	429c      	cmp	r4, r3
 8005e1e:	d10f      	bne.n	8005e40 <__swsetup_r+0x3c>
 8005e20:	686c      	ldr	r4, [r5, #4]
 8005e22:	89a3      	ldrh	r3, [r4, #12]
 8005e24:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005e28:	0719      	lsls	r1, r3, #28
 8005e2a:	d42c      	bmi.n	8005e86 <__swsetup_r+0x82>
 8005e2c:	06dd      	lsls	r5, r3, #27
 8005e2e:	d411      	bmi.n	8005e54 <__swsetup_r+0x50>
 8005e30:	2309      	movs	r3, #9
 8005e32:	6033      	str	r3, [r6, #0]
 8005e34:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005e38:	81a3      	strh	r3, [r4, #12]
 8005e3a:	f04f 30ff 	mov.w	r0, #4294967295
 8005e3e:	e03e      	b.n	8005ebe <__swsetup_r+0xba>
 8005e40:	4b25      	ldr	r3, [pc, #148]	; (8005ed8 <__swsetup_r+0xd4>)
 8005e42:	429c      	cmp	r4, r3
 8005e44:	d101      	bne.n	8005e4a <__swsetup_r+0x46>
 8005e46:	68ac      	ldr	r4, [r5, #8]
 8005e48:	e7eb      	b.n	8005e22 <__swsetup_r+0x1e>
 8005e4a:	4b24      	ldr	r3, [pc, #144]	; (8005edc <__swsetup_r+0xd8>)
 8005e4c:	429c      	cmp	r4, r3
 8005e4e:	bf08      	it	eq
 8005e50:	68ec      	ldreq	r4, [r5, #12]
 8005e52:	e7e6      	b.n	8005e22 <__swsetup_r+0x1e>
 8005e54:	0758      	lsls	r0, r3, #29
 8005e56:	d512      	bpl.n	8005e7e <__swsetup_r+0x7a>
 8005e58:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005e5a:	b141      	cbz	r1, 8005e6e <__swsetup_r+0x6a>
 8005e5c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005e60:	4299      	cmp	r1, r3
 8005e62:	d002      	beq.n	8005e6a <__swsetup_r+0x66>
 8005e64:	4630      	mov	r0, r6
 8005e66:	f7ff fcd5 	bl	8005814 <_free_r>
 8005e6a:	2300      	movs	r3, #0
 8005e6c:	6363      	str	r3, [r4, #52]	; 0x34
 8005e6e:	89a3      	ldrh	r3, [r4, #12]
 8005e70:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005e74:	81a3      	strh	r3, [r4, #12]
 8005e76:	2300      	movs	r3, #0
 8005e78:	6063      	str	r3, [r4, #4]
 8005e7a:	6923      	ldr	r3, [r4, #16]
 8005e7c:	6023      	str	r3, [r4, #0]
 8005e7e:	89a3      	ldrh	r3, [r4, #12]
 8005e80:	f043 0308 	orr.w	r3, r3, #8
 8005e84:	81a3      	strh	r3, [r4, #12]
 8005e86:	6923      	ldr	r3, [r4, #16]
 8005e88:	b94b      	cbnz	r3, 8005e9e <__swsetup_r+0x9a>
 8005e8a:	89a3      	ldrh	r3, [r4, #12]
 8005e8c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005e90:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005e94:	d003      	beq.n	8005e9e <__swsetup_r+0x9a>
 8005e96:	4621      	mov	r1, r4
 8005e98:	4630      	mov	r0, r6
 8005e9a:	f000 fa09 	bl	80062b0 <__smakebuf_r>
 8005e9e:	89a0      	ldrh	r0, [r4, #12]
 8005ea0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005ea4:	f010 0301 	ands.w	r3, r0, #1
 8005ea8:	d00a      	beq.n	8005ec0 <__swsetup_r+0xbc>
 8005eaa:	2300      	movs	r3, #0
 8005eac:	60a3      	str	r3, [r4, #8]
 8005eae:	6963      	ldr	r3, [r4, #20]
 8005eb0:	425b      	negs	r3, r3
 8005eb2:	61a3      	str	r3, [r4, #24]
 8005eb4:	6923      	ldr	r3, [r4, #16]
 8005eb6:	b943      	cbnz	r3, 8005eca <__swsetup_r+0xc6>
 8005eb8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005ebc:	d1ba      	bne.n	8005e34 <__swsetup_r+0x30>
 8005ebe:	bd70      	pop	{r4, r5, r6, pc}
 8005ec0:	0781      	lsls	r1, r0, #30
 8005ec2:	bf58      	it	pl
 8005ec4:	6963      	ldrpl	r3, [r4, #20]
 8005ec6:	60a3      	str	r3, [r4, #8]
 8005ec8:	e7f4      	b.n	8005eb4 <__swsetup_r+0xb0>
 8005eca:	2000      	movs	r0, #0
 8005ecc:	e7f7      	b.n	8005ebe <__swsetup_r+0xba>
 8005ece:	bf00      	nop
 8005ed0:	2000000c 	.word	0x2000000c
 8005ed4:	080068dc 	.word	0x080068dc
 8005ed8:	080068fc 	.word	0x080068fc
 8005edc:	080068bc 	.word	0x080068bc

08005ee0 <abort>:
 8005ee0:	b508      	push	{r3, lr}
 8005ee2:	2006      	movs	r0, #6
 8005ee4:	f000 fa4c 	bl	8006380 <raise>
 8005ee8:	2001      	movs	r0, #1
 8005eea:	f7fb fce5 	bl	80018b8 <_exit>
	...

08005ef0 <__sflush_r>:
 8005ef0:	898a      	ldrh	r2, [r1, #12]
 8005ef2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005ef6:	4605      	mov	r5, r0
 8005ef8:	0710      	lsls	r0, r2, #28
 8005efa:	460c      	mov	r4, r1
 8005efc:	d458      	bmi.n	8005fb0 <__sflush_r+0xc0>
 8005efe:	684b      	ldr	r3, [r1, #4]
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	dc05      	bgt.n	8005f10 <__sflush_r+0x20>
 8005f04:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	dc02      	bgt.n	8005f10 <__sflush_r+0x20>
 8005f0a:	2000      	movs	r0, #0
 8005f0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005f10:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005f12:	2e00      	cmp	r6, #0
 8005f14:	d0f9      	beq.n	8005f0a <__sflush_r+0x1a>
 8005f16:	2300      	movs	r3, #0
 8005f18:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005f1c:	682f      	ldr	r7, [r5, #0]
 8005f1e:	602b      	str	r3, [r5, #0]
 8005f20:	d032      	beq.n	8005f88 <__sflush_r+0x98>
 8005f22:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005f24:	89a3      	ldrh	r3, [r4, #12]
 8005f26:	075a      	lsls	r2, r3, #29
 8005f28:	d505      	bpl.n	8005f36 <__sflush_r+0x46>
 8005f2a:	6863      	ldr	r3, [r4, #4]
 8005f2c:	1ac0      	subs	r0, r0, r3
 8005f2e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005f30:	b10b      	cbz	r3, 8005f36 <__sflush_r+0x46>
 8005f32:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005f34:	1ac0      	subs	r0, r0, r3
 8005f36:	2300      	movs	r3, #0
 8005f38:	4602      	mov	r2, r0
 8005f3a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005f3c:	6a21      	ldr	r1, [r4, #32]
 8005f3e:	4628      	mov	r0, r5
 8005f40:	47b0      	blx	r6
 8005f42:	1c43      	adds	r3, r0, #1
 8005f44:	89a3      	ldrh	r3, [r4, #12]
 8005f46:	d106      	bne.n	8005f56 <__sflush_r+0x66>
 8005f48:	6829      	ldr	r1, [r5, #0]
 8005f4a:	291d      	cmp	r1, #29
 8005f4c:	d82c      	bhi.n	8005fa8 <__sflush_r+0xb8>
 8005f4e:	4a2a      	ldr	r2, [pc, #168]	; (8005ff8 <__sflush_r+0x108>)
 8005f50:	40ca      	lsrs	r2, r1
 8005f52:	07d6      	lsls	r6, r2, #31
 8005f54:	d528      	bpl.n	8005fa8 <__sflush_r+0xb8>
 8005f56:	2200      	movs	r2, #0
 8005f58:	6062      	str	r2, [r4, #4]
 8005f5a:	04d9      	lsls	r1, r3, #19
 8005f5c:	6922      	ldr	r2, [r4, #16]
 8005f5e:	6022      	str	r2, [r4, #0]
 8005f60:	d504      	bpl.n	8005f6c <__sflush_r+0x7c>
 8005f62:	1c42      	adds	r2, r0, #1
 8005f64:	d101      	bne.n	8005f6a <__sflush_r+0x7a>
 8005f66:	682b      	ldr	r3, [r5, #0]
 8005f68:	b903      	cbnz	r3, 8005f6c <__sflush_r+0x7c>
 8005f6a:	6560      	str	r0, [r4, #84]	; 0x54
 8005f6c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005f6e:	602f      	str	r7, [r5, #0]
 8005f70:	2900      	cmp	r1, #0
 8005f72:	d0ca      	beq.n	8005f0a <__sflush_r+0x1a>
 8005f74:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005f78:	4299      	cmp	r1, r3
 8005f7a:	d002      	beq.n	8005f82 <__sflush_r+0x92>
 8005f7c:	4628      	mov	r0, r5
 8005f7e:	f7ff fc49 	bl	8005814 <_free_r>
 8005f82:	2000      	movs	r0, #0
 8005f84:	6360      	str	r0, [r4, #52]	; 0x34
 8005f86:	e7c1      	b.n	8005f0c <__sflush_r+0x1c>
 8005f88:	6a21      	ldr	r1, [r4, #32]
 8005f8a:	2301      	movs	r3, #1
 8005f8c:	4628      	mov	r0, r5
 8005f8e:	47b0      	blx	r6
 8005f90:	1c41      	adds	r1, r0, #1
 8005f92:	d1c7      	bne.n	8005f24 <__sflush_r+0x34>
 8005f94:	682b      	ldr	r3, [r5, #0]
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d0c4      	beq.n	8005f24 <__sflush_r+0x34>
 8005f9a:	2b1d      	cmp	r3, #29
 8005f9c:	d001      	beq.n	8005fa2 <__sflush_r+0xb2>
 8005f9e:	2b16      	cmp	r3, #22
 8005fa0:	d101      	bne.n	8005fa6 <__sflush_r+0xb6>
 8005fa2:	602f      	str	r7, [r5, #0]
 8005fa4:	e7b1      	b.n	8005f0a <__sflush_r+0x1a>
 8005fa6:	89a3      	ldrh	r3, [r4, #12]
 8005fa8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005fac:	81a3      	strh	r3, [r4, #12]
 8005fae:	e7ad      	b.n	8005f0c <__sflush_r+0x1c>
 8005fb0:	690f      	ldr	r7, [r1, #16]
 8005fb2:	2f00      	cmp	r7, #0
 8005fb4:	d0a9      	beq.n	8005f0a <__sflush_r+0x1a>
 8005fb6:	0793      	lsls	r3, r2, #30
 8005fb8:	680e      	ldr	r6, [r1, #0]
 8005fba:	bf08      	it	eq
 8005fbc:	694b      	ldreq	r3, [r1, #20]
 8005fbe:	600f      	str	r7, [r1, #0]
 8005fc0:	bf18      	it	ne
 8005fc2:	2300      	movne	r3, #0
 8005fc4:	eba6 0807 	sub.w	r8, r6, r7
 8005fc8:	608b      	str	r3, [r1, #8]
 8005fca:	f1b8 0f00 	cmp.w	r8, #0
 8005fce:	dd9c      	ble.n	8005f0a <__sflush_r+0x1a>
 8005fd0:	6a21      	ldr	r1, [r4, #32]
 8005fd2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005fd4:	4643      	mov	r3, r8
 8005fd6:	463a      	mov	r2, r7
 8005fd8:	4628      	mov	r0, r5
 8005fda:	47b0      	blx	r6
 8005fdc:	2800      	cmp	r0, #0
 8005fde:	dc06      	bgt.n	8005fee <__sflush_r+0xfe>
 8005fe0:	89a3      	ldrh	r3, [r4, #12]
 8005fe2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005fe6:	81a3      	strh	r3, [r4, #12]
 8005fe8:	f04f 30ff 	mov.w	r0, #4294967295
 8005fec:	e78e      	b.n	8005f0c <__sflush_r+0x1c>
 8005fee:	4407      	add	r7, r0
 8005ff0:	eba8 0800 	sub.w	r8, r8, r0
 8005ff4:	e7e9      	b.n	8005fca <__sflush_r+0xda>
 8005ff6:	bf00      	nop
 8005ff8:	20400001 	.word	0x20400001

08005ffc <_fflush_r>:
 8005ffc:	b538      	push	{r3, r4, r5, lr}
 8005ffe:	690b      	ldr	r3, [r1, #16]
 8006000:	4605      	mov	r5, r0
 8006002:	460c      	mov	r4, r1
 8006004:	b913      	cbnz	r3, 800600c <_fflush_r+0x10>
 8006006:	2500      	movs	r5, #0
 8006008:	4628      	mov	r0, r5
 800600a:	bd38      	pop	{r3, r4, r5, pc}
 800600c:	b118      	cbz	r0, 8006016 <_fflush_r+0x1a>
 800600e:	6983      	ldr	r3, [r0, #24]
 8006010:	b90b      	cbnz	r3, 8006016 <_fflush_r+0x1a>
 8006012:	f000 f887 	bl	8006124 <__sinit>
 8006016:	4b14      	ldr	r3, [pc, #80]	; (8006068 <_fflush_r+0x6c>)
 8006018:	429c      	cmp	r4, r3
 800601a:	d11b      	bne.n	8006054 <_fflush_r+0x58>
 800601c:	686c      	ldr	r4, [r5, #4]
 800601e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006022:	2b00      	cmp	r3, #0
 8006024:	d0ef      	beq.n	8006006 <_fflush_r+0xa>
 8006026:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006028:	07d0      	lsls	r0, r2, #31
 800602a:	d404      	bmi.n	8006036 <_fflush_r+0x3a>
 800602c:	0599      	lsls	r1, r3, #22
 800602e:	d402      	bmi.n	8006036 <_fflush_r+0x3a>
 8006030:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006032:	f000 f915 	bl	8006260 <__retarget_lock_acquire_recursive>
 8006036:	4628      	mov	r0, r5
 8006038:	4621      	mov	r1, r4
 800603a:	f7ff ff59 	bl	8005ef0 <__sflush_r>
 800603e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006040:	07da      	lsls	r2, r3, #31
 8006042:	4605      	mov	r5, r0
 8006044:	d4e0      	bmi.n	8006008 <_fflush_r+0xc>
 8006046:	89a3      	ldrh	r3, [r4, #12]
 8006048:	059b      	lsls	r3, r3, #22
 800604a:	d4dd      	bmi.n	8006008 <_fflush_r+0xc>
 800604c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800604e:	f000 f908 	bl	8006262 <__retarget_lock_release_recursive>
 8006052:	e7d9      	b.n	8006008 <_fflush_r+0xc>
 8006054:	4b05      	ldr	r3, [pc, #20]	; (800606c <_fflush_r+0x70>)
 8006056:	429c      	cmp	r4, r3
 8006058:	d101      	bne.n	800605e <_fflush_r+0x62>
 800605a:	68ac      	ldr	r4, [r5, #8]
 800605c:	e7df      	b.n	800601e <_fflush_r+0x22>
 800605e:	4b04      	ldr	r3, [pc, #16]	; (8006070 <_fflush_r+0x74>)
 8006060:	429c      	cmp	r4, r3
 8006062:	bf08      	it	eq
 8006064:	68ec      	ldreq	r4, [r5, #12]
 8006066:	e7da      	b.n	800601e <_fflush_r+0x22>
 8006068:	080068dc 	.word	0x080068dc
 800606c:	080068fc 	.word	0x080068fc
 8006070:	080068bc 	.word	0x080068bc

08006074 <std>:
 8006074:	2300      	movs	r3, #0
 8006076:	b510      	push	{r4, lr}
 8006078:	4604      	mov	r4, r0
 800607a:	e9c0 3300 	strd	r3, r3, [r0]
 800607e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006082:	6083      	str	r3, [r0, #8]
 8006084:	8181      	strh	r1, [r0, #12]
 8006086:	6643      	str	r3, [r0, #100]	; 0x64
 8006088:	81c2      	strh	r2, [r0, #14]
 800608a:	6183      	str	r3, [r0, #24]
 800608c:	4619      	mov	r1, r3
 800608e:	2208      	movs	r2, #8
 8006090:	305c      	adds	r0, #92	; 0x5c
 8006092:	f7fd fd1d 	bl	8003ad0 <memset>
 8006096:	4b05      	ldr	r3, [pc, #20]	; (80060ac <std+0x38>)
 8006098:	6263      	str	r3, [r4, #36]	; 0x24
 800609a:	4b05      	ldr	r3, [pc, #20]	; (80060b0 <std+0x3c>)
 800609c:	62a3      	str	r3, [r4, #40]	; 0x28
 800609e:	4b05      	ldr	r3, [pc, #20]	; (80060b4 <std+0x40>)
 80060a0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80060a2:	4b05      	ldr	r3, [pc, #20]	; (80060b8 <std+0x44>)
 80060a4:	6224      	str	r4, [r4, #32]
 80060a6:	6323      	str	r3, [r4, #48]	; 0x30
 80060a8:	bd10      	pop	{r4, pc}
 80060aa:	bf00      	nop
 80060ac:	080063b9 	.word	0x080063b9
 80060b0:	080063db 	.word	0x080063db
 80060b4:	08006413 	.word	0x08006413
 80060b8:	08006437 	.word	0x08006437

080060bc <_cleanup_r>:
 80060bc:	4901      	ldr	r1, [pc, #4]	; (80060c4 <_cleanup_r+0x8>)
 80060be:	f000 b8af 	b.w	8006220 <_fwalk_reent>
 80060c2:	bf00      	nop
 80060c4:	08005ffd 	.word	0x08005ffd

080060c8 <__sfmoreglue>:
 80060c8:	b570      	push	{r4, r5, r6, lr}
 80060ca:	2268      	movs	r2, #104	; 0x68
 80060cc:	1e4d      	subs	r5, r1, #1
 80060ce:	4355      	muls	r5, r2
 80060d0:	460e      	mov	r6, r1
 80060d2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80060d6:	f7ff fc09 	bl	80058ec <_malloc_r>
 80060da:	4604      	mov	r4, r0
 80060dc:	b140      	cbz	r0, 80060f0 <__sfmoreglue+0x28>
 80060de:	2100      	movs	r1, #0
 80060e0:	e9c0 1600 	strd	r1, r6, [r0]
 80060e4:	300c      	adds	r0, #12
 80060e6:	60a0      	str	r0, [r4, #8]
 80060e8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80060ec:	f7fd fcf0 	bl	8003ad0 <memset>
 80060f0:	4620      	mov	r0, r4
 80060f2:	bd70      	pop	{r4, r5, r6, pc}

080060f4 <__sfp_lock_acquire>:
 80060f4:	4801      	ldr	r0, [pc, #4]	; (80060fc <__sfp_lock_acquire+0x8>)
 80060f6:	f000 b8b3 	b.w	8006260 <__retarget_lock_acquire_recursive>
 80060fa:	bf00      	nop
 80060fc:	20000311 	.word	0x20000311

08006100 <__sfp_lock_release>:
 8006100:	4801      	ldr	r0, [pc, #4]	; (8006108 <__sfp_lock_release+0x8>)
 8006102:	f000 b8ae 	b.w	8006262 <__retarget_lock_release_recursive>
 8006106:	bf00      	nop
 8006108:	20000311 	.word	0x20000311

0800610c <__sinit_lock_acquire>:
 800610c:	4801      	ldr	r0, [pc, #4]	; (8006114 <__sinit_lock_acquire+0x8>)
 800610e:	f000 b8a7 	b.w	8006260 <__retarget_lock_acquire_recursive>
 8006112:	bf00      	nop
 8006114:	20000312 	.word	0x20000312

08006118 <__sinit_lock_release>:
 8006118:	4801      	ldr	r0, [pc, #4]	; (8006120 <__sinit_lock_release+0x8>)
 800611a:	f000 b8a2 	b.w	8006262 <__retarget_lock_release_recursive>
 800611e:	bf00      	nop
 8006120:	20000312 	.word	0x20000312

08006124 <__sinit>:
 8006124:	b510      	push	{r4, lr}
 8006126:	4604      	mov	r4, r0
 8006128:	f7ff fff0 	bl	800610c <__sinit_lock_acquire>
 800612c:	69a3      	ldr	r3, [r4, #24]
 800612e:	b11b      	cbz	r3, 8006138 <__sinit+0x14>
 8006130:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006134:	f7ff bff0 	b.w	8006118 <__sinit_lock_release>
 8006138:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800613c:	6523      	str	r3, [r4, #80]	; 0x50
 800613e:	4b13      	ldr	r3, [pc, #76]	; (800618c <__sinit+0x68>)
 8006140:	4a13      	ldr	r2, [pc, #76]	; (8006190 <__sinit+0x6c>)
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	62a2      	str	r2, [r4, #40]	; 0x28
 8006146:	42a3      	cmp	r3, r4
 8006148:	bf04      	itt	eq
 800614a:	2301      	moveq	r3, #1
 800614c:	61a3      	streq	r3, [r4, #24]
 800614e:	4620      	mov	r0, r4
 8006150:	f000 f820 	bl	8006194 <__sfp>
 8006154:	6060      	str	r0, [r4, #4]
 8006156:	4620      	mov	r0, r4
 8006158:	f000 f81c 	bl	8006194 <__sfp>
 800615c:	60a0      	str	r0, [r4, #8]
 800615e:	4620      	mov	r0, r4
 8006160:	f000 f818 	bl	8006194 <__sfp>
 8006164:	2200      	movs	r2, #0
 8006166:	60e0      	str	r0, [r4, #12]
 8006168:	2104      	movs	r1, #4
 800616a:	6860      	ldr	r0, [r4, #4]
 800616c:	f7ff ff82 	bl	8006074 <std>
 8006170:	68a0      	ldr	r0, [r4, #8]
 8006172:	2201      	movs	r2, #1
 8006174:	2109      	movs	r1, #9
 8006176:	f7ff ff7d 	bl	8006074 <std>
 800617a:	68e0      	ldr	r0, [r4, #12]
 800617c:	2202      	movs	r2, #2
 800617e:	2112      	movs	r1, #18
 8006180:	f7ff ff78 	bl	8006074 <std>
 8006184:	2301      	movs	r3, #1
 8006186:	61a3      	str	r3, [r4, #24]
 8006188:	e7d2      	b.n	8006130 <__sinit+0xc>
 800618a:	bf00      	nop
 800618c:	08006540 	.word	0x08006540
 8006190:	080060bd 	.word	0x080060bd

08006194 <__sfp>:
 8006194:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006196:	4607      	mov	r7, r0
 8006198:	f7ff ffac 	bl	80060f4 <__sfp_lock_acquire>
 800619c:	4b1e      	ldr	r3, [pc, #120]	; (8006218 <__sfp+0x84>)
 800619e:	681e      	ldr	r6, [r3, #0]
 80061a0:	69b3      	ldr	r3, [r6, #24]
 80061a2:	b913      	cbnz	r3, 80061aa <__sfp+0x16>
 80061a4:	4630      	mov	r0, r6
 80061a6:	f7ff ffbd 	bl	8006124 <__sinit>
 80061aa:	3648      	adds	r6, #72	; 0x48
 80061ac:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80061b0:	3b01      	subs	r3, #1
 80061b2:	d503      	bpl.n	80061bc <__sfp+0x28>
 80061b4:	6833      	ldr	r3, [r6, #0]
 80061b6:	b30b      	cbz	r3, 80061fc <__sfp+0x68>
 80061b8:	6836      	ldr	r6, [r6, #0]
 80061ba:	e7f7      	b.n	80061ac <__sfp+0x18>
 80061bc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80061c0:	b9d5      	cbnz	r5, 80061f8 <__sfp+0x64>
 80061c2:	4b16      	ldr	r3, [pc, #88]	; (800621c <__sfp+0x88>)
 80061c4:	60e3      	str	r3, [r4, #12]
 80061c6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80061ca:	6665      	str	r5, [r4, #100]	; 0x64
 80061cc:	f000 f847 	bl	800625e <__retarget_lock_init_recursive>
 80061d0:	f7ff ff96 	bl	8006100 <__sfp_lock_release>
 80061d4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80061d8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80061dc:	6025      	str	r5, [r4, #0]
 80061de:	61a5      	str	r5, [r4, #24]
 80061e0:	2208      	movs	r2, #8
 80061e2:	4629      	mov	r1, r5
 80061e4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80061e8:	f7fd fc72 	bl	8003ad0 <memset>
 80061ec:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80061f0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80061f4:	4620      	mov	r0, r4
 80061f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80061f8:	3468      	adds	r4, #104	; 0x68
 80061fa:	e7d9      	b.n	80061b0 <__sfp+0x1c>
 80061fc:	2104      	movs	r1, #4
 80061fe:	4638      	mov	r0, r7
 8006200:	f7ff ff62 	bl	80060c8 <__sfmoreglue>
 8006204:	4604      	mov	r4, r0
 8006206:	6030      	str	r0, [r6, #0]
 8006208:	2800      	cmp	r0, #0
 800620a:	d1d5      	bne.n	80061b8 <__sfp+0x24>
 800620c:	f7ff ff78 	bl	8006100 <__sfp_lock_release>
 8006210:	230c      	movs	r3, #12
 8006212:	603b      	str	r3, [r7, #0]
 8006214:	e7ee      	b.n	80061f4 <__sfp+0x60>
 8006216:	bf00      	nop
 8006218:	08006540 	.word	0x08006540
 800621c:	ffff0001 	.word	0xffff0001

08006220 <_fwalk_reent>:
 8006220:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006224:	4606      	mov	r6, r0
 8006226:	4688      	mov	r8, r1
 8006228:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800622c:	2700      	movs	r7, #0
 800622e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006232:	f1b9 0901 	subs.w	r9, r9, #1
 8006236:	d505      	bpl.n	8006244 <_fwalk_reent+0x24>
 8006238:	6824      	ldr	r4, [r4, #0]
 800623a:	2c00      	cmp	r4, #0
 800623c:	d1f7      	bne.n	800622e <_fwalk_reent+0xe>
 800623e:	4638      	mov	r0, r7
 8006240:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006244:	89ab      	ldrh	r3, [r5, #12]
 8006246:	2b01      	cmp	r3, #1
 8006248:	d907      	bls.n	800625a <_fwalk_reent+0x3a>
 800624a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800624e:	3301      	adds	r3, #1
 8006250:	d003      	beq.n	800625a <_fwalk_reent+0x3a>
 8006252:	4629      	mov	r1, r5
 8006254:	4630      	mov	r0, r6
 8006256:	47c0      	blx	r8
 8006258:	4307      	orrs	r7, r0
 800625a:	3568      	adds	r5, #104	; 0x68
 800625c:	e7e9      	b.n	8006232 <_fwalk_reent+0x12>

0800625e <__retarget_lock_init_recursive>:
 800625e:	4770      	bx	lr

08006260 <__retarget_lock_acquire_recursive>:
 8006260:	4770      	bx	lr

08006262 <__retarget_lock_release_recursive>:
 8006262:	4770      	bx	lr

08006264 <__swhatbuf_r>:
 8006264:	b570      	push	{r4, r5, r6, lr}
 8006266:	460e      	mov	r6, r1
 8006268:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800626c:	2900      	cmp	r1, #0
 800626e:	b096      	sub	sp, #88	; 0x58
 8006270:	4614      	mov	r4, r2
 8006272:	461d      	mov	r5, r3
 8006274:	da08      	bge.n	8006288 <__swhatbuf_r+0x24>
 8006276:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800627a:	2200      	movs	r2, #0
 800627c:	602a      	str	r2, [r5, #0]
 800627e:	061a      	lsls	r2, r3, #24
 8006280:	d410      	bmi.n	80062a4 <__swhatbuf_r+0x40>
 8006282:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006286:	e00e      	b.n	80062a6 <__swhatbuf_r+0x42>
 8006288:	466a      	mov	r2, sp
 800628a:	f000 f8fb 	bl	8006484 <_fstat_r>
 800628e:	2800      	cmp	r0, #0
 8006290:	dbf1      	blt.n	8006276 <__swhatbuf_r+0x12>
 8006292:	9a01      	ldr	r2, [sp, #4]
 8006294:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006298:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800629c:	425a      	negs	r2, r3
 800629e:	415a      	adcs	r2, r3
 80062a0:	602a      	str	r2, [r5, #0]
 80062a2:	e7ee      	b.n	8006282 <__swhatbuf_r+0x1e>
 80062a4:	2340      	movs	r3, #64	; 0x40
 80062a6:	2000      	movs	r0, #0
 80062a8:	6023      	str	r3, [r4, #0]
 80062aa:	b016      	add	sp, #88	; 0x58
 80062ac:	bd70      	pop	{r4, r5, r6, pc}
	...

080062b0 <__smakebuf_r>:
 80062b0:	898b      	ldrh	r3, [r1, #12]
 80062b2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80062b4:	079d      	lsls	r5, r3, #30
 80062b6:	4606      	mov	r6, r0
 80062b8:	460c      	mov	r4, r1
 80062ba:	d507      	bpl.n	80062cc <__smakebuf_r+0x1c>
 80062bc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80062c0:	6023      	str	r3, [r4, #0]
 80062c2:	6123      	str	r3, [r4, #16]
 80062c4:	2301      	movs	r3, #1
 80062c6:	6163      	str	r3, [r4, #20]
 80062c8:	b002      	add	sp, #8
 80062ca:	bd70      	pop	{r4, r5, r6, pc}
 80062cc:	ab01      	add	r3, sp, #4
 80062ce:	466a      	mov	r2, sp
 80062d0:	f7ff ffc8 	bl	8006264 <__swhatbuf_r>
 80062d4:	9900      	ldr	r1, [sp, #0]
 80062d6:	4605      	mov	r5, r0
 80062d8:	4630      	mov	r0, r6
 80062da:	f7ff fb07 	bl	80058ec <_malloc_r>
 80062de:	b948      	cbnz	r0, 80062f4 <__smakebuf_r+0x44>
 80062e0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80062e4:	059a      	lsls	r2, r3, #22
 80062e6:	d4ef      	bmi.n	80062c8 <__smakebuf_r+0x18>
 80062e8:	f023 0303 	bic.w	r3, r3, #3
 80062ec:	f043 0302 	orr.w	r3, r3, #2
 80062f0:	81a3      	strh	r3, [r4, #12]
 80062f2:	e7e3      	b.n	80062bc <__smakebuf_r+0xc>
 80062f4:	4b0d      	ldr	r3, [pc, #52]	; (800632c <__smakebuf_r+0x7c>)
 80062f6:	62b3      	str	r3, [r6, #40]	; 0x28
 80062f8:	89a3      	ldrh	r3, [r4, #12]
 80062fa:	6020      	str	r0, [r4, #0]
 80062fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006300:	81a3      	strh	r3, [r4, #12]
 8006302:	9b00      	ldr	r3, [sp, #0]
 8006304:	6163      	str	r3, [r4, #20]
 8006306:	9b01      	ldr	r3, [sp, #4]
 8006308:	6120      	str	r0, [r4, #16]
 800630a:	b15b      	cbz	r3, 8006324 <__smakebuf_r+0x74>
 800630c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006310:	4630      	mov	r0, r6
 8006312:	f000 f8c9 	bl	80064a8 <_isatty_r>
 8006316:	b128      	cbz	r0, 8006324 <__smakebuf_r+0x74>
 8006318:	89a3      	ldrh	r3, [r4, #12]
 800631a:	f023 0303 	bic.w	r3, r3, #3
 800631e:	f043 0301 	orr.w	r3, r3, #1
 8006322:	81a3      	strh	r3, [r4, #12]
 8006324:	89a0      	ldrh	r0, [r4, #12]
 8006326:	4305      	orrs	r5, r0
 8006328:	81a5      	strh	r5, [r4, #12]
 800632a:	e7cd      	b.n	80062c8 <__smakebuf_r+0x18>
 800632c:	080060bd 	.word	0x080060bd

08006330 <_raise_r>:
 8006330:	291f      	cmp	r1, #31
 8006332:	b538      	push	{r3, r4, r5, lr}
 8006334:	4604      	mov	r4, r0
 8006336:	460d      	mov	r5, r1
 8006338:	d904      	bls.n	8006344 <_raise_r+0x14>
 800633a:	2316      	movs	r3, #22
 800633c:	6003      	str	r3, [r0, #0]
 800633e:	f04f 30ff 	mov.w	r0, #4294967295
 8006342:	bd38      	pop	{r3, r4, r5, pc}
 8006344:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8006346:	b112      	cbz	r2, 800634e <_raise_r+0x1e>
 8006348:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800634c:	b94b      	cbnz	r3, 8006362 <_raise_r+0x32>
 800634e:	4620      	mov	r0, r4
 8006350:	f000 f830 	bl	80063b4 <_getpid_r>
 8006354:	462a      	mov	r2, r5
 8006356:	4601      	mov	r1, r0
 8006358:	4620      	mov	r0, r4
 800635a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800635e:	f000 b817 	b.w	8006390 <_kill_r>
 8006362:	2b01      	cmp	r3, #1
 8006364:	d00a      	beq.n	800637c <_raise_r+0x4c>
 8006366:	1c59      	adds	r1, r3, #1
 8006368:	d103      	bne.n	8006372 <_raise_r+0x42>
 800636a:	2316      	movs	r3, #22
 800636c:	6003      	str	r3, [r0, #0]
 800636e:	2001      	movs	r0, #1
 8006370:	e7e7      	b.n	8006342 <_raise_r+0x12>
 8006372:	2400      	movs	r4, #0
 8006374:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006378:	4628      	mov	r0, r5
 800637a:	4798      	blx	r3
 800637c:	2000      	movs	r0, #0
 800637e:	e7e0      	b.n	8006342 <_raise_r+0x12>

08006380 <raise>:
 8006380:	4b02      	ldr	r3, [pc, #8]	; (800638c <raise+0xc>)
 8006382:	4601      	mov	r1, r0
 8006384:	6818      	ldr	r0, [r3, #0]
 8006386:	f7ff bfd3 	b.w	8006330 <_raise_r>
 800638a:	bf00      	nop
 800638c:	2000000c 	.word	0x2000000c

08006390 <_kill_r>:
 8006390:	b538      	push	{r3, r4, r5, lr}
 8006392:	4d07      	ldr	r5, [pc, #28]	; (80063b0 <_kill_r+0x20>)
 8006394:	2300      	movs	r3, #0
 8006396:	4604      	mov	r4, r0
 8006398:	4608      	mov	r0, r1
 800639a:	4611      	mov	r1, r2
 800639c:	602b      	str	r3, [r5, #0]
 800639e:	f7fb fa7b 	bl	8001898 <_kill>
 80063a2:	1c43      	adds	r3, r0, #1
 80063a4:	d102      	bne.n	80063ac <_kill_r+0x1c>
 80063a6:	682b      	ldr	r3, [r5, #0]
 80063a8:	b103      	cbz	r3, 80063ac <_kill_r+0x1c>
 80063aa:	6023      	str	r3, [r4, #0]
 80063ac:	bd38      	pop	{r3, r4, r5, pc}
 80063ae:	bf00      	nop
 80063b0:	2000030c 	.word	0x2000030c

080063b4 <_getpid_r>:
 80063b4:	f7fb ba68 	b.w	8001888 <_getpid>

080063b8 <__sread>:
 80063b8:	b510      	push	{r4, lr}
 80063ba:	460c      	mov	r4, r1
 80063bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80063c0:	f000 f894 	bl	80064ec <_read_r>
 80063c4:	2800      	cmp	r0, #0
 80063c6:	bfab      	itete	ge
 80063c8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80063ca:	89a3      	ldrhlt	r3, [r4, #12]
 80063cc:	181b      	addge	r3, r3, r0
 80063ce:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80063d2:	bfac      	ite	ge
 80063d4:	6563      	strge	r3, [r4, #84]	; 0x54
 80063d6:	81a3      	strhlt	r3, [r4, #12]
 80063d8:	bd10      	pop	{r4, pc}

080063da <__swrite>:
 80063da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80063de:	461f      	mov	r7, r3
 80063e0:	898b      	ldrh	r3, [r1, #12]
 80063e2:	05db      	lsls	r3, r3, #23
 80063e4:	4605      	mov	r5, r0
 80063e6:	460c      	mov	r4, r1
 80063e8:	4616      	mov	r6, r2
 80063ea:	d505      	bpl.n	80063f8 <__swrite+0x1e>
 80063ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80063f0:	2302      	movs	r3, #2
 80063f2:	2200      	movs	r2, #0
 80063f4:	f000 f868 	bl	80064c8 <_lseek_r>
 80063f8:	89a3      	ldrh	r3, [r4, #12]
 80063fa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80063fe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006402:	81a3      	strh	r3, [r4, #12]
 8006404:	4632      	mov	r2, r6
 8006406:	463b      	mov	r3, r7
 8006408:	4628      	mov	r0, r5
 800640a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800640e:	f000 b817 	b.w	8006440 <_write_r>

08006412 <__sseek>:
 8006412:	b510      	push	{r4, lr}
 8006414:	460c      	mov	r4, r1
 8006416:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800641a:	f000 f855 	bl	80064c8 <_lseek_r>
 800641e:	1c43      	adds	r3, r0, #1
 8006420:	89a3      	ldrh	r3, [r4, #12]
 8006422:	bf15      	itete	ne
 8006424:	6560      	strne	r0, [r4, #84]	; 0x54
 8006426:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800642a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800642e:	81a3      	strheq	r3, [r4, #12]
 8006430:	bf18      	it	ne
 8006432:	81a3      	strhne	r3, [r4, #12]
 8006434:	bd10      	pop	{r4, pc}

08006436 <__sclose>:
 8006436:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800643a:	f000 b813 	b.w	8006464 <_close_r>
	...

08006440 <_write_r>:
 8006440:	b538      	push	{r3, r4, r5, lr}
 8006442:	4d07      	ldr	r5, [pc, #28]	; (8006460 <_write_r+0x20>)
 8006444:	4604      	mov	r4, r0
 8006446:	4608      	mov	r0, r1
 8006448:	4611      	mov	r1, r2
 800644a:	2200      	movs	r2, #0
 800644c:	602a      	str	r2, [r5, #0]
 800644e:	461a      	mov	r2, r3
 8006450:	f7fb f844 	bl	80014dc <_write>
 8006454:	1c43      	adds	r3, r0, #1
 8006456:	d102      	bne.n	800645e <_write_r+0x1e>
 8006458:	682b      	ldr	r3, [r5, #0]
 800645a:	b103      	cbz	r3, 800645e <_write_r+0x1e>
 800645c:	6023      	str	r3, [r4, #0]
 800645e:	bd38      	pop	{r3, r4, r5, pc}
 8006460:	2000030c 	.word	0x2000030c

08006464 <_close_r>:
 8006464:	b538      	push	{r3, r4, r5, lr}
 8006466:	4d06      	ldr	r5, [pc, #24]	; (8006480 <_close_r+0x1c>)
 8006468:	2300      	movs	r3, #0
 800646a:	4604      	mov	r4, r0
 800646c:	4608      	mov	r0, r1
 800646e:	602b      	str	r3, [r5, #0]
 8006470:	f7fb fa49 	bl	8001906 <_close>
 8006474:	1c43      	adds	r3, r0, #1
 8006476:	d102      	bne.n	800647e <_close_r+0x1a>
 8006478:	682b      	ldr	r3, [r5, #0]
 800647a:	b103      	cbz	r3, 800647e <_close_r+0x1a>
 800647c:	6023      	str	r3, [r4, #0]
 800647e:	bd38      	pop	{r3, r4, r5, pc}
 8006480:	2000030c 	.word	0x2000030c

08006484 <_fstat_r>:
 8006484:	b538      	push	{r3, r4, r5, lr}
 8006486:	4d07      	ldr	r5, [pc, #28]	; (80064a4 <_fstat_r+0x20>)
 8006488:	2300      	movs	r3, #0
 800648a:	4604      	mov	r4, r0
 800648c:	4608      	mov	r0, r1
 800648e:	4611      	mov	r1, r2
 8006490:	602b      	str	r3, [r5, #0]
 8006492:	f7fb fa44 	bl	800191e <_fstat>
 8006496:	1c43      	adds	r3, r0, #1
 8006498:	d102      	bne.n	80064a0 <_fstat_r+0x1c>
 800649a:	682b      	ldr	r3, [r5, #0]
 800649c:	b103      	cbz	r3, 80064a0 <_fstat_r+0x1c>
 800649e:	6023      	str	r3, [r4, #0]
 80064a0:	bd38      	pop	{r3, r4, r5, pc}
 80064a2:	bf00      	nop
 80064a4:	2000030c 	.word	0x2000030c

080064a8 <_isatty_r>:
 80064a8:	b538      	push	{r3, r4, r5, lr}
 80064aa:	4d06      	ldr	r5, [pc, #24]	; (80064c4 <_isatty_r+0x1c>)
 80064ac:	2300      	movs	r3, #0
 80064ae:	4604      	mov	r4, r0
 80064b0:	4608      	mov	r0, r1
 80064b2:	602b      	str	r3, [r5, #0]
 80064b4:	f7fb fa43 	bl	800193e <_isatty>
 80064b8:	1c43      	adds	r3, r0, #1
 80064ba:	d102      	bne.n	80064c2 <_isatty_r+0x1a>
 80064bc:	682b      	ldr	r3, [r5, #0]
 80064be:	b103      	cbz	r3, 80064c2 <_isatty_r+0x1a>
 80064c0:	6023      	str	r3, [r4, #0]
 80064c2:	bd38      	pop	{r3, r4, r5, pc}
 80064c4:	2000030c 	.word	0x2000030c

080064c8 <_lseek_r>:
 80064c8:	b538      	push	{r3, r4, r5, lr}
 80064ca:	4d07      	ldr	r5, [pc, #28]	; (80064e8 <_lseek_r+0x20>)
 80064cc:	4604      	mov	r4, r0
 80064ce:	4608      	mov	r0, r1
 80064d0:	4611      	mov	r1, r2
 80064d2:	2200      	movs	r2, #0
 80064d4:	602a      	str	r2, [r5, #0]
 80064d6:	461a      	mov	r2, r3
 80064d8:	f7fb fa3c 	bl	8001954 <_lseek>
 80064dc:	1c43      	adds	r3, r0, #1
 80064de:	d102      	bne.n	80064e6 <_lseek_r+0x1e>
 80064e0:	682b      	ldr	r3, [r5, #0]
 80064e2:	b103      	cbz	r3, 80064e6 <_lseek_r+0x1e>
 80064e4:	6023      	str	r3, [r4, #0]
 80064e6:	bd38      	pop	{r3, r4, r5, pc}
 80064e8:	2000030c 	.word	0x2000030c

080064ec <_read_r>:
 80064ec:	b538      	push	{r3, r4, r5, lr}
 80064ee:	4d07      	ldr	r5, [pc, #28]	; (800650c <_read_r+0x20>)
 80064f0:	4604      	mov	r4, r0
 80064f2:	4608      	mov	r0, r1
 80064f4:	4611      	mov	r1, r2
 80064f6:	2200      	movs	r2, #0
 80064f8:	602a      	str	r2, [r5, #0]
 80064fa:	461a      	mov	r2, r3
 80064fc:	f7fb f9e6 	bl	80018cc <_read>
 8006500:	1c43      	adds	r3, r0, #1
 8006502:	d102      	bne.n	800650a <_read_r+0x1e>
 8006504:	682b      	ldr	r3, [r5, #0]
 8006506:	b103      	cbz	r3, 800650a <_read_r+0x1e>
 8006508:	6023      	str	r3, [r4, #0]
 800650a:	bd38      	pop	{r3, r4, r5, pc}
 800650c:	2000030c 	.word	0x2000030c

08006510 <_init>:
 8006510:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006512:	bf00      	nop
 8006514:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006516:	bc08      	pop	{r3}
 8006518:	469e      	mov	lr, r3
 800651a:	4770      	bx	lr

0800651c <_fini>:
 800651c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800651e:	bf00      	nop
 8006520:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006522:	bc08      	pop	{r3}
 8006524:	469e      	mov	lr, r3
 8006526:	4770      	bx	lr
